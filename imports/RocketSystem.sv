// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module data_arrays_0_0_combMem(
  input  [8:0] RW0_addr,
  input        RW0_en,
               RW0_clk,
               RW0_wmode,
  input  [7:0] RW0_wdata,
  output [7:0] RW0_rdata
);

  reg [7:0] Memory[0:511];
  reg [8:0] _GEN;
  reg       _GEN_0;
  reg       _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmode)
      Memory[RW0_addr] <= RW0_wdata;
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 8'bx;
endmodule

// VCS coverage exclude_file
module tag_array_0_combMem(
  input  [5:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [20:0] RW0_wdata,
  output [20:0] RW0_rdata
);

  reg [20:0] Memory[0:63];
  reg [5:0]  _GEN;
  reg        _GEN_0;
  reg        _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmode)
      Memory[RW0_addr] <= RW0_wdata;
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 21'bx;
endmodule

// VCS coverage exclude_file
module tag_array_0_combMem_0(
  input  [5:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [21:0] RW0_wdata,
  output [21:0] RW0_rdata
);

  reg [21:0] Memory[0:63];
  reg [5:0]  _GEN;
  reg        _GEN_0;
  reg        _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmode)
      Memory[RW0_addr] <= RW0_wdata;
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 22'bx;
endmodule

// VCS coverage exclude_file
module data_arrays_0_0_combMem_0(
  input  [8:0]  RW0_addr,
  input         RW0_en,
                RW0_clk,
                RW0_wmode,
  input  [31:0] RW0_wdata,
  output [31:0] RW0_rdata
);

  reg [31:0] Memory[0:511];
  reg [8:0]  _GEN;
  reg        _GEN_0;
  reg        _GEN_1;
  always @(posedge RW0_clk) begin
    _GEN <= RW0_addr;
    _GEN_0 <= RW0_en;
    _GEN_1 <= RW0_wmode;
    if (RW0_en & RW0_wmode)
      Memory[RW0_addr] <= RW0_wdata;
  end // always @(posedge)
  assign RW0_rdata = _GEN_0 & ~_GEN_1 ? Memory[_GEN] : 32'bx;
endmodule

// VCS coverage exclude_file
module ram_last_combMem(
  input  R0_addr,
         R0_en,
         R0_clk,
         W0_addr,
         W0_en,
         W0_clk,
         W0_data,
  output R0_data
);

  reg Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;
endmodule

// VCS coverage exclude_file
module ram_lock_combMem(
  input  R0_addr,
         R0_en,
         R0_clk,
         W0_addr,
         W0_en,
         W0_clk,
         W0_data,
  output R0_data
);

  reg Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;
endmodule

// VCS coverage exclude_file
module ram_real_last_combMem(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data,
  output       R0_data
);

  reg Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;
endmodule

// VCS coverage exclude_file
module ram_last_combMem_0(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data,
  output       R0_data
);

  reg Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 1'bx;
endmodule

// VCS coverage exclude_file
module ram_burst_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [1:0] W0_data,
  output [1:0] R0_data
);

  reg [1:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 2'bx;
endmodule

// VCS coverage exclude_file
module ram_burst_combMem_0(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [1:0] W0_data,
  output [1:0] R0_data
);

  reg [1:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 2'bx;
endmodule

// VCS coverage exclude_file
module ram_resp_combMem(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data,
  output [1:0] R0_data
);

  reg [1:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 2'bx;
endmodule

// VCS coverage exclude_file
module ram_id_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [2:0] W0_data,
  output [2:0] R0_data
);

  reg [2:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 3'bx;
endmodule

// VCS coverage exclude_file
module ram_size_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [2:0] W0_data,
  output [2:0] R0_data
);

  reg [2:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 3'bx;
endmodule

// VCS coverage exclude_file
module ram_size_combMem_0(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [2:0] W0_data,
  output [2:0] R0_data
);

  reg [2:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 3'bx;
endmodule

// VCS coverage exclude_file
module emp_mem_combMem(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [2:0] W0_data,
  output [2:0] R0_data
);

  reg [2:0] Memory[0:63];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 3'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_size_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [3:0] W0_data,
  output [3:0] R0_data
);

  reg [3:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 4'bx;
endmodule

// VCS coverage exclude_file
module ram_id_combMem_0(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [3:0] W0_data,
  output [3:0] R0_data
);

  reg [3:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 4'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_size_combMem_0(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [3:0] W0_data,
  output [3:0] R0_data
);

  reg [3:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 4'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_size_combMem_1(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [3:0] W0_data,
  output [3:0] R0_data
);

  reg [3:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 4'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_size_combMem_2(
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [3:0] W0_data,
  output [3:0] R0_data
);

  reg [3:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 4'bx;
endmodule

// VCS coverage exclude_file
module ram_source_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [4:0] W0_data,
  output [4:0] R0_data
);

  reg [4:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 5'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_source_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [5:0] W0_data,
  output [5:0] R0_data
);

  reg [5:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 6'bx;
endmodule

// VCS coverage exclude_file
module ram_source_combMem_0(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [5:0] W0_data,
  output [5:0] R0_data
);

  reg [5:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 6'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_source_combMem_0(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [5:0] W0_data,
  output [5:0] R0_data
);

  reg [5:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 6'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_source_combMem_1(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [5:0] W0_data,
  output [5:0] R0_data
);

  reg [5:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 6'bx;
endmodule

// VCS coverage exclude_file
module ram_echo_extra_id_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [6:0] W0_data,
  output [6:0] R0_data
);

  reg [6:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 7'bx;
endmodule

// VCS coverage exclude_file
module ram_extra_id_combMem(
  input  [1:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [1:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [6:0] W0_data,
  output [6:0] R0_data
);

  reg [6:0] Memory[0:3];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 7'bx;
endmodule

// VCS coverage exclude_file
module ram_strb_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data
);

  reg [7:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

// VCS coverage exclude_file
module ram_len_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data
);

  reg [7:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

// VCS coverage exclude_file
module ram_mask_combMem(
  input  [2:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [2:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data
);

  reg [7:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

// VCS coverage exclude_file
module ram_tl_state_source_combMem_2(
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data
);

  reg [7:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
endmodule

// VCS coverage exclude_file
module ram_extra_tlrr_extra_source_combMem(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [9:0] W0_data,
  output [9:0] R0_data
);

  reg [9:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 10'bx;
endmodule

// VCS coverage exclude_file
module ram_source_combMem_1(
  input        R0_addr,
               R0_en,
               R0_clk,
               W0_addr,
               W0_en,
               W0_clk,
  input  [9:0] W0_data,
  output [9:0] R0_data
);

  reg [9:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 10'bx;
endmodule

// VCS coverage exclude_file
module packets_combMem(
  input  [5:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [5:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [16:0] W0_data,
  output [16:0] R0_data
);

  reg [16:0] Memory[0:63];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 17'bx;
endmodule

// VCS coverage exclude_file
module ram_index_combMem(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [22:0] W0_data,
  output [22:0] R0_data
);

  reg [22:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 23'bx;
endmodule

// VCS coverage exclude_file
module ram_address_combMem(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [28:0] W0_data,
  output [28:0] R0_data
);

  reg [28:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 29'bx;
endmodule

// VCS coverage exclude_file
module ram_address_combMem_0(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [29:0] W0_data,
  output [29:0] R0_data
);

  reg [29:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 30'bx;
endmodule

// VCS coverage exclude_file
module ram_address_combMem_1(
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [29:0] W0_data,
  output [29:0] R0_data
);

  reg [29:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 30'bx;
endmodule

// VCS coverage exclude_file
module ram_addr_combMem(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [30:0] W0_data,
  output [30:0] R0_data
);

  reg [30:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 31'bx;
endmodule

// VCS coverage exclude_file
module ram_addr_combMem_0(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [30:0] W0_data,
  output [30:0] R0_data
);

  reg [30:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 31'bx;
endmodule

// VCS coverage exclude_file
module ram_addr_combMem_1(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
endmodule

// VCS coverage exclude_file
module ram_address_combMem_2(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data
);

  reg [31:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
endmodule

// VCS coverage exclude_file
module ram_data_combMem(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:0];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;
endmodule

// VCS coverage exclude_file
module ram_data_combMem_0(
  input         R0_addr,
                R0_en,
                R0_clk,
                W0_addr,
                W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;
endmodule

// VCS coverage exclude_file
module ram_data_combMem_1(
  input  [2:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [2:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:7];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;
endmodule

// VCS coverage exclude_file
module rsp_mem_combMem(
  input  [5:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [5:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data
);

  reg [63:0] Memory[0:63];
  reg        _GEN;
  reg [5:0]  _GEN_0;
  always @(posedge R0_clk) begin
    _GEN <= R0_en;
    _GEN_0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _GEN ? Memory[_GEN_0] : 64'bx;
endmodule

// VCS coverage exclude_file
module buffer_combMem(
  input  [7:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [7:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [64:0] W0_data,
  output [64:0] R0_data
);

  reg [64:0] Memory[0:255];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 65'bx;
endmodule

// VCS coverage exclude_file
module rf_combMem(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [63:0] W0_data,
  output [63:0] R0_data,
                R1_data
);

  reg [63:0] Memory[0:30];
  always @(posedge W0_clk) begin
    if (W0_en)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 64'bx;
  assign R1_data = R1_en ? Memory[R1_addr] : 64'bx;
endmodule

module IntXbar(
  input  auto_int_in_4_0,
         auto_int_in_4_1,
         auto_int_in_3_0,
         auto_int_in_2_0,
         auto_int_in_1_0,
         auto_int_in_1_1,
         auto_int_in_1_2,
         auto_int_in_0_0,
  output auto_int_out_0,
         auto_int_out_1,
         auto_int_out_2,
         auto_int_out_3,
         auto_int_out_4,
         auto_int_out_5,
         auto_int_out_6,
         auto_int_out_7
);

  assign auto_int_out_0 = auto_int_in_0_0;
  assign auto_int_out_1 = auto_int_in_1_0;
  assign auto_int_out_2 = auto_int_in_1_1;
  assign auto_int_out_3 = auto_int_in_1_2;
  assign auto_int_out_4 = auto_int_in_2_0;
  assign auto_int_out_5 = auto_int_in_3_0;
  assign auto_int_out_6 = auto_int_in_4_0;
  assign auto_int_out_7 = auto_int_in_4_1;
endmodule

module NonSyncResetSynchronizerPrimitiveShiftReg_d3(
  input  clock,
         io_d,
  output io_q
);

  reg sync_0;
  reg sync_1;
  reg sync_2;
  always @(posedge clock) begin
    sync_0 <= sync_1;
    sync_1 <= sync_2;
    sync_2 <= io_d;
  end // always @(posedge)
  assign io_q = sync_0;
endmodule

module SynchronizerShiftReg_w2_d3(
  input        clock,
  input  [1:0] io_d,
  output [1:0] io_q
);

  wire _output_chain_1_io_q;
  wire _output_chain_io_q;
  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain (
    .clock (clock),
    .io_d  (io_d[0]),
    .io_q  (_output_chain_io_q)
  );
  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain_1 (
    .clock (clock),
    .io_d  (io_d[1]),
    .io_q  (_output_chain_1_io_q)
  );
  assign io_q = {_output_chain_1_io_q, _output_chain_io_q};
endmodule

module IntSyncAsyncCrossingSink(
  input  clock,
         auto_in_sync_0,
         auto_in_sync_1,
  output auto_out_0,
         auto_out_1
);

  wire [1:0] _chain_io_q;
  SynchronizerShiftReg_w2_d3 chain (
    .clock (clock),
    .io_d  ({auto_in_sync_1, auto_in_sync_0}),
    .io_q  (_chain_io_q)
  );
  assign auto_out_0 = _chain_io_q[0];
  assign auto_out_1 = _chain_io_q[1];
endmodule

module SimpleClockGroupSource(
  input  clock,
         reset,
  output auto_out_member_subsystem_sbus_6_clock,
         auto_out_member_subsystem_sbus_6_reset,
         auto_out_member_subsystem_sbus_5_clock,
         auto_out_member_subsystem_sbus_5_reset,
         auto_out_member_subsystem_sbus_3_clock,
         auto_out_member_subsystem_sbus_3_reset,
         auto_out_member_subsystem_sbus_2_clock,
         auto_out_member_subsystem_sbus_2_reset,
         auto_out_member_subsystem_sbus_1_clock,
         auto_out_member_subsystem_sbus_1_reset,
         auto_out_member_subsystem_sbus_0_clock,
         auto_out_member_subsystem_sbus_0_reset
);

  assign auto_out_member_subsystem_sbus_6_clock = clock;
  assign auto_out_member_subsystem_sbus_6_reset = reset;
  assign auto_out_member_subsystem_sbus_5_clock = clock;
  assign auto_out_member_subsystem_sbus_5_reset = reset;
  assign auto_out_member_subsystem_sbus_3_clock = clock;
  assign auto_out_member_subsystem_sbus_3_reset = reset;
  assign auto_out_member_subsystem_sbus_2_clock = clock;
  assign auto_out_member_subsystem_sbus_2_reset = reset;
  assign auto_out_member_subsystem_sbus_1_clock = clock;
  assign auto_out_member_subsystem_sbus_1_reset = reset;
  assign auto_out_member_subsystem_sbus_0_clock = clock;
  assign auto_out_member_subsystem_sbus_0_reset = reset;
endmodule

module FixedClockBroadcast(
  input  auto_in_clock,
         auto_in_reset,
  output auto_out_2_clock,
         auto_out_2_reset,
         auto_out_1_clock,
         auto_out_0_clock,
         auto_out_0_reset
);

  assign auto_out_2_clock = auto_in_clock;
  assign auto_out_2_reset = auto_in_reset;
  assign auto_out_1_clock = auto_in_clock;
  assign auto_out_0_clock = auto_in_clock;
  assign auto_out_0_reset = auto_in_reset;
endmodule

module TLXbar(
  input         clock,
                reset,
                auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
                auto_in_1_a_bits_param,
  input  [3:0]  auto_in_1_a_bits_size,
  input  [1:0]  auto_in_1_a_bits_source,
  input  [31:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_b_ready,
                auto_in_1_c_valid,
  input  [2:0]  auto_in_1_c_bits_opcode,
                auto_in_1_c_bits_param,
  input  [3:0]  auto_in_1_c_bits_size,
  input  [1:0]  auto_in_1_c_bits_source,
  input  [31:0] auto_in_1_c_bits_address,
  input  [63:0] auto_in_1_c_bits_data,
  input         auto_in_1_d_ready,
                auto_in_1_e_valid,
  input  [1:0]  auto_in_1_e_bits_sink,
  input         auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
                auto_in_0_a_bits_param,
  input  [3:0]  auto_in_0_a_bits_size,
  input  [4:0]  auto_in_0_a_bits_source,
  input  [31:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_d_ready,
                auto_out_2_a_ready,
                auto_out_2_d_valid,
  input  [2:0]  auto_out_2_d_bits_opcode,
  input  [3:0]  auto_out_2_d_bits_size,
  input  [5:0]  auto_out_2_d_bits_source,
  input         auto_out_2_d_bits_denied,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_2_d_bits_corrupt,
                auto_out_1_a_ready,
                auto_out_1_b_valid,
  input  [1:0]  auto_out_1_b_bits_param,
  input  [31:0] auto_out_1_b_bits_address,
  input         auto_out_1_c_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [5:0]  auto_out_1_d_bits_source,
  input  [1:0]  auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [3:0]  auto_out_0_d_bits_size,
  input  [5:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
                auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt,
  output        auto_in_1_a_ready,
                auto_in_1_b_valid,
  output [1:0]  auto_in_1_b_bits_param,
  output [31:0] auto_in_1_b_bits_address,
  output        auto_in_1_c_ready,
                auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [3:0]  auto_in_1_d_bits_size,
  output [1:0]  auto_in_1_d_bits_source,
                auto_in_1_d_bits_sink,
  output        auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
                auto_in_0_a_ready,
                auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [3:0]  auto_in_0_d_bits_size,
  output [4:0]  auto_in_0_d_bits_source,
  output        auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_d_bits_corrupt,
                auto_out_2_a_valid,
  output [2:0]  auto_out_2_a_bits_opcode,
  output [3:0]  auto_out_2_a_bits_size,
  output [5:0]  auto_out_2_a_bits_source,
  output [30:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_d_ready,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
                auto_out_1_a_bits_param,
                auto_out_1_a_bits_size,
  output [5:0]  auto_out_1_a_bits_source,
  output [31:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_b_ready,
                auto_out_1_c_valid,
  output [2:0]  auto_out_1_c_bits_opcode,
                auto_out_1_c_bits_param,
                auto_out_1_c_bits_size,
  output [5:0]  auto_out_1_c_bits_source,
  output [31:0] auto_out_1_c_bits_address,
  output [63:0] auto_out_1_c_bits_data,
  output        auto_out_1_d_ready,
                auto_out_1_e_valid,
  output [1:0]  auto_out_1_e_bits_sink,
  output        auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
                auto_out_0_a_bits_param,
  output [3:0]  auto_out_0_a_bits_size,
  output [5:0]  auto_out_0_a_bits_source,
  output [29:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_d_ready
);

  wire        allowed_4_2;
  wire        allowed_4_1;
  wire        allowed_4_0;
  wire        allowed_3_2;
  wire        allowed_3_1;
  wire        allowed_3_0;
  wire        allowed_2_1;
  wire        allowed_2_0;
  wire        allowed_1_1;
  wire        allowed_1_0;
  wire        allowed_1;
  wire        allowed_0;
  wire [5:0]  portsAOI_filtered_2_bits_source = {1'h0, auto_in_0_a_bits_source};
  wire [5:0]  portsAOI_filtered_1_2_bits_source = {4'h8, auto_in_1_a_bits_source};
  wire [3:0]  portsDIO_filtered_1_1_bits_size = {1'h0, auto_out_1_d_bits_size};
  wire        requestAIO_0_0 = auto_in_0_a_bits_address[31:30] == 2'h0;
  wire        requestAIO_0_2 = auto_in_0_a_bits_address[31:30] == 2'h1;
  wire        requestAIO_1_0 = auto_in_1_a_bits_address[31:30] == 2'h0;
  wire        requestAIO_1_2 = auto_in_1_a_bits_address[31:30] == 2'h1;
  wire        requestDOI_0_1 = auto_out_0_d_bits_source[5:2] == 4'h8;
  wire        requestDOI_1_1 = auto_out_1_d_bits_source[5:2] == 4'h8;
  wire        requestDOI_2_1 = auto_out_2_d_bits_source[5:2] == 4'h8;
  wire        portsAOI_filtered_0_valid = auto_in_0_a_valid & requestAIO_0_0;
  wire        portsAOI_filtered_1_valid =
    auto_in_0_a_valid & auto_in_0_a_bits_address[31];
  wire        portsAOI_filtered_2_valid = auto_in_0_a_valid & requestAIO_0_2;
  wire        portsAOI_filtered_1_0_valid = auto_in_1_a_valid & requestAIO_1_0;
  wire        portsAOI_filtered_1_1_valid =
    auto_in_1_a_valid & auto_in_1_a_bits_address[31];
  wire        portsAOI_filtered_1_2_valid = auto_in_1_a_valid & requestAIO_1_2;
  wire        portsDIO_filtered_0_valid =
    auto_out_0_d_valid & ~(auto_out_0_d_bits_source[5]);
  wire        portsDIO_filtered_1_valid = auto_out_0_d_valid & requestDOI_0_1;
  wire        portsDIO_filtered_1_0_valid =
    auto_out_1_d_valid & ~(auto_out_1_d_bits_source[5]);
  wire        portsDIO_filtered_1_1_valid = auto_out_1_d_valid & requestDOI_1_1;
  wire        portsDIO_filtered_2_0_valid =
    auto_out_2_d_valid & ~(auto_out_2_d_bits_source[5]);
  wire        portsDIO_filtered_2_1_valid = auto_out_2_d_valid & requestDOI_2_1;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire [1:0]  readys_valid = {portsAOI_filtered_1_0_valid, portsAOI_filtered_0_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {|_readys_filter_T_1, portsAOI_filtered_1_0_valid | _readys_filter_T_1[0]});
  wire        winner_0 = readys_readys[0] & portsAOI_filtered_0_valid;
  wire        winner_1 = readys_readys[1] & portsAOI_filtered_1_0_valid;
  wire        _out_0_a_valid_T = portsAOI_filtered_0_valid | portsAOI_filtered_1_0_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign allowed_0 = idle ? readys_readys[0] : state_0;
  assign allowed_1 = idle ? readys_readys[1] : state_1;
  wire        out_0_a_valid =
    idle
      ? _out_0_a_valid_T
      : state_0 & portsAOI_filtered_0_valid | state_1 & portsAOI_filtered_1_0_valid;
  reg  [8:0]  beatsLeft_1;
  wire        idle_1 = beatsLeft_1 == 9'h0;
  wire [1:0]  readys_valid_1 = {portsAOI_filtered_1_1_valid, portsAOI_filtered_1_valid};
  reg  [1:0]  readys_mask_1;
  wire [1:0]  _readys_filter_T_3 = readys_valid_1 & ~readys_mask_1;
  wire [1:0]  readys_readys_1 =
    ~({readys_mask_1[1], _readys_filter_T_3[1] | readys_mask_1[0]}
      & {|_readys_filter_T_3, portsAOI_filtered_1_1_valid | _readys_filter_T_3[0]});
  wire        winner_1_0 = readys_readys_1[0] & portsAOI_filtered_1_valid;
  wire        winner_1_1 = readys_readys_1[1] & portsAOI_filtered_1_1_valid;
  wire        _out_1_a_valid_T = portsAOI_filtered_1_valid | portsAOI_filtered_1_1_valid;
  reg         state_1_0;
  reg         state_1_1;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire        muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  assign allowed_1_0 = idle_1 ? readys_readys_1[0] : state_1_0;
  assign allowed_1_1 = idle_1 ? readys_readys_1[1] : state_1_1;
  wire        out_1_a_valid =
    idle_1
      ? _out_1_a_valid_T
      : state_1_0 & portsAOI_filtered_1_valid | state_1_1 & portsAOI_filtered_1_1_valid;
  reg  [8:0]  beatsLeft_2;
  wire        idle_2 = beatsLeft_2 == 9'h0;
  wire [1:0]  readys_valid_2 = {portsAOI_filtered_1_2_valid, portsAOI_filtered_2_valid};
  reg  [1:0]  readys_mask_2;
  wire [1:0]  _readys_filter_T_5 = readys_valid_2 & ~readys_mask_2;
  wire [1:0]  readys_readys_2 =
    ~({readys_mask_2[1], _readys_filter_T_5[1] | readys_mask_2[0]}
      & {|_readys_filter_T_5, portsAOI_filtered_1_2_valid | _readys_filter_T_5[0]});
  wire        winner_2_0 = readys_readys_2[0] & portsAOI_filtered_2_valid;
  wire        winner_2_1 = readys_readys_2[1] & portsAOI_filtered_1_2_valid;
  wire        _out_2_a_valid_T = portsAOI_filtered_2_valid | portsAOI_filtered_1_2_valid;
  reg         state_2_0;
  reg         state_2_1;
  wire        muxState_2_0 = idle_2 ? winner_2_0 : state_2_0;
  wire        muxState_2_1 = idle_2 ? winner_2_1 : state_2_1;
  assign allowed_2_0 = idle_2 ? readys_readys_2[0] : state_2_0;
  assign allowed_2_1 = idle_2 ? readys_readys_2[1] : state_2_1;
  wire        out_2_a_valid =
    idle_2
      ? _out_2_a_valid_T
      : state_2_0 & portsAOI_filtered_2_valid | state_2_1 & portsAOI_filtered_1_2_valid;
  reg  [8:0]  beatsLeft_3;
  wire        idle_3 = beatsLeft_3 == 9'h0;
  wire [2:0]  readys_valid_3 =
    {portsDIO_filtered_2_0_valid, portsDIO_filtered_1_0_valid, portsDIO_filtered_0_valid};
  reg  [2:0]  readys_mask_3;
  wire [2:0]  _readys_filter_T_7 = readys_valid_3 & ~readys_mask_3;
  wire [1:0]  _GEN = _readys_filter_T_7[1:0] | _readys_filter_T_7[2:1];
  wire [2:0]  readys_readys_3 =
    ~({readys_mask_3[2],
       _readys_filter_T_7[2] | readys_mask_3[1],
       _GEN[1] | readys_mask_3[0]}
      & {_GEN[0] | _readys_filter_T_7[2],
         portsDIO_filtered_2_0_valid | _readys_filter_T_7[0] | _GEN[1],
         portsDIO_filtered_1_0_valid | portsDIO_filtered_2_0_valid | _GEN[0]});
  wire        winner_3_0 = readys_readys_3[0] & portsDIO_filtered_0_valid;
  wire        winner_3_1 = readys_readys_3[1] & portsDIO_filtered_1_0_valid;
  wire        winner_3_2 = readys_readys_3[2] & portsDIO_filtered_2_0_valid;
  wire        _in_0_d_valid_T = portsDIO_filtered_0_valid | portsDIO_filtered_1_0_valid;
  reg         state_3_0;
  reg         state_3_1;
  reg         state_3_2;
  wire        muxState_3_0 = idle_3 ? winner_3_0 : state_3_0;
  wire        muxState_3_1 = idle_3 ? winner_3_1 : state_3_1;
  wire        muxState_3_2 = idle_3 ? winner_3_2 : state_3_2;
  assign allowed_3_0 = idle_3 ? readys_readys_3[0] : state_3_0;
  assign allowed_3_1 = idle_3 ? readys_readys_3[1] : state_3_1;
  assign allowed_3_2 = idle_3 ? readys_readys_3[2] : state_3_2;
  wire        in_0_d_valid =
    idle_3
      ? _in_0_d_valid_T | portsDIO_filtered_2_0_valid
      : state_3_0 & portsDIO_filtered_0_valid | state_3_1 & portsDIO_filtered_1_0_valid
        | state_3_2 & portsDIO_filtered_2_0_valid;
  reg  [8:0]  beatsLeft_4;
  wire        idle_4 = beatsLeft_4 == 9'h0;
  wire [2:0]  readys_valid_4 =
    {portsDIO_filtered_2_1_valid, portsDIO_filtered_1_1_valid, portsDIO_filtered_1_valid};
  reg  [2:0]  readys_mask_4;
  wire [2:0]  _readys_filter_T_9 = readys_valid_4 & ~readys_mask_4;
  wire [1:0]  _GEN_0 = _readys_filter_T_9[1:0] | _readys_filter_T_9[2:1];
  wire [2:0]  readys_readys_4 =
    ~({readys_mask_4[2],
       _readys_filter_T_9[2] | readys_mask_4[1],
       _GEN_0[1] | readys_mask_4[0]}
      & {_GEN_0[0] | _readys_filter_T_9[2],
         portsDIO_filtered_2_1_valid | _readys_filter_T_9[0] | _GEN_0[1],
         portsDIO_filtered_1_1_valid | portsDIO_filtered_2_1_valid | _GEN_0[0]});
  wire        winner_4_0 = readys_readys_4[0] & portsDIO_filtered_1_valid;
  wire        winner_4_1 = readys_readys_4[1] & portsDIO_filtered_1_1_valid;
  wire        winner_4_2 = readys_readys_4[2] & portsDIO_filtered_2_1_valid;
  wire        _in_1_d_valid_T = portsDIO_filtered_1_valid | portsDIO_filtered_1_1_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_0_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_1_0 | ~winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_1_a_valid_T | winner_1_0 | winner_1_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_2_0 | ~winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_2_a_valid_T | winner_2_0 | winner_2_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_3_0 | ~winner_3_1)
              & (~(winner_3_0 | winner_3_1) | ~winner_3_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_in_0_d_valid_T | portsDIO_filtered_2_0_valid) | winner_3_0 | winner_3_1
              | winner_3_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_4_0 | ~winner_4_1)
              & (~(winner_4_0 | winner_4_1) | ~winner_4_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_in_1_d_valid_T | portsDIO_filtered_2_1_valid) | winner_4_0 | winner_4_1
              | winner_4_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_4_0;
  reg         state_4_1;
  reg         state_4_2;
  wire        muxState_4_0 = idle_4 ? winner_4_0 : state_4_0;
  wire        muxState_4_1 = idle_4 ? winner_4_1 : state_4_1;
  wire        muxState_4_2 = idle_4 ? winner_4_2 : state_4_2;
  assign allowed_4_0 = idle_4 ? readys_readys_4[0] : state_4_0;
  assign allowed_4_1 = idle_4 ? readys_readys_4[1] : state_4_1;
  assign allowed_4_2 = idle_4 ? readys_readys_4[2] : state_4_2;
  wire        in_1_d_valid =
    idle_4
      ? _in_1_d_valid_T | portsDIO_filtered_2_1_valid
      : state_4_0 & portsDIO_filtered_1_valid | state_4_1 & portsDIO_filtered_1_1_valid
        | state_4_2 & portsDIO_filtered_2_1_valid;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [1:0]  _readys_mask_T_5 = readys_readys_1 & readys_valid_1;
  wire [1:0]  _readys_mask_T_10 = readys_readys_2 & readys_valid_2;
  wire [2:0]  _readys_mask_T_15 = readys_readys_3 & readys_valid_3;
  wire [2:0]  _readys_mask_T_18 = _readys_mask_T_15 | {_readys_mask_T_15[1:0], 1'h0};
  wire [2:0]  _readys_mask_T_23 = readys_readys_4 & readys_valid_4;
  wire [2:0]  _readys_mask_T_26 = _readys_mask_T_23 | {_readys_mask_T_23[1:0], 1'h0};
  wire [26:0] _beatsAI_decode_T_1 = 27'hFFF << auto_in_0_a_bits_size;
  wire [26:0] _beatsAI_decode_T_5 = 27'hFFF << auto_in_1_a_bits_size;
  wire [26:0] _beatsDO_decode_T_1 = 27'hFFF << auto_out_0_d_bits_size;
  wire [20:0] _beatsDO_decode_T_5 = 21'h3F << auto_out_1_d_bits_size;
  wire [22:0] _beatsDO_decode_T_9 = 23'hFF << auto_out_2_d_bits_size;
  wire        latch = idle & auto_out_0_a_ready;
  wire        latch_1 = idle_1 & auto_out_1_a_ready;
  wire        latch_2 = idle_2 & auto_out_2_a_ready;
  wire        latch_3 = idle_3 & auto_in_0_d_ready;
  wire        latch_4 = idle_4 & auto_in_1_d_ready;
  wire [4:0]  maskedBeats_2 =
    winner_3_2 & auto_out_2_d_bits_opcode[0] ? ~(_beatsDO_decode_T_9[7:3]) : 5'h0;
  wire [4:0]  maskedBeats_2_1 =
    winner_4_2 & auto_out_2_d_bits_opcode[0] ? ~(_beatsDO_decode_T_9[7:3]) : 5'h0;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 9'h0;
      readys_mask_1 <= 2'h3;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      beatsLeft_2 <= 9'h0;
      readys_mask_2 <= 2'h3;
      state_2_0 <= 1'h0;
      state_2_1 <= 1'h0;
      beatsLeft_3 <= 9'h0;
      readys_mask_3 <= 3'h7;
      state_3_0 <= 1'h0;
      state_3_1 <= 1'h0;
      state_3_2 <= 1'h0;
      beatsLeft_4 <= 9'h0;
      readys_mask_4 <= 3'h7;
      state_4_0 <= 1'h0;
      state_4_1 <= 1'h0;
      state_4_2 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[11:3]) : 9'h0)
          | (winner_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_5[11:3])
               : 9'h0);
      else
        beatsLeft <= beatsLeft - {8'h0, auto_out_0_a_ready & out_0_a_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (latch_1)
        beatsLeft_1 <=
          (winner_1_0 & ~(auto_in_0_a_bits_opcode[2])
             ? ~(_beatsAI_decode_T_1[11:3])
             : 9'h0)
          | (winner_1_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_5[11:3])
               : 9'h0);
      else
        beatsLeft_1 <= beatsLeft_1 - {8'h0, auto_out_1_a_ready & out_1_a_valid};
      if (latch_1 & (|readys_valid_1))
        readys_mask_1 <= _readys_mask_T_5 | {_readys_mask_T_5[0], 1'h0};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
      end
      if (latch_2)
        beatsLeft_2 <=
          (winner_2_0 & ~(auto_in_0_a_bits_opcode[2])
             ? ~(_beatsAI_decode_T_1[11:3])
             : 9'h0)
          | (winner_2_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_5[11:3])
               : 9'h0);
      else
        beatsLeft_2 <= beatsLeft_2 - {8'h0, auto_out_2_a_ready & out_2_a_valid};
      if (latch_2 & (|readys_valid_2))
        readys_mask_2 <= _readys_mask_T_10 | {_readys_mask_T_10[0], 1'h0};
      if (idle_2) begin
        state_2_0 <= winner_2_0;
        state_2_1 <= winner_2_1;
      end
      if (latch_3)
        beatsLeft_3 <=
          (winner_3_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[11:3]) : 9'h0)
          | {4'h0,
             maskedBeats_2[4:3],
             (winner_3_1 & auto_out_1_d_bits_opcode[0]
                ? ~(_beatsDO_decode_T_5[5:3])
                : 3'h0) | maskedBeats_2[2:0]};
      else
        beatsLeft_3 <= beatsLeft_3 - {8'h0, auto_in_0_d_ready & in_0_d_valid};
      if (latch_3 & (|readys_valid_3))
        readys_mask_3 <= _readys_mask_T_18 | {_readys_mask_T_18[0], 2'h0};
      if (idle_3) begin
        state_3_0 <= winner_3_0;
        state_3_1 <= winner_3_1;
        state_3_2 <= winner_3_2;
      end
      if (latch_4)
        beatsLeft_4 <=
          (winner_4_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[11:3]) : 9'h0)
          | {4'h0,
             maskedBeats_2_1[4:3],
             (winner_4_1 & auto_out_1_d_bits_opcode[0]
                ? ~(_beatsDO_decode_T_5[5:3])
                : 3'h0) | maskedBeats_2_1[2:0]};
      else
        beatsLeft_4 <= beatsLeft_4 - {8'h0, auto_in_1_d_ready & in_1_d_valid};
      if (latch_4 & (|readys_valid_4))
        readys_mask_4 <= _readys_mask_T_26 | {_readys_mask_T_26[0], 2'h0};
      if (idle_4) begin
        state_4_0 <= winner_4_0;
        state_4_1 <= winner_4_1;
        state_4_2 <= winner_4_2;
      end
    end
  end // always @(posedge)
  assign auto_in_1_a_ready =
    requestAIO_1_0 & auto_out_0_a_ready & allowed_1 | auto_in_1_a_bits_address[31]
    & auto_out_1_a_ready & allowed_1_1 | requestAIO_1_2 & auto_out_2_a_ready
    & allowed_2_1;
  assign auto_in_1_b_valid = auto_out_1_b_valid;
  assign auto_in_1_b_bits_param = auto_out_1_b_bits_param;
  assign auto_in_1_b_bits_address = auto_out_1_b_bits_address;
  assign auto_in_1_c_ready = auto_out_1_c_ready;
  assign auto_in_1_d_valid = in_1_d_valid;
  assign auto_in_1_d_bits_opcode =
    (muxState_4_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_opcode : 3'h0);
  assign auto_in_1_d_bits_param =
    (muxState_4_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_param : 2'h0);
  assign auto_in_1_d_bits_size =
    (muxState_4_0 ? auto_out_0_d_bits_size : 4'h0)
    | (muxState_4_1 ? portsDIO_filtered_1_1_bits_size : 4'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_size : 4'h0);
  assign auto_in_1_d_bits_source =
    (muxState_4_0 ? auto_out_0_d_bits_source[1:0] : 2'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_source[1:0] : 2'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_source[1:0] : 2'h0);
  assign auto_in_1_d_bits_sink =
    (muxState_4_0 ? {1'h0, auto_out_0_d_bits_sink} : 2'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_sink : 2'h0);
  assign auto_in_1_d_bits_denied =
    muxState_4_0 & auto_out_0_d_bits_denied | muxState_4_1 & auto_out_1_d_bits_denied
    | muxState_4_2 & auto_out_2_d_bits_denied;
  assign auto_in_1_d_bits_data =
    (muxState_4_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_4_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_4_2 ? auto_out_2_d_bits_data : 64'h0);
  assign auto_in_1_d_bits_corrupt =
    muxState_4_0 & auto_out_0_d_bits_corrupt | muxState_4_1 & auto_out_1_d_bits_corrupt
    | muxState_4_2 & auto_out_2_d_bits_corrupt;
  assign auto_in_0_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready & allowed_0 | auto_in_0_a_bits_address[31]
    & auto_out_1_a_ready & allowed_1_0 | requestAIO_0_2 & auto_out_2_a_ready
    & allowed_2_0;
  assign auto_in_0_d_valid = in_0_d_valid;
  assign auto_in_0_d_bits_opcode =
    (muxState_3_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_opcode : 3'h0);
  assign auto_in_0_d_bits_size =
    (muxState_3_0 ? auto_out_0_d_bits_size : 4'h0)
    | (muxState_3_1 ? portsDIO_filtered_1_1_bits_size : 4'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_size : 4'h0);
  assign auto_in_0_d_bits_source =
    (muxState_3_0 ? auto_out_0_d_bits_source[4:0] : 5'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_source[4:0] : 5'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_source[4:0] : 5'h0);
  assign auto_in_0_d_bits_denied =
    muxState_3_0 & auto_out_0_d_bits_denied | muxState_3_1 & auto_out_1_d_bits_denied
    | muxState_3_2 & auto_out_2_d_bits_denied;
  assign auto_in_0_d_bits_data =
    (muxState_3_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_3_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_3_2 ? auto_out_2_d_bits_data : 64'h0);
  assign auto_in_0_d_bits_corrupt =
    muxState_3_0 & auto_out_0_d_bits_corrupt | muxState_3_1 & auto_out_1_d_bits_corrupt
    | muxState_3_2 & auto_out_2_d_bits_corrupt;
  assign auto_out_2_a_valid = out_2_a_valid;
  assign auto_out_2_a_bits_opcode =
    (muxState_2_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_opcode : 3'h0);
  assign auto_out_2_a_bits_size =
    (muxState_2_0 ? auto_in_0_a_bits_size : 4'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_size : 4'h0);
  assign auto_out_2_a_bits_source =
    (muxState_2_0 ? portsAOI_filtered_2_bits_source : 6'h0)
    | (muxState_2_1 ? portsAOI_filtered_1_2_bits_source : 6'h0);
  assign auto_out_2_a_bits_address =
    (muxState_2_0 ? auto_in_0_a_bits_address[30:0] : 31'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_address[30:0] : 31'h0);
  assign auto_out_2_a_bits_mask =
    (muxState_2_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_2_a_bits_data =
    (muxState_2_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_2_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_2_d_ready =
    ~(auto_out_2_d_bits_source[5]) & auto_in_0_d_ready & allowed_3_2 | requestDOI_2_1
    & auto_in_1_d_ready & allowed_4_2;
  assign auto_out_1_a_valid = out_1_a_valid;
  assign auto_out_1_a_bits_opcode =
    (muxState_1_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_opcode : 3'h0);
  assign auto_out_1_a_bits_param =
    (muxState_1_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_param : 3'h0);
  assign auto_out_1_a_bits_size =
    (muxState_1_0 ? auto_in_0_a_bits_size[2:0] : 3'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_size[2:0] : 3'h0);
  assign auto_out_1_a_bits_source =
    (muxState_1_0 ? portsAOI_filtered_2_bits_source : 6'h0)
    | (muxState_1_1 ? portsAOI_filtered_1_2_bits_source : 6'h0);
  assign auto_out_1_a_bits_address =
    (muxState_1_0 ? auto_in_0_a_bits_address : 32'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_address : 32'h0);
  assign auto_out_1_a_bits_mask =
    (muxState_1_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_1_a_bits_data =
    (muxState_1_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_1_b_ready = auto_in_1_b_ready;
  assign auto_out_1_c_valid = auto_in_1_c_valid;
  assign auto_out_1_c_bits_opcode = auto_in_1_c_bits_opcode;
  assign auto_out_1_c_bits_param = auto_in_1_c_bits_param;
  assign auto_out_1_c_bits_size = auto_in_1_c_bits_size[2:0];
  assign auto_out_1_c_bits_source = {4'h8, auto_in_1_c_bits_source};
  assign auto_out_1_c_bits_address = auto_in_1_c_bits_address;
  assign auto_out_1_c_bits_data = auto_in_1_c_bits_data;
  assign auto_out_1_d_ready =
    ~(auto_out_1_d_bits_source[5]) & auto_in_0_d_ready & allowed_3_1 | requestDOI_1_1
    & auto_in_1_d_ready & allowed_4_1;
  assign auto_out_1_e_valid = auto_in_1_e_valid;
  assign auto_out_1_e_bits_sink = auto_in_1_e_bits_sink;
  assign auto_out_0_a_valid = out_0_a_valid;
  assign auto_out_0_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 3'h0);
  assign auto_out_0_a_bits_param =
    (muxState_0 ? auto_in_0_a_bits_param : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_param : 3'h0);
  assign auto_out_0_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 4'h0);
  assign auto_out_0_a_bits_source =
    (muxState_0 ? portsAOI_filtered_2_bits_source : 6'h0)
    | (muxState_1 ? portsAOI_filtered_1_2_bits_source : 6'h0);
  assign auto_out_0_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address[29:0] : 30'h0)
    | (muxState_1 ? auto_in_1_a_bits_address[29:0] : 30'h0);
  assign auto_out_0_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 8'h0)
    | (muxState_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_0_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_0_d_ready =
    ~(auto_out_0_d_bits_source[5]) & auto_in_0_d_ready & allowed_3_0 | requestDOI_0_1
    & auto_in_1_d_ready & allowed_4_0;
endmodule

module TLFIFOFixer(
  input         clock,
                reset,
                auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
                auto_in_1_a_bits_param,
  input  [3:0]  auto_in_1_a_bits_size,
  input  [1:0]  auto_in_1_a_bits_source,
  input  [31:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_b_ready,
                auto_in_1_c_valid,
  input  [2:0]  auto_in_1_c_bits_opcode,
                auto_in_1_c_bits_param,
  input  [3:0]  auto_in_1_c_bits_size,
  input  [1:0]  auto_in_1_c_bits_source,
  input  [31:0] auto_in_1_c_bits_address,
  input  [63:0] auto_in_1_c_bits_data,
  input         auto_in_1_d_ready,
                auto_in_1_e_valid,
  input  [1:0]  auto_in_1_e_bits_sink,
  input         auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
                auto_in_0_a_bits_param,
  input  [3:0]  auto_in_0_a_bits_size,
  input  [4:0]  auto_in_0_a_bits_source,
  input  [31:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_d_ready,
                auto_out_1_a_ready,
                auto_out_1_b_valid,
  input  [1:0]  auto_out_1_b_bits_param,
  input  [3:0]  auto_out_1_b_bits_size,
  input  [1:0]  auto_out_1_b_bits_source,
  input  [31:0] auto_out_1_b_bits_address,
  input         auto_out_1_c_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [3:0]  auto_out_1_d_bits_size,
  input  [1:0]  auto_out_1_d_bits_source,
                auto_out_1_d_bits_sink,
  input         auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [3:0]  auto_out_0_d_bits_size,
  input  [4:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt,
  output        auto_in_1_a_ready,
                auto_in_1_b_valid,
  output [1:0]  auto_in_1_b_bits_param,
  output [3:0]  auto_in_1_b_bits_size,
  output [1:0]  auto_in_1_b_bits_source,
  output [31:0] auto_in_1_b_bits_address,
  output        auto_in_1_c_ready,
                auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [1:0]  auto_in_1_d_bits_param,
  output [3:0]  auto_in_1_d_bits_size,
  output [1:0]  auto_in_1_d_bits_source,
                auto_in_1_d_bits_sink,
  output        auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
                auto_in_0_a_ready,
                auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [3:0]  auto_in_0_d_bits_size,
  output [4:0]  auto_in_0_d_bits_source,
  output        auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_d_bits_corrupt,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
                auto_out_1_a_bits_param,
  output [3:0]  auto_out_1_a_bits_size,
  output [1:0]  auto_out_1_a_bits_source,
  output [31:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_b_ready,
                auto_out_1_c_valid,
  output [2:0]  auto_out_1_c_bits_opcode,
                auto_out_1_c_bits_param,
  output [3:0]  auto_out_1_c_bits_size,
  output [1:0]  auto_out_1_c_bits_source,
  output [31:0] auto_out_1_c_bits_address,
  output [63:0] auto_out_1_c_bits_data,
  output        auto_out_1_d_ready,
                auto_out_1_e_valid,
  output [1:0]  auto_out_1_e_bits_sink,
  output        auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
                auto_out_0_a_bits_param,
  output [3:0]  auto_out_0_a_bits_size,
  output [4:0]  auto_out_0_a_bits_source,
  output [31:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_d_ready
);

  wire [1:0]  a_id = {auto_in_0_a_bits_address[30], ~(auto_in_0_a_bits_address[30])};
  wire        a_noDomain = a_id == 2'h0;
  reg  [8:0]  a_first_counter;
  wire        a_first = a_first_counter == 9'h0;
  reg  [8:0]  d_first_counter;
  reg         flight_0;
  reg         flight_1;
  reg         flight_2;
  reg         flight_3;
  reg         flight_4;
  reg         flight_5;
  reg         flight_6;
  reg         flight_7;
  reg         flight_8;
  reg         flight_9;
  reg         flight_10;
  reg         flight_11;
  reg         flight_12;
  reg         flight_13;
  reg         flight_14;
  reg         flight_15;
  reg         flight_16;
  reg         flight_17;
  reg         flight_18;
  reg         flight_19;
  wire        stalls_a_sel = auto_in_0_a_bits_source[4:2] == 3'h4;
  reg  [1:0]  stalls_id;
  wire        stalls_a_sel_1 = auto_in_0_a_bits_source[4:3] == 2'h0;
  reg  [1:0]  stalls_id_1;
  wire        stalls_a_sel_2 = auto_in_0_a_bits_source[4:3] == 2'h1;
  reg  [1:0]  stalls_id_2;
  wire        stall =
    stalls_a_sel & a_first & (flight_16 | flight_17 | flight_18 | flight_19)
    & (a_noDomain | stalls_id != a_id) | stalls_a_sel_1 & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7) & (a_noDomain | stalls_id_1 != a_id) | stalls_a_sel_2 & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15) & (a_noDomain | stalls_id_2 != a_id);
  wire        nodeIn_a_ready =
    auto_out_0_a_ready & (auto_in_0_a_bits_address[31] | ~stall);
  wire [26:0] _a_first_beats1_decode_T_1 = 27'hFFF << auto_in_0_a_bits_size;
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << auto_out_0_d_bits_size;
  wire        d_first_first = d_first_counter == 9'h0;
  wire        _T_3 =
    d_first_first & auto_out_0_d_bits_opcode != 3'h6 & auto_in_0_d_ready
    & auto_out_0_d_valid;
  wire        _T_5 = nodeIn_a_ready & auto_in_0_a_valid;
  wire        _T_1 = a_first & _T_5;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
      flight_16 <= 1'h0;
      flight_17 <= 1'h0;
      flight_18 <= 1'h0;
      flight_19 <= 1'h0;
    end
    else begin
      if (_T_5) begin
        if (a_first) begin
          if (auto_in_0_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else
            a_first_counter <= ~(_a_first_beats1_decode_T_1[11:3]);
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (auto_in_0_d_ready & auto_out_0_d_valid) begin
        if (d_first_first) begin
          if (auto_out_0_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[11:3]);
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h0)
        & (_T_1 & auto_in_0_a_bits_source == 5'h0
             ? ~(auto_in_0_a_bits_address[31])
             : flight_0);
      flight_1 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h1)
        & (_T_1 & auto_in_0_a_bits_source == 5'h1
             ? ~(auto_in_0_a_bits_address[31])
             : flight_1);
      flight_2 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h2)
        & (_T_1 & auto_in_0_a_bits_source == 5'h2
             ? ~(auto_in_0_a_bits_address[31])
             : flight_2);
      flight_3 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h3)
        & (_T_1 & auto_in_0_a_bits_source == 5'h3
             ? ~(auto_in_0_a_bits_address[31])
             : flight_3);
      flight_4 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h4)
        & (_T_1 & auto_in_0_a_bits_source == 5'h4
             ? ~(auto_in_0_a_bits_address[31])
             : flight_4);
      flight_5 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h5)
        & (_T_1 & auto_in_0_a_bits_source == 5'h5
             ? ~(auto_in_0_a_bits_address[31])
             : flight_5);
      flight_6 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h6)
        & (_T_1 & auto_in_0_a_bits_source == 5'h6
             ? ~(auto_in_0_a_bits_address[31])
             : flight_6);
      flight_7 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h7)
        & (_T_1 & auto_in_0_a_bits_source == 5'h7
             ? ~(auto_in_0_a_bits_address[31])
             : flight_7);
      flight_8 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h8)
        & (_T_1 & auto_in_0_a_bits_source == 5'h8
             ? ~(auto_in_0_a_bits_address[31])
             : flight_8);
      flight_9 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h9)
        & (_T_1 & auto_in_0_a_bits_source == 5'h9
             ? ~(auto_in_0_a_bits_address[31])
             : flight_9);
      flight_10 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hA)
        & (_T_1 & auto_in_0_a_bits_source == 5'hA
             ? ~(auto_in_0_a_bits_address[31])
             : flight_10);
      flight_11 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hB)
        & (_T_1 & auto_in_0_a_bits_source == 5'hB
             ? ~(auto_in_0_a_bits_address[31])
             : flight_11);
      flight_12 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hC)
        & (_T_1 & auto_in_0_a_bits_source == 5'hC
             ? ~(auto_in_0_a_bits_address[31])
             : flight_12);
      flight_13 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hD)
        & (_T_1 & auto_in_0_a_bits_source == 5'hD
             ? ~(auto_in_0_a_bits_address[31])
             : flight_13);
      flight_14 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hE)
        & (_T_1 & auto_in_0_a_bits_source == 5'hE
             ? ~(auto_in_0_a_bits_address[31])
             : flight_14);
      flight_15 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'hF)
        & (_T_1 & auto_in_0_a_bits_source == 5'hF
             ? ~(auto_in_0_a_bits_address[31])
             : flight_15);
      flight_16 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h10)
        & (_T_1 & auto_in_0_a_bits_source == 5'h10
             ? ~(auto_in_0_a_bits_address[31])
             : flight_16);
      flight_17 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h11)
        & (_T_1 & auto_in_0_a_bits_source == 5'h11
             ? ~(auto_in_0_a_bits_address[31])
             : flight_17);
      flight_18 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h12)
        & (_T_1 & auto_in_0_a_bits_source == 5'h12
             ? ~(auto_in_0_a_bits_address[31])
             : flight_18);
      flight_19 <=
        ~(_T_3 & auto_out_0_d_bits_source == 5'h13)
        & (_T_1 & auto_in_0_a_bits_source == 5'h13
             ? ~(auto_in_0_a_bits_address[31])
             : flight_19);
    end
    if (_T_5 & stalls_a_sel & ~(auto_in_0_a_bits_address[31]))
      stalls_id <= a_id;
    if (_T_5 & stalls_a_sel_1 & ~(auto_in_0_a_bits_address[31]))
      stalls_id_1 <= a_id;
    if (_T_5 & stalls_a_sel_2 & ~(auto_in_0_a_bits_address[31]))
      stalls_id_2 <= a_id;
  end // always @(posedge)
  assign auto_in_1_a_ready = auto_out_1_a_ready;
  assign auto_in_1_b_valid = auto_out_1_b_valid;
  assign auto_in_1_b_bits_param = auto_out_1_b_bits_param;
  assign auto_in_1_b_bits_size = auto_out_1_b_bits_size;
  assign auto_in_1_b_bits_source = auto_out_1_b_bits_source;
  assign auto_in_1_b_bits_address = auto_out_1_b_bits_address;
  assign auto_in_1_c_ready = auto_out_1_c_ready;
  assign auto_in_1_d_valid = auto_out_1_d_valid;
  assign auto_in_1_d_bits_opcode = auto_out_1_d_bits_opcode;
  assign auto_in_1_d_bits_param = auto_out_1_d_bits_param;
  assign auto_in_1_d_bits_size = auto_out_1_d_bits_size;
  assign auto_in_1_d_bits_source = auto_out_1_d_bits_source;
  assign auto_in_1_d_bits_sink = auto_out_1_d_bits_sink;
  assign auto_in_1_d_bits_denied = auto_out_1_d_bits_denied;
  assign auto_in_1_d_bits_data = auto_out_1_d_bits_data;
  assign auto_in_1_d_bits_corrupt = auto_out_1_d_bits_corrupt;
  assign auto_in_0_a_ready = nodeIn_a_ready;
  assign auto_in_0_d_valid = auto_out_0_d_valid;
  assign auto_in_0_d_bits_opcode = auto_out_0_d_bits_opcode;
  assign auto_in_0_d_bits_size = auto_out_0_d_bits_size;
  assign auto_in_0_d_bits_source = auto_out_0_d_bits_source;
  assign auto_in_0_d_bits_denied = auto_out_0_d_bits_denied;
  assign auto_in_0_d_bits_data = auto_out_0_d_bits_data;
  assign auto_in_0_d_bits_corrupt = auto_out_0_d_bits_corrupt;
  assign auto_out_1_a_valid = auto_in_1_a_valid;
  assign auto_out_1_a_bits_opcode = auto_in_1_a_bits_opcode;
  assign auto_out_1_a_bits_param = auto_in_1_a_bits_param;
  assign auto_out_1_a_bits_size = auto_in_1_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_1_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_1_a_bits_address;
  assign auto_out_1_a_bits_mask = auto_in_1_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_1_a_bits_data;
  assign auto_out_1_b_ready = auto_in_1_b_ready;
  assign auto_out_1_c_valid = auto_in_1_c_valid;
  assign auto_out_1_c_bits_opcode = auto_in_1_c_bits_opcode;
  assign auto_out_1_c_bits_param = auto_in_1_c_bits_param;
  assign auto_out_1_c_bits_size = auto_in_1_c_bits_size;
  assign auto_out_1_c_bits_source = auto_in_1_c_bits_source;
  assign auto_out_1_c_bits_address = auto_in_1_c_bits_address;
  assign auto_out_1_c_bits_data = auto_in_1_c_bits_data;
  assign auto_out_1_d_ready = auto_in_1_d_ready;
  assign auto_out_1_e_valid = auto_in_1_e_valid;
  assign auto_out_1_e_bits_sink = auto_in_1_e_bits_sink;
  assign auto_out_0_a_valid = auto_in_0_a_valid & (auto_in_0_a_bits_address[31] | ~stall);
  assign auto_out_0_a_bits_opcode = auto_in_0_a_bits_opcode;
  assign auto_out_0_a_bits_param = auto_in_0_a_bits_param;
  assign auto_out_0_a_bits_size = auto_in_0_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_0_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_0_a_bits_address;
  assign auto_out_0_a_bits_mask = auto_in_0_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_0_a_bits_data;
  assign auto_out_0_d_ready = auto_in_0_d_ready;
endmodule

module Queue(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input         io_enq_bits_lock,
  input  [3:0]  io_enq_bits_cache,
  input  [2:0]  io_enq_bits_prot,
  input  [3:0]  io_enq_bits_qos,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_id_combMem_0 ram_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_addr_combMem_0 ram_addr_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_addr),
    .R0_data (io_deq_bits_addr)
  );
  ram_len_combMem ram_len_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_len),
    .R0_data (io_deq_bits_len)
  );
  ram_size_combMem ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem_0 ram_burst_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_burst),
    .R0_data (io_deq_bits_burst)
  );
  ram_lock_combMem ram_lock_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_lock),
    .R0_data (io_deq_bits_lock)
  );
  ram_id_combMem_0 ram_cache_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_cache),
    .R0_data (io_deq_bits_cache)
  );
  ram_size_combMem ram_prot_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_prot),
    .R0_data (io_deq_bits_prot)
  );
  ram_id_combMem_0 ram_qos_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_qos),
    .R0_data (io_deq_bits_qos)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_1(
  input         clock,
                reset,
                io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_len_combMem ram_strb_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_strb),
    .R0_data (io_deq_bits_strb)
  );
  ram_lock_combMem ram_last_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (io_deq_bits_last)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_2(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_id,
  output [1:0] io_deq_bits_resp
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_id_combMem_0 ram_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_burst_combMem_0 ram_resp_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_resp),
    .R0_data (io_deq_bits_resp)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_4(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [3:0]  io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_last
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_id_combMem_0 ram_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_burst_combMem_0 ram_resp_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_resp),
    .R0_data (io_deq_bits_resp)
  );
  ram_lock_combMem ram_last_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (io_deq_bits_last)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module AXI4Buffer(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  Queue nodeOut_aw_deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_aw_valid),
    .io_enq_bits_id    (auto_in_aw_bits_id),
    .io_enq_bits_addr  (auto_in_aw_bits_addr),
    .io_enq_bits_len   (auto_in_aw_bits_len),
    .io_enq_bits_size  (auto_in_aw_bits_size),
    .io_enq_bits_burst (auto_in_aw_bits_burst),
    .io_enq_bits_lock  (auto_in_aw_bits_lock),
    .io_enq_bits_cache (auto_in_aw_bits_cache),
    .io_enq_bits_prot  (auto_in_aw_bits_prot),
    .io_enq_bits_qos   (auto_in_aw_bits_qos),
    .io_deq_ready      (auto_out_aw_ready),
    .io_enq_ready      (auto_in_aw_ready),
    .io_deq_valid      (auto_out_aw_valid),
    .io_deq_bits_id    (auto_out_aw_bits_id),
    .io_deq_bits_addr  (auto_out_aw_bits_addr),
    .io_deq_bits_len   (auto_out_aw_bits_len),
    .io_deq_bits_size  (auto_out_aw_bits_size),
    .io_deq_bits_burst (auto_out_aw_bits_burst),
    .io_deq_bits_lock  (auto_out_aw_bits_lock),
    .io_deq_bits_cache (auto_out_aw_bits_cache),
    .io_deq_bits_prot  (auto_out_aw_bits_prot),
    .io_deq_bits_qos   (auto_out_aw_bits_qos)
  );
  Queue_1 nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue_2 nodeIn_b_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_b_valid),
    .io_enq_bits_id   (auto_out_b_bits_id),
    .io_enq_bits_resp (auto_out_b_bits_resp),
    .io_deq_ready     (auto_in_b_ready),
    .io_enq_ready     (auto_out_b_ready),
    .io_deq_valid     (auto_in_b_valid),
    .io_deq_bits_id   (auto_in_b_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  Queue nodeOut_ar_deq_q (
    .clock             (clock),
    .reset             (reset),
    .io_enq_valid      (auto_in_ar_valid),
    .io_enq_bits_id    (auto_in_ar_bits_id),
    .io_enq_bits_addr  (auto_in_ar_bits_addr),
    .io_enq_bits_len   (auto_in_ar_bits_len),
    .io_enq_bits_size  (auto_in_ar_bits_size),
    .io_enq_bits_burst (auto_in_ar_bits_burst),
    .io_enq_bits_lock  (auto_in_ar_bits_lock),
    .io_enq_bits_cache (auto_in_ar_bits_cache),
    .io_enq_bits_prot  (auto_in_ar_bits_prot),
    .io_enq_bits_qos   (auto_in_ar_bits_qos),
    .io_deq_ready      (auto_out_ar_ready),
    .io_enq_ready      (auto_in_ar_ready),
    .io_deq_valid      (auto_out_ar_valid),
    .io_deq_bits_id    (auto_out_ar_bits_id),
    .io_deq_bits_addr  (auto_out_ar_bits_addr),
    .io_deq_bits_len   (auto_out_ar_bits_len),
    .io_deq_bits_size  (auto_out_ar_bits_size),
    .io_deq_bits_burst (auto_out_ar_bits_burst),
    .io_deq_bits_lock  (auto_out_ar_bits_lock),
    .io_deq_bits_cache (auto_out_ar_bits_cache),
    .io_deq_bits_prot  (auto_out_ar_bits_prot),
    .io_deq_bits_qos   (auto_out_ar_bits_qos)
  );
  Queue_4 nodeIn_r_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_r_valid),
    .io_enq_bits_id   (auto_out_r_bits_id),
    .io_enq_bits_data (auto_out_r_bits_data),
    .io_enq_bits_resp (auto_out_r_bits_resp),
    .io_enq_bits_last (auto_out_r_bits_last),
    .io_deq_ready     (auto_in_r_ready),
    .io_enq_ready     (auto_out_r_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
endmodule

module Queue_5(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [5:0] io_enq_bits_tl_state_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [5:0] io_deq_bits_tl_state_source
);

  reg  maybe_full;
  wire do_enq = ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_tl_state_size_combMem ram_tl_state_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_size),
    .R0_data (io_deq_bits_tl_state_size)
  );
  ram_tl_state_source_combMem ram_tl_state_source_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_source),
    .R0_data (io_deq_bits_tl_state_source)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = maybe_full;
endmodule

module Queue_6(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [5:0] io_enq_bits_tl_state_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [5:0] io_deq_bits_tl_state_source
);

  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_tl_state_size_combMem_1 ram_tl_state_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_size),
    .R0_data (io_deq_bits_tl_state_size)
  );
  ram_tl_state_source_combMem_1 ram_tl_state_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_source),
    .R0_data (io_deq_bits_tl_state_source)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_8(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [5:0] io_enq_bits_tl_state_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [5:0] io_deq_bits_tl_state_source
);

  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_tl_state_size_combMem_0 ram_tl_state_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_size),
    .R0_data (io_deq_bits_tl_state_size)
  );
  ram_tl_state_source_combMem_0 ram_tl_state_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_source),
    .R0_data (io_deq_bits_tl_state_source)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module AXI4UserYanker(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [5:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [5:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [5:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [5:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  wire       _Queue_11_io_enq_ready;
  wire       _Queue_11_io_deq_valid;
  wire [3:0] _Queue_11_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_11_io_deq_bits_tl_state_source;
  wire       _Queue_10_io_enq_ready;
  wire       _Queue_10_io_deq_valid;
  wire [3:0] _Queue_10_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_10_io_deq_bits_tl_state_source;
  wire       _Queue_9_io_enq_ready;
  wire       _Queue_9_io_deq_valid;
  wire [3:0] _Queue_9_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_9_io_deq_bits_tl_state_source;
  wire       _Queue_8_io_enq_ready;
  wire       _Queue_8_io_deq_valid;
  wire [3:0] _Queue_8_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_8_io_deq_bits_tl_state_source;
  wire       _Queue_7_io_enq_ready;
  wire       _Queue_7_io_deq_valid;
  wire [3:0] _Queue_7_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_7_io_deq_bits_tl_state_source;
  wire       _Queue_6_io_enq_ready;
  wire       _Queue_6_io_deq_valid;
  wire [3:0] _Queue_6_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_6_io_deq_bits_tl_state_source;
  wire       _Queue_5_io_enq_ready;
  wire       _Queue_5_io_deq_valid;
  wire [3:0] _Queue_5_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_5_io_deq_bits_tl_state_source;
  wire       _Queue_4_io_enq_ready;
  wire       _Queue_4_io_deq_valid;
  wire [3:0] _Queue_4_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_4_io_deq_bits_tl_state_source;
  wire       _Queue_3_io_enq_ready;
  wire       _Queue_3_io_deq_valid;
  wire [3:0] _Queue_3_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_3_io_deq_bits_tl_state_source;
  wire       _Queue_2_io_enq_ready;
  wire       _Queue_2_io_deq_valid;
  wire [3:0] _Queue_2_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_2_io_deq_bits_tl_state_source;
  wire       _Queue_1_io_enq_ready;
  wire       _Queue_1_io_deq_valid;
  wire [3:0] _Queue_1_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_1_io_deq_bits_tl_state_source;
  wire       _Queue_io_enq_ready;
  wire       _Queue_io_deq_valid;
  wire [3:0] _Queue_io_deq_bits_tl_state_size;
  wire [5:0] _Queue_io_deq_bits_tl_state_source;
  reg        casez_tmp;
  reg        casez_tmp_0;
  reg  [3:0] casez_tmp_1;
  reg  [5:0] casez_tmp_2;
  reg        casez_tmp_3;
  reg        casez_tmp_4;
  reg  [3:0] casez_tmp_5;
  reg  [5:0] casez_tmp_6;
  always @(*) begin
    casez (auto_in_ar_bits_id)
      4'b0000:
        casez_tmp = _Queue_io_enq_ready;
      4'b0001:
        casez_tmp = _Queue_1_io_enq_ready;
      4'b0010:
        casez_tmp = _Queue_2_io_enq_ready;
      4'b0011:
        casez_tmp = _Queue_3_io_enq_ready;
      4'b0100:
        casez_tmp = _Queue_4_io_enq_ready;
      4'b0101:
        casez_tmp = _Queue_5_io_enq_ready;
      4'b0110:
        casez_tmp = 1'h0;
      4'b0111:
        casez_tmp = 1'h0;
      4'b1000:
        casez_tmp = 1'h0;
      4'b1001:
        casez_tmp = 1'h0;
      4'b1010:
        casez_tmp = 1'h0;
      4'b1011:
        casez_tmp = 1'h0;
      4'b1100:
        casez_tmp = 1'h0;
      4'b1101:
        casez_tmp = 1'h0;
      4'b1110:
        casez_tmp = 1'h0;
      default:
        casez_tmp = 1'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_0 = _Queue_io_deq_valid;
      4'b0001:
        casez_tmp_0 = _Queue_1_io_deq_valid;
      4'b0010:
        casez_tmp_0 = _Queue_2_io_deq_valid;
      4'b0011:
        casez_tmp_0 = _Queue_3_io_deq_valid;
      4'b0100:
        casez_tmp_0 = _Queue_4_io_deq_valid;
      4'b0101:
        casez_tmp_0 = _Queue_5_io_deq_valid;
      4'b0110:
        casez_tmp_0 = 1'h0;
      4'b0111:
        casez_tmp_0 = 1'h0;
      4'b1000:
        casez_tmp_0 = 1'h0;
      4'b1001:
        casez_tmp_0 = 1'h0;
      4'b1010:
        casez_tmp_0 = 1'h0;
      4'b1011:
        casez_tmp_0 = 1'h0;
      4'b1100:
        casez_tmp_0 = 1'h0;
      4'b1101:
        casez_tmp_0 = 1'h0;
      4'b1110:
        casez_tmp_0 = 1'h0;
      default:
        casez_tmp_0 = 1'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_1 = _Queue_io_deq_bits_tl_state_size;
      4'b0001:
        casez_tmp_1 = _Queue_1_io_deq_bits_tl_state_size;
      4'b0010:
        casez_tmp_1 = _Queue_2_io_deq_bits_tl_state_size;
      4'b0011:
        casez_tmp_1 = _Queue_3_io_deq_bits_tl_state_size;
      4'b0100:
        casez_tmp_1 = _Queue_4_io_deq_bits_tl_state_size;
      4'b0101:
        casez_tmp_1 = _Queue_5_io_deq_bits_tl_state_size;
      4'b0110:
        casez_tmp_1 = 4'h0;
      4'b0111:
        casez_tmp_1 = 4'h0;
      4'b1000:
        casez_tmp_1 = 4'h0;
      4'b1001:
        casez_tmp_1 = 4'h0;
      4'b1010:
        casez_tmp_1 = 4'h0;
      4'b1011:
        casez_tmp_1 = 4'h0;
      4'b1100:
        casez_tmp_1 = 4'h0;
      4'b1101:
        casez_tmp_1 = 4'h0;
      4'b1110:
        casez_tmp_1 = 4'h0;
      default:
        casez_tmp_1 = 4'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_2 = _Queue_io_deq_bits_tl_state_source;
      4'b0001:
        casez_tmp_2 = _Queue_1_io_deq_bits_tl_state_source;
      4'b0010:
        casez_tmp_2 = _Queue_2_io_deq_bits_tl_state_source;
      4'b0011:
        casez_tmp_2 = _Queue_3_io_deq_bits_tl_state_source;
      4'b0100:
        casez_tmp_2 = _Queue_4_io_deq_bits_tl_state_source;
      4'b0101:
        casez_tmp_2 = _Queue_5_io_deq_bits_tl_state_source;
      4'b0110:
        casez_tmp_2 = 6'h0;
      4'b0111:
        casez_tmp_2 = 6'h0;
      4'b1000:
        casez_tmp_2 = 6'h0;
      4'b1001:
        casez_tmp_2 = 6'h0;
      4'b1010:
        casez_tmp_2 = 6'h0;
      4'b1011:
        casez_tmp_2 = 6'h0;
      4'b1100:
        casez_tmp_2 = 6'h0;
      4'b1101:
        casez_tmp_2 = 6'h0;
      4'b1110:
        casez_tmp_2 = 6'h0;
      default:
        casez_tmp_2 = 6'h0;
    endcase
  end // always @(*)
  wire       _rqueues_15_deq_ready_T = auto_out_r_valid & auto_in_r_ready;
  wire       _rqueues_15_enq_valid_T = auto_in_ar_valid & auto_out_ar_ready;
  always @(*) begin
    casez (auto_in_aw_bits_id)
      4'b0000:
        casez_tmp_3 = _Queue_6_io_enq_ready;
      4'b0001:
        casez_tmp_3 = _Queue_7_io_enq_ready;
      4'b0010:
        casez_tmp_3 = _Queue_8_io_enq_ready;
      4'b0011:
        casez_tmp_3 = _Queue_9_io_enq_ready;
      4'b0100:
        casez_tmp_3 = _Queue_10_io_enq_ready;
      4'b0101:
        casez_tmp_3 = _Queue_11_io_enq_ready;
      4'b0110:
        casez_tmp_3 = 1'h0;
      4'b0111:
        casez_tmp_3 = 1'h0;
      4'b1000:
        casez_tmp_3 = 1'h0;
      4'b1001:
        casez_tmp_3 = 1'h0;
      4'b1010:
        casez_tmp_3 = 1'h0;
      4'b1011:
        casez_tmp_3 = 1'h0;
      4'b1100:
        casez_tmp_3 = 1'h0;
      4'b1101:
        casez_tmp_3 = 1'h0;
      4'b1110:
        casez_tmp_3 = 1'h0;
      default:
        casez_tmp_3 = 1'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_4 = _Queue_6_io_deq_valid;
      4'b0001:
        casez_tmp_4 = _Queue_7_io_deq_valid;
      4'b0010:
        casez_tmp_4 = _Queue_8_io_deq_valid;
      4'b0011:
        casez_tmp_4 = _Queue_9_io_deq_valid;
      4'b0100:
        casez_tmp_4 = _Queue_10_io_deq_valid;
      4'b0101:
        casez_tmp_4 = _Queue_11_io_deq_valid;
      4'b0110:
        casez_tmp_4 = 1'h0;
      4'b0111:
        casez_tmp_4 = 1'h0;
      4'b1000:
        casez_tmp_4 = 1'h0;
      4'b1001:
        casez_tmp_4 = 1'h0;
      4'b1010:
        casez_tmp_4 = 1'h0;
      4'b1011:
        casez_tmp_4 = 1'h0;
      4'b1100:
        casez_tmp_4 = 1'h0;
      4'b1101:
        casez_tmp_4 = 1'h0;
      4'b1110:
        casez_tmp_4 = 1'h0;
      default:
        casez_tmp_4 = 1'h0;
    endcase
  end // always @(*)
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~auto_out_r_valid | casez_tmp_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:66 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_out_b_valid | casez_tmp_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:95 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_5 = _Queue_6_io_deq_bits_tl_state_size;
      4'b0001:
        casez_tmp_5 = _Queue_7_io_deq_bits_tl_state_size;
      4'b0010:
        casez_tmp_5 = _Queue_8_io_deq_bits_tl_state_size;
      4'b0011:
        casez_tmp_5 = _Queue_9_io_deq_bits_tl_state_size;
      4'b0100:
        casez_tmp_5 = _Queue_10_io_deq_bits_tl_state_size;
      4'b0101:
        casez_tmp_5 = _Queue_11_io_deq_bits_tl_state_size;
      4'b0110:
        casez_tmp_5 = 4'h0;
      4'b0111:
        casez_tmp_5 = 4'h0;
      4'b1000:
        casez_tmp_5 = 4'h0;
      4'b1001:
        casez_tmp_5 = 4'h0;
      4'b1010:
        casez_tmp_5 = 4'h0;
      4'b1011:
        casez_tmp_5 = 4'h0;
      4'b1100:
        casez_tmp_5 = 4'h0;
      4'b1101:
        casez_tmp_5 = 4'h0;
      4'b1110:
        casez_tmp_5 = 4'h0;
      default:
        casez_tmp_5 = 4'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_6 = _Queue_6_io_deq_bits_tl_state_source;
      4'b0001:
        casez_tmp_6 = _Queue_7_io_deq_bits_tl_state_source;
      4'b0010:
        casez_tmp_6 = _Queue_8_io_deq_bits_tl_state_source;
      4'b0011:
        casez_tmp_6 = _Queue_9_io_deq_bits_tl_state_source;
      4'b0100:
        casez_tmp_6 = _Queue_10_io_deq_bits_tl_state_source;
      4'b0101:
        casez_tmp_6 = _Queue_11_io_deq_bits_tl_state_source;
      4'b0110:
        casez_tmp_6 = 6'h0;
      4'b0111:
        casez_tmp_6 = 6'h0;
      4'b1000:
        casez_tmp_6 = 6'h0;
      4'b1001:
        casez_tmp_6 = 6'h0;
      4'b1010:
        casez_tmp_6 = 6'h0;
      4'b1011:
        casez_tmp_6 = 6'h0;
      4'b1100:
        casez_tmp_6 = 6'h0;
      4'b1101:
        casez_tmp_6 = 6'h0;
      4'b1110:
        casez_tmp_6 = 6'h0;
      default:
        casez_tmp_6 = 6'h0;
    endcase
  end // always @(*)
  wire       _wqueues_15_deq_ready_T = auto_out_b_valid & auto_in_b_ready;
  wire       _wqueues_15_enq_valid_T = auto_in_aw_valid & auto_out_aw_ready;
  Queue_5 Queue (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h0 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_io_enq_ready),
    .io_deq_valid                (_Queue_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_io_deq_bits_tl_state_source)
  );
  Queue_6 Queue_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h1 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_1_io_enq_ready),
    .io_deq_valid                (_Queue_1_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_1_io_deq_bits_tl_state_source)
  );
  Queue_6 Queue_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h2 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_2_io_enq_ready),
    .io_deq_valid                (_Queue_2_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_2_io_deq_bits_tl_state_source)
  );
  Queue_8 Queue_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h3 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_3_io_enq_ready),
    .io_deq_valid                (_Queue_3_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_3_io_deq_bits_tl_state_source)
  );
  Queue_5 Queue_4 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h4 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_4_io_enq_ready),
    .io_deq_valid                (_Queue_4_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_4_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_4_io_deq_bits_tl_state_source)
  );
  Queue_5 Queue_5 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_rqueues_15_enq_valid_T & auto_in_ar_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_deq_ready
      (_rqueues_15_deq_ready_T & auto_out_r_bits_id == 4'h5 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_5_io_enq_ready),
    .io_deq_valid                (_Queue_5_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_5_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_5_io_deq_bits_tl_state_source)
  );
  Queue_5 Queue_6 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h0),
    .io_enq_ready                (_Queue_6_io_enq_ready),
    .io_deq_valid                (_Queue_6_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_6_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_6_io_deq_bits_tl_state_source)
  );
  Queue_6 Queue_7 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h1),
    .io_enq_ready                (_Queue_7_io_enq_ready),
    .io_deq_valid                (_Queue_7_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_7_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_7_io_deq_bits_tl_state_source)
  );
  Queue_6 Queue_8 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h2),
    .io_enq_ready                (_Queue_8_io_enq_ready),
    .io_deq_valid                (_Queue_8_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_8_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_8_io_deq_bits_tl_state_source)
  );
  Queue_8 Queue_9 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h3),
    .io_enq_ready                (_Queue_9_io_enq_ready),
    .io_deq_valid                (_Queue_9_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_9_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_9_io_deq_bits_tl_state_source)
  );
  Queue_5 Queue_10 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h4),
    .io_enq_ready                (_Queue_10_io_enq_ready),
    .io_deq_valid                (_Queue_10_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_10_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_10_io_deq_bits_tl_state_source)
  );
  Queue_5 Queue_11 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_wqueues_15_enq_valid_T & auto_in_aw_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_deq_ready                (_wqueues_15_deq_ready_T & auto_out_b_bits_id == 4'h5),
    .io_enq_ready                (_Queue_11_io_enq_ready),
    .io_deq_valid                (_Queue_11_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_11_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_11_io_deq_bits_tl_state_source)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & casez_tmp_3;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = casez_tmp_5;
  assign auto_in_b_bits_echo_tl_state_source = casez_tmp_6;
  assign auto_in_ar_ready = auto_out_ar_ready & casez_tmp;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = casez_tmp_1;
  assign auto_in_r_bits_echo_tl_state_source = casez_tmp_2;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & casez_tmp_3;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & casez_tmp;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue_17(
  input         clock,
                reset,
                io_enq_valid,
  input  [3:0]  io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [5:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
  output [3:0]  io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output [3:0]  io_deq_bits_echo_tl_state_size,
  output [5:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_last
);

  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~(ptr_match & ~maybe_full);
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_tl_state_size_combMem_1 ram_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_data_combMem_1 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_resp_combMem ram_resp_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_resp),
    .R0_data (io_deq_bits_resp)
  );
  ram_tl_state_size_combMem_1 ram_echo_tl_state_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_size),
    .R0_data (io_deq_bits_echo_tl_state_size)
  );
  ram_tl_state_source_combMem_1 ram_echo_tl_state_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_source),
    .R0_data (io_deq_bits_echo_tl_state_source)
  );
  ram_last_combMem_0 ram_last_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (io_deq_bits_last)
  );
  assign io_enq_ready = ~full;
endmodule

module AXI4Deinterleaver(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [5:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [5:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [5:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [5:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [5:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [5:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [5:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [5:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  wire        enq_OH_bools_15;
  wire        enq_OH_bools_14;
  wire        enq_OH_bools_13;
  wire        enq_OH_bools_12;
  wire        enq_OH_bools_11;
  wire        enq_OH_bools_10;
  wire        enq_OH_bools_9;
  wire        enq_OH_bools_8;
  wire        enq_OH_bools_7;
  wire        enq_OH_bools_6;
  wire        _qs_queue_5_io_enq_ready;
  wire [3:0]  _qs_queue_5_io_deq_bits_id;
  wire [63:0] _qs_queue_5_io_deq_bits_data;
  wire [1:0]  _qs_queue_5_io_deq_bits_resp;
  wire [3:0]  _qs_queue_5_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_5_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_5_io_deq_bits_last;
  wire        _qs_queue_4_io_enq_ready;
  wire [3:0]  _qs_queue_4_io_deq_bits_id;
  wire [63:0] _qs_queue_4_io_deq_bits_data;
  wire [1:0]  _qs_queue_4_io_deq_bits_resp;
  wire [3:0]  _qs_queue_4_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_4_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_4_io_deq_bits_last;
  wire        _qs_queue_3_io_enq_ready;
  wire [3:0]  _qs_queue_3_io_deq_bits_id;
  wire [63:0] _qs_queue_3_io_deq_bits_data;
  wire [1:0]  _qs_queue_3_io_deq_bits_resp;
  wire [3:0]  _qs_queue_3_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_3_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_3_io_deq_bits_last;
  wire        _qs_queue_2_io_enq_ready;
  wire [3:0]  _qs_queue_2_io_deq_bits_id;
  wire [63:0] _qs_queue_2_io_deq_bits_data;
  wire [1:0]  _qs_queue_2_io_deq_bits_resp;
  wire [3:0]  _qs_queue_2_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_2_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_2_io_deq_bits_last;
  wire        _qs_queue_1_io_enq_ready;
  wire [3:0]  _qs_queue_1_io_deq_bits_id;
  wire [63:0] _qs_queue_1_io_deq_bits_data;
  wire [1:0]  _qs_queue_1_io_deq_bits_resp;
  wire [3:0]  _qs_queue_1_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_1_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_1_io_deq_bits_last;
  wire        _qs_queue_0_io_enq_ready;
  wire [3:0]  _qs_queue_0_io_deq_bits_id;
  wire [63:0] _qs_queue_0_io_deq_bits_data;
  wire [1:0]  _qs_queue_0_io_deq_bits_resp;
  wire [3:0]  _qs_queue_0_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _qs_queue_0_io_deq_bits_echo_tl_state_source;
  wire        _qs_queue_0_io_deq_bits_last;
  reg  [3:0]  casez_tmp;
  reg  [63:0] casez_tmp_0;
  reg  [1:0]  casez_tmp_1;
  reg  [3:0]  casez_tmp_2;
  reg  [5:0]  casez_tmp_3;
  reg         casez_tmp_4;
  reg         casez_tmp_5;
  reg         locked;
  reg  [3:0]  deq_id;
  reg  [3:0]  pending_count;
  wire        enq_OH_bools_0 = auto_out_r_bits_id == 4'h0;
  wire        _pending_inc_T_16 = casez_tmp_5 & auto_out_r_valid;
  wire        pending_inc = enq_OH_bools_0 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_0 = deq_id == 4'h0;
  wire        _queue_wire_15_deq_ready_T = auto_in_r_ready & locked;
  wire        pending_dec = deq_OH_bools_0 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  reg  [3:0]  pending_count_1;
  wire        enq_OH_bools_1 = auto_out_r_bits_id == 4'h1;
  wire        pending_inc_1 = enq_OH_bools_1 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_1 = deq_id == 4'h1;
  wire        pending_dec_1 = deq_OH_bools_1 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  reg  [3:0]  pending_count_2;
  wire        enq_OH_bools_2 = auto_out_r_bits_id == 4'h2;
  wire        pending_inc_2 = enq_OH_bools_2 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_2 = deq_id == 4'h2;
  wire        pending_dec_2 = deq_OH_bools_2 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  reg  [3:0]  pending_count_3;
  wire        enq_OH_bools_3 = auto_out_r_bits_id == 4'h3;
  wire        pending_inc_3 = enq_OH_bools_3 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_3 = deq_id == 4'h3;
  wire        pending_dec_3 = deq_OH_bools_3 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  reg  [3:0]  pending_count_4;
  wire        enq_OH_bools_4 = auto_out_r_bits_id == 4'h4;
  wire        pending_inc_4 = enq_OH_bools_4 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_4 = deq_id == 4'h4;
  wire        pending_dec_4 = deq_OH_bools_4 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  reg  [3:0]  pending_count_5;
  wire        enq_OH_bools_5 = auto_out_r_bits_id == 4'h5;
  wire        pending_inc_5 = enq_OH_bools_5 & _pending_inc_T_16 & auto_out_r_bits_last;
  wire        deq_OH_bools_5 = deq_id == 4'h5;
  wire        pending_dec_5 = deq_OH_bools_5 & _queue_wire_15_deq_ready_T & casez_tmp_4;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & enq_OH_bools_6 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 6 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_7 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 7 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_8 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 8 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_9 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 9 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_10 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 10 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_11 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 11 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_12 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 12 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_13 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 13 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_14 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 14 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & enq_OH_bools_15 & auto_out_r_valid) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: ID 15 should not be used\n    at Deinterleaver.scala:76 assert(!q.enq.valid, s\"ID ${i} should not be used\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec | (|pending_count))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc | pending_count != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_1 | (|pending_count_1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_1 | pending_count_1 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_2 | (|pending_count_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_2 | pending_count_2 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_3 | (|pending_count_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_3 | pending_count_3 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_4 | (|pending_count_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_4 | pending_count_4 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_dec_5 | (|pending_count_5))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:100 assert (!dec || count =/= 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~pending_inc_5 | pending_count_5 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Deinterleaver.scala:101 assert (!inc || count =/= beats.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp = _qs_queue_0_io_deq_bits_id;
      4'b0001:
        casez_tmp = _qs_queue_1_io_deq_bits_id;
      4'b0010:
        casez_tmp = _qs_queue_2_io_deq_bits_id;
      4'b0011:
        casez_tmp = _qs_queue_3_io_deq_bits_id;
      4'b0100:
        casez_tmp = _qs_queue_4_io_deq_bits_id;
      4'b0101:
        casez_tmp = _qs_queue_5_io_deq_bits_id;
      4'b0110:
        casez_tmp = 4'h0;
      4'b0111:
        casez_tmp = 4'h0;
      4'b1000:
        casez_tmp = 4'h0;
      4'b1001:
        casez_tmp = 4'h0;
      4'b1010:
        casez_tmp = 4'h0;
      4'b1011:
        casez_tmp = 4'h0;
      4'b1100:
        casez_tmp = 4'h0;
      4'b1101:
        casez_tmp = 4'h0;
      4'b1110:
        casez_tmp = 4'h0;
      default:
        casez_tmp = 4'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp_0 = _qs_queue_0_io_deq_bits_data;
      4'b0001:
        casez_tmp_0 = _qs_queue_1_io_deq_bits_data;
      4'b0010:
        casez_tmp_0 = _qs_queue_2_io_deq_bits_data;
      4'b0011:
        casez_tmp_0 = _qs_queue_3_io_deq_bits_data;
      4'b0100:
        casez_tmp_0 = _qs_queue_4_io_deq_bits_data;
      4'b0101:
        casez_tmp_0 = _qs_queue_5_io_deq_bits_data;
      4'b0110:
        casez_tmp_0 = 64'h0;
      4'b0111:
        casez_tmp_0 = 64'h0;
      4'b1000:
        casez_tmp_0 = 64'h0;
      4'b1001:
        casez_tmp_0 = 64'h0;
      4'b1010:
        casez_tmp_0 = 64'h0;
      4'b1011:
        casez_tmp_0 = 64'h0;
      4'b1100:
        casez_tmp_0 = 64'h0;
      4'b1101:
        casez_tmp_0 = 64'h0;
      4'b1110:
        casez_tmp_0 = 64'h0;
      default:
        casez_tmp_0 = 64'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp_1 = _qs_queue_0_io_deq_bits_resp;
      4'b0001:
        casez_tmp_1 = _qs_queue_1_io_deq_bits_resp;
      4'b0010:
        casez_tmp_1 = _qs_queue_2_io_deq_bits_resp;
      4'b0011:
        casez_tmp_1 = _qs_queue_3_io_deq_bits_resp;
      4'b0100:
        casez_tmp_1 = _qs_queue_4_io_deq_bits_resp;
      4'b0101:
        casez_tmp_1 = _qs_queue_5_io_deq_bits_resp;
      4'b0110:
        casez_tmp_1 = 2'h0;
      4'b0111:
        casez_tmp_1 = 2'h0;
      4'b1000:
        casez_tmp_1 = 2'h0;
      4'b1001:
        casez_tmp_1 = 2'h0;
      4'b1010:
        casez_tmp_1 = 2'h0;
      4'b1011:
        casez_tmp_1 = 2'h0;
      4'b1100:
        casez_tmp_1 = 2'h0;
      4'b1101:
        casez_tmp_1 = 2'h0;
      4'b1110:
        casez_tmp_1 = 2'h0;
      default:
        casez_tmp_1 = 2'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp_2 = _qs_queue_0_io_deq_bits_echo_tl_state_size;
      4'b0001:
        casez_tmp_2 = _qs_queue_1_io_deq_bits_echo_tl_state_size;
      4'b0010:
        casez_tmp_2 = _qs_queue_2_io_deq_bits_echo_tl_state_size;
      4'b0011:
        casez_tmp_2 = _qs_queue_3_io_deq_bits_echo_tl_state_size;
      4'b0100:
        casez_tmp_2 = _qs_queue_4_io_deq_bits_echo_tl_state_size;
      4'b0101:
        casez_tmp_2 = _qs_queue_5_io_deq_bits_echo_tl_state_size;
      4'b0110:
        casez_tmp_2 = 4'h0;
      4'b0111:
        casez_tmp_2 = 4'h0;
      4'b1000:
        casez_tmp_2 = 4'h0;
      4'b1001:
        casez_tmp_2 = 4'h0;
      4'b1010:
        casez_tmp_2 = 4'h0;
      4'b1011:
        casez_tmp_2 = 4'h0;
      4'b1100:
        casez_tmp_2 = 4'h0;
      4'b1101:
        casez_tmp_2 = 4'h0;
      4'b1110:
        casez_tmp_2 = 4'h0;
      default:
        casez_tmp_2 = 4'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp_3 = _qs_queue_0_io_deq_bits_echo_tl_state_source;
      4'b0001:
        casez_tmp_3 = _qs_queue_1_io_deq_bits_echo_tl_state_source;
      4'b0010:
        casez_tmp_3 = _qs_queue_2_io_deq_bits_echo_tl_state_source;
      4'b0011:
        casez_tmp_3 = _qs_queue_3_io_deq_bits_echo_tl_state_source;
      4'b0100:
        casez_tmp_3 = _qs_queue_4_io_deq_bits_echo_tl_state_source;
      4'b0101:
        casez_tmp_3 = _qs_queue_5_io_deq_bits_echo_tl_state_source;
      4'b0110:
        casez_tmp_3 = 6'h0;
      4'b0111:
        casez_tmp_3 = 6'h0;
      4'b1000:
        casez_tmp_3 = 6'h0;
      4'b1001:
        casez_tmp_3 = 6'h0;
      4'b1010:
        casez_tmp_3 = 6'h0;
      4'b1011:
        casez_tmp_3 = 6'h0;
      4'b1100:
        casez_tmp_3 = 6'h0;
      4'b1101:
        casez_tmp_3 = 6'h0;
      4'b1110:
        casez_tmp_3 = 6'h0;
      default:
        casez_tmp_3 = 6'h0;
    endcase
  end // always @(*)
  always @(*) begin
    casez (deq_id)
      4'b0000:
        casez_tmp_4 = _qs_queue_0_io_deq_bits_last;
      4'b0001:
        casez_tmp_4 = _qs_queue_1_io_deq_bits_last;
      4'b0010:
        casez_tmp_4 = _qs_queue_2_io_deq_bits_last;
      4'b0011:
        casez_tmp_4 = _qs_queue_3_io_deq_bits_last;
      4'b0100:
        casez_tmp_4 = _qs_queue_4_io_deq_bits_last;
      4'b0101:
        casez_tmp_4 = _qs_queue_5_io_deq_bits_last;
      4'b0110:
        casez_tmp_4 = 1'h0;
      4'b0111:
        casez_tmp_4 = 1'h0;
      4'b1000:
        casez_tmp_4 = 1'h0;
      4'b1001:
        casez_tmp_4 = 1'h0;
      4'b1010:
        casez_tmp_4 = 1'h0;
      4'b1011:
        casez_tmp_4 = 1'h0;
      4'b1100:
        casez_tmp_4 = 1'h0;
      4'b1101:
        casez_tmp_4 = 1'h0;
      4'b1110:
        casez_tmp_4 = 1'h0;
      default:
        casez_tmp_4 = 1'h0;
    endcase
  end // always @(*)
  assign enq_OH_bools_6 = auto_out_r_bits_id == 4'h6;
  assign enq_OH_bools_7 = auto_out_r_bits_id == 4'h7;
  assign enq_OH_bools_8 = auto_out_r_bits_id == 4'h8;
  assign enq_OH_bools_9 = auto_out_r_bits_id == 4'h9;
  assign enq_OH_bools_10 = auto_out_r_bits_id == 4'hA;
  assign enq_OH_bools_11 = auto_out_r_bits_id == 4'hB;
  assign enq_OH_bools_12 = auto_out_r_bits_id == 4'hC;
  assign enq_OH_bools_13 = auto_out_r_bits_id == 4'hD;
  assign enq_OH_bools_14 = auto_out_r_bits_id == 4'hE;
  assign enq_OH_bools_15 = &auto_out_r_bits_id;
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_5 = _qs_queue_0_io_enq_ready;
      4'b0001:
        casez_tmp_5 = _qs_queue_1_io_enq_ready;
      4'b0010:
        casez_tmp_5 = _qs_queue_2_io_enq_ready;
      4'b0011:
        casez_tmp_5 = _qs_queue_3_io_enq_ready;
      4'b0100:
        casez_tmp_5 = _qs_queue_4_io_enq_ready;
      4'b0101:
        casez_tmp_5 = _qs_queue_5_io_enq_ready;
      4'b0110:
        casez_tmp_5 = 1'h0;
      4'b0111:
        casez_tmp_5 = 1'h0;
      4'b1000:
        casez_tmp_5 = 1'h0;
      4'b1001:
        casez_tmp_5 = 1'h0;
      4'b1010:
        casez_tmp_5 = 1'h0;
      4'b1011:
        casez_tmp_5 = 1'h0;
      4'b1100:
        casez_tmp_5 = 1'h0;
      4'b1101:
        casez_tmp_5 = 1'h0;
      4'b1110:
        casez_tmp_5 = 1'h0;
      default:
        casez_tmp_5 = 1'h0;
    endcase
  end // always @(*)
  wire [3:0]  pending_next = pending_count + {3'h0, pending_inc} - {3'h0, pending_dec};
  wire [3:0]  pending_next_1 =
    pending_count_1 + {3'h0, pending_inc_1} - {3'h0, pending_dec_1};
  wire [3:0]  pending_next_2 =
    pending_count_2 + {3'h0, pending_inc_2} - {3'h0, pending_dec_2};
  wire [3:0]  pending_next_3 =
    pending_count_3 + {3'h0, pending_inc_3} - {3'h0, pending_dec_3};
  wire [3:0]  pending_next_4 =
    pending_count_4 + {3'h0, pending_inc_4} - {3'h0, pending_dec_4};
  wire [3:0]  pending_next_5 =
    pending_count_5 + {3'h0, pending_inc_5} - {3'h0, pending_dec_5};
  wire        _T_3 = ~locked | _queue_wire_15_deq_ready_T & casez_tmp_4;
  wire        _GEN = (|pending_next_4) | (|pending_next_3);
  wire        _GEN_0 = (|pending_next_3) | (|pending_next_2);
  wire        _GEN_1 = (|pending_next_2) | (|pending_next_1);
  wire        _GEN_2 = (|pending_next_1) | (|pending_next);
  wire        _GEN_3 = _GEN_1 | (|pending_next);
  wire [6:0]  _GEN_4 =
    {2'h0,
     |pending_next_5,
     |pending_next_4,
     |pending_next_3,
     |pending_next_2,
     |pending_next_1}
    & {~((|pending_next_5) | _GEN | _GEN_3),
       ~((|pending_next_5) | (|pending_next_4) | _GEN_0 | _GEN_2),
       ~(_GEN | _GEN_1 | (|pending_next)),
       ~(_GEN_0 | _GEN_2),
       ~_GEN_3,
       ~_GEN_2,
       ~(|pending_next)};
  wire [2:0]  _GEN_5 = _GEN_4[6:4] | _GEN_4[2:0];
  always @(posedge clock) begin
    if (reset) begin
      locked <= 1'h0;
      pending_count <= 4'h0;
      pending_count_1 <= 4'h0;
      pending_count_2 <= 4'h0;
      pending_count_3 <= 4'h0;
      pending_count_4 <= 4'h0;
      pending_count_5 <= 4'h0;
    end
    else begin
      if (_T_3)
        locked <=
          |{|pending_next_5,
            |pending_next_4,
            |pending_next_3,
            |pending_next_2,
            |pending_next_1,
            |pending_next};
      pending_count <= pending_next;
      pending_count_1 <= pending_next_1;
      pending_count_2 <= pending_next_2;
      pending_count_3 <= pending_next_3;
      pending_count_4 <= pending_next_4;
      pending_count_5 <= pending_next_5;
    end
    if (_T_3)
      deq_id <= {1'h0, |(_GEN_4[6:3]), |(_GEN_5[2:1]), _GEN_5[2] | _GEN_5[0]};
  end // always @(posedge)
  Queue_17 qs_queue_0 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_0 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_0 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_0_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_0_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_0_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_0_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_0_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_0_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_0_io_deq_bits_last)
  );
  Queue_17 qs_queue_1 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_1 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_1 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_1_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_1_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_1_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_1_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_1_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_1_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_1_io_deq_bits_last)
  );
  Queue_17 qs_queue_2 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_2 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_2 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_2_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_2_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_2_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_2_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_2_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_2_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_2_io_deq_bits_last)
  );
  Queue_17 qs_queue_3 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_3 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_3 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_3_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_3_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_3_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_3_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_3_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_3_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_3_io_deq_bits_last)
  );
  Queue_17 qs_queue_4 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_4 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_4 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_4_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_4_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_4_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_4_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_4_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_4_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_4_io_deq_bits_last)
  );
  Queue_17 qs_queue_5 (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (enq_OH_bools_5 & auto_out_r_valid),
    .io_enq_bits_id                   (auto_out_r_bits_id),
    .io_enq_bits_data                 (auto_out_r_bits_data),
    .io_enq_bits_resp                 (auto_out_r_bits_resp),
    .io_enq_bits_echo_tl_state_size   (auto_out_r_bits_echo_tl_state_size),
    .io_enq_bits_echo_tl_state_source (auto_out_r_bits_echo_tl_state_source),
    .io_enq_bits_last                 (auto_out_r_bits_last),
    .io_deq_ready                     (deq_OH_bools_5 & _queue_wire_15_deq_ready_T),
    .io_enq_ready                     (_qs_queue_5_io_enq_ready),
    .io_deq_bits_id                   (_qs_queue_5_io_deq_bits_id),
    .io_deq_bits_data                 (_qs_queue_5_io_deq_bits_data),
    .io_deq_bits_resp                 (_qs_queue_5_io_deq_bits_resp),
    .io_deq_bits_echo_tl_state_size   (_qs_queue_5_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_qs_queue_5_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_last                 (_qs_queue_5_io_deq_bits_last)
  );
  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = auto_out_b_bits_echo_tl_state_size;
  assign auto_in_b_bits_echo_tl_state_source = auto_out_b_bits_echo_tl_state_source;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = locked;
  assign auto_in_r_bits_id = casez_tmp;
  assign auto_in_r_bits_data = casez_tmp_0;
  assign auto_in_r_bits_resp = casez_tmp_1;
  assign auto_in_r_bits_echo_tl_state_size = casez_tmp_2;
  assign auto_in_r_bits_echo_tl_state_source = casez_tmp_3;
  assign auto_in_r_bits_last = casez_tmp_4;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size = auto_in_aw_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source = auto_in_aw_bits_echo_tl_state_source;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size = auto_in_ar_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source = auto_in_ar_bits_echo_tl_state_source;
  assign auto_out_r_ready = casez_tmp_5;
endmodule

module AXI4IdIndexer(
  input         auto_in_aw_valid,
  input  [2:0]  auto_in_aw_bits_id,
  input  [30:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [5:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [2:0]  auto_in_ar_bits_id,
  input  [30:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [5:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [5:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [5:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [2:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [5:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [2:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [5:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [5:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [5:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id[2:0];
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = auto_out_b_bits_echo_tl_state_size;
  assign auto_in_b_bits_echo_tl_state_source = auto_out_b_bits_echo_tl_state_source;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id[2:0];
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = auto_out_r_bits_echo_tl_state_size;
  assign auto_in_r_bits_echo_tl_state_source = auto_out_r_bits_echo_tl_state_source;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = {1'h0, auto_in_aw_bits_id};
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size = auto_in_aw_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source = auto_in_aw_bits_echo_tl_state_source;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = {1'h0, auto_in_ar_bits_id};
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size = auto_in_ar_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source = auto_in_ar_bits_echo_tl_state_source;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue_23(
  input         clock,
                reset,
                io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);

  wire _io_enq_ready_output;
  reg  maybe_full;
  wire do_enq = _io_enq_ready_output & io_enq_valid;
  assign _io_enq_ready_output = io_deq_ready | ~maybe_full;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_data_combMem ram_data_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_strb_combMem ram_strb_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_strb),
    .R0_data (io_deq_bits_strb)
  );
  ram_last_combMem ram_last_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (io_deq_bits_last)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = maybe_full;
endmodule

module Queue_24(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_id,
  input  [30:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
                io_enq_bits_prot,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [5:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_wen,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_id,
  output [30:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos,
                io_deq_bits_echo_tl_state_size,
  output [5:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_wen
);

  wire _io_enq_ready_output;
  reg  maybe_full;
  wire do_enq = _io_enq_ready_output & io_enq_valid;
  assign _io_enq_ready_output = io_deq_ready | ~maybe_full;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_id_combMem ram_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_addr_combMem ram_addr_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_addr),
    .R0_data (io_deq_bits_addr)
  );
  ram_strb_combMem ram_len_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_len),
    .R0_data (io_deq_bits_len)
  );
  ram_id_combMem ram_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem ram_burst_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (2'h1),
    .R0_data (io_deq_bits_burst)
  );
  ram_last_combMem ram_lock_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (1'h0),
    .R0_data (io_deq_bits_lock)
  );
  ram_tl_state_size_combMem ram_cache_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (4'h0),
    .R0_data (io_deq_bits_cache)
  );
  ram_id_combMem ram_prot_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_prot),
    .R0_data (io_deq_bits_prot)
  );
  ram_tl_state_size_combMem ram_qos_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (4'h0),
    .R0_data (io_deq_bits_qos)
  );
  ram_tl_state_size_combMem ram_echo_tl_state_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_size),
    .R0_data (io_deq_bits_echo_tl_state_size)
  );
  ram_tl_state_source_combMem ram_echo_tl_state_source_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_source),
    .R0_data (io_deq_bits_echo_tl_state_source)
  );
  ram_last_combMem ram_wen_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_wen),
    .R0_data (io_deq_bits_wen)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = maybe_full;
endmodule

module TLToAXI4(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [30:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [2:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [5:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [2:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [5:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_aw_valid,
  output [2:0]  auto_out_aw_bits_id,
  output [30:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [5:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [2:0]  auto_out_ar_bits_id,
  output [30:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [5:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  reg         count_6;
  reg         count_5;
  reg         write_3;
  reg  [2:0]  count_4;
  reg         write_2;
  reg  [3:0]  count_3;
  reg         write_1;
  reg  [3:0]  count_2;
  reg         count_1;
  wire        _queue_arw_deq_q_io_enq_ready;
  wire        _queue_arw_deq_q_io_deq_valid;
  wire [2:0]  _queue_arw_deq_q_io_deq_bits_id;
  wire [30:0] _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]  _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]  _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]  _queue_arw_deq_q_io_deq_bits_burst;
  wire        _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]  _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [5:0]  _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire        _queue_arw_deq_q_io_deq_bits_wen;
  wire        _nodeOut_w_deq_q_io_enq_ready;
  reg  [2:0]  casez_tmp;
  reg         casez_tmp_0;
  wire [22:0] _beats1_decode_T_1 = 23'hFF << auto_in_a_bits_size;
  reg  [4:0]  counter;
  wire        a_first = counter == 5'h0;
  wire        out_w_bits_last =
    counter == 5'h1
    | (auto_in_a_bits_opcode[2] ? 5'h0 : ~(_beats1_decode_T_1[7:3])) == 5'h0;
  reg         doneAW;
  always @(*) begin
    casez (auto_in_a_bits_source)
      6'b000000:
        casez_tmp = 3'h1;
      6'b000001:
        casez_tmp = 3'h1;
      6'b000010:
        casez_tmp = 3'h1;
      6'b000011:
        casez_tmp = 3'h1;
      6'b000100:
        casez_tmp = 3'h1;
      6'b000101:
        casez_tmp = 3'h1;
      6'b000110:
        casez_tmp = 3'h1;
      6'b000111:
        casez_tmp = 3'h1;
      6'b001000:
        casez_tmp = 3'h2;
      6'b001001:
        casez_tmp = 3'h2;
      6'b001010:
        casez_tmp = 3'h2;
      6'b001011:
        casez_tmp = 3'h2;
      6'b001100:
        casez_tmp = 3'h2;
      6'b001101:
        casez_tmp = 3'h2;
      6'b001110:
        casez_tmp = 3'h2;
      6'b001111:
        casez_tmp = 3'h2;
      6'b010000:
        casez_tmp = 3'h3;
      6'b010001:
        casez_tmp = 3'h3;
      6'b010010:
        casez_tmp = 3'h3;
      6'b010011:
        casez_tmp = 3'h3;
      6'b010100:
        casez_tmp = 3'h0;
      6'b010101:
        casez_tmp = 3'h0;
      6'b010110:
        casez_tmp = 3'h0;
      6'b010111:
        casez_tmp = 3'h0;
      6'b011000:
        casez_tmp = 3'h0;
      6'b011001:
        casez_tmp = 3'h0;
      6'b011010:
        casez_tmp = 3'h0;
      6'b011011:
        casez_tmp = 3'h0;
      6'b011100:
        casez_tmp = 3'h0;
      6'b011101:
        casez_tmp = 3'h0;
      6'b011110:
        casez_tmp = 3'h0;
      6'b011111:
        casez_tmp = 3'h0;
      6'b100000:
        casez_tmp = 3'h5;
      6'b100001:
        casez_tmp = 3'h4;
      6'b100010:
        casez_tmp = 3'h0;
      6'b100011:
        casez_tmp = 3'h1;
      6'b100100:
        casez_tmp = 3'h1;
      6'b100101:
        casez_tmp = 3'h1;
      6'b100110:
        casez_tmp = 3'h1;
      6'b100111:
        casez_tmp = 3'h1;
      6'b101000:
        casez_tmp = 3'h1;
      6'b101001:
        casez_tmp = 3'h1;
      6'b101010:
        casez_tmp = 3'h1;
      6'b101011:
        casez_tmp = 3'h1;
      6'b101100:
        casez_tmp = 3'h1;
      6'b101101:
        casez_tmp = 3'h1;
      6'b101110:
        casez_tmp = 3'h1;
      6'b101111:
        casez_tmp = 3'h1;
      6'b110000:
        casez_tmp = 3'h1;
      6'b110001:
        casez_tmp = 3'h1;
      6'b110010:
        casez_tmp = 3'h1;
      6'b110011:
        casez_tmp = 3'h1;
      6'b110100:
        casez_tmp = 3'h1;
      6'b110101:
        casez_tmp = 3'h1;
      6'b110110:
        casez_tmp = 3'h1;
      6'b110111:
        casez_tmp = 3'h1;
      6'b111000:
        casez_tmp = 3'h1;
      6'b111001:
        casez_tmp = 3'h1;
      6'b111010:
        casez_tmp = 3'h1;
      6'b111011:
        casez_tmp = 3'h1;
      6'b111100:
        casez_tmp = 3'h1;
      6'b111101:
        casez_tmp = 3'h1;
      6'b111110:
        casez_tmp = 3'h1;
      default:
        casez_tmp = 3'h1;
    endcase
  end // always @(*)
  wire [25:0] _out_arw_bits_len_T_1 = 26'h7FF << auto_in_a_bits_size;
  wire        idStall_1 =
    (|count_2) & write_1 != ~(auto_in_a_bits_opcode[2]) | count_2 == 4'h8;
  wire        idStall_2 =
    (|count_3) & write_2 != ~(auto_in_a_bits_opcode[2]) | count_3 == 4'h8;
  wire        idStall_3 =
    (|count_4) & write_3 != ~(auto_in_a_bits_opcode[2]) | count_4 == 3'h4;
  always @(*) begin
    casez (auto_in_a_bits_source)
      6'b000000:
        casez_tmp_0 = idStall_1;
      6'b000001:
        casez_tmp_0 = idStall_1;
      6'b000010:
        casez_tmp_0 = idStall_1;
      6'b000011:
        casez_tmp_0 = idStall_1;
      6'b000100:
        casez_tmp_0 = idStall_1;
      6'b000101:
        casez_tmp_0 = idStall_1;
      6'b000110:
        casez_tmp_0 = idStall_1;
      6'b000111:
        casez_tmp_0 = idStall_1;
      6'b001000:
        casez_tmp_0 = idStall_2;
      6'b001001:
        casez_tmp_0 = idStall_2;
      6'b001010:
        casez_tmp_0 = idStall_2;
      6'b001011:
        casez_tmp_0 = idStall_2;
      6'b001100:
        casez_tmp_0 = idStall_2;
      6'b001101:
        casez_tmp_0 = idStall_2;
      6'b001110:
        casez_tmp_0 = idStall_2;
      6'b001111:
        casez_tmp_0 = idStall_2;
      6'b010000:
        casez_tmp_0 = idStall_3;
      6'b010001:
        casez_tmp_0 = idStall_3;
      6'b010010:
        casez_tmp_0 = idStall_3;
      6'b010011:
        casez_tmp_0 = idStall_3;
      6'b010100:
        casez_tmp_0 = 1'h0;
      6'b010101:
        casez_tmp_0 = 1'h0;
      6'b010110:
        casez_tmp_0 = 1'h0;
      6'b010111:
        casez_tmp_0 = 1'h0;
      6'b011000:
        casez_tmp_0 = 1'h0;
      6'b011001:
        casez_tmp_0 = 1'h0;
      6'b011010:
        casez_tmp_0 = 1'h0;
      6'b011011:
        casez_tmp_0 = 1'h0;
      6'b011100:
        casez_tmp_0 = 1'h0;
      6'b011101:
        casez_tmp_0 = 1'h0;
      6'b011110:
        casez_tmp_0 = 1'h0;
      6'b011111:
        casez_tmp_0 = 1'h0;
      6'b100000:
        casez_tmp_0 = count_6;
      6'b100001:
        casez_tmp_0 = count_5;
      6'b100010:
        casez_tmp_0 = count_1;
      6'b100011:
        casez_tmp_0 = idStall_1;
      6'b100100:
        casez_tmp_0 = idStall_1;
      6'b100101:
        casez_tmp_0 = idStall_1;
      6'b100110:
        casez_tmp_0 = idStall_1;
      6'b100111:
        casez_tmp_0 = idStall_1;
      6'b101000:
        casez_tmp_0 = idStall_1;
      6'b101001:
        casez_tmp_0 = idStall_1;
      6'b101010:
        casez_tmp_0 = idStall_1;
      6'b101011:
        casez_tmp_0 = idStall_1;
      6'b101100:
        casez_tmp_0 = idStall_1;
      6'b101101:
        casez_tmp_0 = idStall_1;
      6'b101110:
        casez_tmp_0 = idStall_1;
      6'b101111:
        casez_tmp_0 = idStall_1;
      6'b110000:
        casez_tmp_0 = idStall_1;
      6'b110001:
        casez_tmp_0 = idStall_1;
      6'b110010:
        casez_tmp_0 = idStall_1;
      6'b110011:
        casez_tmp_0 = idStall_1;
      6'b110100:
        casez_tmp_0 = idStall_1;
      6'b110101:
        casez_tmp_0 = idStall_1;
      6'b110110:
        casez_tmp_0 = idStall_1;
      6'b110111:
        casez_tmp_0 = idStall_1;
      6'b111000:
        casez_tmp_0 = idStall_1;
      6'b111001:
        casez_tmp_0 = idStall_1;
      6'b111010:
        casez_tmp_0 = idStall_1;
      6'b111011:
        casez_tmp_0 = idStall_1;
      6'b111100:
        casez_tmp_0 = idStall_1;
      6'b111101:
        casez_tmp_0 = idStall_1;
      6'b111110:
        casez_tmp_0 = idStall_1;
      default:
        casez_tmp_0 = idStall_1;
    endcase
  end // always @(*)
  wire        stall = casez_tmp_0 & a_first;
  wire        _out_w_valid_T_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire        nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _out_w_valid_T_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire        out_arw_valid =
    ~stall & auto_in_a_valid
    & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg         r_holds_d;
  reg  [2:0]  b_delay;
  wire        r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire        nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire        nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire        nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg         r_first;
  reg         r_denied_r;
  wire        r_d_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [2:0]  d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire        d_last = ~r_wins | auto_out_r_bits_last;
  wire        _inc_T_5 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire        inc = casez_tmp == 3'h0 & _inc_T_5;
  wire        _dec_T_11 = auto_in_d_ready & nodeIn_d_valid;
  wire        dec = d_sel_shiftAmount == 3'h0 & d_last & _dec_T_11;
  wire        inc_1 = casez_tmp == 3'h1 & _inc_T_5;
  wire        dec_1 = d_sel_shiftAmount == 3'h1 & d_last & _dec_T_11;
  wire        inc_2 = casez_tmp == 3'h2 & _inc_T_5;
  wire        dec_2 = d_sel_shiftAmount == 3'h2 & d_last & _dec_T_11;
  wire        inc_3 = casez_tmp == 3'h3 & _inc_T_5;
  wire        dec_3 = d_sel_shiftAmount == 3'h3 & d_last & _dec_T_11;
  wire        inc_4 = casez_tmp == 3'h4 & _inc_T_5;
  wire        dec_4 = d_sel_shiftAmount == 3'h4 & d_last & _dec_T_11;
  wire        inc_5 = casez_tmp == 3'h5 & _inc_T_5;
  wire        dec_5 = d_sel_shiftAmount == 3'h5 & d_last & _dec_T_11;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~dec | count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc | ~count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_1 | (|count_2))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_1 | count_2 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_2 | (|count_3))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_2 | count_3 != 4'h8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_3 | (|count_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_3 | count_4 != 3'h4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_4 | count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_4 | ~count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_5 | count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_5 | ~count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      counter <= 5'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count_1 <= 1'h0;
      count_2 <= 4'h0;
      count_3 <= 4'h0;
      count_4 <= 3'h0;
      count_5 <= 1'h0;
      count_6 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            counter <= 5'h0;
          else
            counter <= ~(_beats1_decode_T_1[7:3]);
        end
        else
          counter <= counter - 5'h1;
        doneAW <= ~out_w_bits_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count_1 <= count_1 + inc - dec;
      count_2 <= count_2 + {3'h0, inc_1} - {3'h0, dec_1};
      count_3 <= count_3 + {3'h0, inc_2} - {3'h0, dec_2};
      count_4 <= count_4 + {2'h0, inc_3} - {2'h0, dec_3};
      count_5 <= count_5 + inc_4 - dec_4;
      count_6 <= count_6 + inc_5 - dec_5;
    end
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= b_delay + 3'h1;
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
    if (inc_1)
      write_1 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_2)
      write_2 <= ~(auto_in_a_bits_opcode[2]);
    if (inc_3)
      write_3 <= ~(auto_in_a_bits_opcode[2]);
  end // always @(posedge)
  Queue_23 nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid
      (~stall & auto_in_a_valid & ~(auto_in_a_bits_opcode[2]) & _out_w_valid_T_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (out_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue_24 queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (casez_tmp),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_out_arw_bits_len_T_1[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 4'h2 ? 3'h3 : auto_in_a_bits_size[2:0]),
    .io_enq_bits_prot                 (3'h2),
    .io_enq_bits_echo_tl_state_size   (auto_in_a_bits_size),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = {2'h0, r_wins};
  assign auto_in_d_bits_size =
    r_wins ? auto_out_r_bits_echo_tl_state_size : auto_out_b_bits_echo_tl_state_size;
  assign auto_in_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  assign auto_in_d_bits_denied = r_wins ? r_d_denied : (|auto_out_b_bits_resp);
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = r_wins & ((|auto_out_r_bits_resp) | r_d_denied);
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

module TLInterconnectCoupler_4(
  input         clock,
                reset,
                auto_axi4buf_out_aw_ready,
                auto_axi4buf_out_w_ready,
                auto_axi4buf_out_b_valid,
  input  [3:0]  auto_axi4buf_out_b_bits_id,
  input  [1:0]  auto_axi4buf_out_b_bits_resp,
  input         auto_axi4buf_out_ar_ready,
                auto_axi4buf_out_r_valid,
  input  [3:0]  auto_axi4buf_out_r_bits_id,
  input  [63:0] auto_axi4buf_out_r_bits_data,
  input  [1:0]  auto_axi4buf_out_r_bits_resp,
  input         auto_axi4buf_out_r_bits_last,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
  input  [3:0]  auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [30:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
  output        auto_axi4buf_out_aw_valid,
  output [3:0]  auto_axi4buf_out_aw_bits_id,
  output [30:0] auto_axi4buf_out_aw_bits_addr,
  output [7:0]  auto_axi4buf_out_aw_bits_len,
  output [2:0]  auto_axi4buf_out_aw_bits_size,
  output [1:0]  auto_axi4buf_out_aw_bits_burst,
  output        auto_axi4buf_out_aw_bits_lock,
  output [3:0]  auto_axi4buf_out_aw_bits_cache,
  output [2:0]  auto_axi4buf_out_aw_bits_prot,
  output [3:0]  auto_axi4buf_out_aw_bits_qos,
  output        auto_axi4buf_out_w_valid,
  output [63:0] auto_axi4buf_out_w_bits_data,
  output [7:0]  auto_axi4buf_out_w_bits_strb,
  output        auto_axi4buf_out_w_bits_last,
                auto_axi4buf_out_b_ready,
                auto_axi4buf_out_ar_valid,
  output [3:0]  auto_axi4buf_out_ar_bits_id,
  output [30:0] auto_axi4buf_out_ar_bits_addr,
  output [7:0]  auto_axi4buf_out_ar_bits_len,
  output [2:0]  auto_axi4buf_out_ar_bits_size,
  output [1:0]  auto_axi4buf_out_ar_bits_burst,
  output        auto_axi4buf_out_ar_bits_lock,
  output [3:0]  auto_axi4buf_out_ar_bits_cache,
  output [2:0]  auto_axi4buf_out_ar_bits_prot,
  output [3:0]  auto_axi4buf_out_ar_bits_qos,
  output        auto_axi4buf_out_r_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
  output [3:0]  auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output        auto_tl_in_d_bits_denied,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_tl_in_d_bits_corrupt
);

  wire        _tl2axi4_auto_out_aw_valid;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_id;
  wire [30:0] _tl2axi4_auto_out_aw_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_len;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_size;
  wire [1:0]  _tl2axi4_auto_out_aw_bits_burst;
  wire        _tl2axi4_auto_out_aw_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_size;
  wire [5:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_w_valid;
  wire [63:0] _tl2axi4_auto_out_w_bits_data;
  wire [7:0]  _tl2axi4_auto_out_w_bits_strb;
  wire        _tl2axi4_auto_out_w_bits_last;
  wire        _tl2axi4_auto_out_b_ready;
  wire        _tl2axi4_auto_out_ar_valid;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_id;
  wire [30:0] _tl2axi4_auto_out_ar_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_len;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_size;
  wire [1:0]  _tl2axi4_auto_out_ar_bits_burst;
  wire        _tl2axi4_auto_out_ar_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_size;
  wire [5:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_r_ready;
  wire        _axi4index_auto_in_aw_ready;
  wire        _axi4index_auto_in_w_ready;
  wire        _axi4index_auto_in_b_valid;
  wire [2:0]  _axi4index_auto_in_b_bits_id;
  wire [1:0]  _axi4index_auto_in_b_bits_resp;
  wire [3:0]  _axi4index_auto_in_b_bits_echo_tl_state_size;
  wire [5:0]  _axi4index_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_ar_ready;
  wire        _axi4index_auto_in_r_valid;
  wire [2:0]  _axi4index_auto_in_r_bits_id;
  wire [63:0] _axi4index_auto_in_r_bits_data;
  wire [1:0]  _axi4index_auto_in_r_bits_resp;
  wire [3:0]  _axi4index_auto_in_r_bits_echo_tl_state_size;
  wire [5:0]  _axi4index_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_r_bits_last;
  wire        _axi4index_auto_out_aw_valid;
  wire [3:0]  _axi4index_auto_out_aw_bits_id;
  wire [30:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire        _axi4index_auto_out_aw_bits_lock;
  wire [3:0]  _axi4index_auto_out_aw_bits_cache;
  wire [2:0]  _axi4index_auto_out_aw_bits_prot;
  wire [3:0]  _axi4index_auto_out_aw_bits_qos;
  wire [3:0]  _axi4index_auto_out_aw_bits_echo_tl_state_size;
  wire [5:0]  _axi4index_auto_out_aw_bits_echo_tl_state_source;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire [3:0]  _axi4index_auto_out_ar_bits_id;
  wire [30:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire        _axi4index_auto_out_ar_bits_lock;
  wire [3:0]  _axi4index_auto_out_ar_bits_cache;
  wire [2:0]  _axi4index_auto_out_ar_bits_prot;
  wire [3:0]  _axi4index_auto_out_ar_bits_qos;
  wire [3:0]  _axi4index_auto_out_ar_bits_echo_tl_state_size;
  wire [5:0]  _axi4index_auto_out_ar_bits_echo_tl_state_source;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4deint_auto_in_aw_ready;
  wire        _axi4deint_auto_in_w_ready;
  wire        _axi4deint_auto_in_b_valid;
  wire [3:0]  _axi4deint_auto_in_b_bits_id;
  wire [1:0]  _axi4deint_auto_in_b_bits_resp;
  wire [3:0]  _axi4deint_auto_in_b_bits_echo_tl_state_size;
  wire [5:0]  _axi4deint_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4deint_auto_in_ar_ready;
  wire        _axi4deint_auto_in_r_valid;
  wire [3:0]  _axi4deint_auto_in_r_bits_id;
  wire [63:0] _axi4deint_auto_in_r_bits_data;
  wire [1:0]  _axi4deint_auto_in_r_bits_resp;
  wire [3:0]  _axi4deint_auto_in_r_bits_echo_tl_state_size;
  wire [5:0]  _axi4deint_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4deint_auto_in_r_bits_last;
  wire        _axi4deint_auto_out_aw_valid;
  wire [3:0]  _axi4deint_auto_out_aw_bits_id;
  wire [30:0] _axi4deint_auto_out_aw_bits_addr;
  wire [7:0]  _axi4deint_auto_out_aw_bits_len;
  wire [2:0]  _axi4deint_auto_out_aw_bits_size;
  wire [1:0]  _axi4deint_auto_out_aw_bits_burst;
  wire        _axi4deint_auto_out_aw_bits_lock;
  wire [3:0]  _axi4deint_auto_out_aw_bits_cache;
  wire [2:0]  _axi4deint_auto_out_aw_bits_prot;
  wire [3:0]  _axi4deint_auto_out_aw_bits_qos;
  wire [3:0]  _axi4deint_auto_out_aw_bits_echo_tl_state_size;
  wire [5:0]  _axi4deint_auto_out_aw_bits_echo_tl_state_source;
  wire        _axi4deint_auto_out_w_valid;
  wire [63:0] _axi4deint_auto_out_w_bits_data;
  wire [7:0]  _axi4deint_auto_out_w_bits_strb;
  wire        _axi4deint_auto_out_w_bits_last;
  wire        _axi4deint_auto_out_b_ready;
  wire        _axi4deint_auto_out_ar_valid;
  wire [3:0]  _axi4deint_auto_out_ar_bits_id;
  wire [30:0] _axi4deint_auto_out_ar_bits_addr;
  wire [7:0]  _axi4deint_auto_out_ar_bits_len;
  wire [2:0]  _axi4deint_auto_out_ar_bits_size;
  wire [1:0]  _axi4deint_auto_out_ar_bits_burst;
  wire        _axi4deint_auto_out_ar_bits_lock;
  wire [3:0]  _axi4deint_auto_out_ar_bits_cache;
  wire [2:0]  _axi4deint_auto_out_ar_bits_prot;
  wire [3:0]  _axi4deint_auto_out_ar_bits_qos;
  wire [3:0]  _axi4deint_auto_out_ar_bits_echo_tl_state_size;
  wire [5:0]  _axi4deint_auto_out_ar_bits_echo_tl_state_source;
  wire        _axi4deint_auto_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire [3:0]  _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [3:0]  _axi4yank_auto_in_b_bits_echo_tl_state_size;
  wire [5:0]  _axi4yank_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire [3:0]  _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [3:0]  _axi4yank_auto_in_r_bits_echo_tl_state_size;
  wire [5:0]  _axi4yank_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4yank_auto_in_r_bits_last;
  wire        _axi4yank_auto_out_aw_valid;
  wire [3:0]  _axi4yank_auto_out_aw_bits_id;
  wire [30:0] _axi4yank_auto_out_aw_bits_addr;
  wire [7:0]  _axi4yank_auto_out_aw_bits_len;
  wire [2:0]  _axi4yank_auto_out_aw_bits_size;
  wire [1:0]  _axi4yank_auto_out_aw_bits_burst;
  wire        _axi4yank_auto_out_aw_bits_lock;
  wire [3:0]  _axi4yank_auto_out_aw_bits_cache;
  wire [2:0]  _axi4yank_auto_out_aw_bits_prot;
  wire [3:0]  _axi4yank_auto_out_aw_bits_qos;
  wire        _axi4yank_auto_out_w_valid;
  wire [63:0] _axi4yank_auto_out_w_bits_data;
  wire [7:0]  _axi4yank_auto_out_w_bits_strb;
  wire        _axi4yank_auto_out_w_bits_last;
  wire        _axi4yank_auto_out_b_ready;
  wire        _axi4yank_auto_out_ar_valid;
  wire [3:0]  _axi4yank_auto_out_ar_bits_id;
  wire [30:0] _axi4yank_auto_out_ar_bits_addr;
  wire [7:0]  _axi4yank_auto_out_ar_bits_len;
  wire [2:0]  _axi4yank_auto_out_ar_bits_size;
  wire [1:0]  _axi4yank_auto_out_ar_bits_burst;
  wire        _axi4yank_auto_out_ar_bits_lock;
  wire [3:0]  _axi4yank_auto_out_ar_bits_cache;
  wire [2:0]  _axi4yank_auto_out_ar_bits_prot;
  wire [3:0]  _axi4yank_auto_out_ar_bits_qos;
  wire        _axi4yank_auto_out_r_ready;
  wire        _axi4buf_auto_in_aw_ready;
  wire        _axi4buf_auto_in_w_ready;
  wire        _axi4buf_auto_in_b_valid;
  wire [3:0]  _axi4buf_auto_in_b_bits_id;
  wire [1:0]  _axi4buf_auto_in_b_bits_resp;
  wire        _axi4buf_auto_in_ar_ready;
  wire        _axi4buf_auto_in_r_valid;
  wire [3:0]  _axi4buf_auto_in_r_bits_id;
  wire [63:0] _axi4buf_auto_in_r_bits_data;
  wire [1:0]  _axi4buf_auto_in_r_bits_resp;
  wire        _axi4buf_auto_in_r_bits_last;
  AXI4Buffer axi4buf (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_aw_valid       (_axi4yank_auto_out_aw_valid),
    .auto_in_aw_bits_id     (_axi4yank_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr   (_axi4yank_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len    (_axi4yank_auto_out_aw_bits_len),
    .auto_in_aw_bits_size   (_axi4yank_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst  (_axi4yank_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock   (_axi4yank_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache  (_axi4yank_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot   (_axi4yank_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos    (_axi4yank_auto_out_aw_bits_qos),
    .auto_in_w_valid        (_axi4yank_auto_out_w_valid),
    .auto_in_w_bits_data    (_axi4yank_auto_out_w_bits_data),
    .auto_in_w_bits_strb    (_axi4yank_auto_out_w_bits_strb),
    .auto_in_w_bits_last    (_axi4yank_auto_out_w_bits_last),
    .auto_in_b_ready        (_axi4yank_auto_out_b_ready),
    .auto_in_ar_valid       (_axi4yank_auto_out_ar_valid),
    .auto_in_ar_bits_id     (_axi4yank_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr   (_axi4yank_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len    (_axi4yank_auto_out_ar_bits_len),
    .auto_in_ar_bits_size   (_axi4yank_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst  (_axi4yank_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock   (_axi4yank_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache  (_axi4yank_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot   (_axi4yank_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos    (_axi4yank_auto_out_ar_bits_qos),
    .auto_in_r_ready        (_axi4yank_auto_out_r_ready),
    .auto_out_aw_ready      (auto_axi4buf_out_aw_ready),
    .auto_out_w_ready       (auto_axi4buf_out_w_ready),
    .auto_out_b_valid       (auto_axi4buf_out_b_valid),
    .auto_out_b_bits_id     (auto_axi4buf_out_b_bits_id),
    .auto_out_b_bits_resp   (auto_axi4buf_out_b_bits_resp),
    .auto_out_ar_ready      (auto_axi4buf_out_ar_ready),
    .auto_out_r_valid       (auto_axi4buf_out_r_valid),
    .auto_out_r_bits_id     (auto_axi4buf_out_r_bits_id),
    .auto_out_r_bits_data   (auto_axi4buf_out_r_bits_data),
    .auto_out_r_bits_resp   (auto_axi4buf_out_r_bits_resp),
    .auto_out_r_bits_last   (auto_axi4buf_out_r_bits_last),
    .auto_in_aw_ready       (_axi4buf_auto_in_aw_ready),
    .auto_in_w_ready        (_axi4buf_auto_in_w_ready),
    .auto_in_b_valid        (_axi4buf_auto_in_b_valid),
    .auto_in_b_bits_id      (_axi4buf_auto_in_b_bits_id),
    .auto_in_b_bits_resp    (_axi4buf_auto_in_b_bits_resp),
    .auto_in_ar_ready       (_axi4buf_auto_in_ar_ready),
    .auto_in_r_valid        (_axi4buf_auto_in_r_valid),
    .auto_in_r_bits_id      (_axi4buf_auto_in_r_bits_id),
    .auto_in_r_bits_data    (_axi4buf_auto_in_r_bits_data),
    .auto_in_r_bits_resp    (_axi4buf_auto_in_r_bits_resp),
    .auto_in_r_bits_last    (_axi4buf_auto_in_r_bits_last),
    .auto_out_aw_valid      (auto_axi4buf_out_aw_valid),
    .auto_out_aw_bits_id    (auto_axi4buf_out_aw_bits_id),
    .auto_out_aw_bits_addr  (auto_axi4buf_out_aw_bits_addr),
    .auto_out_aw_bits_len   (auto_axi4buf_out_aw_bits_len),
    .auto_out_aw_bits_size  (auto_axi4buf_out_aw_bits_size),
    .auto_out_aw_bits_burst (auto_axi4buf_out_aw_bits_burst),
    .auto_out_aw_bits_lock  (auto_axi4buf_out_aw_bits_lock),
    .auto_out_aw_bits_cache (auto_axi4buf_out_aw_bits_cache),
    .auto_out_aw_bits_prot  (auto_axi4buf_out_aw_bits_prot),
    .auto_out_aw_bits_qos   (auto_axi4buf_out_aw_bits_qos),
    .auto_out_w_valid       (auto_axi4buf_out_w_valid),
    .auto_out_w_bits_data   (auto_axi4buf_out_w_bits_data),
    .auto_out_w_bits_strb   (auto_axi4buf_out_w_bits_strb),
    .auto_out_w_bits_last   (auto_axi4buf_out_w_bits_last),
    .auto_out_b_ready       (auto_axi4buf_out_b_ready),
    .auto_out_ar_valid      (auto_axi4buf_out_ar_valid),
    .auto_out_ar_bits_id    (auto_axi4buf_out_ar_bits_id),
    .auto_out_ar_bits_addr  (auto_axi4buf_out_ar_bits_addr),
    .auto_out_ar_bits_len   (auto_axi4buf_out_ar_bits_len),
    .auto_out_ar_bits_size  (auto_axi4buf_out_ar_bits_size),
    .auto_out_ar_bits_burst (auto_axi4buf_out_ar_bits_burst),
    .auto_out_ar_bits_lock  (auto_axi4buf_out_ar_bits_lock),
    .auto_out_ar_bits_cache (auto_axi4buf_out_ar_bits_cache),
    .auto_out_ar_bits_prot  (auto_axi4buf_out_ar_bits_prot),
    .auto_out_ar_bits_qos   (auto_axi4buf_out_ar_bits_qos),
    .auto_out_r_ready       (auto_axi4buf_out_r_ready)
  );
  AXI4UserYanker axi4yank (
    .clock                                (clock),
    .reset                                (reset),
    .auto_in_aw_valid                     (_axi4deint_auto_out_aw_valid),
    .auto_in_aw_bits_id                   (_axi4deint_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                 (_axi4deint_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                  (_axi4deint_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                 (_axi4deint_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                (_axi4deint_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                 (_axi4deint_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                (_axi4deint_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                 (_axi4deint_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                  (_axi4deint_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size
      (_axi4deint_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_axi4deint_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                      (_axi4deint_auto_out_w_valid),
    .auto_in_w_bits_data                  (_axi4deint_auto_out_w_bits_data),
    .auto_in_w_bits_strb                  (_axi4deint_auto_out_w_bits_strb),
    .auto_in_w_bits_last                  (_axi4deint_auto_out_w_bits_last),
    .auto_in_b_ready                      (_axi4deint_auto_out_b_ready),
    .auto_in_ar_valid                     (_axi4deint_auto_out_ar_valid),
    .auto_in_ar_bits_id                   (_axi4deint_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                 (_axi4deint_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                  (_axi4deint_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                 (_axi4deint_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                (_axi4deint_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                 (_axi4deint_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                (_axi4deint_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                 (_axi4deint_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                  (_axi4deint_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size
      (_axi4deint_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_axi4deint_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                      (_axi4deint_auto_out_r_ready),
    .auto_out_aw_ready                    (_axi4buf_auto_in_aw_ready),
    .auto_out_w_ready                     (_axi4buf_auto_in_w_ready),
    .auto_out_b_valid                     (_axi4buf_auto_in_b_valid),
    .auto_out_b_bits_id                   (_axi4buf_auto_in_b_bits_id),
    .auto_out_b_bits_resp                 (_axi4buf_auto_in_b_bits_resp),
    .auto_out_ar_ready                    (_axi4buf_auto_in_ar_ready),
    .auto_out_r_valid                     (_axi4buf_auto_in_r_valid),
    .auto_out_r_bits_id                   (_axi4buf_auto_in_r_bits_id),
    .auto_out_r_bits_data                 (_axi4buf_auto_in_r_bits_data),
    .auto_out_r_bits_resp                 (_axi4buf_auto_in_r_bits_resp),
    .auto_out_r_bits_last                 (_axi4buf_auto_in_r_bits_last),
    .auto_in_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source  (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source  (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid                    (_axi4yank_auto_out_aw_valid),
    .auto_out_aw_bits_id                  (_axi4yank_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                (_axi4yank_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                 (_axi4yank_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                (_axi4yank_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst               (_axi4yank_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                (_axi4yank_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache               (_axi4yank_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                (_axi4yank_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                 (_axi4yank_auto_out_aw_bits_qos),
    .auto_out_w_valid                     (_axi4yank_auto_out_w_valid),
    .auto_out_w_bits_data                 (_axi4yank_auto_out_w_bits_data),
    .auto_out_w_bits_strb                 (_axi4yank_auto_out_w_bits_strb),
    .auto_out_w_bits_last                 (_axi4yank_auto_out_w_bits_last),
    .auto_out_b_ready                     (_axi4yank_auto_out_b_ready),
    .auto_out_ar_valid                    (_axi4yank_auto_out_ar_valid),
    .auto_out_ar_bits_id                  (_axi4yank_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                (_axi4yank_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                 (_axi4yank_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                (_axi4yank_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst               (_axi4yank_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                (_axi4yank_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache               (_axi4yank_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                (_axi4yank_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                 (_axi4yank_auto_out_ar_bits_qos),
    .auto_out_r_ready                     (_axi4yank_auto_out_r_ready)
  );
  AXI4Deinterleaver axi4deint (
    .clock                                 (clock),
    .reset                                 (reset),
    .auto_in_aw_valid                      (_axi4index_auto_out_aw_valid),
    .auto_in_aw_bits_id                    (_axi4index_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                  (_axi4index_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                   (_axi4index_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                  (_axi4index_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                 (_axi4index_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                  (_axi4index_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                 (_axi4index_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                  (_axi4index_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                   (_axi4index_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                       (_axi4index_auto_out_w_valid),
    .auto_in_w_bits_data                   (_axi4index_auto_out_w_bits_data),
    .auto_in_w_bits_strb                   (_axi4index_auto_out_w_bits_strb),
    .auto_in_w_bits_last                   (_axi4index_auto_out_w_bits_last),
    .auto_in_b_ready                       (_axi4index_auto_out_b_ready),
    .auto_in_ar_valid                      (_axi4index_auto_out_ar_valid),
    .auto_in_ar_bits_id                    (_axi4index_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                  (_axi4index_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                   (_axi4index_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                  (_axi4index_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                 (_axi4index_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                  (_axi4index_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                 (_axi4index_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                  (_axi4index_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                   (_axi4index_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                       (_axi4index_auto_out_r_ready),
    .auto_out_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_in_aw_ready                      (_axi4deint_auto_in_aw_ready),
    .auto_in_w_ready                       (_axi4deint_auto_in_w_ready),
    .auto_in_b_valid                       (_axi4deint_auto_in_b_valid),
    .auto_in_b_bits_id                     (_axi4deint_auto_in_b_bits_id),
    .auto_in_b_bits_resp                   (_axi4deint_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size     (_axi4deint_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source
      (_axi4deint_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                      (_axi4deint_auto_in_ar_ready),
    .auto_in_r_valid                       (_axi4deint_auto_in_r_valid),
    .auto_in_r_bits_id                     (_axi4deint_auto_in_r_bits_id),
    .auto_in_r_bits_data                   (_axi4deint_auto_in_r_bits_data),
    .auto_in_r_bits_resp                   (_axi4deint_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size     (_axi4deint_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source
      (_axi4deint_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                   (_axi4deint_auto_in_r_bits_last),
    .auto_out_aw_valid                     (_axi4deint_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_axi4deint_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_axi4deint_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_axi4deint_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_axi4deint_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_axi4deint_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_axi4deint_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_axi4deint_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_axi4deint_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_axi4deint_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_axi4deint_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_axi4deint_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                      (_axi4deint_auto_out_w_valid),
    .auto_out_w_bits_data                  (_axi4deint_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_axi4deint_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_axi4deint_auto_out_w_bits_last),
    .auto_out_b_ready                      (_axi4deint_auto_out_b_ready),
    .auto_out_ar_valid                     (_axi4deint_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_axi4deint_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_axi4deint_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_axi4deint_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_axi4deint_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_axi4deint_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_axi4deint_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_axi4deint_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_axi4deint_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_axi4deint_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_axi4deint_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_axi4deint_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                      (_axi4deint_auto_out_r_ready)
  );
  AXI4IdIndexer axi4index (
    .auto_in_aw_valid                      (_tl2axi4_auto_out_aw_valid),
    .auto_in_aw_bits_id                    (_tl2axi4_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                  (_tl2axi4_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                   (_tl2axi4_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                  (_tl2axi4_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                 (_tl2axi4_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                  (_tl2axi4_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                 (_tl2axi4_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                  (_tl2axi4_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                   (_tl2axi4_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size    (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                       (_tl2axi4_auto_out_w_valid),
    .auto_in_w_bits_data                   (_tl2axi4_auto_out_w_bits_data),
    .auto_in_w_bits_strb                   (_tl2axi4_auto_out_w_bits_strb),
    .auto_in_w_bits_last                   (_tl2axi4_auto_out_w_bits_last),
    .auto_in_b_ready                       (_tl2axi4_auto_out_b_ready),
    .auto_in_ar_valid                      (_tl2axi4_auto_out_ar_valid),
    .auto_in_ar_bits_id                    (_tl2axi4_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                  (_tl2axi4_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                   (_tl2axi4_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                  (_tl2axi4_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                 (_tl2axi4_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                  (_tl2axi4_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                 (_tl2axi4_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                  (_tl2axi4_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                   (_tl2axi4_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size    (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                       (_tl2axi4_auto_out_r_ready),
    .auto_out_aw_ready                     (_axi4deint_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4deint_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4deint_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4deint_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4deint_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4deint_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4deint_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                     (_axi4deint_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4deint_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4deint_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4deint_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4deint_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4deint_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4deint_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                  (_axi4deint_auto_in_r_bits_last),
    .auto_in_aw_ready                      (_axi4index_auto_in_aw_ready),
    .auto_in_w_ready                       (_axi4index_auto_in_w_ready),
    .auto_in_b_valid                       (_axi4index_auto_in_b_valid),
    .auto_in_b_bits_id                     (_axi4index_auto_in_b_bits_id),
    .auto_in_b_bits_resp                   (_axi4index_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size     (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                      (_axi4index_auto_in_ar_ready),
    .auto_in_r_valid                       (_axi4index_auto_in_r_valid),
    .auto_in_r_bits_id                     (_axi4index_auto_in_r_bits_id),
    .auto_in_r_bits_data                   (_axi4index_auto_in_r_bits_data),
    .auto_in_r_bits_resp                   (_axi4index_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size     (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                   (_axi4index_auto_in_r_bits_last),
    .auto_out_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                      (_axi4index_auto_out_r_ready)
  );
  TLToAXI4 tl2axi4 (
    .clock                                 (clock),
    .reset                                 (reset),
    .auto_in_a_valid                       (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode                 (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_size                   (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source                 (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address                (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask                   (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data                   (auto_tl_in_a_bits_data),
    .auto_in_d_ready                       (auto_tl_in_d_ready),
    .auto_out_aw_ready                     (_axi4index_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4index_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4index_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4index_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4index_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                     (_axi4index_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4index_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4index_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4index_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4index_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                  (_axi4index_auto_in_r_bits_last),
    .auto_in_a_ready                       (auto_tl_in_a_ready),
    .auto_in_d_valid                       (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode                 (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_size                   (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source                 (auto_tl_in_d_bits_source),
    .auto_in_d_bits_denied                 (auto_tl_in_d_bits_denied),
    .auto_in_d_bits_data                   (auto_tl_in_d_bits_data),
    .auto_in_d_bits_corrupt                (auto_tl_in_d_bits_corrupt),
    .auto_out_aw_valid                     (_tl2axi4_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_tl2axi4_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_tl2axi4_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_tl2axi4_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_tl2axi4_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_tl2axi4_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_tl2axi4_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_tl2axi4_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_tl2axi4_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_tl2axi4_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size   (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                      (_tl2axi4_auto_out_w_valid),
    .auto_out_w_bits_data                  (_tl2axi4_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_tl2axi4_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_tl2axi4_auto_out_w_bits_last),
    .auto_out_b_ready                      (_tl2axi4_auto_out_b_ready),
    .auto_out_ar_valid                     (_tl2axi4_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_tl2axi4_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_tl2axi4_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_tl2axi4_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_tl2axi4_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_tl2axi4_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_tl2axi4_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_tl2axi4_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_tl2axi4_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_tl2axi4_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size   (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                      (_tl2axi4_auto_out_r_ready)
  );
endmodule

module SystemBus(
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid,
  input  [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id,
  input  [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp,
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid,
  input  [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id,
  input  [63:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data,
  input  [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp,
  input         auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last,
                auto_coupler_from_tile_tl_master_clock_xing_in_a_valid,
  input  [2:0]  auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode,
                auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param,
  input  [3:0]  auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size,
  input  [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source,
  input  [31:0] auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address,
  input  [7:0]  auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask,
  input  [63:0] auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data,
  input         auto_coupler_from_tile_tl_master_clock_xing_in_b_ready,
                auto_coupler_from_tile_tl_master_clock_xing_in_c_valid,
  input  [2:0]  auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode,
                auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param,
  input  [3:0]  auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size,
  input  [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source,
  input  [31:0] auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address,
  input  [63:0] auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data,
  input         auto_coupler_from_tile_tl_master_clock_xing_in_d_ready,
                auto_coupler_from_tile_tl_master_clock_xing_in_e_valid,
  input  [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink,
  input         auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid,
  input  [1:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param,
  input  [31:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address,
  input         auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size,
  input  [5:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source,
  input  [1:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink,
  input         auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data,
  input         auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt,
                auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_valid,
  input  [2:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_opcode,
                auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_param,
  input  [3:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_size,
  input  [4:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_source,
  input  [31:0] auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_address,
  input  [7:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_mask,
  input  [63:0] auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_data,
  input         auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_ready,
                auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready,
                auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param,
  input  [3:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size,
  input  [5:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source,
  input         auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink,
                auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data,
  input         auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_reset,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_reset,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock,
                auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id,
  output [30:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size,
  output [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid,
  output [63:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready,
                auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id,
  output [30:0] auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr,
  output [7:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size,
  output [1:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache,
  output [2:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot,
  output [3:0]  auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos,
  output        auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready,
                auto_coupler_from_tile_tl_master_clock_xing_in_a_ready,
                auto_coupler_from_tile_tl_master_clock_xing_in_b_valid,
  output [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param,
  output [3:0]  auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size,
  output [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source,
  output [31:0] auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address,
  output        auto_coupler_from_tile_tl_master_clock_xing_in_c_ready,
                auto_coupler_from_tile_tl_master_clock_xing_in_d_valid,
  output [2:0]  auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode,
  output [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param,
  output [3:0]  auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size,
  output [1:0]  auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source,
                auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink,
  output        auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied,
  output [63:0] auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data,
  output        auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size,
  output [5:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source,
  output [31:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address,
  output [7:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data,
  output        auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid,
  output [2:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size,
  output [5:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source,
  output [31:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address,
  output [63:0] auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data,
  output        auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready,
                auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid,
  output [1:0]  auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink,
  output        auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready,
                auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid,
  output [2:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode,
  output [3:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size,
  output [4:0]  auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source,
  output        auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied,
  output [63:0] auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data,
  output        auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt,
                auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode,
                auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param,
  output [3:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size,
  output [5:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source,
  output [29:0] auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data,
  output        auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready,
                auto_fixedClockNode_out_1_clock,
                auto_fixedClockNode_out_1_reset,
                auto_fixedClockNode_out_0_clock,
                auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock,
                auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset,
                auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock,
                auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset,
                auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock,
                auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset,
                auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock,
                auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset,
                auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock,
                auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset
);

  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode;
  wire [3:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data;
  wire        _coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt;
  wire        _fixer_auto_out_1_a_valid;
  wire [2:0]  _fixer_auto_out_1_a_bits_opcode;
  wire [2:0]  _fixer_auto_out_1_a_bits_param;
  wire [3:0]  _fixer_auto_out_1_a_bits_size;
  wire [1:0]  _fixer_auto_out_1_a_bits_source;
  wire [31:0] _fixer_auto_out_1_a_bits_address;
  wire [7:0]  _fixer_auto_out_1_a_bits_mask;
  wire [63:0] _fixer_auto_out_1_a_bits_data;
  wire        _fixer_auto_out_1_b_ready;
  wire        _fixer_auto_out_1_c_valid;
  wire [2:0]  _fixer_auto_out_1_c_bits_opcode;
  wire [2:0]  _fixer_auto_out_1_c_bits_param;
  wire [3:0]  _fixer_auto_out_1_c_bits_size;
  wire [1:0]  _fixer_auto_out_1_c_bits_source;
  wire [31:0] _fixer_auto_out_1_c_bits_address;
  wire [63:0] _fixer_auto_out_1_c_bits_data;
  wire        _fixer_auto_out_1_d_ready;
  wire        _fixer_auto_out_1_e_valid;
  wire [1:0]  _fixer_auto_out_1_e_bits_sink;
  wire        _fixer_auto_out_0_a_valid;
  wire [2:0]  _fixer_auto_out_0_a_bits_opcode;
  wire [2:0]  _fixer_auto_out_0_a_bits_param;
  wire [3:0]  _fixer_auto_out_0_a_bits_size;
  wire [4:0]  _fixer_auto_out_0_a_bits_source;
  wire [31:0] _fixer_auto_out_0_a_bits_address;
  wire [7:0]  _fixer_auto_out_0_a_bits_mask;
  wire [63:0] _fixer_auto_out_0_a_bits_data;
  wire        _fixer_auto_out_0_d_ready;
  wire        _system_bus_xbar_auto_in_1_a_ready;
  wire        _system_bus_xbar_auto_in_1_b_valid;
  wire [1:0]  _system_bus_xbar_auto_in_1_b_bits_param;
  wire [31:0] _system_bus_xbar_auto_in_1_b_bits_address;
  wire        _system_bus_xbar_auto_in_1_c_ready;
  wire        _system_bus_xbar_auto_in_1_d_valid;
  wire [2:0]  _system_bus_xbar_auto_in_1_d_bits_opcode;
  wire [1:0]  _system_bus_xbar_auto_in_1_d_bits_param;
  wire [3:0]  _system_bus_xbar_auto_in_1_d_bits_size;
  wire [1:0]  _system_bus_xbar_auto_in_1_d_bits_source;
  wire [1:0]  _system_bus_xbar_auto_in_1_d_bits_sink;
  wire        _system_bus_xbar_auto_in_1_d_bits_denied;
  wire [63:0] _system_bus_xbar_auto_in_1_d_bits_data;
  wire        _system_bus_xbar_auto_in_1_d_bits_corrupt;
  wire        _system_bus_xbar_auto_in_0_a_ready;
  wire        _system_bus_xbar_auto_in_0_d_valid;
  wire [2:0]  _system_bus_xbar_auto_in_0_d_bits_opcode;
  wire [3:0]  _system_bus_xbar_auto_in_0_d_bits_size;
  wire [4:0]  _system_bus_xbar_auto_in_0_d_bits_source;
  wire        _system_bus_xbar_auto_in_0_d_bits_denied;
  wire [63:0] _system_bus_xbar_auto_in_0_d_bits_data;
  wire        _system_bus_xbar_auto_in_0_d_bits_corrupt;
  wire        _system_bus_xbar_auto_out_2_a_valid;
  wire [2:0]  _system_bus_xbar_auto_out_2_a_bits_opcode;
  wire [3:0]  _system_bus_xbar_auto_out_2_a_bits_size;
  wire [5:0]  _system_bus_xbar_auto_out_2_a_bits_source;
  wire [30:0] _system_bus_xbar_auto_out_2_a_bits_address;
  wire [7:0]  _system_bus_xbar_auto_out_2_a_bits_mask;
  wire [63:0] _system_bus_xbar_auto_out_2_a_bits_data;
  wire        _system_bus_xbar_auto_out_2_d_ready;
  wire        _fixedClockNode_auto_out_0_clock;
  wire        _fixedClockNode_auto_out_0_reset;
  FixedClockBroadcast fixedClockNode (
    .auto_in_clock    (auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock),
    .auto_in_reset    (auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset),
    .auto_out_2_clock (auto_fixedClockNode_out_1_clock),
    .auto_out_2_reset (auto_fixedClockNode_out_1_reset),
    .auto_out_1_clock (auto_fixedClockNode_out_0_clock),
    .auto_out_0_clock (_fixedClockNode_auto_out_0_clock),
    .auto_out_0_reset (_fixedClockNode_auto_out_0_reset)
  );
  TLXbar system_bus_xbar (
    .clock                     (_fixedClockNode_auto_out_0_clock),
    .reset                     (_fixedClockNode_auto_out_0_reset),
    .auto_in_1_a_valid         (_fixer_auto_out_1_a_valid),
    .auto_in_1_a_bits_opcode   (_fixer_auto_out_1_a_bits_opcode),
    .auto_in_1_a_bits_param    (_fixer_auto_out_1_a_bits_param),
    .auto_in_1_a_bits_size     (_fixer_auto_out_1_a_bits_size),
    .auto_in_1_a_bits_source   (_fixer_auto_out_1_a_bits_source),
    .auto_in_1_a_bits_address  (_fixer_auto_out_1_a_bits_address),
    .auto_in_1_a_bits_mask     (_fixer_auto_out_1_a_bits_mask),
    .auto_in_1_a_bits_data     (_fixer_auto_out_1_a_bits_data),
    .auto_in_1_b_ready         (_fixer_auto_out_1_b_ready),
    .auto_in_1_c_valid         (_fixer_auto_out_1_c_valid),
    .auto_in_1_c_bits_opcode   (_fixer_auto_out_1_c_bits_opcode),
    .auto_in_1_c_bits_param    (_fixer_auto_out_1_c_bits_param),
    .auto_in_1_c_bits_size     (_fixer_auto_out_1_c_bits_size),
    .auto_in_1_c_bits_source   (_fixer_auto_out_1_c_bits_source),
    .auto_in_1_c_bits_address  (_fixer_auto_out_1_c_bits_address),
    .auto_in_1_c_bits_data     (_fixer_auto_out_1_c_bits_data),
    .auto_in_1_d_ready         (_fixer_auto_out_1_d_ready),
    .auto_in_1_e_valid         (_fixer_auto_out_1_e_valid),
    .auto_in_1_e_bits_sink     (_fixer_auto_out_1_e_bits_sink),
    .auto_in_0_a_valid         (_fixer_auto_out_0_a_valid),
    .auto_in_0_a_bits_opcode   (_fixer_auto_out_0_a_bits_opcode),
    .auto_in_0_a_bits_param    (_fixer_auto_out_0_a_bits_param),
    .auto_in_0_a_bits_size     (_fixer_auto_out_0_a_bits_size),
    .auto_in_0_a_bits_source   (_fixer_auto_out_0_a_bits_source),
    .auto_in_0_a_bits_address  (_fixer_auto_out_0_a_bits_address),
    .auto_in_0_a_bits_mask     (_fixer_auto_out_0_a_bits_mask),
    .auto_in_0_a_bits_data     (_fixer_auto_out_0_a_bits_data),
    .auto_in_0_d_ready         (_fixer_auto_out_0_d_ready),
    .auto_out_2_a_ready        (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready),
    .auto_out_2_d_valid        (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid),
    .auto_out_2_d_bits_opcode
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode),
    .auto_out_2_d_bits_size
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size),
    .auto_out_2_d_bits_source
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source),
    .auto_out_2_d_bits_denied
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied),
    .auto_out_2_d_bits_data
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data),
    .auto_out_2_d_bits_corrupt
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt),
    .auto_out_1_a_ready
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready),
    .auto_out_1_b_valid
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid),
    .auto_out_1_b_bits_param
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param),
    .auto_out_1_b_bits_address
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address),
    .auto_out_1_c_ready
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready),
    .auto_out_1_d_valid
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid),
    .auto_out_1_d_bits_opcode
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode),
    .auto_out_1_d_bits_param
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param),
    .auto_out_1_d_bits_size
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size),
    .auto_out_1_d_bits_source
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source),
    .auto_out_1_d_bits_sink
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink),
    .auto_out_1_d_bits_denied
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied),
    .auto_out_1_d_bits_data
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data),
    .auto_out_1_d_bits_corrupt
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt),
    .auto_out_0_a_ready
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready),
    .auto_out_0_d_valid
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid),
    .auto_out_0_d_bits_opcode
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode),
    .auto_out_0_d_bits_param
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param),
    .auto_out_0_d_bits_size
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size),
    .auto_out_0_d_bits_source
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source),
    .auto_out_0_d_bits_sink
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink),
    .auto_out_0_d_bits_denied
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied),
    .auto_out_0_d_bits_data
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data),
    .auto_out_0_d_bits_corrupt
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt),
    .auto_in_1_a_ready         (_system_bus_xbar_auto_in_1_a_ready),
    .auto_in_1_b_valid         (_system_bus_xbar_auto_in_1_b_valid),
    .auto_in_1_b_bits_param    (_system_bus_xbar_auto_in_1_b_bits_param),
    .auto_in_1_b_bits_address  (_system_bus_xbar_auto_in_1_b_bits_address),
    .auto_in_1_c_ready         (_system_bus_xbar_auto_in_1_c_ready),
    .auto_in_1_d_valid         (_system_bus_xbar_auto_in_1_d_valid),
    .auto_in_1_d_bits_opcode   (_system_bus_xbar_auto_in_1_d_bits_opcode),
    .auto_in_1_d_bits_param    (_system_bus_xbar_auto_in_1_d_bits_param),
    .auto_in_1_d_bits_size     (_system_bus_xbar_auto_in_1_d_bits_size),
    .auto_in_1_d_bits_source   (_system_bus_xbar_auto_in_1_d_bits_source),
    .auto_in_1_d_bits_sink     (_system_bus_xbar_auto_in_1_d_bits_sink),
    .auto_in_1_d_bits_denied   (_system_bus_xbar_auto_in_1_d_bits_denied),
    .auto_in_1_d_bits_data     (_system_bus_xbar_auto_in_1_d_bits_data),
    .auto_in_1_d_bits_corrupt  (_system_bus_xbar_auto_in_1_d_bits_corrupt),
    .auto_in_0_a_ready         (_system_bus_xbar_auto_in_0_a_ready),
    .auto_in_0_d_valid         (_system_bus_xbar_auto_in_0_d_valid),
    .auto_in_0_d_bits_opcode   (_system_bus_xbar_auto_in_0_d_bits_opcode),
    .auto_in_0_d_bits_size     (_system_bus_xbar_auto_in_0_d_bits_size),
    .auto_in_0_d_bits_source   (_system_bus_xbar_auto_in_0_d_bits_source),
    .auto_in_0_d_bits_denied   (_system_bus_xbar_auto_in_0_d_bits_denied),
    .auto_in_0_d_bits_data     (_system_bus_xbar_auto_in_0_d_bits_data),
    .auto_in_0_d_bits_corrupt  (_system_bus_xbar_auto_in_0_d_bits_corrupt),
    .auto_out_2_a_valid        (_system_bus_xbar_auto_out_2_a_valid),
    .auto_out_2_a_bits_opcode  (_system_bus_xbar_auto_out_2_a_bits_opcode),
    .auto_out_2_a_bits_size    (_system_bus_xbar_auto_out_2_a_bits_size),
    .auto_out_2_a_bits_source  (_system_bus_xbar_auto_out_2_a_bits_source),
    .auto_out_2_a_bits_address (_system_bus_xbar_auto_out_2_a_bits_address),
    .auto_out_2_a_bits_mask    (_system_bus_xbar_auto_out_2_a_bits_mask),
    .auto_out_2_a_bits_data    (_system_bus_xbar_auto_out_2_a_bits_data),
    .auto_out_2_d_ready        (_system_bus_xbar_auto_out_2_d_ready),
    .auto_out_1_a_valid
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid),
    .auto_out_1_a_bits_opcode
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode),
    .auto_out_1_a_bits_param
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param),
    .auto_out_1_a_bits_size
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size),
    .auto_out_1_a_bits_source
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source),
    .auto_out_1_a_bits_address
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address),
    .auto_out_1_a_bits_mask
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask),
    .auto_out_1_a_bits_data
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data),
    .auto_out_1_b_ready
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready),
    .auto_out_1_c_valid
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid),
    .auto_out_1_c_bits_opcode
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode),
    .auto_out_1_c_bits_param
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param),
    .auto_out_1_c_bits_size
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size),
    .auto_out_1_c_bits_source
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source),
    .auto_out_1_c_bits_address
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address),
    .auto_out_1_c_bits_data
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data),
    .auto_out_1_d_ready
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready),
    .auto_out_1_e_valid
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid),
    .auto_out_1_e_bits_sink
      (auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink),
    .auto_out_0_a_valid
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid),
    .auto_out_0_a_bits_opcode
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode),
    .auto_out_0_a_bits_param
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param),
    .auto_out_0_a_bits_size
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size),
    .auto_out_0_a_bits_source
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source),
    .auto_out_0_a_bits_address
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address),
    .auto_out_0_a_bits_mask
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask),
    .auto_out_0_a_bits_data
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data),
    .auto_out_0_d_ready
      (auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready)
  );
  TLFIFOFixer fixer (
    .clock                     (_fixedClockNode_auto_out_0_clock),
    .reset                     (_fixedClockNode_auto_out_0_reset),
    .auto_in_1_a_valid         (auto_coupler_from_tile_tl_master_clock_xing_in_a_valid),
    .auto_in_1_a_bits_opcode
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode),
    .auto_in_1_a_bits_param
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param),
    .auto_in_1_a_bits_size
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size),
    .auto_in_1_a_bits_source
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source),
    .auto_in_1_a_bits_address
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address),
    .auto_in_1_a_bits_mask
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask),
    .auto_in_1_a_bits_data
      (auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data),
    .auto_in_1_b_ready         (auto_coupler_from_tile_tl_master_clock_xing_in_b_ready),
    .auto_in_1_c_valid         (auto_coupler_from_tile_tl_master_clock_xing_in_c_valid),
    .auto_in_1_c_bits_opcode
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode),
    .auto_in_1_c_bits_param
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param),
    .auto_in_1_c_bits_size
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size),
    .auto_in_1_c_bits_source
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source),
    .auto_in_1_c_bits_address
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address),
    .auto_in_1_c_bits_data
      (auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data),
    .auto_in_1_d_ready         (auto_coupler_from_tile_tl_master_clock_xing_in_d_ready),
    .auto_in_1_e_valid         (auto_coupler_from_tile_tl_master_clock_xing_in_e_valid),
    .auto_in_1_e_bits_sink
      (auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink),
    .auto_in_0_a_valid
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_valid),
    .auto_in_0_a_bits_opcode
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_opcode),
    .auto_in_0_a_bits_param
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_param),
    .auto_in_0_a_bits_size
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_size),
    .auto_in_0_a_bits_source
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_source),
    .auto_in_0_a_bits_address
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_address),
    .auto_in_0_a_bits_mask
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_mask),
    .auto_in_0_a_bits_data
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_data),
    .auto_in_0_d_ready
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_ready),
    .auto_out_1_a_ready        (_system_bus_xbar_auto_in_1_a_ready),
    .auto_out_1_b_valid        (_system_bus_xbar_auto_in_1_b_valid),
    .auto_out_1_b_bits_param   (_system_bus_xbar_auto_in_1_b_bits_param),
    .auto_out_1_b_bits_size    (4'h6),
    .auto_out_1_b_bits_source  (2'h0),
    .auto_out_1_b_bits_address (_system_bus_xbar_auto_in_1_b_bits_address),
    .auto_out_1_c_ready        (_system_bus_xbar_auto_in_1_c_ready),
    .auto_out_1_d_valid        (_system_bus_xbar_auto_in_1_d_valid),
    .auto_out_1_d_bits_opcode  (_system_bus_xbar_auto_in_1_d_bits_opcode),
    .auto_out_1_d_bits_param   (_system_bus_xbar_auto_in_1_d_bits_param),
    .auto_out_1_d_bits_size    (_system_bus_xbar_auto_in_1_d_bits_size),
    .auto_out_1_d_bits_source  (_system_bus_xbar_auto_in_1_d_bits_source),
    .auto_out_1_d_bits_sink    (_system_bus_xbar_auto_in_1_d_bits_sink),
    .auto_out_1_d_bits_denied  (_system_bus_xbar_auto_in_1_d_bits_denied),
    .auto_out_1_d_bits_data    (_system_bus_xbar_auto_in_1_d_bits_data),
    .auto_out_1_d_bits_corrupt (_system_bus_xbar_auto_in_1_d_bits_corrupt),
    .auto_out_0_a_ready        (_system_bus_xbar_auto_in_0_a_ready),
    .auto_out_0_d_valid        (_system_bus_xbar_auto_in_0_d_valid),
    .auto_out_0_d_bits_opcode  (_system_bus_xbar_auto_in_0_d_bits_opcode),
    .auto_out_0_d_bits_size    (_system_bus_xbar_auto_in_0_d_bits_size),
    .auto_out_0_d_bits_source  (_system_bus_xbar_auto_in_0_d_bits_source),
    .auto_out_0_d_bits_denied  (_system_bus_xbar_auto_in_0_d_bits_denied),
    .auto_out_0_d_bits_data    (_system_bus_xbar_auto_in_0_d_bits_data),
    .auto_out_0_d_bits_corrupt (_system_bus_xbar_auto_in_0_d_bits_corrupt),
    .auto_in_1_a_ready         (auto_coupler_from_tile_tl_master_clock_xing_in_a_ready),
    .auto_in_1_b_valid         (auto_coupler_from_tile_tl_master_clock_xing_in_b_valid),
    .auto_in_1_b_bits_param
      (auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param),
    .auto_in_1_b_bits_size
      (auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size),
    .auto_in_1_b_bits_source
      (auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source),
    .auto_in_1_b_bits_address
      (auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address),
    .auto_in_1_c_ready         (auto_coupler_from_tile_tl_master_clock_xing_in_c_ready),
    .auto_in_1_d_valid         (auto_coupler_from_tile_tl_master_clock_xing_in_d_valid),
    .auto_in_1_d_bits_opcode
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_in_1_d_bits_param
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param),
    .auto_in_1_d_bits_size
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size),
    .auto_in_1_d_bits_source
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source),
    .auto_in_1_d_bits_sink
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink),
    .auto_in_1_d_bits_denied
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied),
    .auto_in_1_d_bits_data
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data),
    .auto_in_1_d_bits_corrupt
      (auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_in_0_a_ready
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready),
    .auto_in_0_d_valid
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid),
    .auto_in_0_d_bits_opcode
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode),
    .auto_in_0_d_bits_size
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size),
    .auto_in_0_d_bits_source
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source),
    .auto_in_0_d_bits_denied
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied),
    .auto_in_0_d_bits_data
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data),
    .auto_in_0_d_bits_corrupt
      (auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt),
    .auto_out_1_a_valid        (_fixer_auto_out_1_a_valid),
    .auto_out_1_a_bits_opcode  (_fixer_auto_out_1_a_bits_opcode),
    .auto_out_1_a_bits_param   (_fixer_auto_out_1_a_bits_param),
    .auto_out_1_a_bits_size    (_fixer_auto_out_1_a_bits_size),
    .auto_out_1_a_bits_source  (_fixer_auto_out_1_a_bits_source),
    .auto_out_1_a_bits_address (_fixer_auto_out_1_a_bits_address),
    .auto_out_1_a_bits_mask    (_fixer_auto_out_1_a_bits_mask),
    .auto_out_1_a_bits_data    (_fixer_auto_out_1_a_bits_data),
    .auto_out_1_b_ready        (_fixer_auto_out_1_b_ready),
    .auto_out_1_c_valid        (_fixer_auto_out_1_c_valid),
    .auto_out_1_c_bits_opcode  (_fixer_auto_out_1_c_bits_opcode),
    .auto_out_1_c_bits_param   (_fixer_auto_out_1_c_bits_param),
    .auto_out_1_c_bits_size    (_fixer_auto_out_1_c_bits_size),
    .auto_out_1_c_bits_source  (_fixer_auto_out_1_c_bits_source),
    .auto_out_1_c_bits_address (_fixer_auto_out_1_c_bits_address),
    .auto_out_1_c_bits_data    (_fixer_auto_out_1_c_bits_data),
    .auto_out_1_d_ready        (_fixer_auto_out_1_d_ready),
    .auto_out_1_e_valid        (_fixer_auto_out_1_e_valid),
    .auto_out_1_e_bits_sink    (_fixer_auto_out_1_e_bits_sink),
    .auto_out_0_a_valid        (_fixer_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_fixer_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_param   (_fixer_auto_out_0_a_bits_param),
    .auto_out_0_a_bits_size    (_fixer_auto_out_0_a_bits_size),
    .auto_out_0_a_bits_source  (_fixer_auto_out_0_a_bits_source),
    .auto_out_0_a_bits_address (_fixer_auto_out_0_a_bits_address),
    .auto_out_0_a_bits_mask    (_fixer_auto_out_0_a_bits_mask),
    .auto_out_0_a_bits_data    (_fixer_auto_out_0_a_bits_data),
    .auto_out_0_d_ready        (_fixer_auto_out_0_d_ready)
  );
  TLInterconnectCoupler_4 coupler_to_port_named_mmio_port_axi4 (
    .clock                          (_fixedClockNode_auto_out_0_clock),
    .reset                          (_fixedClockNode_auto_out_0_reset),
    .auto_axi4buf_out_aw_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready),
    .auto_axi4buf_out_w_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready),
    .auto_axi4buf_out_b_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid),
    .auto_axi4buf_out_b_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id),
    .auto_axi4buf_out_b_bits_resp
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp),
    .auto_axi4buf_out_ar_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready),
    .auto_axi4buf_out_r_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid),
    .auto_axi4buf_out_r_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id),
    .auto_axi4buf_out_r_bits_data
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data),
    .auto_axi4buf_out_r_bits_resp
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp),
    .auto_axi4buf_out_r_bits_last
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last),
    .auto_tl_in_a_valid             (_system_bus_xbar_auto_out_2_a_valid),
    .auto_tl_in_a_bits_opcode       (_system_bus_xbar_auto_out_2_a_bits_opcode),
    .auto_tl_in_a_bits_size         (_system_bus_xbar_auto_out_2_a_bits_size),
    .auto_tl_in_a_bits_source       (_system_bus_xbar_auto_out_2_a_bits_source),
    .auto_tl_in_a_bits_address      (_system_bus_xbar_auto_out_2_a_bits_address),
    .auto_tl_in_a_bits_mask         (_system_bus_xbar_auto_out_2_a_bits_mask),
    .auto_tl_in_a_bits_data         (_system_bus_xbar_auto_out_2_a_bits_data),
    .auto_tl_in_d_ready             (_system_bus_xbar_auto_out_2_d_ready),
    .auto_axi4buf_out_aw_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid),
    .auto_axi4buf_out_aw_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id),
    .auto_axi4buf_out_aw_bits_addr
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr),
    .auto_axi4buf_out_aw_bits_len
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len),
    .auto_axi4buf_out_aw_bits_size
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size),
    .auto_axi4buf_out_aw_bits_burst
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst),
    .auto_axi4buf_out_aw_bits_lock
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock),
    .auto_axi4buf_out_aw_bits_cache
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache),
    .auto_axi4buf_out_aw_bits_prot
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot),
    .auto_axi4buf_out_aw_bits_qos
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos),
    .auto_axi4buf_out_w_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid),
    .auto_axi4buf_out_w_bits_data
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data),
    .auto_axi4buf_out_w_bits_strb
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb),
    .auto_axi4buf_out_w_bits_last
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last),
    .auto_axi4buf_out_b_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready),
    .auto_axi4buf_out_ar_valid
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid),
    .auto_axi4buf_out_ar_bits_id
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id),
    .auto_axi4buf_out_ar_bits_addr
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr),
    .auto_axi4buf_out_ar_bits_len
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len),
    .auto_axi4buf_out_ar_bits_size
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size),
    .auto_axi4buf_out_ar_bits_burst
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst),
    .auto_axi4buf_out_ar_bits_lock
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock),
    .auto_axi4buf_out_ar_bits_cache
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache),
    .auto_axi4buf_out_ar_bits_prot
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot),
    .auto_axi4buf_out_ar_bits_qos
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos),
    .auto_axi4buf_out_r_ready
      (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready),
    .auto_tl_in_a_ready
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_denied
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_port_named_mmio_port_axi4_auto_tl_in_d_bits_corrupt)
  );
  assign auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_clock;
  assign auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_reset;
  assign auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock;
  assign auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset;
  assign auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_clock;
  assign auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_reset;
  assign auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock;
  assign auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset;
  assign auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock;
  assign auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset =
    auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset;
endmodule

module FixedClockBroadcast_1(
  input  auto_in_clock,
         auto_in_reset,
  output auto_out_4_clock,
         auto_out_4_reset,
         auto_out_3_clock,
         auto_out_3_reset,
         auto_out_2_clock,
         auto_out_2_reset,
         auto_out_1_clock,
         auto_out_1_reset,
         auto_out_0_clock,
         auto_out_0_reset
);

  assign auto_out_4_clock = auto_in_clock;
  assign auto_out_4_reset = auto_in_reset;
  assign auto_out_3_clock = auto_in_clock;
  assign auto_out_3_reset = auto_in_reset;
  assign auto_out_2_clock = auto_in_clock;
  assign auto_out_2_reset = auto_in_reset;
  assign auto_out_1_clock = auto_in_clock;
  assign auto_out_1_reset = auto_in_reset;
  assign auto_out_0_clock = auto_in_clock;
  assign auto_out_0_reset = auto_in_reset;
endmodule

module TLFIFOFixer_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire [2:0]  a_id =
    {auto_in_a_bits_address[29],
     {{auto_in_a_bits_address[29], auto_in_a_bits_address[14:13] ^ 2'h1} == 3'h0,
      {auto_in_a_bits_address[29], auto_in_a_bits_address[14:13] ^ 2'h2} == 3'h0}
       | {2{{auto_in_a_bits_address[29], ~(auto_in_a_bits_address[14:13])} == 3'h0}}}
    | ({auto_in_a_bits_address[29], auto_in_a_bits_address[14:13]} == 3'h0 ? 3'h5 : 3'h0);
  wire        a_noDomain = a_id == 3'h0;
  reg  [2:0]  a_first_counter;
  wire        a_first = a_first_counter == 3'h0;
  reg  [2:0]  d_first_counter;
  reg         flight_0;
  reg         flight_1;
  reg         flight_2;
  reg         flight_3;
  reg         flight_4;
  reg         flight_5;
  reg         flight_6;
  reg         flight_7;
  reg         flight_8;
  reg         flight_9;
  reg         flight_10;
  reg         flight_11;
  reg         flight_12;
  reg         flight_13;
  reg         flight_14;
  reg         flight_15;
  reg         flight_16;
  reg         flight_17;
  reg         flight_18;
  reg         flight_19;
  wire        stalls_a_sel = auto_in_a_bits_source[5:2] == 4'h4;
  reg  [2:0]  stalls_id;
  wire        stalls_a_sel_1 = auto_in_a_bits_source[5:3] == 3'h0;
  reg  [2:0]  stalls_id_1;
  wire        stalls_a_sel_2 = auto_in_a_bits_source[5:3] == 3'h1;
  reg  [2:0]  stalls_id_2;
  wire        stall =
    stalls_a_sel & a_first & (flight_16 | flight_17 | flight_18 | flight_19)
    & (a_noDomain | stalls_id != a_id) | stalls_a_sel_1 & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7) & (a_noDomain | stalls_id_1 != a_id) | stalls_a_sel_2 & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15) & (a_noDomain | stalls_id_2 != a_id);
  wire        nodeIn_a_ready = auto_out_a_ready & ~stall;
  wire [12:0] _a_first_beats1_decode_T_1 = 13'h3F << auto_in_a_bits_size;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3F << auto_out_d_bits_size;
  wire        d_first_first = d_first_counter == 3'h0;
  wire        _T_3 =
    d_first_first & auto_out_d_bits_opcode != 3'h6 & auto_in_d_ready & auto_out_d_valid;
  wire        _T_5 = nodeIn_a_ready & auto_in_a_valid;
  wire        _T_1 = a_first & _T_5;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 3'h0;
      d_first_counter <= 3'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
      flight_16 <= 1'h0;
      flight_17 <= 1'h0;
      flight_18 <= 1'h0;
      flight_19 <= 1'h0;
    end
    else begin
      if (_T_5) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            a_first_counter <= 3'h0;
          else
            a_first_counter <= ~(_a_first_beats1_decode_T_1[5:3]);
        end
        else
          a_first_counter <= a_first_counter - 3'h1;
      end
      if (auto_in_d_ready & auto_out_d_valid) begin
        if (d_first_first) begin
          if (auto_out_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[5:3]);
          else
            d_first_counter <= 3'h0;
        end
        else
          d_first_counter <= d_first_counter - 3'h1;
      end
      flight_0 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h0)
        & (_T_1 & auto_in_a_bits_source == 6'h0 | flight_0);
      flight_1 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h1)
        & (_T_1 & auto_in_a_bits_source == 6'h1 | flight_1);
      flight_2 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h2)
        & (_T_1 & auto_in_a_bits_source == 6'h2 | flight_2);
      flight_3 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h3)
        & (_T_1 & auto_in_a_bits_source == 6'h3 | flight_3);
      flight_4 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h4)
        & (_T_1 & auto_in_a_bits_source == 6'h4 | flight_4);
      flight_5 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h5)
        & (_T_1 & auto_in_a_bits_source == 6'h5 | flight_5);
      flight_6 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h6)
        & (_T_1 & auto_in_a_bits_source == 6'h6 | flight_6);
      flight_7 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h7)
        & (_T_1 & auto_in_a_bits_source == 6'h7 | flight_7);
      flight_8 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h8)
        & (_T_1 & auto_in_a_bits_source == 6'h8 | flight_8);
      flight_9 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h9)
        & (_T_1 & auto_in_a_bits_source == 6'h9 | flight_9);
      flight_10 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hA)
        & (_T_1 & auto_in_a_bits_source == 6'hA | flight_10);
      flight_11 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hB)
        & (_T_1 & auto_in_a_bits_source == 6'hB | flight_11);
      flight_12 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hC)
        & (_T_1 & auto_in_a_bits_source == 6'hC | flight_12);
      flight_13 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hD)
        & (_T_1 & auto_in_a_bits_source == 6'hD | flight_13);
      flight_14 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hE)
        & (_T_1 & auto_in_a_bits_source == 6'hE | flight_14);
      flight_15 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hF)
        & (_T_1 & auto_in_a_bits_source == 6'hF | flight_15);
      flight_16 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h10)
        & (_T_1 & auto_in_a_bits_source == 6'h10 | flight_16);
      flight_17 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h11)
        & (_T_1 & auto_in_a_bits_source == 6'h11 | flight_17);
      flight_18 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h12)
        & (_T_1 & auto_in_a_bits_source == 6'h12 | flight_18);
      flight_19 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h13)
        & (_T_1 & auto_in_a_bits_source == 6'h13 | flight_19);
    end
    if (_T_5 & stalls_a_sel)
      stalls_id <= a_id;
    if (_T_5 & stalls_a_sel_1)
      stalls_id_1 <= a_id;
    if (_T_5 & stalls_a_sel_2)
      stalls_id_2 <= a_id;
  end // always @(posedge)
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid & ~stall;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module TLXbar_2(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_4_a_ready,
                auto_out_4_d_valid,
  input  [2:0]  auto_out_4_d_bits_opcode,
  input  [1:0]  auto_out_4_d_bits_param,
  input  [2:0]  auto_out_4_d_bits_size,
  input  [5:0]  auto_out_4_d_bits_source,
  input         auto_out_4_d_bits_sink,
                auto_out_4_d_bits_denied,
  input  [63:0] auto_out_4_d_bits_data,
  input         auto_out_4_d_bits_corrupt,
                auto_out_3_a_ready,
                auto_out_3_d_valid,
  input  [2:0]  auto_out_3_d_bits_size,
  input  [5:0]  auto_out_3_d_bits_source,
  input  [63:0] auto_out_3_d_bits_data,
  input         auto_out_2_a_ready,
                auto_out_2_d_valid,
  input  [2:0]  auto_out_2_d_bits_opcode,
  input  [1:0]  auto_out_2_d_bits_param,
  input  [2:0]  auto_out_2_d_bits_size,
  input  [5:0]  auto_out_2_d_bits_source,
  input         auto_out_2_d_bits_sink,
                auto_out_2_d_bits_denied,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_2_d_bits_corrupt,
                auto_out_1_a_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [5:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
                auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [2:0]  auto_out_0_d_bits_size,
  input  [5:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
                auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_4_a_valid,
  output [2:0]  auto_out_4_a_bits_opcode,
                auto_out_4_a_bits_size,
  output [5:0]  auto_out_4_a_bits_source,
  output [28:0] auto_out_4_a_bits_address,
  output [7:0]  auto_out_4_a_bits_mask,
  output [63:0] auto_out_4_a_bits_data,
  output        auto_out_4_d_ready,
                auto_out_3_a_valid,
  output [2:0]  auto_out_3_a_bits_size,
  output [5:0]  auto_out_3_a_bits_source,
  output [29:0] auto_out_3_a_bits_address,
  output [7:0]  auto_out_3_a_bits_mask,
  output        auto_out_3_d_ready,
                auto_out_2_a_valid,
  output [2:0]  auto_out_2_a_bits_opcode,
                auto_out_2_a_bits_size,
  output [5:0]  auto_out_2_a_bits_source,
  output [28:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_d_ready,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
                auto_out_1_a_bits_size,
  output [5:0]  auto_out_1_a_bits_source,
  output [28:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_d_ready,
                auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
                auto_out_0_a_bits_size,
  output [5:0]  auto_out_0_a_bits_source,
  output [28:0] auto_out_0_a_bits_address,
  output [7:0]  auto_out_0_a_bits_mask,
  output [63:0] auto_out_0_a_bits_data,
  output        auto_out_0_d_ready
);

  wire        requestAIO_0_0 =
    {auto_in_a_bits_address[29], auto_in_a_bits_address[14:13] ^ 2'h2} == 3'h0;
  wire        requestAIO_0_1 =
    {auto_in_a_bits_address[29], auto_in_a_bits_address[14:13] ^ 2'h1} == 3'h0;
  wire        requestAIO_0_2 =
    {auto_in_a_bits_address[29], ~(auto_in_a_bits_address[14:13])} == 3'h0;
  wire        requestAIO_0_4 =
    {auto_in_a_bits_address[29], auto_in_a_bits_address[14:13]} == 3'h0;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire [4:0]  readys_valid =
    {auto_out_4_d_valid,
     auto_out_3_d_valid,
     auto_out_2_d_valid,
     auto_out_1_d_valid,
     auto_out_0_d_valid};
  reg  [4:0]  readys_mask;
  wire [4:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [3:0]  _GEN = _readys_filter_T_1[3:0] | _readys_filter_T_1[4:1];
  wire        _GEN_0 = auto_out_4_d_valid | _readys_filter_T_1[0];
  wire        _GEN_1 = auto_out_3_d_valid | auto_out_4_d_valid;
  wire        _GEN_2 = _GEN[2] | _readys_filter_T_1[4];
  wire [1:0]  _GEN_3 = _GEN[1:0] | _GEN[3:2];
  wire [4:0]  readys_readys =
    ~({readys_mask[4],
       _readys_filter_T_1[4] | readys_mask[3],
       _GEN[3] | readys_mask[2],
       _GEN_2 | readys_mask[1],
       _GEN_3[1] | readys_mask[0]}
      & {_GEN_3[0] | _readys_filter_T_1[4],
         _GEN_0 | _GEN[1] | _GEN[3],
         _GEN_1 | _GEN[0] | _GEN_2,
         auto_out_2_d_valid | auto_out_3_d_valid | _GEN_0 | _GEN_3[1],
         auto_out_1_d_valid | auto_out_2_d_valid | _GEN_1 | _GEN_3[0]});
  wire        winner_0 = readys_readys[0] & auto_out_0_d_valid;
  wire        winner_1 = readys_readys[1] & auto_out_1_d_valid;
  wire        winner_2 = readys_readys[2] & auto_out_2_d_valid;
  wire        winner_3 = readys_readys[3] & auto_out_3_d_valid;
  wire        winner_4 = readys_readys[4] & auto_out_4_d_valid;
  wire        _in_0_d_valid_T = auto_out_0_d_valid | auto_out_1_d_valid;
  `ifndef SYNTHESIS
    wire prefixOR_2 = winner_0 | winner_1;
    wire prefixOR_3 = prefixOR_2 | winner_2;
    always @(posedge clock) begin
      if (~reset
          & ~((~winner_0 | ~winner_1) & (~prefixOR_2 | ~winner_2)
              & (~prefixOR_3 | ~winner_3) & (~(prefixOR_3 | winner_3) | ~winner_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_in_0_d_valid_T | auto_out_2_d_valid | auto_out_3_d_valid
                | auto_out_4_d_valid) | winner_0 | winner_1 | winner_2 | winner_3
              | winner_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  reg         state_2;
  reg         state_3;
  reg         state_4;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        muxState_2 = idle ? winner_2 : state_2;
  wire        muxState_3 = idle ? winner_3 : state_3;
  wire        muxState_4 = idle ? winner_4 : state_4;
  wire        in_0_d_valid =
    idle
      ? _in_0_d_valid_T | auto_out_2_d_valid | auto_out_3_d_valid | auto_out_4_d_valid
      : state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid | state_2
        & auto_out_2_d_valid | state_3 & auto_out_3_d_valid | state_4
        & auto_out_4_d_valid;
  wire [12:0] _beatsDO_decode_T_17 = 13'h3F << auto_out_4_d_bits_size;
  wire [12:0] _beatsDO_decode_T_13 = 13'h3F << auto_out_3_d_bits_size;
  wire [12:0] _beatsDO_decode_T_9 = 13'h3F << auto_out_2_d_bits_size;
  wire [12:0] _beatsDO_decode_T_5 = 13'h3F << auto_out_1_d_bits_size;
  wire [12:0] _beatsDO_decode_T_1 = 13'h3F << auto_out_0_d_bits_size;
  wire [4:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [4:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[3:0], 1'h0};
  wire [4:0]  _readys_mask_T_6 = _readys_mask_T_3 | {_readys_mask_T_3[2:0], 2'h0};
  wire        latch = idle & auto_in_d_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 3'h0;
      readys_mask <= 5'h1F;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[5:3]) : 3'h0)
          | (winner_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0)
          | (winner_2 & auto_out_2_d_bits_opcode[0] ? ~(_beatsDO_decode_T_9[5:3]) : 3'h0)
          | (winner_3 ? ~(_beatsDO_decode_T_13[5:3]) : 3'h0)
          | (winner_4 & auto_out_4_d_bits_opcode[0]
               ? ~(_beatsDO_decode_T_17[5:3])
               : 3'h0);
      else
        beatsLeft <= beatsLeft - {2'h0, auto_in_d_ready & in_0_d_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_6 | {_readys_mask_T_6[0], 4'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
        state_4 <= winner_4;
      end
    end
  end // always @(posedge)
  assign auto_in_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready
    | requestAIO_0_2 & auto_out_2_a_ready | auto_in_a_bits_address[29]
    & auto_out_3_a_ready | requestAIO_0_4 & auto_out_4_a_ready;
  assign auto_in_d_valid = in_0_d_valid;
  assign auto_in_d_bits_opcode =
    (muxState_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_2 ? auto_out_2_d_bits_opcode : 3'h0) | {2'h0, muxState_3}
    | (muxState_4 ? auto_out_4_d_bits_opcode : 3'h0);
  assign auto_in_d_bits_param =
    (muxState_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_1 ? auto_out_1_d_bits_param : 2'h0)
    | (muxState_2 ? auto_out_2_d_bits_param : 2'h0)
    | (muxState_4 ? auto_out_4_d_bits_param : 2'h0);
  assign auto_in_d_bits_size =
    (muxState_0 ? auto_out_0_d_bits_size : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_size : 3'h0)
    | (muxState_2 ? auto_out_2_d_bits_size : 3'h0)
    | (muxState_3 ? auto_out_3_d_bits_size : 3'h0)
    | (muxState_4 ? auto_out_4_d_bits_size : 3'h0);
  assign auto_in_d_bits_source =
    (muxState_0 ? auto_out_0_d_bits_source : 6'h0)
    | (muxState_1 ? auto_out_1_d_bits_source : 6'h0)
    | (muxState_2 ? auto_out_2_d_bits_source : 6'h0)
    | (muxState_3 ? auto_out_3_d_bits_source : 6'h0)
    | (muxState_4 ? auto_out_4_d_bits_source : 6'h0);
  assign auto_in_d_bits_sink =
    muxState_0 & auto_out_0_d_bits_sink | muxState_1 & auto_out_1_d_bits_sink | muxState_2
    & auto_out_2_d_bits_sink | muxState_4 & auto_out_4_d_bits_sink;
  assign auto_in_d_bits_denied =
    muxState_0 & auto_out_0_d_bits_denied | muxState_1 & auto_out_1_d_bits_denied
    | muxState_2 & auto_out_2_d_bits_denied | muxState_4 & auto_out_4_d_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_4 ? auto_out_4_d_bits_data : 64'h0);
  assign auto_in_d_bits_corrupt =
    muxState_0 & auto_out_0_d_bits_corrupt | muxState_1 & auto_out_1_d_bits_corrupt
    | muxState_2 & auto_out_2_d_bits_corrupt | muxState_4 & auto_out_4_d_bits_corrupt;
  assign auto_out_4_a_valid = auto_in_a_valid & requestAIO_0_4;
  assign auto_out_4_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_4_a_bits_size = auto_in_a_bits_size;
  assign auto_out_4_a_bits_source = auto_in_a_bits_source;
  assign auto_out_4_a_bits_address = auto_in_a_bits_address[28:0];
  assign auto_out_4_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_4_a_bits_data = auto_in_a_bits_data;
  assign auto_out_4_d_ready = auto_in_d_ready & (idle ? readys_readys[4] : state_4);
  assign auto_out_3_a_valid = auto_in_a_valid & auto_in_a_bits_address[29];
  assign auto_out_3_a_bits_size = auto_in_a_bits_size;
  assign auto_out_3_a_bits_source = auto_in_a_bits_source;
  assign auto_out_3_a_bits_address = auto_in_a_bits_address;
  assign auto_out_3_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_3_d_ready = auto_in_d_ready & (idle ? readys_readys[3] : state_3);
  assign auto_out_2_a_valid = auto_in_a_valid & requestAIO_0_2;
  assign auto_out_2_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_2_a_bits_size = auto_in_a_bits_size;
  assign auto_out_2_a_bits_source = auto_in_a_bits_source;
  assign auto_out_2_a_bits_address = auto_in_a_bits_address[28:0];
  assign auto_out_2_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_2_a_bits_data = auto_in_a_bits_data;
  assign auto_out_2_d_ready = auto_in_d_ready & (idle ? readys_readys[2] : state_2);
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size;
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address[28:0];
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & (idle ? readys_readys[1] : state_1);
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address[28:0];
  assign auto_out_0_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_d_ready = auto_in_d_ready & (idle ? readys_readys[0] : state_0);
endmodule

module Queue_25(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
                io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [29:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
                io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [29:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_size_combMem ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_0 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_26(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input         io_enq_bits_sink,
                io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output        io_deq_bits_sink,
                io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_burst_combMem_0 ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_size_combMem ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_lock_combMem ram_sink_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_sink),
    .R0_data (io_deq_bits_sink)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_denied),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_corrupt),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
                auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  Queue_25 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_26 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_param   (auto_in_d_bits_param),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_sink    (auto_in_d_bits_sink),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module TLAtomicAutomata(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
                auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        source_i_ready;
  reg  [3:0]  casez_tmp;
  reg  [1:0]  cam_s_0_state;
  reg  [2:0]  cam_a_0_bits_opcode;
  reg  [2:0]  cam_a_0_bits_param;
  reg  [2:0]  cam_a_0_bits_size;
  reg  [5:0]  cam_a_0_bits_source;
  reg  [29:0] cam_a_0_bits_address;
  reg  [7:0]  cam_a_0_bits_mask;
  reg  [63:0] cam_a_0_bits_data;
  reg         cam_a_0_fifoId;
  reg  [3:0]  cam_a_0_lut;
  reg  [63:0] cam_d_0_data;
  reg         cam_d_0_denied;
  reg         cam_d_0_corrupt;
  wire        cam_free_0 = cam_s_0_state == 2'h0;
  wire        winner_0 = cam_s_0_state == 2'h2;
  wire        _GEN = auto_in_a_bits_opcode == 3'h3 | auto_in_a_bits_opcode == 3'h2;
  wire [3:0]  _logic_out_T = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[0], cam_d_0_data[0]};
  wire [3:0]  _logic_out_T_2 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[1], cam_d_0_data[1]};
  wire [3:0]  _logic_out_T_4 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[2], cam_d_0_data[2]};
  wire [3:0]  _logic_out_T_6 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[3], cam_d_0_data[3]};
  wire [3:0]  _logic_out_T_8 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[4], cam_d_0_data[4]};
  wire [3:0]  _logic_out_T_10 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[5], cam_d_0_data[5]};
  wire [3:0]  _logic_out_T_12 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[6], cam_d_0_data[6]};
  wire [3:0]  _logic_out_T_14 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[7], cam_d_0_data[7]};
  wire [3:0]  _logic_out_T_16 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[8], cam_d_0_data[8]};
  wire [3:0]  _logic_out_T_18 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[9], cam_d_0_data[9]};
  wire [3:0]  _logic_out_T_20 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[10], cam_d_0_data[10]};
  wire [3:0]  _logic_out_T_22 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[11], cam_d_0_data[11]};
  wire [3:0]  _logic_out_T_24 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[12], cam_d_0_data[12]};
  wire [3:0]  _logic_out_T_26 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[13], cam_d_0_data[13]};
  wire [3:0]  _logic_out_T_28 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[14], cam_d_0_data[14]};
  wire [3:0]  _logic_out_T_30 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[15], cam_d_0_data[15]};
  wire [3:0]  _logic_out_T_32 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[16], cam_d_0_data[16]};
  wire [3:0]  _logic_out_T_34 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[17], cam_d_0_data[17]};
  wire [3:0]  _logic_out_T_36 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[18], cam_d_0_data[18]};
  wire [3:0]  _logic_out_T_38 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[19], cam_d_0_data[19]};
  wire [3:0]  _logic_out_T_40 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[20], cam_d_0_data[20]};
  wire [3:0]  _logic_out_T_42 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[21], cam_d_0_data[21]};
  wire [3:0]  _logic_out_T_44 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[22], cam_d_0_data[22]};
  wire [3:0]  _logic_out_T_46 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[23], cam_d_0_data[23]};
  wire [3:0]  _logic_out_T_48 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[24], cam_d_0_data[24]};
  wire [3:0]  _logic_out_T_50 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[25], cam_d_0_data[25]};
  wire [3:0]  _logic_out_T_52 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[26], cam_d_0_data[26]};
  wire [3:0]  _logic_out_T_54 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[27], cam_d_0_data[27]};
  wire [3:0]  _logic_out_T_56 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[28], cam_d_0_data[28]};
  wire [3:0]  _logic_out_T_58 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[29], cam_d_0_data[29]};
  wire [3:0]  _logic_out_T_60 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[30], cam_d_0_data[30]};
  wire [3:0]  _logic_out_T_62 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[31], cam_d_0_data[31]};
  wire [3:0]  _logic_out_T_64 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[32], cam_d_0_data[32]};
  wire [3:0]  _logic_out_T_66 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[33], cam_d_0_data[33]};
  wire [3:0]  _logic_out_T_68 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[34], cam_d_0_data[34]};
  wire [3:0]  _logic_out_T_70 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[35], cam_d_0_data[35]};
  wire [3:0]  _logic_out_T_72 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[36], cam_d_0_data[36]};
  wire [3:0]  _logic_out_T_74 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[37], cam_d_0_data[37]};
  wire [3:0]  _logic_out_T_76 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[38], cam_d_0_data[38]};
  wire [3:0]  _logic_out_T_78 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[39], cam_d_0_data[39]};
  wire [3:0]  _logic_out_T_80 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[40], cam_d_0_data[40]};
  wire [3:0]  _logic_out_T_82 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[41], cam_d_0_data[41]};
  wire [3:0]  _logic_out_T_84 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[42], cam_d_0_data[42]};
  wire [3:0]  _logic_out_T_86 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[43], cam_d_0_data[43]};
  wire [3:0]  _logic_out_T_88 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[44], cam_d_0_data[44]};
  wire [3:0]  _logic_out_T_90 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[45], cam_d_0_data[45]};
  wire [3:0]  _logic_out_T_92 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[46], cam_d_0_data[46]};
  wire [3:0]  _logic_out_T_94 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[47], cam_d_0_data[47]};
  wire [3:0]  _logic_out_T_96 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[48], cam_d_0_data[48]};
  wire [3:0]  _logic_out_T_98 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[49], cam_d_0_data[49]};
  wire [3:0]  _logic_out_T_100 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[50], cam_d_0_data[50]};
  wire [3:0]  _logic_out_T_102 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[51], cam_d_0_data[51]};
  wire [3:0]  _logic_out_T_104 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[52], cam_d_0_data[52]};
  wire [3:0]  _logic_out_T_106 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[53], cam_d_0_data[53]};
  wire [3:0]  _logic_out_T_108 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[54], cam_d_0_data[54]};
  wire [3:0]  _logic_out_T_110 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[55], cam_d_0_data[55]};
  wire [3:0]  _logic_out_T_112 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[56], cam_d_0_data[56]};
  wire [3:0]  _logic_out_T_114 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[57], cam_d_0_data[57]};
  wire [3:0]  _logic_out_T_116 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[58], cam_d_0_data[58]};
  wire [3:0]  _logic_out_T_118 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[59], cam_d_0_data[59]};
  wire [3:0]  _logic_out_T_120 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[60], cam_d_0_data[60]};
  wire [3:0]  _logic_out_T_122 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[61], cam_d_0_data[61]};
  wire [3:0]  _logic_out_T_124 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[62], cam_d_0_data[62]};
  wire [3:0]  _logic_out_T_126 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[63], cam_d_0_data[63]};
  wire [6:0]  _GEN_0 = ~(cam_a_0_bits_mask[6:0]) | cam_a_0_bits_mask[7:1];
  wire [6:0]  _GEN_1 =
    {cam_a_0_bits_data[55],
     cam_a_0_bits_data[47],
     cam_a_0_bits_data[39],
     cam_a_0_bits_data[31],
     cam_a_0_bits_data[23],
     cam_a_0_bits_data[15],
     cam_a_0_bits_data[7]} & ~_GEN_0;
  wire [6:0]  _GEN_2 =
    {cam_d_0_data[55],
     cam_d_0_data[47],
     cam_d_0_data[39],
     cam_d_0_data[31],
     cam_d_0_data[23],
     cam_d_0_data[15],
     cam_d_0_data[7]} & ~_GEN_0;
  wire [5:0]  _GEN_3 = _GEN_1[6:1] | _GEN_1[5:0];
  wire [3:0]  _GEN_4 = _GEN_3[5:2] | _GEN_3[3:0];
  wire        _signext_a_T_24 = _GEN_3[1] | _GEN_1[0];
  wire [5:0]  _GEN_5 = _GEN_2[6:1] | _GEN_2[5:0];
  wire [3:0]  _GEN_6 = _GEN_5[5:2] | _GEN_5[3:0];
  wire        _signext_d_T_24 = _GEN_5[1] | _GEN_2[0];
  wire [63:0] wide_mask =
    {{8{cam_a_0_bits_mask[7]}},
     {8{cam_a_0_bits_mask[6]}},
     {8{cam_a_0_bits_mask[5]}},
     {8{cam_a_0_bits_mask[4]}},
     {8{cam_a_0_bits_mask[3]}},
     {8{cam_a_0_bits_mask[2]}},
     {8{cam_a_0_bits_mask[1]}},
     {8{cam_a_0_bits_mask[0]}}};
  wire [63:0] a_a_ext =
    cam_a_0_bits_data & wide_mask
    | {{8{_GEN_4[3] | _signext_a_T_24}},
       {8{_GEN_4[2] | _GEN_3[0]}},
       {8{_GEN_4[1] | _GEN_1[0]}},
       {8{_GEN_4[0]}},
       {8{_signext_a_T_24}},
       {8{_GEN_3[0]}},
       {8{_GEN_1[0]}},
       8'h0};
  wire [63:0] a_d_ext =
    cam_d_0_data & wide_mask
    | {{8{_GEN_6[3] | _signext_d_T_24}},
       {8{_GEN_6[2] | _GEN_5[0]}},
       {8{_GEN_6[1] | _GEN_2[0]}},
       {8{_GEN_6[0]}},
       {8{_signext_d_T_24}},
       {8{_GEN_5[0]}},
       {8{_GEN_2[0]}},
       8'h0};
  wire [63:0] adder_out = a_a_ext + ({64{~(cam_a_0_bits_param[2])}} ^ a_d_ext);
  wire        a_allow =
    ~(((&cam_s_0_state) | winner_0) & ~cam_a_0_fifoId) & (~_GEN | cam_free_0);
  wire        source_i_valid = auto_in_a_valid & a_allow;
  wire        _source_c_bits_a_mask_T = cam_a_0_bits_size > 3'h2;
  wire        source_c_bits_a_mask_size = cam_a_0_bits_size[1:0] == 2'h2;
  wire        source_c_bits_a_mask_acc =
    _source_c_bits_a_mask_T | source_c_bits_a_mask_size & ~(cam_a_0_bits_address[2]);
  wire        source_c_bits_a_mask_acc_1 =
    _source_c_bits_a_mask_T | source_c_bits_a_mask_size & cam_a_0_bits_address[2];
  wire        source_c_bits_a_mask_size_1 = cam_a_0_bits_size[1:0] == 2'h1;
  wire        source_c_bits_a_mask_eq_2 =
    ~(cam_a_0_bits_address[2]) & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_2 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_2;
  wire        source_c_bits_a_mask_eq_3 =
    ~(cam_a_0_bits_address[2]) & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_3 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_3;
  wire        source_c_bits_a_mask_eq_4 =
    cam_a_0_bits_address[2] & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_4 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_4;
  wire        source_c_bits_a_mask_eq_5 =
    cam_a_0_bits_address[2] & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_5 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_5;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire        winner_1 = ~winner_0 & source_i_valid;
  wire        _nodeOut_a_valid_T = winner_0 | source_i_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_nodeOut_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign source_i_ready = auto_out_a_ready & (idle ? ~winner_0 : state_1);
  wire        nodeOut_a_valid =
    idle ? _nodeOut_a_valid_T : state_0 & winner_0 | state_1 & source_i_valid;
  always @(*) begin
    casez (auto_in_a_bits_param[1:0])
      2'b00:
        casez_tmp = 4'h6;
      2'b01:
        casez_tmp = 4'hE;
      2'b10:
        casez_tmp = 4'h8;
      default:
        casez_tmp = 4'hC;
    endcase
  end // always @(*)
  reg  [2:0]  d_first_counter;
  wire        d_first = d_first_counter == 3'h0;
  wire        d_cam_sel_match_0 =
    cam_a_0_bits_source == auto_out_d_bits_source & (|cam_s_0_state);
  wire        d_ackd = auto_out_d_bits_opcode == 3'h1;
  wire        d_drop = d_first & d_ackd & d_cam_sel_match_0;
  wire        d_replace = d_first & auto_out_d_bits_opcode == 3'h0 & d_cam_sel_match_0;
  wire        nodeOut_d_ready = auto_in_d_ready | d_drop;
  wire [12:0] _decode_T_1 = 13'h3F << auto_in_a_bits_size;
  wire [12:0] _d_first_beats1_decode_T_1 = 13'h3F << auto_out_d_bits_size;
  wire        _GEN_7 = source_i_ready & source_i_valid & _GEN & cam_free_0;
  wire        _T_23 = nodeOut_d_ready & auto_out_d_valid;
  wire        _T_24 = _T_23 & d_first;
  always @(posedge clock) begin
    if (reset) begin
      cam_s_0_state <= 2'h0;
      beatsLeft <= 3'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_first_counter <= 3'h0;
    end
    else begin
      if (_T_24 & d_cam_sel_match_0)
        cam_s_0_state <= {d_ackd, 1'h0};
      else if (auto_out_a_ready & (idle | state_0) & winner_0)
        cam_s_0_state <= 2'h1;
      else if (_GEN_7)
        cam_s_0_state <= 2'h3;
      if (idle & auto_out_a_ready) begin
        if (winner_1 & ~(auto_in_a_bits_opcode[2]))
          beatsLeft <= ~(_decode_T_1[5:3]);
        else
          beatsLeft <= 3'h0;
      end
      else
        beatsLeft <= beatsLeft - {2'h0, auto_out_a_ready & nodeOut_a_valid};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (_T_23) begin
        if (d_first) begin
          if (auto_out_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[5:3]);
          else
            d_first_counter <= 3'h0;
        end
        else
          d_first_counter <= d_first_counter - 3'h1;
      end
    end
    if (_GEN_7) begin
      cam_a_0_bits_opcode <= auto_in_a_bits_opcode;
      cam_a_0_bits_param <= auto_in_a_bits_param;
      cam_a_0_bits_size <= auto_in_a_bits_size;
      cam_a_0_bits_source <= auto_in_a_bits_source;
      cam_a_0_bits_address <= auto_in_a_bits_address;
      cam_a_0_bits_mask <= auto_in_a_bits_mask;
      cam_a_0_bits_data <= auto_in_a_bits_data;
      cam_a_0_lut <= casez_tmp;
    end
    cam_a_0_fifoId <= ~_GEN_7 & cam_a_0_fifoId;
    if (_T_24 & d_cam_sel_match_0 & d_ackd) begin
      cam_d_0_data <= auto_out_d_bits_data;
      cam_d_0_denied <= auto_out_d_bits_denied;
      cam_d_0_corrupt <= auto_out_d_bits_corrupt;
    end
  end // always @(posedge)
  assign auto_in_a_ready = source_i_ready & a_allow;
  assign auto_in_d_valid = auto_out_d_valid & ~d_drop;
  assign auto_in_d_bits_opcode = d_replace ? 3'h1 : auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = d_replace & cam_d_0_denied | auto_out_d_bits_denied;
  assign auto_in_d_bits_data = d_replace ? cam_d_0_data : auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt =
    d_replace ? cam_d_0_corrupt | auto_out_d_bits_denied : auto_out_d_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode =
    muxState_1 ? (_GEN ? 3'h4 : auto_in_a_bits_opcode) : 3'h0;
  assign auto_out_a_bits_param = ~muxState_1 | _GEN ? 3'h0 : auto_in_a_bits_param;
  assign auto_out_a_bits_size =
    (muxState_0 ? cam_a_0_bits_size : 3'h0) | (muxState_1 ? auto_in_a_bits_size : 3'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? cam_a_0_bits_source : 6'h0)
    | (muxState_1 ? auto_in_a_bits_source : 6'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? cam_a_0_bits_address : 30'h0)
    | (muxState_1 ? auto_in_a_bits_address : 30'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & ~(cam_a_0_bits_address[0])}
       : 8'h0) | (muxState_1 ? auto_in_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_0
       ? (cam_a_0_bits_opcode[0]
            ? {_logic_out_T_126[0],
               _logic_out_T_124[0],
               _logic_out_T_122[0],
               _logic_out_T_120[0],
               _logic_out_T_118[0],
               _logic_out_T_116[0],
               _logic_out_T_114[0],
               _logic_out_T_112[0],
               _logic_out_T_110[0],
               _logic_out_T_108[0],
               _logic_out_T_106[0],
               _logic_out_T_104[0],
               _logic_out_T_102[0],
               _logic_out_T_100[0],
               _logic_out_T_98[0],
               _logic_out_T_96[0],
               _logic_out_T_94[0],
               _logic_out_T_92[0],
               _logic_out_T_90[0],
               _logic_out_T_88[0],
               _logic_out_T_86[0],
               _logic_out_T_84[0],
               _logic_out_T_82[0],
               _logic_out_T_80[0],
               _logic_out_T_78[0],
               _logic_out_T_76[0],
               _logic_out_T_74[0],
               _logic_out_T_72[0],
               _logic_out_T_70[0],
               _logic_out_T_68[0],
               _logic_out_T_66[0],
               _logic_out_T_64[0],
               _logic_out_T_62[0],
               _logic_out_T_60[0],
               _logic_out_T_58[0],
               _logic_out_T_56[0],
               _logic_out_T_54[0],
               _logic_out_T_52[0],
               _logic_out_T_50[0],
               _logic_out_T_48[0],
               _logic_out_T_46[0],
               _logic_out_T_44[0],
               _logic_out_T_42[0],
               _logic_out_T_40[0],
               _logic_out_T_38[0],
               _logic_out_T_36[0],
               _logic_out_T_34[0],
               _logic_out_T_32[0],
               _logic_out_T_30[0],
               _logic_out_T_28[0],
               _logic_out_T_26[0],
               _logic_out_T_24[0],
               _logic_out_T_22[0],
               _logic_out_T_20[0],
               _logic_out_T_18[0],
               _logic_out_T_16[0],
               _logic_out_T_14[0],
               _logic_out_T_12[0],
               _logic_out_T_10[0],
               _logic_out_T_8[0],
               _logic_out_T_6[0],
               _logic_out_T_4[0],
               _logic_out_T_2[0],
               _logic_out_T[0]}
            : cam_a_0_bits_param[2]
                ? adder_out
                : cam_a_0_bits_param[0] == (a_a_ext[63] == a_d_ext[63]
                                              ? ~(adder_out[63])
                                              : cam_a_0_bits_param[1] == a_a_ext[63])
                    ? cam_a_0_bits_data
                    : cam_d_0_data)
       : 64'h0) | (muxState_1 ? auto_in_a_bits_data : 64'h0);
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module Repeater(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [28:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [28:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [28:0] saved_address;
  reg  [7:0]  saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [28:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
                auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [28:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [28:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _dsizeOH1_T_1 = 6'h7 << auto_out_d_bits_size;
  wire [5:0]  _GEN =
    {auto_out_d_bits_source[2:0], ~(_dsizeOH1_T_1[2:0])}
    & {1'h1, ~(auto_out_d_bits_source[2:0]), _dsizeOH1_T_1[2:1]};
  wire [2:0]  _GEN_0 = {1'h0, _GEN[5:4]} | _GEN[2:0];
  wire [2:0]  dFirst_size = {|(_GEN[5:3]), |(_GEN_0[2:1]), _GEN_0[2] | _GEN_0[0]};
  wire        drop = ~(auto_out_d_bits_opcode[0]) & (|(auto_out_d_bits_source[2:0]));
  wire        nodeOut_d_ready = auto_in_d_ready | drop;
  wire [2:0]  aFrag = _repeater_io_deq_bits_size[2] ? 3'h3 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  wire [9:0]  _aFragOH1_T_1 = 10'h7 << aFrag;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _old_gennum1_T_2 = gennum - 3'h1;
  wire [2:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:3]) : _old_gennum1_T_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:311 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = nodeOut_d_ready & auto_out_d_valid;
  wire        _GEN_1 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[2:0];
        else
          acknum <= acknum - {2'h0, auto_out_d_bits_opcode[0] | (&auto_out_d_bits_size)};
      end
      if (_GEN_1)
        dToggle <= auto_out_d_bits_source[3];
      if (auto_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_aOrigOH1_T_1[5:3]);
        else
          gennum <= _old_gennum1_T_2;
      end
    end
    if (_GEN_1)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|old_gennum1)),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid & ~drop;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[9:4];
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = aFrag[1:0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), old_gennum1};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address
    | {23'h0, ~(_aOrigOH1_T_1[5:0] | {old_gennum1, ~(_aFragOH1_T_1[2:0])} | 6'h7)};
  assign auto_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLInterconnectCoupler_5(
  input         clock,
                reset,
                auto_control_xing_out_a_ready,
                auto_control_xing_out_d_valid,
  input  [2:0]  auto_control_xing_out_d_bits_opcode,
  input  [1:0]  auto_control_xing_out_d_bits_param,
                auto_control_xing_out_d_bits_size,
  input  [9:0]  auto_control_xing_out_d_bits_source,
  input         auto_control_xing_out_d_bits_sink,
                auto_control_xing_out_d_bits_denied,
  input  [63:0] auto_control_xing_out_d_bits_data,
  input         auto_control_xing_out_d_bits_corrupt,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [28:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
  output        auto_control_xing_out_a_valid,
  output [2:0]  auto_control_xing_out_a_bits_opcode,
  output [1:0]  auto_control_xing_out_a_bits_size,
  output [9:0]  auto_control_xing_out_a_bits_source,
  output [28:0] auto_control_xing_out_a_bits_address,
  output [7:0]  auto_control_xing_out_a_bits_mask,
  output [63:0] auto_control_xing_out_a_bits_data,
  output        auto_control_xing_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
  output [1:0]  auto_tl_in_d_bits_param,
  output [2:0]  auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output        auto_tl_in_d_bits_sink,
                auto_tl_in_d_bits_denied,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_tl_in_d_bits_corrupt
);

  TLFragmenter fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (auto_control_xing_out_a_ready),
    .auto_out_d_valid        (auto_control_xing_out_d_valid),
    .auto_out_d_bits_opcode  (auto_control_xing_out_d_bits_opcode),
    .auto_out_d_bits_param   (auto_control_xing_out_d_bits_param),
    .auto_out_d_bits_size    (auto_control_xing_out_d_bits_size),
    .auto_out_d_bits_source  (auto_control_xing_out_d_bits_source),
    .auto_out_d_bits_sink    (auto_control_xing_out_d_bits_sink),
    .auto_out_d_bits_denied  (auto_control_xing_out_d_bits_denied),
    .auto_out_d_bits_data    (auto_control_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt (auto_control_xing_out_d_bits_corrupt),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_tl_in_d_bits_param),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_tl_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_tl_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_tl_in_d_bits_corrupt),
    .auto_out_a_valid        (auto_control_xing_out_a_valid),
    .auto_out_a_bits_opcode  (auto_control_xing_out_a_bits_opcode),
    .auto_out_a_bits_size    (auto_control_xing_out_a_bits_size),
    .auto_out_a_bits_source  (auto_control_xing_out_a_bits_source),
    .auto_out_a_bits_address (auto_control_xing_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_control_xing_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_control_xing_out_a_bits_data),
    .auto_out_d_ready        (auto_control_xing_out_d_ready)
  );
endmodule

module Repeater_3(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [29:0] io_enq_bits_address,
  input         io_enq_bits_mask,
                io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [29:0] io_deq_bits_address,
  output        io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [29:0] saved_address;
  reg         saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter_3(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input         auto_in_a_bits_mask,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
                auto_out_d_bits_size,
  input  [12:0] auto_out_d_bits_source,
  input  [7:0]  auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [7:0]  auto_in_d_bits_data,
  output        auto_out_a_valid,
                auto_out_a_bits_size,
  output [12:0] auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [29:0] _repeater_io_deq_bits_address;
  wire        _repeater_io_deq_bits_mask;
  reg  [5:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 6'h0;
  wire [5:0]  _GEN = {5'h0, auto_out_d_bits_size};
  wire [5:0]  _dFirst_size_T_1 = auto_out_d_bits_source[5:0] | _GEN;
  wire [5:0]  _GEN_0 = _dFirst_size_T_1 & {1'h1, ~(_dFirst_size_T_1[5:1])};
  wire [2:0]  _GEN_1 = {1'h0, _GEN_0[5:4]} | _GEN_0[2:0];
  wire [2:0]  dFirst_size = {|(_GEN_0[5:3]), |(_GEN_1[2:1]), _GEN_1[2] | _GEN_1[0]};
  wire [2:0]  aFrag = (|_repeater_io_deq_bits_size) ? 3'h0 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  reg  [5:0]  gennum;
  wire        aFirst = gennum == 6'h0;
  wire [5:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:0]) : gennum - 6'h1;
  wire [5:0]  _GEN_2 = {5'h0, |aFrag};
  wire [5:0]  _aFragnum_T_3 = ~old_gennum1 | _GEN_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~auto_out_d_valid
              | ~(auto_out_d_bits_source[0] & auto_out_d_bits_size))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:204 assert (!out.d.valid || (acknum_fragment & acknum_size) === 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_mask)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = auto_in_d_ready & auto_out_d_valid;
  wire        _GEN_3 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 6'h0;
      dToggle <= 1'h0;
      gennum <= 6'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[5:0] | _GEN;
        else
          acknum <= acknum - 6'h1;
      end
      if (_GEN_3)
        dToggle <= auto_out_d_bits_source[6];
      if (auto_out_a_ready & _repeater_io_deq_valid)
        gennum <= ~(~old_gennum1 | _GEN_2);
    end
    if (_GEN_3)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater_3 repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_aFragnum_T_3 != 6'h3F),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[12:7];
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_size = aFrag[0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), ~_aFragnum_T_3};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address | {24'h0, ~(old_gennum1 | _aOrigOH1_T_1[5:0] | _GEN_2)};
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module Queue_29(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [29:0] io_enq_bits_address,
  input         io_enq_bits_mask,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [29:0] io_deq_bits_address,
  output        io_deq_bits_mask
);

  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_tl_state_source_combMem_1 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_1 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_last_combMem_0 ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_2(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input         auto_in_a_bits_mask,
                auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input  [7:0]  auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [7:0]  auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output        auto_out_a_bits_mask,
                auto_out_d_ready
);

  Queue_29 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module Repeater_4(
  input         io_enq_valid,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [29:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [29:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  assign io_enq_ready = io_deq_ready;
  assign io_deq_valid = io_enq_valid;
  assign io_deq_bits_size = io_enq_bits_size;
  assign io_deq_bits_source = io_enq_bits_source;
  assign io_deq_bits_address = io_enq_bits_address;
  assign io_deq_bits_mask = io_enq_bits_mask;
endmodule

module TLWidthWidget_4(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input  [7:0]  auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output        auto_out_a_bits_mask,
                auto_out_d_ready
);

  wire [29:0] _repeated_repeater_io_deq_bits_address;
  wire [7:0]  _repeated_repeater_io_deq_bits_mask;
  reg         casez_tmp;
  always @(*) begin
    casez (_repeated_repeater_io_deq_bits_address[2:0])
      3'b000:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[0];
      3'b001:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[1];
      3'b010:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[2];
      3'b011:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[3];
      3'b100:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[4];
      3'b101:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[5];
      3'b110:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[6];
      default:
        casez_tmp = _repeated_repeater_io_deq_bits_mask[7];
    endcase
  end // always @(*)
  wire [9:0]  _limit_T_1 = 10'h7 << auto_out_d_bits_size;
  reg  [2:0]  count;
  wire        last = count == ~(_limit_T_1[2:0]);
  wire        nodeOut_d_ready = auto_in_d_ready | ~last;
  reg         nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_0 =
    (count & ~(_limit_T_1[2:0])) == 3'h0 | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_1 =
    ((count ^ 3'h1) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_2 =
    ((count ^ 3'h2) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_3 =
    ((count ^ 3'h3) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_4 =
    ((count ^ 3'h4) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_5 =
    ((count ^ 3'h5) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  wire        nodeIn_d_bits_data_masked_enable_6 =
    ((count ^ 3'h6) & ~(_limit_T_1[2:0])) == 3'h0
    | ~nodeIn_d_bits_data_rdata_written_once;
  reg  [7:0]  nodeIn_d_bits_data_rdata_0;
  reg  [7:0]  nodeIn_d_bits_data_rdata_1;
  reg  [7:0]  nodeIn_d_bits_data_rdata_2;
  reg  [7:0]  nodeIn_d_bits_data_rdata_3;
  reg  [7:0]  nodeIn_d_bits_data_rdata_4;
  reg  [7:0]  nodeIn_d_bits_data_rdata_5;
  reg  [7:0]  nodeIn_d_bits_data_rdata_6;
  wire        _nodeIn_d_bits_data_T = nodeOut_d_ready & auto_out_d_valid;
  wire        _nodeIn_d_bits_data_T_2 = _nodeIn_d_bits_data_T & ~last;
  always @(posedge clock) begin
    if (reset) begin
      count <= 3'h0;
      nodeIn_d_bits_data_rdata_written_once <= 1'h0;
    end
    else begin
      if (_nodeIn_d_bits_data_T) begin
        if (last)
          count <= 3'h0;
        else
          count <= count + 3'h1;
      end
      nodeIn_d_bits_data_rdata_written_once <=
        _nodeIn_d_bits_data_T_2 | nodeIn_d_bits_data_rdata_written_once;
    end
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_0)
      nodeIn_d_bits_data_rdata_0 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_1)
      nodeIn_d_bits_data_rdata_1 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_2)
      nodeIn_d_bits_data_rdata_2 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_3)
      nodeIn_d_bits_data_rdata_3 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_4)
      nodeIn_d_bits_data_rdata_4 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_5)
      nodeIn_d_bits_data_rdata_5 <= auto_out_d_bits_data;
    if (_nodeIn_d_bits_data_T_2 & nodeIn_d_bits_data_masked_enable_6)
      nodeIn_d_bits_data_rdata_6 <= auto_out_d_bits_data;
  end // always @(posedge)
  Repeater_4 repeated_repeater (
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (_repeated_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeated_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid & last;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_data =
    {auto_out_d_bits_data,
     nodeIn_d_bits_data_masked_enable_6
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_6,
     nodeIn_d_bits_data_masked_enable_5
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_5,
     nodeIn_d_bits_data_masked_enable_4
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_4,
     nodeIn_d_bits_data_masked_enable_3
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_3,
     nodeIn_d_bits_data_masked_enable_2
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_2,
     nodeIn_d_bits_data_masked_enable_1
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_1,
     nodeIn_d_bits_data_masked_enable_0
       ? auto_out_d_bits_data
       : nodeIn_d_bits_data_rdata_0};
  assign auto_out_a_bits_address = _repeated_repeater_io_deq_bits_address;
  assign auto_out_a_bits_mask = casez_tmp;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLInterconnectCoupler_8(
  input         clock,
                reset,
                auto_mem_xing_out_a_ready,
                auto_mem_xing_out_d_valid,
                auto_mem_xing_out_d_bits_size,
  input  [12:0] auto_mem_xing_out_d_bits_source,
  input  [7:0]  auto_mem_xing_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [29:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input         auto_tl_in_d_ready,
  output        auto_mem_xing_out_a_valid,
                auto_mem_xing_out_a_bits_size,
  output [12:0] auto_mem_xing_out_a_bits_source,
  output [29:0] auto_mem_xing_out_a_bits_address,
  output        auto_mem_xing_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  wire        _widget_auto_out_a_valid;
  wire [2:0]  _widget_auto_out_a_bits_size;
  wire [5:0]  _widget_auto_out_a_bits_source;
  wire [29:0] _widget_auto_out_a_bits_address;
  wire        _widget_auto_out_a_bits_mask;
  wire        _widget_auto_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_size;
  wire [5:0]  _buffer_auto_in_d_bits_source;
  wire [7:0]  _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_size;
  wire [5:0]  _buffer_auto_out_a_bits_source;
  wire [29:0] _buffer_auto_out_a_bits_address;
  wire        _buffer_auto_out_a_bits_mask;
  wire        _buffer_auto_out_d_ready;
  wire        _fragmenter_auto_in_a_ready;
  wire        _fragmenter_auto_in_d_valid;
  wire [2:0]  _fragmenter_auto_in_d_bits_size;
  wire [5:0]  _fragmenter_auto_in_d_bits_source;
  wire [7:0]  _fragmenter_auto_in_d_bits_data;
  TLFragmenter_3 fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (_buffer_auto_out_a_valid),
    .auto_in_a_bits_size     (_buffer_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_buffer_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_buffer_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_buffer_auto_out_a_bits_mask),
    .auto_in_d_ready         (_buffer_auto_out_d_ready),
    .auto_out_a_ready        (auto_mem_xing_out_a_ready),
    .auto_out_d_valid        (auto_mem_xing_out_d_valid),
    .auto_out_d_bits_size    (auto_mem_xing_out_d_bits_size),
    .auto_out_d_bits_source  (auto_mem_xing_out_d_bits_source),
    .auto_out_d_bits_data    (auto_mem_xing_out_d_bits_data),
    .auto_in_a_ready         (_fragmenter_auto_in_a_ready),
    .auto_in_d_valid         (_fragmenter_auto_in_d_valid),
    .auto_in_d_bits_size     (_fragmenter_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_fragmenter_auto_in_d_bits_source),
    .auto_in_d_bits_data     (_fragmenter_auto_in_d_bits_data),
    .auto_out_a_valid        (auto_mem_xing_out_a_valid),
    .auto_out_a_bits_size    (auto_mem_xing_out_a_bits_size),
    .auto_out_a_bits_source  (auto_mem_xing_out_a_bits_source),
    .auto_out_a_bits_address (auto_mem_xing_out_a_bits_address),
    .auto_out_d_ready        (auto_mem_xing_out_d_ready)
  );
  TLBuffer_2 buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (_widget_auto_out_a_valid),
    .auto_in_a_bits_size     (_widget_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_widget_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_widget_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_widget_auto_out_a_bits_mask),
    .auto_in_d_ready         (_widget_auto_out_d_ready),
    .auto_out_a_ready        (_fragmenter_auto_in_a_ready),
    .auto_out_d_valid        (_fragmenter_auto_in_d_valid),
    .auto_out_d_bits_size    (_fragmenter_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_fragmenter_auto_in_d_bits_source),
    .auto_out_d_bits_data    (_fragmenter_auto_in_d_bits_data),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  TLWidthWidget_4 widget (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_out_a_valid        (_widget_auto_out_a_valid),
    .auto_out_a_bits_size    (_widget_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_widget_auto_out_a_bits_source),
    .auto_out_a_bits_address (_widget_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_widget_auto_out_a_bits_mask),
    .auto_out_d_ready        (_widget_auto_out_d_ready)
  );
endmodule

module PeripheryBus(
  input         auto_coupler_to_device_named_uart_0_control_xing_out_a_ready,
                auto_coupler_to_device_named_uart_0_control_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_size,
  input  [9:0]  auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_source,
  input  [63:0] auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_data,
  input         auto_coupler_to_device_named_qspi_0_mem_xing_out_a_ready,
                auto_coupler_to_device_named_qspi_0_mem_xing_out_d_valid,
                auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_size,
  input  [12:0] auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_source,
  input  [7:0]  auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_data,
  input         auto_coupler_to_device_named_qspi_0_control_xing_out_a_ready,
                auto_coupler_to_device_named_qspi_0_control_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_size,
  input  [9:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_source,
  input  [63:0] auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_data,
  input         auto_coupler_to_device_named_ttc_0_control_xing_out_a_ready,
                auto_coupler_to_device_named_ttc_0_control_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_param,
                auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_size,
  input  [9:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_source,
  input         auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_sink,
                auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_data,
  input         auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_corrupt,
                auto_coupler_to_device_named_eth_0_control_xing_out_a_ready,
                auto_coupler_to_device_named_eth_0_control_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_param,
                auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_size,
  input  [9:0]  auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_source,
  input         auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_sink,
                auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_data,
  input         auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_corrupt,
                auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_clock,
                auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_reset,
                auto_bus_xing_in_a_valid,
  input  [2:0]  auto_bus_xing_in_a_bits_opcode,
                auto_bus_xing_in_a_bits_param,
                auto_bus_xing_in_a_bits_size,
  input  [5:0]  auto_bus_xing_in_a_bits_source,
  input  [29:0] auto_bus_xing_in_a_bits_address,
  input  [7:0]  auto_bus_xing_in_a_bits_mask,
  input  [63:0] auto_bus_xing_in_a_bits_data,
  input         auto_bus_xing_in_d_ready,
  output        auto_coupler_to_device_named_uart_0_control_xing_out_a_valid,
  output [2:0]  auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size,
  output [9:0]  auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source,
  output [28:0] auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data,
  output        auto_coupler_to_device_named_uart_0_control_xing_out_d_ready,
                auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid,
                auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size,
  output [12:0] auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source,
  output [29:0] auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address,
  output        auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready,
                auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid,
  output [2:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size,
  output [9:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source,
  output [28:0] auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data,
  output        auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready,
                auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid,
  output [2:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size,
  output [9:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source,
  output [28:0] auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data,
  output        auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready,
                auto_coupler_to_device_named_eth_0_control_xing_out_a_valid,
  output [2:0]  auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size,
  output [9:0]  auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source,
  output [28:0] auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data,
  output        auto_coupler_to_device_named_eth_0_control_xing_out_d_ready,
                auto_fixedClockNode_out_3_clock,
                auto_fixedClockNode_out_3_reset,
                auto_fixedClockNode_out_2_clock,
                auto_fixedClockNode_out_2_reset,
                auto_fixedClockNode_out_1_clock,
                auto_fixedClockNode_out_1_reset,
                auto_fixedClockNode_out_0_clock,
                auto_fixedClockNode_out_0_reset,
                auto_bus_xing_in_a_ready,
                auto_bus_xing_in_d_valid,
  output [2:0]  auto_bus_xing_in_d_bits_opcode,
  output [1:0]  auto_bus_xing_in_d_bits_param,
  output [2:0]  auto_bus_xing_in_d_bits_size,
  output [5:0]  auto_bus_xing_in_d_bits_source,
  output        auto_bus_xing_in_d_bits_sink,
                auto_bus_xing_in_d_bits_denied,
  output [63:0] auto_bus_xing_in_d_bits_data,
  output        auto_bus_xing_in_d_bits_corrupt,
                clock,
                reset
);

  wire        _coupler_to_device_named_uart_0_auto_tl_in_a_ready;
  wire        _coupler_to_device_named_uart_0_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_device_named_uart_0_auto_tl_in_d_bits_opcode;
  wire [1:0]  _coupler_to_device_named_uart_0_auto_tl_in_d_bits_param;
  wire [2:0]  _coupler_to_device_named_uart_0_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_device_named_uart_0_auto_tl_in_d_bits_source;
  wire        _coupler_to_device_named_uart_0_auto_tl_in_d_bits_sink;
  wire        _coupler_to_device_named_uart_0_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_device_named_uart_0_auto_tl_in_d_bits_data;
  wire        _coupler_to_device_named_uart_0_auto_tl_in_d_bits_corrupt;
  wire        _coupler_to_device_named_qspi_0_1_auto_tl_in_a_ready;
  wire        _coupler_to_device_named_qspi_0_1_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_data;
  wire        _coupler_to_device_named_qspi_0_auto_tl_in_a_ready;
  wire        _coupler_to_device_named_qspi_0_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_opcode;
  wire [1:0]  _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_param;
  wire [2:0]  _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_source;
  wire        _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_sink;
  wire        _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_data;
  wire        _coupler_to_device_named_qspi_0_auto_tl_in_d_bits_corrupt;
  wire        _coupler_to_device_named_ttc_0_auto_tl_in_a_ready;
  wire        _coupler_to_device_named_ttc_0_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_opcode;
  wire [1:0]  _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_param;
  wire [2:0]  _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_source;
  wire        _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_sink;
  wire        _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_data;
  wire        _coupler_to_device_named_ttc_0_auto_tl_in_d_bits_corrupt;
  wire        _coupler_to_device_named_eth_0_auto_tl_in_a_ready;
  wire        _coupler_to_device_named_eth_0_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_device_named_eth_0_auto_tl_in_d_bits_opcode;
  wire [1:0]  _coupler_to_device_named_eth_0_auto_tl_in_d_bits_param;
  wire [2:0]  _coupler_to_device_named_eth_0_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_device_named_eth_0_auto_tl_in_d_bits_source;
  wire        _coupler_to_device_named_eth_0_auto_tl_in_d_bits_sink;
  wire        _coupler_to_device_named_eth_0_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_device_named_eth_0_auto_tl_in_d_bits_data;
  wire        _coupler_to_device_named_eth_0_auto_tl_in_d_bits_corrupt;
  wire        _buffer_1_auto_out_a_valid;
  wire [2:0]  _buffer_1_auto_out_a_bits_opcode;
  wire [2:0]  _buffer_1_auto_out_a_bits_param;
  wire [2:0]  _buffer_1_auto_out_a_bits_size;
  wire [5:0]  _buffer_1_auto_out_a_bits_source;
  wire [29:0] _buffer_1_auto_out_a_bits_address;
  wire [7:0]  _buffer_1_auto_out_a_bits_mask;
  wire [63:0] _buffer_1_auto_out_a_bits_data;
  wire        _buffer_1_auto_out_d_ready;
  wire        _atomics_auto_in_a_ready;
  wire        _atomics_auto_in_d_valid;
  wire [2:0]  _atomics_auto_in_d_bits_opcode;
  wire [1:0]  _atomics_auto_in_d_bits_param;
  wire [2:0]  _atomics_auto_in_d_bits_size;
  wire [5:0]  _atomics_auto_in_d_bits_source;
  wire        _atomics_auto_in_d_bits_sink;
  wire        _atomics_auto_in_d_bits_denied;
  wire [63:0] _atomics_auto_in_d_bits_data;
  wire        _atomics_auto_in_d_bits_corrupt;
  wire        _atomics_auto_out_a_valid;
  wire [2:0]  _atomics_auto_out_a_bits_opcode;
  wire [2:0]  _atomics_auto_out_a_bits_param;
  wire [2:0]  _atomics_auto_out_a_bits_size;
  wire [5:0]  _atomics_auto_out_a_bits_source;
  wire [29:0] _atomics_auto_out_a_bits_address;
  wire [7:0]  _atomics_auto_out_a_bits_mask;
  wire [63:0] _atomics_auto_out_a_bits_data;
  wire        _atomics_auto_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [2:0]  _buffer_auto_in_d_bits_size;
  wire [5:0]  _buffer_auto_in_d_bits_source;
  wire        _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [2:0]  _buffer_auto_out_a_bits_param;
  wire [2:0]  _buffer_auto_out_a_bits_size;
  wire [5:0]  _buffer_auto_out_a_bits_source;
  wire [29:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_d_ready;
  wire        _out_xbar_auto_in_a_ready;
  wire        _out_xbar_auto_in_d_valid;
  wire [2:0]  _out_xbar_auto_in_d_bits_opcode;
  wire [1:0]  _out_xbar_auto_in_d_bits_param;
  wire [2:0]  _out_xbar_auto_in_d_bits_size;
  wire [5:0]  _out_xbar_auto_in_d_bits_source;
  wire        _out_xbar_auto_in_d_bits_sink;
  wire        _out_xbar_auto_in_d_bits_denied;
  wire [63:0] _out_xbar_auto_in_d_bits_data;
  wire        _out_xbar_auto_in_d_bits_corrupt;
  wire        _out_xbar_auto_out_4_a_valid;
  wire [2:0]  _out_xbar_auto_out_4_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_4_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_4_a_bits_source;
  wire [28:0] _out_xbar_auto_out_4_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_4_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_4_a_bits_data;
  wire        _out_xbar_auto_out_4_d_ready;
  wire        _out_xbar_auto_out_3_a_valid;
  wire [2:0]  _out_xbar_auto_out_3_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_3_a_bits_source;
  wire [29:0] _out_xbar_auto_out_3_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_3_a_bits_mask;
  wire        _out_xbar_auto_out_3_d_ready;
  wire        _out_xbar_auto_out_2_a_valid;
  wire [2:0]  _out_xbar_auto_out_2_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_2_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_2_a_bits_source;
  wire [28:0] _out_xbar_auto_out_2_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_2_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_2_a_bits_data;
  wire        _out_xbar_auto_out_2_d_ready;
  wire        _out_xbar_auto_out_1_a_valid;
  wire [2:0]  _out_xbar_auto_out_1_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_1_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_1_a_bits_source;
  wire [28:0] _out_xbar_auto_out_1_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_1_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_1_a_bits_data;
  wire        _out_xbar_auto_out_1_d_ready;
  wire        _out_xbar_auto_out_0_a_valid;
  wire [2:0]  _out_xbar_auto_out_0_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_0_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_0_a_bits_source;
  wire [28:0] _out_xbar_auto_out_0_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_0_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_0_a_bits_data;
  wire        _out_xbar_auto_out_0_d_ready;
  wire        _fixer_auto_in_a_ready;
  wire        _fixer_auto_in_d_valid;
  wire [2:0]  _fixer_auto_in_d_bits_opcode;
  wire [1:0]  _fixer_auto_in_d_bits_param;
  wire [2:0]  _fixer_auto_in_d_bits_size;
  wire [5:0]  _fixer_auto_in_d_bits_source;
  wire        _fixer_auto_in_d_bits_sink;
  wire        _fixer_auto_in_d_bits_denied;
  wire [63:0] _fixer_auto_in_d_bits_data;
  wire        _fixer_auto_in_d_bits_corrupt;
  wire        _fixer_auto_out_a_valid;
  wire [2:0]  _fixer_auto_out_a_bits_opcode;
  wire [2:0]  _fixer_auto_out_a_bits_size;
  wire [5:0]  _fixer_auto_out_a_bits_source;
  wire [29:0] _fixer_auto_out_a_bits_address;
  wire [7:0]  _fixer_auto_out_a_bits_mask;
  wire [63:0] _fixer_auto_out_a_bits_data;
  wire        _fixer_auto_out_d_ready;
  wire        _fixedClockNode_auto_out_0_clock;
  wire        _fixedClockNode_auto_out_0_reset;
  FixedClockBroadcast_1 fixedClockNode (
    .auto_in_clock    (auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_clock),
    .auto_in_reset    (auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_reset),
    .auto_out_4_clock (auto_fixedClockNode_out_3_clock),
    .auto_out_4_reset (auto_fixedClockNode_out_3_reset),
    .auto_out_3_clock (auto_fixedClockNode_out_2_clock),
    .auto_out_3_reset (auto_fixedClockNode_out_2_reset),
    .auto_out_2_clock (auto_fixedClockNode_out_1_clock),
    .auto_out_2_reset (auto_fixedClockNode_out_1_reset),
    .auto_out_1_clock (auto_fixedClockNode_out_0_clock),
    .auto_out_1_reset (auto_fixedClockNode_out_0_reset),
    .auto_out_0_clock (_fixedClockNode_auto_out_0_clock),
    .auto_out_0_reset (_fixedClockNode_auto_out_0_reset)
  );
  TLFIFOFixer_1 fixer (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (_buffer_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_buffer_auto_out_a_bits_opcode),
    .auto_in_a_bits_size     (_buffer_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_buffer_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_buffer_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_buffer_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_buffer_auto_out_a_bits_data),
    .auto_in_d_ready         (_buffer_auto_out_d_ready),
    .auto_out_a_ready        (_out_xbar_auto_in_a_ready),
    .auto_out_d_valid        (_out_xbar_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_out_xbar_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_out_xbar_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_out_xbar_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_out_xbar_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_out_xbar_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_out_xbar_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_out_xbar_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_out_xbar_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_fixer_auto_in_a_ready),
    .auto_in_d_valid         (_fixer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_fixer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_fixer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_fixer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_fixer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_fixer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_fixer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_fixer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_fixer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_fixer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_fixer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_fixer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_fixer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_fixer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_fixer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_fixer_auto_out_a_bits_data),
    .auto_out_d_ready        (_fixer_auto_out_d_ready)
  );
  TLXbar_2 out_xbar (
    .clock                     (_fixedClockNode_auto_out_0_clock),
    .reset                     (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid           (_fixer_auto_out_a_valid),
    .auto_in_a_bits_opcode     (_fixer_auto_out_a_bits_opcode),
    .auto_in_a_bits_size       (_fixer_auto_out_a_bits_size),
    .auto_in_a_bits_source     (_fixer_auto_out_a_bits_source),
    .auto_in_a_bits_address    (_fixer_auto_out_a_bits_address),
    .auto_in_a_bits_mask       (_fixer_auto_out_a_bits_mask),
    .auto_in_a_bits_data       (_fixer_auto_out_a_bits_data),
    .auto_in_d_ready           (_fixer_auto_out_d_ready),
    .auto_out_4_a_ready        (_coupler_to_device_named_uart_0_auto_tl_in_a_ready),
    .auto_out_4_d_valid        (_coupler_to_device_named_uart_0_auto_tl_in_d_valid),
    .auto_out_4_d_bits_opcode  (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_opcode),
    .auto_out_4_d_bits_param   (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_param),
    .auto_out_4_d_bits_size    (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_size),
    .auto_out_4_d_bits_source  (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_source),
    .auto_out_4_d_bits_sink    (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_sink),
    .auto_out_4_d_bits_denied  (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_denied),
    .auto_out_4_d_bits_data    (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_data),
    .auto_out_4_d_bits_corrupt
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_corrupt),
    .auto_out_3_a_ready        (_coupler_to_device_named_qspi_0_1_auto_tl_in_a_ready),
    .auto_out_3_d_valid        (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_valid),
    .auto_out_3_d_bits_size    (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_size),
    .auto_out_3_d_bits_source
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_source),
    .auto_out_3_d_bits_data    (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_data),
    .auto_out_2_a_ready        (_coupler_to_device_named_qspi_0_auto_tl_in_a_ready),
    .auto_out_2_d_valid        (_coupler_to_device_named_qspi_0_auto_tl_in_d_valid),
    .auto_out_2_d_bits_opcode  (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_opcode),
    .auto_out_2_d_bits_param   (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_param),
    .auto_out_2_d_bits_size    (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_size),
    .auto_out_2_d_bits_source  (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_source),
    .auto_out_2_d_bits_sink    (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_sink),
    .auto_out_2_d_bits_denied  (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_denied),
    .auto_out_2_d_bits_data    (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_data),
    .auto_out_2_d_bits_corrupt
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_corrupt),
    .auto_out_1_a_ready        (_coupler_to_device_named_ttc_0_auto_tl_in_a_ready),
    .auto_out_1_d_valid        (_coupler_to_device_named_ttc_0_auto_tl_in_d_valid),
    .auto_out_1_d_bits_opcode  (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_opcode),
    .auto_out_1_d_bits_param   (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_param),
    .auto_out_1_d_bits_size    (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_size),
    .auto_out_1_d_bits_source  (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_source),
    .auto_out_1_d_bits_sink    (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_sink),
    .auto_out_1_d_bits_denied  (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_denied),
    .auto_out_1_d_bits_data    (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_data),
    .auto_out_1_d_bits_corrupt (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_corrupt),
    .auto_out_0_a_ready        (_coupler_to_device_named_eth_0_auto_tl_in_a_ready),
    .auto_out_0_d_valid        (_coupler_to_device_named_eth_0_auto_tl_in_d_valid),
    .auto_out_0_d_bits_opcode  (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_opcode),
    .auto_out_0_d_bits_param   (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_param),
    .auto_out_0_d_bits_size    (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_size),
    .auto_out_0_d_bits_source  (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_source),
    .auto_out_0_d_bits_sink    (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_sink),
    .auto_out_0_d_bits_denied  (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_denied),
    .auto_out_0_d_bits_data    (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_data),
    .auto_out_0_d_bits_corrupt (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_corrupt),
    .auto_in_a_ready           (_out_xbar_auto_in_a_ready),
    .auto_in_d_valid           (_out_xbar_auto_in_d_valid),
    .auto_in_d_bits_opcode     (_out_xbar_auto_in_d_bits_opcode),
    .auto_in_d_bits_param      (_out_xbar_auto_in_d_bits_param),
    .auto_in_d_bits_size       (_out_xbar_auto_in_d_bits_size),
    .auto_in_d_bits_source     (_out_xbar_auto_in_d_bits_source),
    .auto_in_d_bits_sink       (_out_xbar_auto_in_d_bits_sink),
    .auto_in_d_bits_denied     (_out_xbar_auto_in_d_bits_denied),
    .auto_in_d_bits_data       (_out_xbar_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt    (_out_xbar_auto_in_d_bits_corrupt),
    .auto_out_4_a_valid        (_out_xbar_auto_out_4_a_valid),
    .auto_out_4_a_bits_opcode  (_out_xbar_auto_out_4_a_bits_opcode),
    .auto_out_4_a_bits_size    (_out_xbar_auto_out_4_a_bits_size),
    .auto_out_4_a_bits_source  (_out_xbar_auto_out_4_a_bits_source),
    .auto_out_4_a_bits_address (_out_xbar_auto_out_4_a_bits_address),
    .auto_out_4_a_bits_mask    (_out_xbar_auto_out_4_a_bits_mask),
    .auto_out_4_a_bits_data    (_out_xbar_auto_out_4_a_bits_data),
    .auto_out_4_d_ready        (_out_xbar_auto_out_4_d_ready),
    .auto_out_3_a_valid        (_out_xbar_auto_out_3_a_valid),
    .auto_out_3_a_bits_size    (_out_xbar_auto_out_3_a_bits_size),
    .auto_out_3_a_bits_source  (_out_xbar_auto_out_3_a_bits_source),
    .auto_out_3_a_bits_address (_out_xbar_auto_out_3_a_bits_address),
    .auto_out_3_a_bits_mask    (_out_xbar_auto_out_3_a_bits_mask),
    .auto_out_3_d_ready        (_out_xbar_auto_out_3_d_ready),
    .auto_out_2_a_valid        (_out_xbar_auto_out_2_a_valid),
    .auto_out_2_a_bits_opcode  (_out_xbar_auto_out_2_a_bits_opcode),
    .auto_out_2_a_bits_size    (_out_xbar_auto_out_2_a_bits_size),
    .auto_out_2_a_bits_source  (_out_xbar_auto_out_2_a_bits_source),
    .auto_out_2_a_bits_address (_out_xbar_auto_out_2_a_bits_address),
    .auto_out_2_a_bits_mask    (_out_xbar_auto_out_2_a_bits_mask),
    .auto_out_2_a_bits_data    (_out_xbar_auto_out_2_a_bits_data),
    .auto_out_2_d_ready        (_out_xbar_auto_out_2_d_ready),
    .auto_out_1_a_valid        (_out_xbar_auto_out_1_a_valid),
    .auto_out_1_a_bits_opcode  (_out_xbar_auto_out_1_a_bits_opcode),
    .auto_out_1_a_bits_size    (_out_xbar_auto_out_1_a_bits_size),
    .auto_out_1_a_bits_source  (_out_xbar_auto_out_1_a_bits_source),
    .auto_out_1_a_bits_address (_out_xbar_auto_out_1_a_bits_address),
    .auto_out_1_a_bits_mask    (_out_xbar_auto_out_1_a_bits_mask),
    .auto_out_1_a_bits_data    (_out_xbar_auto_out_1_a_bits_data),
    .auto_out_1_d_ready        (_out_xbar_auto_out_1_d_ready),
    .auto_out_0_a_valid        (_out_xbar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_out_xbar_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_size    (_out_xbar_auto_out_0_a_bits_size),
    .auto_out_0_a_bits_source  (_out_xbar_auto_out_0_a_bits_source),
    .auto_out_0_a_bits_address (_out_xbar_auto_out_0_a_bits_address),
    .auto_out_0_a_bits_mask    (_out_xbar_auto_out_0_a_bits_mask),
    .auto_out_0_a_bits_data    (_out_xbar_auto_out_0_a_bits_data),
    .auto_out_0_d_ready        (_out_xbar_auto_out_0_d_ready)
  );
  TLBuffer buffer (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (_atomics_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_atomics_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_atomics_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_atomics_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_atomics_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_atomics_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_atomics_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_atomics_auto_out_a_bits_data),
    .auto_in_d_ready         (_atomics_auto_out_d_ready),
    .auto_out_a_ready        (_fixer_auto_in_a_ready),
    .auto_out_d_valid        (_fixer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_fixer_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_fixer_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_fixer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_fixer_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_fixer_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_fixer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_fixer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_fixer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_buffer_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  TLAtomicAutomata atomics (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (_buffer_1_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_buffer_1_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_buffer_1_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_buffer_1_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_buffer_1_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_buffer_1_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_buffer_1_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_buffer_1_auto_out_a_bits_data),
    .auto_in_d_ready         (_buffer_1_auto_out_d_ready),
    .auto_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_buffer_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_buffer_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_atomics_auto_in_a_ready),
    .auto_in_d_valid         (_atomics_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_atomics_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_atomics_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_atomics_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_atomics_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_atomics_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_atomics_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_atomics_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_atomics_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_atomics_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_atomics_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_atomics_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_atomics_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_atomics_auto_out_a_bits_source),
    .auto_out_a_bits_address (_atomics_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_atomics_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_atomics_auto_out_a_bits_data),
    .auto_out_d_ready        (_atomics_auto_out_d_ready)
  );
  TLBuffer buffer_1 (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (auto_bus_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_bus_xing_in_a_bits_opcode),
    .auto_in_a_bits_param    (auto_bus_xing_in_a_bits_param),
    .auto_in_a_bits_size     (auto_bus_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_bus_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_bus_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_bus_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_bus_xing_in_a_bits_data),
    .auto_in_d_ready         (auto_bus_xing_in_d_ready),
    .auto_out_a_ready        (_atomics_auto_in_a_ready),
    .auto_out_d_valid        (_atomics_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_atomics_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_atomics_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_atomics_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_atomics_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_atomics_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_atomics_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_atomics_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_atomics_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_bus_xing_in_a_ready),
    .auto_in_d_valid         (auto_bus_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_bus_xing_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_bus_xing_in_d_bits_param),
    .auto_in_d_bits_size     (auto_bus_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_bus_xing_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_bus_xing_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_bus_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_bus_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_bus_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_1_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_1_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_buffer_1_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_buffer_1_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_1_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_1_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_1_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_1_auto_out_a_bits_data),
    .auto_out_d_ready        (_buffer_1_auto_out_d_ready)
  );
  TLInterconnectCoupler_5 coupler_to_device_named_eth_0 (
    .clock                                (_fixedClockNode_auto_out_0_clock),
    .reset                                (_fixedClockNode_auto_out_0_reset),
    .auto_control_xing_out_a_ready
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_ready),
    .auto_control_xing_out_d_valid
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_valid),
    .auto_control_xing_out_d_bits_opcode
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_opcode),
    .auto_control_xing_out_d_bits_param
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_param),
    .auto_control_xing_out_d_bits_size
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_size),
    .auto_control_xing_out_d_bits_source
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_source),
    .auto_control_xing_out_d_bits_sink
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_sink),
    .auto_control_xing_out_d_bits_denied
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_denied),
    .auto_control_xing_out_d_bits_data
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_data),
    .auto_control_xing_out_d_bits_corrupt
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_corrupt),
    .auto_tl_in_a_valid                   (_out_xbar_auto_out_0_a_valid),
    .auto_tl_in_a_bits_opcode             (_out_xbar_auto_out_0_a_bits_opcode),
    .auto_tl_in_a_bits_size               (_out_xbar_auto_out_0_a_bits_size),
    .auto_tl_in_a_bits_source             (_out_xbar_auto_out_0_a_bits_source),
    .auto_tl_in_a_bits_address            (_out_xbar_auto_out_0_a_bits_address),
    .auto_tl_in_a_bits_mask               (_out_xbar_auto_out_0_a_bits_mask),
    .auto_tl_in_a_bits_data               (_out_xbar_auto_out_0_a_bits_data),
    .auto_tl_in_d_ready                   (_out_xbar_auto_out_0_d_ready),
    .auto_control_xing_out_a_valid
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_valid),
    .auto_control_xing_out_a_bits_opcode
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode),
    .auto_control_xing_out_a_bits_size
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size),
    .auto_control_xing_out_a_bits_source
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source),
    .auto_control_xing_out_a_bits_address
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address),
    .auto_control_xing_out_a_bits_mask
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask),
    .auto_control_xing_out_a_bits_data
      (auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data),
    .auto_control_xing_out_d_ready
      (auto_coupler_to_device_named_eth_0_control_xing_out_d_ready),
    .auto_tl_in_a_ready
      (_coupler_to_device_named_eth_0_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_device_named_eth_0_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_param
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_param),
    .auto_tl_in_d_bits_size
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_sink
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_sink),
    .auto_tl_in_d_bits_denied
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_device_named_eth_0_auto_tl_in_d_bits_corrupt)
  );
  TLInterconnectCoupler_5 coupler_to_device_named_ttc_0 (
    .clock                                (_fixedClockNode_auto_out_0_clock),
    .reset                                (_fixedClockNode_auto_out_0_reset),
    .auto_control_xing_out_a_ready
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_ready),
    .auto_control_xing_out_d_valid
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_valid),
    .auto_control_xing_out_d_bits_opcode
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_opcode),
    .auto_control_xing_out_d_bits_param
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_param),
    .auto_control_xing_out_d_bits_size
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_size),
    .auto_control_xing_out_d_bits_source
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_source),
    .auto_control_xing_out_d_bits_sink
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_sink),
    .auto_control_xing_out_d_bits_denied
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_denied),
    .auto_control_xing_out_d_bits_data
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_data),
    .auto_control_xing_out_d_bits_corrupt
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_corrupt),
    .auto_tl_in_a_valid                   (_out_xbar_auto_out_1_a_valid),
    .auto_tl_in_a_bits_opcode             (_out_xbar_auto_out_1_a_bits_opcode),
    .auto_tl_in_a_bits_size               (_out_xbar_auto_out_1_a_bits_size),
    .auto_tl_in_a_bits_source             (_out_xbar_auto_out_1_a_bits_source),
    .auto_tl_in_a_bits_address            (_out_xbar_auto_out_1_a_bits_address),
    .auto_tl_in_a_bits_mask               (_out_xbar_auto_out_1_a_bits_mask),
    .auto_tl_in_a_bits_data               (_out_xbar_auto_out_1_a_bits_data),
    .auto_tl_in_d_ready                   (_out_xbar_auto_out_1_d_ready),
    .auto_control_xing_out_a_valid
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid),
    .auto_control_xing_out_a_bits_opcode
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode),
    .auto_control_xing_out_a_bits_size
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size),
    .auto_control_xing_out_a_bits_source
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source),
    .auto_control_xing_out_a_bits_address
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address),
    .auto_control_xing_out_a_bits_mask
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask),
    .auto_control_xing_out_a_bits_data
      (auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data),
    .auto_control_xing_out_d_ready
      (auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready),
    .auto_tl_in_a_ready
      (_coupler_to_device_named_ttc_0_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_param
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_param),
    .auto_tl_in_d_bits_size
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_sink
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_sink),
    .auto_tl_in_d_bits_denied
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_device_named_ttc_0_auto_tl_in_d_bits_corrupt)
  );
  TLInterconnectCoupler_5 coupler_to_device_named_qspi_0 (
    .clock                                (_fixedClockNode_auto_out_0_clock),
    .reset                                (_fixedClockNode_auto_out_0_reset),
    .auto_control_xing_out_a_ready
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_ready),
    .auto_control_xing_out_d_valid
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_valid),
    .auto_control_xing_out_d_bits_opcode
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_opcode),
    .auto_control_xing_out_d_bits_param   (2'h0),
    .auto_control_xing_out_d_bits_size
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_size),
    .auto_control_xing_out_d_bits_source
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_source),
    .auto_control_xing_out_d_bits_sink    (1'h0),
    .auto_control_xing_out_d_bits_denied  (1'h0),
    .auto_control_xing_out_d_bits_data
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_data),
    .auto_control_xing_out_d_bits_corrupt (1'h0),
    .auto_tl_in_a_valid                   (_out_xbar_auto_out_2_a_valid),
    .auto_tl_in_a_bits_opcode             (_out_xbar_auto_out_2_a_bits_opcode),
    .auto_tl_in_a_bits_size               (_out_xbar_auto_out_2_a_bits_size),
    .auto_tl_in_a_bits_source             (_out_xbar_auto_out_2_a_bits_source),
    .auto_tl_in_a_bits_address            (_out_xbar_auto_out_2_a_bits_address),
    .auto_tl_in_a_bits_mask               (_out_xbar_auto_out_2_a_bits_mask),
    .auto_tl_in_a_bits_data               (_out_xbar_auto_out_2_a_bits_data),
    .auto_tl_in_d_ready                   (_out_xbar_auto_out_2_d_ready),
    .auto_control_xing_out_a_valid
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid),
    .auto_control_xing_out_a_bits_opcode
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode),
    .auto_control_xing_out_a_bits_size
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size),
    .auto_control_xing_out_a_bits_source
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source),
    .auto_control_xing_out_a_bits_address
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address),
    .auto_control_xing_out_a_bits_mask
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask),
    .auto_control_xing_out_a_bits_data
      (auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data),
    .auto_control_xing_out_d_ready
      (auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready),
    .auto_tl_in_a_ready
      (_coupler_to_device_named_qspi_0_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_param
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_param),
    .auto_tl_in_d_bits_size
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_sink
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_sink),
    .auto_tl_in_d_bits_denied
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_device_named_qspi_0_auto_tl_in_d_bits_corrupt)
  );
  TLInterconnectCoupler_8 coupler_to_device_named_qspi_0_1 (
    .clock                            (_fixedClockNode_auto_out_0_clock),
    .reset                            (_fixedClockNode_auto_out_0_reset),
    .auto_mem_xing_out_a_ready
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_a_ready),
    .auto_mem_xing_out_d_valid
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_d_valid),
    .auto_mem_xing_out_d_bits_size
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_size),
    .auto_mem_xing_out_d_bits_source
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_source),
    .auto_mem_xing_out_d_bits_data
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_data),
    .auto_tl_in_a_valid               (_out_xbar_auto_out_3_a_valid),
    .auto_tl_in_a_bits_size           (_out_xbar_auto_out_3_a_bits_size),
    .auto_tl_in_a_bits_source         (_out_xbar_auto_out_3_a_bits_source),
    .auto_tl_in_a_bits_address        (_out_xbar_auto_out_3_a_bits_address),
    .auto_tl_in_a_bits_mask           (_out_xbar_auto_out_3_a_bits_mask),
    .auto_tl_in_d_ready               (_out_xbar_auto_out_3_d_ready),
    .auto_mem_xing_out_a_valid
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid),
    .auto_mem_xing_out_a_bits_size
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size),
    .auto_mem_xing_out_a_bits_source
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source),
    .auto_mem_xing_out_a_bits_address
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address),
    .auto_mem_xing_out_d_ready
      (auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready),
    .auto_tl_in_a_ready
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_size
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data
      (_coupler_to_device_named_qspi_0_1_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_5 coupler_to_device_named_uart_0 (
    .clock                                (_fixedClockNode_auto_out_0_clock),
    .reset                                (_fixedClockNode_auto_out_0_reset),
    .auto_control_xing_out_a_ready
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_ready),
    .auto_control_xing_out_d_valid
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_valid),
    .auto_control_xing_out_d_bits_opcode
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_opcode),
    .auto_control_xing_out_d_bits_param   (2'h0),
    .auto_control_xing_out_d_bits_size
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_size),
    .auto_control_xing_out_d_bits_source
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_source),
    .auto_control_xing_out_d_bits_sink    (1'h0),
    .auto_control_xing_out_d_bits_denied  (1'h0),
    .auto_control_xing_out_d_bits_data
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_data),
    .auto_control_xing_out_d_bits_corrupt (1'h0),
    .auto_tl_in_a_valid                   (_out_xbar_auto_out_4_a_valid),
    .auto_tl_in_a_bits_opcode             (_out_xbar_auto_out_4_a_bits_opcode),
    .auto_tl_in_a_bits_size               (_out_xbar_auto_out_4_a_bits_size),
    .auto_tl_in_a_bits_source             (_out_xbar_auto_out_4_a_bits_source),
    .auto_tl_in_a_bits_address            (_out_xbar_auto_out_4_a_bits_address),
    .auto_tl_in_a_bits_mask               (_out_xbar_auto_out_4_a_bits_mask),
    .auto_tl_in_a_bits_data               (_out_xbar_auto_out_4_a_bits_data),
    .auto_tl_in_d_ready                   (_out_xbar_auto_out_4_d_ready),
    .auto_control_xing_out_a_valid
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_valid),
    .auto_control_xing_out_a_bits_opcode
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode),
    .auto_control_xing_out_a_bits_size
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size),
    .auto_control_xing_out_a_bits_source
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source),
    .auto_control_xing_out_a_bits_address
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address),
    .auto_control_xing_out_a_bits_mask
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask),
    .auto_control_xing_out_a_bits_data
      (auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data),
    .auto_control_xing_out_d_ready
      (auto_coupler_to_device_named_uart_0_control_xing_out_d_ready),
    .auto_tl_in_a_ready
      (_coupler_to_device_named_uart_0_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_device_named_uart_0_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_param
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_param),
    .auto_tl_in_d_bits_size
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_sink
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_sink),
    .auto_tl_in_d_bits_denied
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_device_named_uart_0_auto_tl_in_d_bits_corrupt)
  );
  assign clock = _fixedClockNode_auto_out_0_clock;
  assign reset = _fixedClockNode_auto_out_0_reset;
endmodule

module TLXbar_3(
  input         clock,
                reset,
                auto_in_1_a_valid,
  input  [2:0]  auto_in_1_a_bits_opcode,
                auto_in_1_a_bits_param,
  input  [3:0]  auto_in_1_a_bits_size,
                auto_in_1_a_bits_source,
  input  [31:0] auto_in_1_a_bits_address,
  input  [7:0]  auto_in_1_a_bits_mask,
  input  [63:0] auto_in_1_a_bits_data,
  input         auto_in_1_d_ready,
                auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
  input  [3:0]  auto_in_0_a_bits_size,
  input  [1:0]  auto_in_0_a_bits_source,
  input  [31:0] auto_in_0_a_bits_address,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_1_a_ready,
                auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [3:0]  auto_in_1_d_bits_size,
                auto_in_1_d_bits_source,
  output        auto_in_1_d_bits_denied,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
                auto_in_0_a_ready,
                auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [3:0]  auto_in_0_d_bits_size,
  output [1:0]  auto_in_0_d_bits_source,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        requestDOI_0_0 = auto_out_d_bits_source[4:2] == 3'h4;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire [1:0]  readys_valid = {auto_in_1_a_valid, auto_in_0_a_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {|_readys_filter_T_1, auto_in_1_a_valid | _readys_filter_T_1[0]});
  wire        winner_0 = readys_readys[0] & auto_in_0_a_valid;
  wire        winner_1 = readys_readys[1] & auto_in_1_a_valid;
  wire        _out_0_a_valid_T = auto_in_0_a_valid | auto_in_1_a_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_0_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        out_0_a_valid =
    idle ? _out_0_a_valid_T : state_0 & auto_in_0_a_valid | state_1 & auto_in_1_a_valid;
  wire [26:0] _beatsAI_decode_T_5 = 27'hFFF << auto_in_1_a_bits_size;
  wire [26:0] _beatsAI_decode_T_1 = 27'hFFF << auto_in_0_a_bits_size;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire        latch = idle & auto_out_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & ~(auto_in_0_a_bits_opcode[2]) ? ~(_beatsAI_decode_T_1[11:3]) : 9'h0)
          | (winner_1 & ~(auto_in_1_a_bits_opcode[2])
               ? ~(_beatsAI_decode_T_5[11:3])
               : 9'h0);
      else
        beatsLeft <= beatsLeft - {8'h0, auto_out_a_ready & out_0_a_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  assign auto_in_1_a_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);
  assign auto_in_1_d_valid = auto_out_d_valid & ~(auto_out_d_bits_source[4]);
  assign auto_in_1_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_1_d_bits_size = auto_out_d_bits_size;
  assign auto_in_1_d_bits_source = auto_out_d_bits_source[3:0];
  assign auto_in_1_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_1_d_bits_data = auto_out_d_bits_data;
  assign auto_in_1_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_in_0_a_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);
  assign auto_in_0_d_valid = auto_out_d_valid & requestDOI_0_0;
  assign auto_in_0_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_0_d_bits_size = auto_out_d_bits_size;
  assign auto_in_0_d_bits_source = auto_out_d_bits_source[1:0];
  assign auto_in_0_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = out_0_a_valid;
  assign auto_out_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 3'h0)
    | (muxState_1 ? auto_in_1_a_bits_opcode : 3'h0);
  assign auto_out_a_bits_param = muxState_1 ? auto_in_1_a_bits_param : 3'h0;
  assign auto_out_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 4'h0)
    | (muxState_1 ? auto_in_1_a_bits_size : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? {3'h4, auto_in_0_a_bits_source} : 5'h0)
    | (muxState_1 ? {1'h0, auto_in_1_a_bits_source} : 5'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 32'h0);
  assign auto_out_a_bits_mask =
    {8{muxState_0}} | (muxState_1 ? auto_in_1_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_0 ? auto_in_0_a_bits_data : 64'h0)
    | (muxState_1 ? auto_in_1_a_bits_data : 64'h0);
  assign auto_out_d_ready =
    requestDOI_0_0 & auto_in_0_d_ready | ~(auto_out_d_bits_source[4]) & auto_in_1_d_ready;
endmodule

module Queue_30(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_2 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_31(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [3:0]  io_enq_bits_size,
  input  [4:0]  io_enq_bits_source,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [3:0]  io_deq_bits_size,
  output [4:0]  io_deq_bits_source,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_denied),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_corrupt),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_3(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [4:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
  input  [4:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
  output [4:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [4:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  Queue_30 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_31 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module Queue_32(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [3:0]  io_enq_bits_size,
                io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
                io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (3'h0),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_id_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_2 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_33(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [3:0]  io_enq_bits_size,
                io_enq_bits_source,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [3:0]  io_deq_bits_size,
                io_deq_bits_source,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_id_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_denied),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_corrupt),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_4(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [3:0]  auto_in_a_bits_size,
                auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
                auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  Queue_32 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_33 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module TLFIFOFixer_2(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [3:0]  auto_in_a_bits_size,
                auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [3:0]  auto_in_d_bits_size,
                auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  reg  [8:0]  a_first_counter;
  wire        a_first = a_first_counter == 9'h0;
  reg  [8:0]  d_first_counter;
  reg         flight_0;
  reg         flight_1;
  reg         flight_2;
  reg         flight_3;
  reg         flight_4;
  reg         flight_5;
  reg         flight_6;
  reg         flight_7;
  reg         flight_8;
  reg         flight_9;
  reg         flight_10;
  reg         flight_11;
  reg         flight_12;
  reg         flight_13;
  reg         flight_14;
  reg         flight_15;
  reg         stalls_id;
  reg         stalls_id_1;
  wire        stall =
    ~(auto_in_a_bits_source[3]) & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7)
    & (auto_in_a_bits_address[31] | stalls_id != ~(auto_in_a_bits_address[31]))
    | auto_in_a_bits_source[3] & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15)
    & (auto_in_a_bits_address[31] | stalls_id_1 != ~(auto_in_a_bits_address[31]));
  wire        nodeIn_a_ready = auto_out_a_ready & ~stall;
  wire [26:0] _a_first_beats1_decode_T_1 = 27'hFFF << auto_in_a_bits_size;
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;
  wire        d_first_first = d_first_counter == 9'h0;
  wire        _T_3 =
    d_first_first & auto_out_d_bits_opcode != 3'h6 & auto_in_d_ready & auto_out_d_valid;
  wire        _T_5 = nodeIn_a_ready & auto_in_a_valid;
  wire        _T_1 = a_first & _T_5;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
    end
    else begin
      if (_T_5) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else
            a_first_counter <= ~(_a_first_beats1_decode_T_1[11:3]);
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (auto_in_d_ready & auto_out_d_valid) begin
        if (d_first_first) begin
          if (auto_out_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[11:3]);
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h0)
        & (_T_1 & auto_in_a_bits_source == 4'h0 | flight_0);
      flight_1 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h1)
        & (_T_1 & auto_in_a_bits_source == 4'h1 | flight_1);
      flight_2 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h2)
        & (_T_1 & auto_in_a_bits_source == 4'h2 | flight_2);
      flight_3 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h3)
        & (_T_1 & auto_in_a_bits_source == 4'h3 | flight_3);
      flight_4 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h4)
        & (_T_1 & auto_in_a_bits_source == 4'h4 | flight_4);
      flight_5 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h5)
        & (_T_1 & auto_in_a_bits_source == 4'h5 | flight_5);
      flight_6 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h6)
        & (_T_1 & auto_in_a_bits_source == 4'h6 | flight_6);
      flight_7 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h7)
        & (_T_1 & auto_in_a_bits_source == 4'h7 | flight_7);
      flight_8 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h8)
        & (_T_1 & auto_in_a_bits_source == 4'h8 | flight_8);
      flight_9 <=
        ~(_T_3 & auto_out_d_bits_source == 4'h9)
        & (_T_1 & auto_in_a_bits_source == 4'h9 | flight_9);
      flight_10 <=
        ~(_T_3 & auto_out_d_bits_source == 4'hA)
        & (_T_1 & auto_in_a_bits_source == 4'hA | flight_10);
      flight_11 <=
        ~(_T_3 & auto_out_d_bits_source == 4'hB)
        & (_T_1 & auto_in_a_bits_source == 4'hB | flight_11);
      flight_12 <=
        ~(_T_3 & auto_out_d_bits_source == 4'hC)
        & (_T_1 & auto_in_a_bits_source == 4'hC | flight_12);
      flight_13 <=
        ~(_T_3 & auto_out_d_bits_source == 4'hD)
        & (_T_1 & auto_in_a_bits_source == 4'hD | flight_13);
      flight_14 <=
        ~(_T_3 & auto_out_d_bits_source == 4'hE)
        & (_T_1 & auto_in_a_bits_source == 4'hE | flight_14);
      flight_15 <=
        ~(_T_3 & (&auto_out_d_bits_source))
        & (_T_1 & (&auto_in_a_bits_source) | flight_15);
    end
    if (_T_5 & ~(auto_in_a_bits_source[3]))
      stalls_id <= ~(auto_in_a_bits_address[31]);
    if (_T_5 & auto_in_a_bits_source[3])
      stalls_id_1 <= ~(auto_in_a_bits_address[31]);
  end // always @(posedge)
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid & ~stall;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module Queue_34(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_id,
  input  [63:0] io_enq_bits_data,
  input  [1:0]  io_enq_bits_resp,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_id,
  output [63:0] io_deq_bits_data,
  output [1:0]  io_deq_bits_resp,
  output        io_deq_bits_last
);

  wire        _ram_last_ext_R0_data;
  wire [1:0]  _ram_resp_ext_R0_data;
  wire [63:0] _ram_data_ext_R0_data;
  wire        _ram_id_ext_R0_data;
  reg         maybe_full;
  wire        _io_deq_valid_output = io_enq_valid | maybe_full;
  wire        do_enq = ~(~maybe_full & io_deq_ready) & ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (maybe_full & io_deq_ready & _io_deq_valid_output))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_last_combMem ram_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (_ram_id_ext_R0_data)
  );
  ram_data_combMem ram_data_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (_ram_data_ext_R0_data)
  );
  ram_burst_combMem ram_resp_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_resp),
    .R0_data (_ram_resp_ext_R0_data)
  );
  ram_last_combMem ram_last_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (_ram_last_ext_R0_data)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = maybe_full ? _ram_id_ext_R0_data : io_enq_bits_id;
  assign io_deq_bits_data = maybe_full ? _ram_data_ext_R0_data : io_enq_bits_data;
  assign io_deq_bits_resp = maybe_full ? _ram_resp_ext_R0_data : io_enq_bits_resp;
  assign io_deq_bits_last = maybe_full ? _ram_last_ext_R0_data : io_enq_bits_last;
endmodule

module Queue_35(
  input        clock,
               reset,
               io_enq_valid,
               io_enq_bits_id,
  input  [1:0] io_enq_bits_resp,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
               io_deq_bits_id,
  output [1:0] io_deq_bits_resp
);

  wire [1:0] _ram_resp_ext_R0_data;
  wire       _ram_id_ext_R0_data;
  reg        maybe_full;
  wire       _io_deq_valid_output = io_enq_valid | maybe_full;
  wire       do_enq = ~(~maybe_full & io_deq_ready) & ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (maybe_full & io_deq_ready & _io_deq_valid_output))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_last_combMem ram_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (_ram_id_ext_R0_data)
  );
  ram_burst_combMem ram_resp_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_resp),
    .R0_data (_ram_resp_ext_R0_data)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = maybe_full ? _ram_id_ext_R0_data : io_enq_bits_id;
  assign io_deq_bits_resp = maybe_full ? _ram_resp_ext_R0_data : io_enq_bits_resp;
endmodule

module AXI4ToTL(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input         auto_in_r_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
                auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [3:0]  auto_out_a_bits_size,
                auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        w_out_ready;
  wire        _q_b_deq_q_io_enq_ready;
  wire        _q_b_deq_q_io_deq_valid;
  wire        _q_b_deq_q_io_deq_bits_id;
  wire        _nodeIn_r_deq_q_io_enq_ready;
  wire [22:0] _r_size1_T_1 = {7'h0, auto_in_ar_bits_len, 8'hFF} << auto_in_ar_bits_size;
  wire [14:0] _GEN = _r_size1_T_1[22:8] & {1'h1, ~(_r_size1_T_1[22:9])};
  wire [6:0]  _GEN_0 = _GEN[14:8] | _GEN[6:0];
  wire [2:0]  _GEN_1 = _GEN_0[6:4] | _GEN_0[2:0];
  wire        _r_size_T_11 = _GEN_1[2] | _GEN_1[0];
  wire [3:0]  r_out_bits_a_size =
    {|(_GEN[14:7]), |(_GEN_0[6:3]), |(_GEN_1[2:1]), _r_size_T_11};
  wire [31:0] r_out_bits_a_address =
    r_out_bits_a_size < 4'hD & auto_in_ar_bits_addr[31:12] == 20'h3
    | r_out_bits_a_size < 4'h7
    & (auto_in_ar_bits_addr[31:12] == 20'h0 | auto_in_ar_bits_addr[31:16] == 16'h1
       | auto_in_ar_bits_addr[31:16] == 16'h200 | auto_in_ar_bits_addr[31:26] == 6'h3
       | {auto_in_ar_bits_addr[31:14] ^ 18'h4004, auto_in_ar_bits_addr[12]} == 19'h0
       | auto_in_ar_bits_addr[31:12] == 20'h10014
       | auto_in_ar_bits_addr[31:12] == 20'h1001F
       | {auto_in_ar_bits_addr[31], ~(auto_in_ar_bits_addr[29])} == 2'h0
       | auto_in_ar_bits_addr[31])
      ? auto_in_ar_bits_addr
      : {29'h600, auto_in_ar_bits_addr[2:0]};
  reg  [2:0]  r_count_0;
  reg  [2:0]  r_count_1;
  wire        _r_out_bits_a_mask_T = r_out_bits_a_size > 4'h2;
  wire [1:0]  _GEN_2 = {|(_GEN_1[2:1]), _r_size_T_11};
  wire        r_out_bits_a_mask_size = _GEN_2 == 2'h2;
  wire        r_out_bits_a_mask_acc =
    _r_out_bits_a_mask_T | r_out_bits_a_mask_size & ~(r_out_bits_a_address[2]);
  wire        r_out_bits_a_mask_acc_1 =
    _r_out_bits_a_mask_T | r_out_bits_a_mask_size & r_out_bits_a_address[2];
  wire        r_out_bits_a_mask_size_1 = _GEN_2 == 2'h1;
  wire        r_out_bits_a_mask_eq_2 =
    ~(r_out_bits_a_address[2]) & ~(r_out_bits_a_address[1]);
  wire        r_out_bits_a_mask_acc_2 =
    r_out_bits_a_mask_acc | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_2;
  wire        r_out_bits_a_mask_eq_3 =
    ~(r_out_bits_a_address[2]) & r_out_bits_a_address[1];
  wire        r_out_bits_a_mask_acc_3 =
    r_out_bits_a_mask_acc | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_3;
  wire        r_out_bits_a_mask_eq_4 =
    r_out_bits_a_address[2] & ~(r_out_bits_a_address[1]);
  wire        r_out_bits_a_mask_acc_4 =
    r_out_bits_a_mask_acc_1 | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_4;
  wire        r_out_bits_a_mask_eq_5 = r_out_bits_a_address[2] & r_out_bits_a_address[1];
  wire        r_out_bits_a_mask_acc_5 =
    r_out_bits_a_mask_acc_1 | r_out_bits_a_mask_size_1 & r_out_bits_a_mask_eq_5;
  wire [22:0] _w_size1_T_1 = {7'h0, auto_in_aw_bits_len, 8'hFF} << auto_in_aw_bits_size;
  wire [14:0] _GEN_3 = _w_size1_T_1[22:8] & {1'h1, ~(_w_size1_T_1[22:9])};
  wire [6:0]  _GEN_4 = _GEN_3[14:8] | _GEN_3[6:0];
  wire [2:0]  _GEN_5 = _GEN_4[6:4] | _GEN_4[2:0];
  wire        _w_size_T_11 = _GEN_5[2] | _GEN_5[0];
  wire [3:0]  w_out_bits_a_size =
    {|(_GEN_3[14:7]), |(_GEN_4[6:3]), |(_GEN_5[2:1]), _w_size_T_11};
  reg  [2:0]  w_count_0;
  reg  [2:0]  w_count_1;
  wire        nodeIn_aw_ready = w_out_ready & auto_in_w_valid & auto_in_w_bits_last;
  wire        w_out_valid = auto_in_aw_valid & auto_in_w_valid;
  reg  [7:0]  beatsLeft;
  wire        idle = beatsLeft == 8'h0;
  wire [1:0]  readys_valid = {w_out_valid, auto_in_ar_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {|_readys_filter_T_1, w_out_valid | _readys_filter_T_1[0]});
  wire        winner_0 = readys_readys[0] & auto_in_ar_valid;
  wire        winner_1 = readys_readys[1] & w_out_valid;
  wire        _nodeOut_a_valid_T = auto_in_ar_valid | w_out_valid;
  `ifndef SYNTHESIS
    wire [29:0] _T_2 =
      30'h7FFF << {26'h0, |(_GEN[14:7]), |(_GEN_0[6:3]), |(_GEN_1[2:1]), _r_size_T_11};
    wire [29:0] _T_18 =
      30'h7FFF << {26'h0, |(_GEN_3[14:7]), |(_GEN_4[6:3]), |(_GEN_5[2:1]), _w_size_T_11};
    always @(posedge clock) begin
      if (~reset & ~(~auto_in_ar_valid | _r_size1_T_1[22:8] == ~(_T_2[14:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:108 assert (!in.ar.valid || r_size1 === UIntToOH1(r_size, beatCountBits)) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_in_aw_valid | _w_size1_T_1[22:8] == ~(_T_18[14:0]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:144 assert (!in.aw.valid || w_size1 === UIntToOH1(w_size, beatCountBits)) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~auto_in_aw_valid | auto_in_aw_bits_len == 8'h0
              | auto_in_aw_bits_size == 3'h3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToTL.scala:145 assert (!in.aw.valid || in.aw.bits.len === 0.U || in.aw.bits.size === log2Ceil(beatBytes).U) // because aligned\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_nodeOut_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        r_out_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);
  assign w_out_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);
  wire        nodeOut_a_valid =
    idle ? _nodeOut_a_valid_T : state_0 & auto_in_ar_valid | state_1 & w_out_valid;
  wire [1:0]  ok_r_bits_resp = {auto_out_d_bits_denied | auto_out_d_bits_corrupt, 1'h0};
  wire [26:0] _d_last_beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;
  reg  [8:0]  d_last_counter;
  wire        nodeOut_d_ready =
    auto_out_d_bits_opcode[0] ? _nodeIn_r_deq_q_io_enq_ready : _q_b_deq_q_io_enq_ready;
  reg  [2:0]  b_count_0;
  reg  [2:0]  b_count_1;
  wire        b_allow =
    (_q_b_deq_q_io_deq_bits_id
       ? b_count_1
       : b_count_0) != (_q_b_deq_q_io_deq_bits_id ? w_count_1 : w_count_0);
  wire        nodeIn_b_valid = _q_b_deq_q_io_deq_valid & b_allow;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire        _T_14 = r_out_ready & auto_in_ar_valid;
  wire        _T_38 = nodeIn_aw_ready & auto_in_aw_valid;
  wire        latch = idle & auto_out_a_ready;
  wire        _T_61 = auto_in_b_ready & nodeIn_b_valid;
  always @(posedge clock) begin
    if (reset) begin
      r_count_0 <= 3'h0;
      r_count_1 <= 3'h0;
      w_count_0 <= 3'h0;
      w_count_1 <= 3'h0;
      beatsLeft <= 8'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_last_counter <= 9'h0;
      b_count_0 <= 3'h0;
      b_count_1 <= 3'h0;
    end
    else begin
      if (_T_14 & ~auto_in_ar_bits_id)
        r_count_0 <= r_count_0 + 3'h1;
      if (_T_14 & auto_in_ar_bits_id)
        r_count_1 <= r_count_1 + 3'h1;
      if (_T_38 & ~auto_in_aw_bits_id)
        w_count_0 <= w_count_0 + 3'h1;
      if (_T_38 & auto_in_aw_bits_id)
        w_count_1 <= w_count_1 + 3'h1;
      if (latch) begin
        if (winner_1)
          beatsLeft <= auto_in_aw_bits_len;
        else
          beatsLeft <= 8'h0;
      end
      else
        beatsLeft <= beatsLeft - {7'h0, auto_out_a_ready & nodeOut_a_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (nodeOut_d_ready & auto_out_d_valid) begin
        if (d_last_counter == 9'h0) begin
          if (auto_out_d_bits_opcode[0])
            d_last_counter <= ~(_d_last_beats1_decode_T_1[11:3]);
          else
            d_last_counter <= 9'h0;
        end
        else
          d_last_counter <= d_last_counter - 9'h1;
      end
      if (_T_61 & ~_q_b_deq_q_io_deq_bits_id)
        b_count_0 <= b_count_0 + 3'h1;
      if (_T_61 & _q_b_deq_q_io_deq_bits_id)
        b_count_1 <= b_count_1 + 3'h1;
    end
  end // always @(posedge)
  Queue_34 nodeIn_r_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & auto_out_d_bits_opcode[0]),
    .io_enq_bits_id   (auto_out_d_bits_source[3]),
    .io_enq_bits_data (auto_out_d_bits_data),
    .io_enq_bits_resp (ok_r_bits_resp),
    .io_enq_bits_last
      (d_last_counter == 9'h1
       | (auto_out_d_bits_opcode[0] ? ~(_d_last_beats1_decode_T_1[11:3]) : 9'h0) == 9'h0),
    .io_deq_ready     (auto_in_r_ready),
    .io_enq_ready     (_nodeIn_r_deq_q_io_enq_ready),
    .io_deq_valid     (auto_in_r_valid),
    .io_deq_bits_id   (auto_in_r_bits_id),
    .io_deq_bits_data (auto_in_r_bits_data),
    .io_deq_bits_resp (auto_in_r_bits_resp),
    .io_deq_bits_last (auto_in_r_bits_last)
  );
  Queue_35 q_b_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_out_d_valid & ~(auto_out_d_bits_opcode[0])),
    .io_enq_bits_id   (auto_out_d_bits_source[3]),
    .io_enq_bits_resp (ok_r_bits_resp),
    .io_deq_ready     (auto_in_b_ready & b_allow),
    .io_enq_ready     (_q_b_deq_q_io_enq_ready),
    .io_deq_valid     (_q_b_deq_q_io_deq_valid),
    .io_deq_bits_id   (_q_b_deq_q_io_deq_bits_id),
    .io_deq_bits_resp (auto_in_b_bits_resp)
  );
  assign auto_in_aw_ready = nodeIn_aw_ready;
  assign auto_in_w_ready = w_out_ready & auto_in_aw_valid;
  assign auto_in_b_valid = nodeIn_b_valid;
  assign auto_in_b_bits_id = _q_b_deq_q_io_deq_bits_id;
  assign auto_in_ar_ready = r_out_ready;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode = {muxState_0, 1'h0, muxState_1};
  assign auto_out_a_bits_size =
    (muxState_0 ? r_out_bits_a_size : 4'h0) | (muxState_1 ? w_out_bits_a_size : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0
       ? {auto_in_ar_bits_id, auto_in_ar_bits_id ? r_count_1[1:0] : r_count_0[1:0], 1'h0}
       : 4'h0)
    | (muxState_1
         ? {auto_in_aw_bits_id,
            auto_in_aw_bits_id ? w_count_1[1:0] : w_count_0[1:0],
            1'h1}
         : 4'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? r_out_bits_a_address : 32'h0)
    | (muxState_1
         ? (w_out_bits_a_size < 4'hD & auto_in_aw_bits_addr[31:12] == 20'h3
            | w_out_bits_a_size < 4'h7
            & (auto_in_aw_bits_addr[31:12] == 20'h0
               | auto_in_aw_bits_addr[31:16] == 16'h200
               | auto_in_aw_bits_addr[31:26] == 6'h3
               | {auto_in_aw_bits_addr[31:14] ^ 18'h4004,
                  auto_in_aw_bits_addr[12]} == 19'h0
               | auto_in_aw_bits_addr[31:12] == 20'h10014
               | auto_in_aw_bits_addr[31:12] == 20'h1001F | auto_in_aw_bits_addr[31])
            | w_out_bits_a_size < 4'h9 & auto_in_aw_bits_addr[31:29] == 3'h3
              ? auto_in_aw_bits_addr
              : {29'h600, auto_in_aw_bits_addr[2:0]})
         : 32'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {r_out_bits_a_mask_acc_5 | r_out_bits_a_mask_eq_5 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_5 | r_out_bits_a_mask_eq_5 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_4 | r_out_bits_a_mask_eq_4 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_4 | r_out_bits_a_mask_eq_4 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_3 | r_out_bits_a_mask_eq_3 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_3 | r_out_bits_a_mask_eq_3 & ~(r_out_bits_a_address[0]),
          r_out_bits_a_mask_acc_2 | r_out_bits_a_mask_eq_2 & r_out_bits_a_address[0],
          r_out_bits_a_mask_acc_2 | r_out_bits_a_mask_eq_2 & ~(r_out_bits_a_address[0])}
       : 8'h0) | (muxState_1 ? auto_in_w_bits_strb : 8'h0);
  assign auto_out_a_bits_data = muxState_1 ? auto_in_w_bits_data : 64'h0;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module Queue_36(
  input        clock,
               reset,
               io_enq_valid,
  input  [6:0] io_enq_bits_extra_id,
  input        io_enq_bits_real_last,
               io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [6:0] io_deq_bits_extra_id,
  output       io_deq_bits_real_last
);

  reg  [1:0] enq_ptr_value;
  reg  [1:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 2'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 2'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_extra_id_combMem ram_extra_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_extra_id),
    .R0_data (io_deq_bits_extra_id)
  );
  ram_real_last_combMem ram_real_last_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_real_last),
    .R0_data (io_deq_bits_real_last)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module AXI4UserYanker_1(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [6:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_aw_bits_echo_real_last,
                auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [6:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_ar_bits_echo_real_last,
                auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [6:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_b_bits_echo_real_last,
                auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [6:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_echo_real_last,
                auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output        auto_out_r_ready
);

  wire       _Queue_3_io_enq_ready;
  wire       _Queue_3_io_deq_valid;
  wire [6:0] _Queue_3_io_deq_bits_extra_id;
  wire       _Queue_3_io_deq_bits_real_last;
  wire       _Queue_2_io_enq_ready;
  wire       _Queue_2_io_deq_valid;
  wire [6:0] _Queue_2_io_deq_bits_extra_id;
  wire       _Queue_2_io_deq_bits_real_last;
  wire       _Queue_1_io_enq_ready;
  wire       _Queue_1_io_deq_valid;
  wire [6:0] _Queue_1_io_deq_bits_extra_id;
  wire       _Queue_1_io_deq_bits_real_last;
  wire       _Queue_io_enq_ready;
  wire       _Queue_io_deq_valid;
  wire [6:0] _Queue_io_deq_bits_extra_id;
  wire       _Queue_io_deq_bits_real_last;
  wire       _GEN = auto_in_ar_bits_id ? _Queue_1_io_enq_ready : _Queue_io_enq_ready;
  wire       _T_10 = auto_out_r_valid & auto_in_r_ready;
  wire       _T_13 = auto_in_ar_valid & auto_out_ar_ready;
  wire       _GEN_0 = auto_in_aw_bits_id ? _Queue_3_io_enq_ready : _Queue_2_io_enq_ready;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~auto_out_r_valid
              | (auto_out_r_bits_id ? _Queue_1_io_deq_valid : _Queue_io_deq_valid))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:66 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~auto_out_b_valid
              | (auto_out_b_bits_id
                   ? _Queue_3_io_deq_valid
                   : _Queue_2_io_deq_valid))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:95 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire       _T_24 = auto_out_b_valid & auto_in_b_ready;
  wire       _T_26 = auto_in_aw_valid & auto_out_aw_ready;
  Queue_36 Queue (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_T_13 & ~auto_in_ar_bits_id),
    .io_enq_bits_extra_id  (auto_in_ar_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready          (_T_10 & ~auto_out_r_bits_id & auto_out_r_bits_last),
    .io_enq_ready          (_Queue_io_enq_ready),
    .io_deq_valid          (_Queue_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue_io_deq_bits_real_last)
  );
  Queue_36 Queue_1 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_T_13 & auto_in_ar_bits_id),
    .io_enq_bits_extra_id  (auto_in_ar_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_ar_bits_echo_real_last),
    .io_deq_ready          (_T_10 & auto_out_r_bits_id & auto_out_r_bits_last),
    .io_enq_ready          (_Queue_1_io_enq_ready),
    .io_deq_valid          (_Queue_1_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue_1_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue_1_io_deq_bits_real_last)
  );
  Queue_36 Queue_2 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_T_26 & ~auto_in_aw_bits_id),
    .io_enq_bits_extra_id  (auto_in_aw_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready          (_T_24 & ~auto_out_b_bits_id),
    .io_enq_ready          (_Queue_2_io_enq_ready),
    .io_deq_valid          (_Queue_2_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue_2_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue_2_io_deq_bits_real_last)
  );
  Queue_36 Queue_3 (
    .clock                 (clock),
    .reset                 (reset),
    .io_enq_valid          (_T_26 & auto_in_aw_bits_id),
    .io_enq_bits_extra_id  (auto_in_aw_bits_echo_extra_id),
    .io_enq_bits_real_last (auto_in_aw_bits_echo_real_last),
    .io_deq_ready          (_T_24 & auto_out_b_bits_id),
    .io_enq_ready          (_Queue_3_io_enq_ready),
    .io_deq_valid          (_Queue_3_io_deq_valid),
    .io_deq_bits_extra_id  (_Queue_3_io_deq_bits_extra_id),
    .io_deq_bits_real_last (_Queue_3_io_deq_bits_real_last)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & _GEN_0;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_extra_id =
    auto_out_b_bits_id ? _Queue_3_io_deq_bits_extra_id : _Queue_2_io_deq_bits_extra_id;
  assign auto_in_b_bits_echo_real_last =
    auto_out_b_bits_id ? _Queue_3_io_deq_bits_real_last : _Queue_2_io_deq_bits_real_last;
  assign auto_in_ar_ready = auto_out_ar_ready & _GEN;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id =
    auto_out_r_bits_id ? _Queue_1_io_deq_bits_extra_id : _Queue_io_deq_bits_extra_id;
  assign auto_in_r_bits_echo_real_last =
    auto_out_r_bits_id ? _Queue_1_io_deq_bits_real_last : _Queue_io_deq_bits_real_last;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & _GEN_0;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & _GEN;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue_40(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_burst,
  input  [6:0]  io_enq_bits_echo_extra_id,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output [6:0]  io_deq_bits_echo_extra_id
);

  wire [6:0]  _ram_echo_extra_id_ext_R0_data;
  wire [1:0]  _ram_burst_ext_R0_data;
  wire [2:0]  _ram_size_ext_R0_data;
  wire [7:0]  _ram_len_ext_R0_data;
  wire [31:0] _ram_addr_ext_R0_data;
  wire        _ram_id_ext_R0_data;
  reg         maybe_full;
  wire        _io_deq_valid_output = io_enq_valid | maybe_full;
  wire        do_enq = ~(~maybe_full & io_deq_ready) & ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (maybe_full & io_deq_ready & _io_deq_valid_output))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_last_combMem ram_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (_ram_id_ext_R0_data)
  );
  ram_addr_combMem_1 ram_addr_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_addr),
    .R0_data (_ram_addr_ext_R0_data)
  );
  ram_strb_combMem ram_len_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_len),
    .R0_data (_ram_len_ext_R0_data)
  );
  ram_id_combMem ram_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (_ram_size_ext_R0_data)
  );
  ram_burst_combMem ram_burst_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_burst),
    .R0_data (_ram_burst_ext_R0_data)
  );
  ram_echo_extra_id_combMem ram_echo_extra_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_extra_id),
    .R0_data (_ram_echo_extra_id_ext_R0_data)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_id = maybe_full ? _ram_id_ext_R0_data : io_enq_bits_id;
  assign io_deq_bits_addr = maybe_full ? _ram_addr_ext_R0_data : io_enq_bits_addr;
  assign io_deq_bits_len = maybe_full ? _ram_len_ext_R0_data : io_enq_bits_len;
  assign io_deq_bits_size = maybe_full ? _ram_size_ext_R0_data : io_enq_bits_size;
  assign io_deq_bits_burst = maybe_full ? _ram_burst_ext_R0_data : io_enq_bits_burst;
  assign io_deq_bits_echo_extra_id =
    maybe_full ? _ram_echo_extra_id_ext_R0_data : io_enq_bits_echo_extra_id;
endmodule

module Queue_42(
  input         clock,
                reset,
                io_enq_valid,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_strb,
  input         io_enq_bits_last,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_strb,
  output        io_deq_bits_last
);

  wire        _ram_last_ext_R0_data;
  wire [7:0]  _ram_strb_ext_R0_data;
  wire [63:0] _ram_data_ext_R0_data;
  reg         maybe_full;
  wire        _io_deq_valid_output = io_enq_valid | maybe_full;
  wire        do_enq = ~(~maybe_full & io_deq_ready) & ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (maybe_full & io_deq_ready & _io_deq_valid_output))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_data_combMem ram_data_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (_ram_data_ext_R0_data)
  );
  ram_strb_combMem ram_strb_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_strb),
    .R0_data (_ram_strb_ext_R0_data)
  );
  ram_last_combMem ram_last_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_last),
    .R0_data (_ram_last_ext_R0_data)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_data = maybe_full ? _ram_data_ext_R0_data : io_enq_bits_data;
  assign io_deq_bits_strb = maybe_full ? _ram_strb_ext_R0_data : io_enq_bits_strb;
  assign io_deq_bits_last = maybe_full ? _ram_last_ext_R0_data : io_enq_bits_last;
endmodule

module AXI4Fragmenter(
  input         clock,
                reset,
                auto_in_aw_valid,
                auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input  [6:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
                auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input  [6:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [6:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_b_bits_echo_real_last,
                auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [6:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_echo_real_last,
                auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
                auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [6:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_ar_ready,
                auto_in_r_valid,
                auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [6:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [6:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_aw_bits_echo_real_last,
                auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [6:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_ar_bits_echo_real_last,
                auto_out_r_ready
);

  wire        nodeOut_w_valid;
  wire        wbeats_ready;
  wire        in_aw_ready;
  wire        _in_w_deq_q_io_deq_valid;
  wire        _in_w_deq_q_io_deq_bits_last;
  wire        _deq_q_1_io_deq_valid;
  wire [31:0] _deq_q_1_io_deq_bits_addr;
  wire [7:0]  _deq_q_1_io_deq_bits_len;
  wire [2:0]  _deq_q_1_io_deq_bits_size;
  wire [1:0]  _deq_q_1_io_deq_bits_burst;
  wire        _deq_q_io_deq_valid;
  wire [31:0] _deq_q_io_deq_bits_addr;
  wire [7:0]  _deq_q_io_deq_bits_len;
  wire [2:0]  _deq_q_io_deq_bits_size;
  wire [1:0]  _deq_q_io_deq_bits_burst;
  reg         busy;
  reg  [31:0] r_addr;
  reg  [7:0]  r_len;
  wire [7:0]  len = busy ? r_len : _deq_q_io_deq_bits_len;
  wire [31:0] addr = busy ? r_addr : _deq_q_io_deq_bits_addr;
  wire [6:0]  _GEN = len[7:1] | {1'h0, len[7:2]};
  wire [6:0]  _GEN_0 = _GEN | {2'h0, _GEN[6:2]};
  wire [7:0]  _wipeHigh_T = ~len;
  wire [7:0]  _wipeHigh_T_3 = _wipeHigh_T | {_wipeHigh_T[6:0], 1'h0};
  wire [7:0]  _wipeHigh_T_6 = _wipeHigh_T_3 | {_wipeHigh_T_3[5:0], 2'h0};
  wire [7:0]  _align1_T_2 = addr[10:3] | {addr[9:3], 1'h0};
  wire [7:0]  _align1_T_5 = _align1_T_2 | {_align1_T_2[5:0], 2'h0};
  wire        fixed = _deq_q_io_deq_bits_burst == 2'h0;
  wire [7:0]  in_ar_bits_len =
    fixed | _deq_q_io_deq_bits_size != 3'h3
      ? 8'h0
      : ({1'h0, _GEN_0 | {4'h0, _GEN_0[6:4]}}
         | ~(_wipeHigh_T_6 | {_wipeHigh_T_6[3:0], 4'h0}))
        & ~(_align1_T_5 | {_align1_T_5[3:0], 4'h0})
        & ({5'h0,
            {3{{addr[31], addr[29:27], addr[25], addr[16], addr[13]} == 7'h0
                 | {addr[31], addr[29], addr[27], addr[25], ~(addr[16])} == 5'h0
                 | {addr[31], addr[29:27], ~(addr[25]), addr[16]} == 6'h0
                 | {addr[31], addr[29:27] ^ 3'h1} == 4'h0
                 | {addr[31], ~(addr[29])} == 2'h0 | addr[31]}}}
           | {8{{addr[31], addr[29:27], addr[25], addr[16], ~(addr[13])} == 7'h0}});
  wire        nodeOut_ar_bits_echo_real_last = in_ar_bits_len == len;
  wire [9:0]  _out_bits_addr_T_2 = 10'h7 << _deq_q_io_deq_bits_size;
  reg         busy_1;
  reg  [31:0] r_addr_1;
  reg  [7:0]  r_len_1;
  wire [7:0]  len_1 = busy_1 ? r_len_1 : _deq_q_1_io_deq_bits_len;
  wire [31:0] addr_1 = busy_1 ? r_addr_1 : _deq_q_1_io_deq_bits_addr;
  wire        _support1_T_81 = addr_1[31:30] == 2'h1;
  wire [6:0]  _GEN_1 = len_1[7:1] | {1'h0, len_1[7:2]};
  wire [6:0]  _GEN_2 = _GEN_1 | {2'h0, _GEN_1[6:2]};
  wire [7:0]  _wipeHigh_T_11 = ~len_1;
  wire [7:0]  _wipeHigh_T_14 = _wipeHigh_T_11 | {_wipeHigh_T_11[6:0], 1'h0};
  wire [7:0]  _wipeHigh_T_17 = _wipeHigh_T_14 | {_wipeHigh_T_14[5:0], 2'h0};
  wire [7:0]  _align1_T_12 = addr_1[10:3] | {addr_1[9:3], 1'h0};
  wire [7:0]  _align1_T_15 = _align1_T_12 | {_align1_T_12[5:0], 2'h0};
  wire        fixed_1 = _deq_q_1_io_deq_bits_burst == 2'h0;
  wire [7:0]  in_aw_bits_len =
    fixed_1 | _deq_q_1_io_deq_bits_size != 3'h3
      ? 8'h0
      : ({1'h0, _GEN_2 | {4'h0, _GEN_2[6:4]}}
         | ~(_wipeHigh_T_17 | {_wipeHigh_T_17[3:0], 4'h0}))
        & ~(_align1_T_15 | {_align1_T_15[3:0], 4'h0})
        & ({8{{addr_1[31:30], addr_1[28:27], addr_1[25], ~(addr_1[13])} == 6'h0}}
           | {3'h0,
              {2{_support1_T_81}},
              {3{{addr_1[31:30], addr_1[28:27], addr_1[25], addr_1[13]} == 6'h0
                   | {addr_1[31:30], addr_1[28:27], ~(addr_1[25])} == 5'h0
                   | {addr_1[31:30], addr_1[28:27] ^ 2'h1} == 4'h0
                   | {addr_1[31:30], addr_1[28:27] ^ 2'h2, addr_1[25]} == 5'h0
                   | addr_1[31]}} | {3{_support1_T_81}}});
  wire [8:0]  w_beats = {in_aw_bits_len, 1'h1} & {1'h1, ~in_aw_bits_len};
  wire        nodeOut_aw_bits_echo_real_last = in_aw_bits_len == len_1;
  wire [9:0]  _out_bits_addr_T_9 = 10'h7 << _deq_q_1_io_deq_bits_size;
  reg         wbeats_latched;
  wire        _in_aw_ready_T = wbeats_ready | wbeats_latched;
  wire        nodeOut_aw_valid = _deq_q_1_io_deq_valid & _in_aw_ready_T;
  assign in_aw_ready = auto_out_aw_ready & _in_aw_ready_T;
  wire        wbeats_valid = _deq_q_1_io_deq_valid & ~wbeats_latched;
  reg  [8:0]  w_counter;
  assign wbeats_ready = w_counter == 9'h0;
  wire [8:0]  w_todo = wbeats_ready ? (wbeats_valid ? w_beats : 9'h0) : w_counter;
  wire        nodeOut_w_bits_last = w_todo == 9'h1;
  wire        _T_8 = auto_out_w_ready & nodeOut_w_valid;
  assign nodeOut_w_valid = _in_w_deq_q_io_deq_valid & (~wbeats_ready | wbeats_valid);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_T_8 | (|w_todo))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:177 assert (!out.w.fire || w_todo =/= 0.U) // underflow impossible\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~nodeOut_w_valid | ~_in_w_deq_q_io_deq_bits_last
              | nodeOut_w_bits_last)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:186 assert (!out.w.valid || !in_w.bits.last || w_last)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        nodeOut_b_ready = auto_in_b_ready | ~auto_out_b_bits_echo_real_last;
  reg  [1:0]  error_0;
  reg  [1:0]  error_1;
  wire        _T_28 = nodeOut_b_ready & auto_out_b_valid;
  wire [22:0] _wrapMask_T_1 =
    {7'h0, _deq_q_io_deq_bits_len, 8'hFF} << _deq_q_io_deq_bits_size;
  wire [31:0] _GEN_3 = {17'h0, _wrapMask_T_1[22:8]};
  wire [8:0]  beats = {in_ar_bits_len, 1'h1} & {1'h1, ~in_ar_bits_len};
  wire [31:0] inc_addr = addr + {16'h0, {7'h0, beats} << _deq_q_io_deq_bits_size};
  wire [22:0] _wrapMask_T_3 =
    {7'h0, _deq_q_1_io_deq_bits_len, 8'hFF} << _deq_q_1_io_deq_bits_size;
  wire [31:0] _GEN_4 = {17'h0, _wrapMask_T_3[22:8]};
  wire [31:0] inc_addr_1 = addr_1 + {16'h0, {7'h0, w_beats} << _deq_q_1_io_deq_bits_size};
  wire        _T_2 = auto_out_ar_ready & _deq_q_io_deq_valid;
  wire        _T_5 = in_aw_ready & _deq_q_1_io_deq_valid;
  always @(posedge clock) begin
    if (reset) begin
      busy <= 1'h0;
      busy_1 <= 1'h0;
      wbeats_latched <= 1'h0;
      w_counter <= 9'h0;
      error_0 <= 2'h0;
      error_1 <= 2'h0;
    end
    else begin
      if (_T_2)
        busy <= ~nodeOut_ar_bits_echo_real_last;
      if (_T_5)
        busy_1 <= ~nodeOut_aw_bits_echo_real_last;
      wbeats_latched <=
        ~(auto_out_aw_ready & nodeOut_aw_valid)
        & (wbeats_valid & wbeats_ready | wbeats_latched);
      w_counter <= w_todo - {8'h0, _T_8};
      if (~auto_out_b_bits_id & _T_28) begin
        if (auto_out_b_bits_echo_real_last)
          error_0 <= 2'h0;
        else
          error_0 <= error_0 | auto_out_b_bits_resp;
      end
      if (auto_out_b_bits_id & _T_28) begin
        if (auto_out_b_bits_echo_real_last)
          error_1 <= 2'h0;
        else
          error_1 <= error_1 | auto_out_b_bits_resp;
      end
    end
    if (_T_2) begin
      if (fixed)
        r_addr <= _deq_q_io_deq_bits_addr;
      else if (_deq_q_io_deq_bits_burst == 2'h2)
        r_addr <= inc_addr & _GEN_3 | ~(~_deq_q_io_deq_bits_addr | _GEN_3);
      else
        r_addr <= inc_addr;
      r_len <= len - beats[7:0];
    end
    if (_T_5) begin
      if (fixed_1)
        r_addr_1 <= _deq_q_1_io_deq_bits_addr;
      else if (_deq_q_1_io_deq_bits_burst == 2'h2)
        r_addr_1 <= inc_addr_1 & _GEN_4 | ~(~_deq_q_1_io_deq_bits_addr | _GEN_4);
      else
        r_addr_1 <= inc_addr_1;
      r_len_1 <= len_1 - w_beats[7:0];
    end
  end // always @(posedge)
  Queue_40 deq_q (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_ar_valid),
    .io_enq_bits_id            (auto_in_ar_bits_id),
    .io_enq_bits_addr          (auto_in_ar_bits_addr),
    .io_enq_bits_len           (auto_in_ar_bits_len),
    .io_enq_bits_size          (auto_in_ar_bits_size),
    .io_enq_bits_burst         (auto_in_ar_bits_burst),
    .io_enq_bits_echo_extra_id (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready              (auto_out_ar_ready & nodeOut_ar_bits_echo_real_last),
    .io_enq_ready              (auto_in_ar_ready),
    .io_deq_valid              (_deq_q_io_deq_valid),
    .io_deq_bits_id            (auto_out_ar_bits_id),
    .io_deq_bits_addr          (_deq_q_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id (auto_out_ar_bits_echo_extra_id)
  );
  Queue_40 deq_q_1 (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (auto_in_aw_valid),
    .io_enq_bits_id            (auto_in_aw_bits_id),
    .io_enq_bits_addr          (auto_in_aw_bits_addr),
    .io_enq_bits_len           (auto_in_aw_bits_len),
    .io_enq_bits_size          (auto_in_aw_bits_size),
    .io_enq_bits_burst         (auto_in_aw_bits_burst),
    .io_enq_bits_echo_extra_id (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready              (in_aw_ready & nodeOut_aw_bits_echo_real_last),
    .io_enq_ready              (auto_in_aw_ready),
    .io_deq_valid              (_deq_q_1_io_deq_valid),
    .io_deq_bits_id            (auto_out_aw_bits_id),
    .io_deq_bits_addr          (_deq_q_1_io_deq_bits_addr),
    .io_deq_bits_len           (_deq_q_1_io_deq_bits_len),
    .io_deq_bits_size          (_deq_q_1_io_deq_bits_size),
    .io_deq_bits_burst         (_deq_q_1_io_deq_bits_burst),
    .io_deq_bits_echo_extra_id (auto_out_aw_bits_echo_extra_id)
  );
  Queue_42 in_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_w_valid),
    .io_enq_bits_data (auto_in_w_bits_data),
    .io_enq_bits_strb (auto_in_w_bits_strb),
    .io_enq_bits_last (auto_in_w_bits_last),
    .io_deq_ready     (auto_out_w_ready & (~wbeats_ready | wbeats_valid)),
    .io_enq_ready     (auto_in_w_ready),
    .io_deq_valid     (_in_w_deq_q_io_deq_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (_in_w_deq_q_io_deq_bits_last)
  );
  assign auto_in_b_valid = auto_out_b_valid & auto_out_b_bits_echo_real_last;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp =
    auto_out_b_bits_resp | (auto_out_b_bits_id ? error_1 : error_0);
  assign auto_in_b_bits_echo_extra_id = auto_out_b_bits_echo_extra_id;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_extra_id = auto_out_r_bits_echo_extra_id;
  assign auto_in_r_bits_last = auto_out_r_bits_last & auto_out_r_bits_echo_real_last;
  assign auto_out_aw_valid = nodeOut_aw_valid;
  assign auto_out_aw_bits_addr = ~(~addr_1 | {29'h0, ~(_out_bits_addr_T_9[2:0])});
  assign auto_out_aw_bits_len = in_aw_bits_len;
  assign auto_out_aw_bits_size = _deq_q_1_io_deq_bits_size;
  assign auto_out_aw_bits_echo_real_last = nodeOut_aw_bits_echo_real_last;
  assign auto_out_w_valid = nodeOut_w_valid;
  assign auto_out_w_bits_last = nodeOut_w_bits_last;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid = _deq_q_io_deq_valid;
  assign auto_out_ar_bits_addr = ~(~addr | {29'h0, ~(_out_bits_addr_T_2[2:0])});
  assign auto_out_ar_bits_len = in_ar_bits_len;
  assign auto_out_ar_bits_size = _deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_echo_real_last = nodeOut_ar_bits_echo_real_last;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module AXI4IdIndexer_1(
  input         auto_in_aw_valid,
  input  [7:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [7:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
                auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [6:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_ar_ready,
                auto_out_r_valid,
                auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [6:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [7:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [7:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
                auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output [6:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
                auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output [6:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = {auto_out_b_bits_echo_extra_id, auto_out_b_bits_id};
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = {auto_out_r_bits_echo_extra_id, auto_out_r_bits_id};
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id[0];
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_echo_extra_id = auto_in_aw_bits_id[7:1];
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id[0];
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_echo_extra_id = auto_in_ar_bits_id[7:1];
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module TLInterconnectCoupler_11(
  input         clock,
                reset,
                auto_axi4index_in_aw_valid,
  input  [7:0]  auto_axi4index_in_aw_bits_id,
  input  [31:0] auto_axi4index_in_aw_bits_addr,
  input  [7:0]  auto_axi4index_in_aw_bits_len,
  input  [2:0]  auto_axi4index_in_aw_bits_size,
  input  [1:0]  auto_axi4index_in_aw_bits_burst,
  input         auto_axi4index_in_w_valid,
  input  [63:0] auto_axi4index_in_w_bits_data,
  input  [7:0]  auto_axi4index_in_w_bits_strb,
  input         auto_axi4index_in_w_bits_last,
                auto_axi4index_in_b_ready,
                auto_axi4index_in_ar_valid,
  input  [7:0]  auto_axi4index_in_ar_bits_id,
  input  [31:0] auto_axi4index_in_ar_bits_addr,
  input  [7:0]  auto_axi4index_in_ar_bits_len,
  input  [2:0]  auto_axi4index_in_ar_bits_size,
  input  [1:0]  auto_axi4index_in_ar_bits_burst,
  input         auto_axi4index_in_r_ready,
                auto_tl_out_a_ready,
                auto_tl_out_d_valid,
  input  [2:0]  auto_tl_out_d_bits_opcode,
  input  [3:0]  auto_tl_out_d_bits_size,
                auto_tl_out_d_bits_source,
  input         auto_tl_out_d_bits_denied,
  input  [63:0] auto_tl_out_d_bits_data,
  input         auto_tl_out_d_bits_corrupt,
  output        auto_axi4index_in_aw_ready,
                auto_axi4index_in_w_ready,
                auto_axi4index_in_b_valid,
  output [7:0]  auto_axi4index_in_b_bits_id,
  output [1:0]  auto_axi4index_in_b_bits_resp,
  output        auto_axi4index_in_ar_ready,
                auto_axi4index_in_r_valid,
  output [7:0]  auto_axi4index_in_r_bits_id,
  output [63:0] auto_axi4index_in_r_bits_data,
  output [1:0]  auto_axi4index_in_r_bits_resp,
  output        auto_axi4index_in_r_bits_last,
                auto_tl_out_a_valid,
  output [2:0]  auto_tl_out_a_bits_opcode,
                auto_tl_out_a_bits_param,
  output [3:0]  auto_tl_out_a_bits_size,
                auto_tl_out_a_bits_source,
  output [31:0] auto_tl_out_a_bits_address,
  output [7:0]  auto_tl_out_a_bits_mask,
  output [63:0] auto_tl_out_a_bits_data,
  output        auto_tl_out_d_ready
);

  wire        _axi4index_auto_out_aw_valid;
  wire        _axi4index_auto_out_aw_bits_id;
  wire [31:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire [6:0]  _axi4index_auto_out_aw_bits_echo_extra_id;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire        _axi4index_auto_out_ar_bits_id;
  wire [31:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire [6:0]  _axi4index_auto_out_ar_bits_echo_extra_id;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4frag_auto_in_aw_ready;
  wire        _axi4frag_auto_in_w_ready;
  wire        _axi4frag_auto_in_b_valid;
  wire        _axi4frag_auto_in_b_bits_id;
  wire [1:0]  _axi4frag_auto_in_b_bits_resp;
  wire [6:0]  _axi4frag_auto_in_b_bits_echo_extra_id;
  wire        _axi4frag_auto_in_ar_ready;
  wire        _axi4frag_auto_in_r_valid;
  wire        _axi4frag_auto_in_r_bits_id;
  wire [63:0] _axi4frag_auto_in_r_bits_data;
  wire [1:0]  _axi4frag_auto_in_r_bits_resp;
  wire [6:0]  _axi4frag_auto_in_r_bits_echo_extra_id;
  wire        _axi4frag_auto_in_r_bits_last;
  wire        _axi4frag_auto_out_aw_valid;
  wire        _axi4frag_auto_out_aw_bits_id;
  wire [31:0] _axi4frag_auto_out_aw_bits_addr;
  wire [7:0]  _axi4frag_auto_out_aw_bits_len;
  wire [2:0]  _axi4frag_auto_out_aw_bits_size;
  wire [6:0]  _axi4frag_auto_out_aw_bits_echo_extra_id;
  wire        _axi4frag_auto_out_aw_bits_echo_real_last;
  wire        _axi4frag_auto_out_w_valid;
  wire [63:0] _axi4frag_auto_out_w_bits_data;
  wire [7:0]  _axi4frag_auto_out_w_bits_strb;
  wire        _axi4frag_auto_out_w_bits_last;
  wire        _axi4frag_auto_out_b_ready;
  wire        _axi4frag_auto_out_ar_valid;
  wire        _axi4frag_auto_out_ar_bits_id;
  wire [31:0] _axi4frag_auto_out_ar_bits_addr;
  wire [7:0]  _axi4frag_auto_out_ar_bits_len;
  wire [2:0]  _axi4frag_auto_out_ar_bits_size;
  wire [6:0]  _axi4frag_auto_out_ar_bits_echo_extra_id;
  wire        _axi4frag_auto_out_ar_bits_echo_real_last;
  wire        _axi4frag_auto_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire        _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [6:0]  _axi4yank_auto_in_b_bits_echo_extra_id;
  wire        _axi4yank_auto_in_b_bits_echo_real_last;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire        _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [6:0]  _axi4yank_auto_in_r_bits_echo_extra_id;
  wire        _axi4yank_auto_in_r_bits_echo_real_last;
  wire        _axi4yank_auto_in_r_bits_last;
  wire        _axi4yank_auto_out_aw_valid;
  wire        _axi4yank_auto_out_aw_bits_id;
  wire [31:0] _axi4yank_auto_out_aw_bits_addr;
  wire [7:0]  _axi4yank_auto_out_aw_bits_len;
  wire [2:0]  _axi4yank_auto_out_aw_bits_size;
  wire        _axi4yank_auto_out_w_valid;
  wire [63:0] _axi4yank_auto_out_w_bits_data;
  wire [7:0]  _axi4yank_auto_out_w_bits_strb;
  wire        _axi4yank_auto_out_w_bits_last;
  wire        _axi4yank_auto_out_b_ready;
  wire        _axi4yank_auto_out_ar_valid;
  wire        _axi4yank_auto_out_ar_bits_id;
  wire [31:0] _axi4yank_auto_out_ar_bits_addr;
  wire [7:0]  _axi4yank_auto_out_ar_bits_len;
  wire [2:0]  _axi4yank_auto_out_ar_bits_size;
  wire        _axi4yank_auto_out_r_ready;
  wire        _axi42tl_auto_in_aw_ready;
  wire        _axi42tl_auto_in_w_ready;
  wire        _axi42tl_auto_in_b_valid;
  wire        _axi42tl_auto_in_b_bits_id;
  wire [1:0]  _axi42tl_auto_in_b_bits_resp;
  wire        _axi42tl_auto_in_ar_ready;
  wire        _axi42tl_auto_in_r_valid;
  wire        _axi42tl_auto_in_r_bits_id;
  wire [63:0] _axi42tl_auto_in_r_bits_data;
  wire [1:0]  _axi42tl_auto_in_r_bits_resp;
  wire        _axi42tl_auto_in_r_bits_last;
  wire        _axi42tl_auto_out_a_valid;
  wire [2:0]  _axi42tl_auto_out_a_bits_opcode;
  wire [3:0]  _axi42tl_auto_out_a_bits_size;
  wire [3:0]  _axi42tl_auto_out_a_bits_source;
  wire [31:0] _axi42tl_auto_out_a_bits_address;
  wire [7:0]  _axi42tl_auto_out_a_bits_mask;
  wire [63:0] _axi42tl_auto_out_a_bits_data;
  wire        _axi42tl_auto_out_d_ready;
  wire        _fixer_auto_in_a_ready;
  wire        _fixer_auto_in_d_valid;
  wire [2:0]  _fixer_auto_in_d_bits_opcode;
  wire [3:0]  _fixer_auto_in_d_bits_size;
  wire [3:0]  _fixer_auto_in_d_bits_source;
  wire        _fixer_auto_in_d_bits_denied;
  wire [63:0] _fixer_auto_in_d_bits_data;
  wire        _fixer_auto_in_d_bits_corrupt;
  wire        _fixer_auto_out_a_valid;
  wire [2:0]  _fixer_auto_out_a_bits_opcode;
  wire [3:0]  _fixer_auto_out_a_bits_size;
  wire [3:0]  _fixer_auto_out_a_bits_source;
  wire [31:0] _fixer_auto_out_a_bits_address;
  wire [7:0]  _fixer_auto_out_a_bits_mask;
  wire [63:0] _fixer_auto_out_a_bits_data;
  wire        _fixer_auto_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [3:0]  _buffer_auto_in_d_bits_source;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  TLBuffer_4 buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (_fixer_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_fixer_auto_out_a_bits_opcode),
    .auto_in_a_bits_size     (_fixer_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_fixer_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_fixer_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_fixer_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_fixer_auto_out_a_bits_data),
    .auto_in_d_ready         (_fixer_auto_out_d_ready),
    .auto_out_a_ready        (auto_tl_out_a_ready),
    .auto_out_d_valid        (auto_tl_out_d_valid),
    .auto_out_d_bits_opcode  (auto_tl_out_d_bits_opcode),
    .auto_out_d_bits_size    (auto_tl_out_d_bits_size),
    .auto_out_d_bits_source  (auto_tl_out_d_bits_source),
    .auto_out_d_bits_denied  (auto_tl_out_d_bits_denied),
    .auto_out_d_bits_data    (auto_tl_out_d_bits_data),
    .auto_out_d_bits_corrupt (auto_tl_out_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (auto_tl_out_a_valid),
    .auto_out_a_bits_opcode  (auto_tl_out_a_bits_opcode),
    .auto_out_a_bits_param   (auto_tl_out_a_bits_param),
    .auto_out_a_bits_size    (auto_tl_out_a_bits_size),
    .auto_out_a_bits_source  (auto_tl_out_a_bits_source),
    .auto_out_a_bits_address (auto_tl_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_tl_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_tl_out_a_bits_data),
    .auto_out_d_ready        (auto_tl_out_d_ready)
  );
  TLFIFOFixer_2 fixer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (_axi42tl_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_axi42tl_auto_out_a_bits_opcode),
    .auto_in_a_bits_size     (_axi42tl_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_axi42tl_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_axi42tl_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_axi42tl_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_axi42tl_auto_out_a_bits_data),
    .auto_in_d_ready         (_axi42tl_auto_out_d_ready),
    .auto_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_fixer_auto_in_a_ready),
    .auto_in_d_valid         (_fixer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_fixer_auto_in_d_bits_opcode),
    .auto_in_d_bits_size     (_fixer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_fixer_auto_in_d_bits_source),
    .auto_in_d_bits_denied   (_fixer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_fixer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_fixer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_fixer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_fixer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_fixer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_fixer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_fixer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_fixer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_fixer_auto_out_a_bits_data),
    .auto_out_d_ready        (_fixer_auto_out_d_ready)
  );
  AXI4ToTL axi42tl (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_aw_valid        (_axi4yank_auto_out_aw_valid),
    .auto_in_aw_bits_id      (_axi4yank_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr    (_axi4yank_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len     (_axi4yank_auto_out_aw_bits_len),
    .auto_in_aw_bits_size    (_axi4yank_auto_out_aw_bits_size),
    .auto_in_w_valid         (_axi4yank_auto_out_w_valid),
    .auto_in_w_bits_data     (_axi4yank_auto_out_w_bits_data),
    .auto_in_w_bits_strb     (_axi4yank_auto_out_w_bits_strb),
    .auto_in_w_bits_last     (_axi4yank_auto_out_w_bits_last),
    .auto_in_b_ready         (_axi4yank_auto_out_b_ready),
    .auto_in_ar_valid        (_axi4yank_auto_out_ar_valid),
    .auto_in_ar_bits_id      (_axi4yank_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr    (_axi4yank_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len     (_axi4yank_auto_out_ar_bits_len),
    .auto_in_ar_bits_size    (_axi4yank_auto_out_ar_bits_size),
    .auto_in_r_ready         (_axi4yank_auto_out_r_ready),
    .auto_out_a_ready        (_fixer_auto_in_a_ready),
    .auto_out_d_valid        (_fixer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_fixer_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_fixer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_fixer_auto_in_d_bits_source),
    .auto_out_d_bits_denied  (_fixer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_fixer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_fixer_auto_in_d_bits_corrupt),
    .auto_in_aw_ready        (_axi42tl_auto_in_aw_ready),
    .auto_in_w_ready         (_axi42tl_auto_in_w_ready),
    .auto_in_b_valid         (_axi42tl_auto_in_b_valid),
    .auto_in_b_bits_id       (_axi42tl_auto_in_b_bits_id),
    .auto_in_b_bits_resp     (_axi42tl_auto_in_b_bits_resp),
    .auto_in_ar_ready        (_axi42tl_auto_in_ar_ready),
    .auto_in_r_valid         (_axi42tl_auto_in_r_valid),
    .auto_in_r_bits_id       (_axi42tl_auto_in_r_bits_id),
    .auto_in_r_bits_data     (_axi42tl_auto_in_r_bits_data),
    .auto_in_r_bits_resp     (_axi42tl_auto_in_r_bits_resp),
    .auto_in_r_bits_last     (_axi42tl_auto_in_r_bits_last),
    .auto_out_a_valid        (_axi42tl_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_axi42tl_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_axi42tl_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_axi42tl_auto_out_a_bits_source),
    .auto_out_a_bits_address (_axi42tl_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_axi42tl_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_axi42tl_auto_out_a_bits_data),
    .auto_out_d_ready        (_axi42tl_auto_out_d_ready)
  );
  AXI4UserYanker_1 axi4yank (
    .clock                          (clock),
    .reset                          (reset),
    .auto_in_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_in_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len            (_axi4frag_auto_out_aw_bits_len),
    .auto_in_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_in_aw_bits_echo_extra_id  (_axi4frag_auto_out_aw_bits_echo_extra_id),
    .auto_in_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_in_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_in_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_in_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_in_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_in_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_in_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_in_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len            (_axi4frag_auto_out_ar_bits_len),
    .auto_in_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_in_ar_bits_echo_extra_id  (_axi4frag_auto_out_ar_bits_echo_extra_id),
    .auto_in_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_in_r_ready                (_axi4frag_auto_out_r_ready),
    .auto_out_aw_ready              (_axi42tl_auto_in_aw_ready),
    .auto_out_w_ready               (_axi42tl_auto_in_w_ready),
    .auto_out_b_valid               (_axi42tl_auto_in_b_valid),
    .auto_out_b_bits_id             (_axi42tl_auto_in_b_bits_id),
    .auto_out_b_bits_resp           (_axi42tl_auto_in_b_bits_resp),
    .auto_out_ar_ready              (_axi42tl_auto_in_ar_ready),
    .auto_out_r_valid               (_axi42tl_auto_in_r_valid),
    .auto_out_r_bits_id             (_axi42tl_auto_in_r_bits_id),
    .auto_out_r_bits_data           (_axi42tl_auto_in_r_bits_data),
    .auto_out_r_bits_resp           (_axi42tl_auto_in_r_bits_resp),
    .auto_out_r_bits_last           (_axi42tl_auto_in_r_bits_last),
    .auto_in_aw_ready               (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id              (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp            (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_extra_id   (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_in_b_bits_echo_real_last  (_axi4yank_auto_in_b_bits_echo_real_last),
    .auto_in_ar_ready               (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id              (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data            (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp            (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_extra_id   (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_echo_real_last  (_axi4yank_auto_in_r_bits_echo_real_last),
    .auto_in_r_bits_last            (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid              (_axi4yank_auto_out_aw_valid),
    .auto_out_aw_bits_id            (_axi4yank_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr          (_axi4yank_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len           (_axi4yank_auto_out_aw_bits_len),
    .auto_out_aw_bits_size          (_axi4yank_auto_out_aw_bits_size),
    .auto_out_w_valid               (_axi4yank_auto_out_w_valid),
    .auto_out_w_bits_data           (_axi4yank_auto_out_w_bits_data),
    .auto_out_w_bits_strb           (_axi4yank_auto_out_w_bits_strb),
    .auto_out_w_bits_last           (_axi4yank_auto_out_w_bits_last),
    .auto_out_b_ready               (_axi4yank_auto_out_b_ready),
    .auto_out_ar_valid              (_axi4yank_auto_out_ar_valid),
    .auto_out_ar_bits_id            (_axi4yank_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr          (_axi4yank_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len           (_axi4yank_auto_out_ar_bits_len),
    .auto_out_ar_bits_size          (_axi4yank_auto_out_ar_bits_size),
    .auto_out_r_ready               (_axi4yank_auto_out_r_ready)
  );
  AXI4Fragmenter axi4frag (
    .clock                           (clock),
    .reset                           (reset),
    .auto_in_aw_valid                (_axi4index_auto_out_aw_valid),
    .auto_in_aw_bits_id              (_axi4index_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr            (_axi4index_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len             (_axi4index_auto_out_aw_bits_len),
    .auto_in_aw_bits_size            (_axi4index_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst           (_axi4index_auto_out_aw_bits_burst),
    .auto_in_aw_bits_echo_extra_id   (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_in_w_valid                 (_axi4index_auto_out_w_valid),
    .auto_in_w_bits_data             (_axi4index_auto_out_w_bits_data),
    .auto_in_w_bits_strb             (_axi4index_auto_out_w_bits_strb),
    .auto_in_w_bits_last             (_axi4index_auto_out_w_bits_last),
    .auto_in_b_ready                 (_axi4index_auto_out_b_ready),
    .auto_in_ar_valid                (_axi4index_auto_out_ar_valid),
    .auto_in_ar_bits_id              (_axi4index_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr            (_axi4index_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len             (_axi4index_auto_out_ar_bits_len),
    .auto_in_ar_bits_size            (_axi4index_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst           (_axi4index_auto_out_ar_bits_burst),
    .auto_in_ar_bits_echo_extra_id   (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_in_r_ready                 (_axi4index_auto_out_r_ready),
    .auto_out_aw_ready               (_axi4yank_auto_in_aw_ready),
    .auto_out_w_ready                (_axi4yank_auto_in_w_ready),
    .auto_out_b_valid                (_axi4yank_auto_in_b_valid),
    .auto_out_b_bits_id              (_axi4yank_auto_in_b_bits_id),
    .auto_out_b_bits_resp            (_axi4yank_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_extra_id   (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_out_b_bits_echo_real_last  (_axi4yank_auto_in_b_bits_echo_real_last),
    .auto_out_ar_ready               (_axi4yank_auto_in_ar_ready),
    .auto_out_r_valid                (_axi4yank_auto_in_r_valid),
    .auto_out_r_bits_id              (_axi4yank_auto_in_r_bits_id),
    .auto_out_r_bits_data            (_axi4yank_auto_in_r_bits_data),
    .auto_out_r_bits_resp            (_axi4yank_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_extra_id   (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_echo_real_last  (_axi4yank_auto_in_r_bits_echo_real_last),
    .auto_out_r_bits_last            (_axi4yank_auto_in_r_bits_last),
    .auto_in_aw_ready                (_axi4frag_auto_in_aw_ready),
    .auto_in_w_ready                 (_axi4frag_auto_in_w_ready),
    .auto_in_b_valid                 (_axi4frag_auto_in_b_valid),
    .auto_in_b_bits_id               (_axi4frag_auto_in_b_bits_id),
    .auto_in_b_bits_resp             (_axi4frag_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_extra_id    (_axi4frag_auto_in_b_bits_echo_extra_id),
    .auto_in_ar_ready                (_axi4frag_auto_in_ar_ready),
    .auto_in_r_valid                 (_axi4frag_auto_in_r_valid),
    .auto_in_r_bits_id               (_axi4frag_auto_in_r_bits_id),
    .auto_in_r_bits_data             (_axi4frag_auto_in_r_bits_data),
    .auto_in_r_bits_resp             (_axi4frag_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_extra_id    (_axi4frag_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_last             (_axi4frag_auto_in_r_bits_last),
    .auto_out_aw_valid               (_axi4frag_auto_out_aw_valid),
    .auto_out_aw_bits_id             (_axi4frag_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr           (_axi4frag_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len            (_axi4frag_auto_out_aw_bits_len),
    .auto_out_aw_bits_size           (_axi4frag_auto_out_aw_bits_size),
    .auto_out_aw_bits_echo_extra_id  (_axi4frag_auto_out_aw_bits_echo_extra_id),
    .auto_out_aw_bits_echo_real_last (_axi4frag_auto_out_aw_bits_echo_real_last),
    .auto_out_w_valid                (_axi4frag_auto_out_w_valid),
    .auto_out_w_bits_data            (_axi4frag_auto_out_w_bits_data),
    .auto_out_w_bits_strb            (_axi4frag_auto_out_w_bits_strb),
    .auto_out_w_bits_last            (_axi4frag_auto_out_w_bits_last),
    .auto_out_b_ready                (_axi4frag_auto_out_b_ready),
    .auto_out_ar_valid               (_axi4frag_auto_out_ar_valid),
    .auto_out_ar_bits_id             (_axi4frag_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr           (_axi4frag_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len            (_axi4frag_auto_out_ar_bits_len),
    .auto_out_ar_bits_size           (_axi4frag_auto_out_ar_bits_size),
    .auto_out_ar_bits_echo_extra_id  (_axi4frag_auto_out_ar_bits_echo_extra_id),
    .auto_out_ar_bits_echo_real_last (_axi4frag_auto_out_ar_bits_echo_real_last),
    .auto_out_r_ready                (_axi4frag_auto_out_r_ready)
  );
  AXI4IdIndexer_1 axi4index (
    .auto_in_aw_valid               (auto_axi4index_in_aw_valid),
    .auto_in_aw_bits_id             (auto_axi4index_in_aw_bits_id),
    .auto_in_aw_bits_addr           (auto_axi4index_in_aw_bits_addr),
    .auto_in_aw_bits_len            (auto_axi4index_in_aw_bits_len),
    .auto_in_aw_bits_size           (auto_axi4index_in_aw_bits_size),
    .auto_in_aw_bits_burst          (auto_axi4index_in_aw_bits_burst),
    .auto_in_w_valid                (auto_axi4index_in_w_valid),
    .auto_in_w_bits_data            (auto_axi4index_in_w_bits_data),
    .auto_in_w_bits_strb            (auto_axi4index_in_w_bits_strb),
    .auto_in_w_bits_last            (auto_axi4index_in_w_bits_last),
    .auto_in_b_ready                (auto_axi4index_in_b_ready),
    .auto_in_ar_valid               (auto_axi4index_in_ar_valid),
    .auto_in_ar_bits_id             (auto_axi4index_in_ar_bits_id),
    .auto_in_ar_bits_addr           (auto_axi4index_in_ar_bits_addr),
    .auto_in_ar_bits_len            (auto_axi4index_in_ar_bits_len),
    .auto_in_ar_bits_size           (auto_axi4index_in_ar_bits_size),
    .auto_in_ar_bits_burst          (auto_axi4index_in_ar_bits_burst),
    .auto_in_r_ready                (auto_axi4index_in_r_ready),
    .auto_out_aw_ready              (_axi4frag_auto_in_aw_ready),
    .auto_out_w_ready               (_axi4frag_auto_in_w_ready),
    .auto_out_b_valid               (_axi4frag_auto_in_b_valid),
    .auto_out_b_bits_id             (_axi4frag_auto_in_b_bits_id),
    .auto_out_b_bits_resp           (_axi4frag_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_extra_id  (_axi4frag_auto_in_b_bits_echo_extra_id),
    .auto_out_ar_ready              (_axi4frag_auto_in_ar_ready),
    .auto_out_r_valid               (_axi4frag_auto_in_r_valid),
    .auto_out_r_bits_id             (_axi4frag_auto_in_r_bits_id),
    .auto_out_r_bits_data           (_axi4frag_auto_in_r_bits_data),
    .auto_out_r_bits_resp           (_axi4frag_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_extra_id  (_axi4frag_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_last           (_axi4frag_auto_in_r_bits_last),
    .auto_in_aw_ready               (auto_axi4index_in_aw_ready),
    .auto_in_w_ready                (auto_axi4index_in_w_ready),
    .auto_in_b_valid                (auto_axi4index_in_b_valid),
    .auto_in_b_bits_id              (auto_axi4index_in_b_bits_id),
    .auto_in_b_bits_resp            (auto_axi4index_in_b_bits_resp),
    .auto_in_ar_ready               (auto_axi4index_in_ar_ready),
    .auto_in_r_valid                (auto_axi4index_in_r_valid),
    .auto_in_r_bits_id              (auto_axi4index_in_r_bits_id),
    .auto_in_r_bits_data            (auto_axi4index_in_r_bits_data),
    .auto_in_r_bits_resp            (auto_axi4index_in_r_bits_resp),
    .auto_in_r_bits_last            (auto_axi4index_in_r_bits_last),
    .auto_out_aw_valid              (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id            (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr          (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len           (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size          (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst         (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_echo_extra_id (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_out_w_valid               (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data           (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb           (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last           (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready               (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid              (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id            (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr          (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len           (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size          (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst         (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_echo_extra_id (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_out_r_ready               (_axi4index_auto_out_r_ready)
  );
endmodule

module FrontBus(
  input         auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_valid,
  input  [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_id,
  input  [31:0] auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_addr,
  input  [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_len,
  input  [2:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_size,
  input  [1:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_burst,
  input         auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_valid,
  input  [63:0] auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_data,
  input  [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_strb,
  input         auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_last,
                auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_ready,
                auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_valid,
  input  [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_id,
  input  [31:0] auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_addr,
  input  [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_len,
  input  [2:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_size,
  input  [1:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_burst,
  input         auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_ready,
                auto_coupler_from_port_named_eth_0_widget_in_a_valid,
  input  [2:0]  auto_coupler_from_port_named_eth_0_widget_in_a_bits_opcode,
  input  [3:0]  auto_coupler_from_port_named_eth_0_widget_in_a_bits_size,
  input  [1:0]  auto_coupler_from_port_named_eth_0_widget_in_a_bits_source,
  input  [31:0] auto_coupler_from_port_named_eth_0_widget_in_a_bits_address,
  input  [63:0] auto_coupler_from_port_named_eth_0_widget_in_a_bits_data,
  input         auto_coupler_from_port_named_eth_0_widget_in_d_ready,
                auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_clock,
                auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_reset,
                auto_bus_xing_out_a_ready,
                auto_bus_xing_out_d_valid,
  input  [2:0]  auto_bus_xing_out_d_bits_opcode,
  input  [3:0]  auto_bus_xing_out_d_bits_size,
  input  [4:0]  auto_bus_xing_out_d_bits_source,
  input         auto_bus_xing_out_d_bits_denied,
  input  [63:0] auto_bus_xing_out_d_bits_data,
  input         auto_bus_xing_out_d_bits_corrupt,
  output        auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_ready,
                auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_ready,
                auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_valid,
  output [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_id,
  output [1:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_resp,
  output        auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_ready,
                auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_valid,
  output [7:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_id,
  output [63:0] auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_data,
  output [1:0]  auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_resp,
  output        auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_last,
                auto_coupler_from_port_named_eth_0_widget_in_a_ready,
                auto_coupler_from_port_named_eth_0_widget_in_d_valid,
  output [2:0]  auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode,
  output [3:0]  auto_coupler_from_port_named_eth_0_widget_in_d_bits_size,
  output [1:0]  auto_coupler_from_port_named_eth_0_widget_in_d_bits_source,
  output [63:0] auto_coupler_from_port_named_eth_0_widget_in_d_bits_data,
  output        auto_bus_xing_out_a_valid,
  output [2:0]  auto_bus_xing_out_a_bits_opcode,
                auto_bus_xing_out_a_bits_param,
  output [3:0]  auto_bus_xing_out_a_bits_size,
  output [4:0]  auto_bus_xing_out_a_bits_source,
  output [31:0] auto_bus_xing_out_a_bits_address,
  output [7:0]  auto_bus_xing_out_a_bits_mask,
  output [63:0] auto_bus_xing_out_a_bits_data,
  output        auto_bus_xing_out_d_ready
);

  wire        _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid;
  wire [2:0]  _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode;
  wire [2:0]  _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param;
  wire [3:0]  _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size;
  wire [3:0]  _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source;
  wire [31:0] _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address;
  wire [7:0]  _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask;
  wire [63:0] _coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data;
  wire        _coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [4:0]  _buffer_auto_in_d_bits_source;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _subsystem_fbus_xbar_auto_in_1_a_ready;
  wire        _subsystem_fbus_xbar_auto_in_1_d_valid;
  wire [2:0]  _subsystem_fbus_xbar_auto_in_1_d_bits_opcode;
  wire [3:0]  _subsystem_fbus_xbar_auto_in_1_d_bits_size;
  wire [3:0]  _subsystem_fbus_xbar_auto_in_1_d_bits_source;
  wire        _subsystem_fbus_xbar_auto_in_1_d_bits_denied;
  wire [63:0] _subsystem_fbus_xbar_auto_in_1_d_bits_data;
  wire        _subsystem_fbus_xbar_auto_in_1_d_bits_corrupt;
  wire        _subsystem_fbus_xbar_auto_out_a_valid;
  wire [2:0]  _subsystem_fbus_xbar_auto_out_a_bits_opcode;
  wire [2:0]  _subsystem_fbus_xbar_auto_out_a_bits_param;
  wire [3:0]  _subsystem_fbus_xbar_auto_out_a_bits_size;
  wire [4:0]  _subsystem_fbus_xbar_auto_out_a_bits_source;
  wire [31:0] _subsystem_fbus_xbar_auto_out_a_bits_address;
  wire [7:0]  _subsystem_fbus_xbar_auto_out_a_bits_mask;
  wire [63:0] _subsystem_fbus_xbar_auto_out_a_bits_data;
  wire        _subsystem_fbus_xbar_auto_out_d_ready;
  TLXbar_3 subsystem_fbus_xbar (
    .clock
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_clock),
    .reset
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_reset),
    .auto_in_1_a_valid
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid),
    .auto_in_1_a_bits_opcode
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode),
    .auto_in_1_a_bits_param
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param),
    .auto_in_1_a_bits_size
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size),
    .auto_in_1_a_bits_source
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source),
    .auto_in_1_a_bits_address
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address),
    .auto_in_1_a_bits_mask
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask),
    .auto_in_1_a_bits_data
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data),
    .auto_in_1_d_ready
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready),
    .auto_in_0_a_valid        (auto_coupler_from_port_named_eth_0_widget_in_a_valid),
    .auto_in_0_a_bits_opcode
      (auto_coupler_from_port_named_eth_0_widget_in_a_bits_opcode),
    .auto_in_0_a_bits_size    (auto_coupler_from_port_named_eth_0_widget_in_a_bits_size),
    .auto_in_0_a_bits_source
      (auto_coupler_from_port_named_eth_0_widget_in_a_bits_source),
    .auto_in_0_a_bits_address
      (auto_coupler_from_port_named_eth_0_widget_in_a_bits_address),
    .auto_in_0_a_bits_data    (auto_coupler_from_port_named_eth_0_widget_in_a_bits_data),
    .auto_in_0_d_ready        (auto_coupler_from_port_named_eth_0_widget_in_d_ready),
    .auto_out_a_ready         (_buffer_auto_in_a_ready),
    .auto_out_d_valid         (_buffer_auto_in_d_valid),
    .auto_out_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_out_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_out_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_in_1_a_ready        (_subsystem_fbus_xbar_auto_in_1_a_ready),
    .auto_in_1_d_valid        (_subsystem_fbus_xbar_auto_in_1_d_valid),
    .auto_in_1_d_bits_opcode  (_subsystem_fbus_xbar_auto_in_1_d_bits_opcode),
    .auto_in_1_d_bits_size    (_subsystem_fbus_xbar_auto_in_1_d_bits_size),
    .auto_in_1_d_bits_source  (_subsystem_fbus_xbar_auto_in_1_d_bits_source),
    .auto_in_1_d_bits_denied  (_subsystem_fbus_xbar_auto_in_1_d_bits_denied),
    .auto_in_1_d_bits_data    (_subsystem_fbus_xbar_auto_in_1_d_bits_data),
    .auto_in_1_d_bits_corrupt (_subsystem_fbus_xbar_auto_in_1_d_bits_corrupt),
    .auto_in_0_a_ready        (auto_coupler_from_port_named_eth_0_widget_in_a_ready),
    .auto_in_0_d_valid        (auto_coupler_from_port_named_eth_0_widget_in_d_valid),
    .auto_in_0_d_bits_opcode
      (auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode),
    .auto_in_0_d_bits_size    (auto_coupler_from_port_named_eth_0_widget_in_d_bits_size),
    .auto_in_0_d_bits_source
      (auto_coupler_from_port_named_eth_0_widget_in_d_bits_source),
    .auto_in_0_d_bits_data    (auto_coupler_from_port_named_eth_0_widget_in_d_bits_data),
    .auto_out_a_valid         (_subsystem_fbus_xbar_auto_out_a_valid),
    .auto_out_a_bits_opcode   (_subsystem_fbus_xbar_auto_out_a_bits_opcode),
    .auto_out_a_bits_param    (_subsystem_fbus_xbar_auto_out_a_bits_param),
    .auto_out_a_bits_size     (_subsystem_fbus_xbar_auto_out_a_bits_size),
    .auto_out_a_bits_source   (_subsystem_fbus_xbar_auto_out_a_bits_source),
    .auto_out_a_bits_address  (_subsystem_fbus_xbar_auto_out_a_bits_address),
    .auto_out_a_bits_mask     (_subsystem_fbus_xbar_auto_out_a_bits_mask),
    .auto_out_a_bits_data     (_subsystem_fbus_xbar_auto_out_a_bits_data),
    .auto_out_d_ready         (_subsystem_fbus_xbar_auto_out_d_ready)
  );
  TLBuffer_3 buffer (
    .clock
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_clock),
    .reset
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_reset),
    .auto_in_a_valid         (_subsystem_fbus_xbar_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_subsystem_fbus_xbar_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_subsystem_fbus_xbar_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_subsystem_fbus_xbar_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_subsystem_fbus_xbar_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_subsystem_fbus_xbar_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_subsystem_fbus_xbar_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_subsystem_fbus_xbar_auto_out_a_bits_data),
    .auto_in_d_ready         (_subsystem_fbus_xbar_auto_out_d_ready),
    .auto_out_a_ready        (auto_bus_xing_out_a_ready),
    .auto_out_d_valid        (auto_bus_xing_out_d_valid),
    .auto_out_d_bits_opcode  (auto_bus_xing_out_d_bits_opcode),
    .auto_out_d_bits_size    (auto_bus_xing_out_d_bits_size),
    .auto_out_d_bits_source  (auto_bus_xing_out_d_bits_source),
    .auto_out_d_bits_denied  (auto_bus_xing_out_d_bits_denied),
    .auto_out_d_bits_data    (auto_bus_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt (auto_bus_xing_out_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (auto_bus_xing_out_a_valid),
    .auto_out_a_bits_opcode  (auto_bus_xing_out_a_bits_opcode),
    .auto_out_a_bits_param   (auto_bus_xing_out_a_bits_param),
    .auto_out_a_bits_size    (auto_bus_xing_out_a_bits_size),
    .auto_out_a_bits_source  (auto_bus_xing_out_a_bits_source),
    .auto_out_a_bits_address (auto_bus_xing_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_bus_xing_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_bus_xing_out_a_bits_data),
    .auto_out_d_ready        (auto_bus_xing_out_d_ready)
  );
  TLInterconnectCoupler_11 coupler_from_port_named_slave_port_axi4 (
    .clock
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_clock),
    .reset
      (auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_reset),
    .auto_axi4index_in_aw_valid
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_valid),
    .auto_axi4index_in_aw_bits_id
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_id),
    .auto_axi4index_in_aw_bits_addr
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_addr),
    .auto_axi4index_in_aw_bits_len
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_len),
    .auto_axi4index_in_aw_bits_size
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_size),
    .auto_axi4index_in_aw_bits_burst
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_burst),
    .auto_axi4index_in_w_valid
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_valid),
    .auto_axi4index_in_w_bits_data
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_data),
    .auto_axi4index_in_w_bits_strb
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_strb),
    .auto_axi4index_in_w_bits_last
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_last),
    .auto_axi4index_in_b_ready
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_ready),
    .auto_axi4index_in_ar_valid
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_valid),
    .auto_axi4index_in_ar_bits_id
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_id),
    .auto_axi4index_in_ar_bits_addr
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_addr),
    .auto_axi4index_in_ar_bits_len
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_len),
    .auto_axi4index_in_ar_bits_size
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_size),
    .auto_axi4index_in_ar_bits_burst
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_burst),
    .auto_axi4index_in_r_ready
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_ready),
    .auto_tl_out_a_ready             (_subsystem_fbus_xbar_auto_in_1_a_ready),
    .auto_tl_out_d_valid             (_subsystem_fbus_xbar_auto_in_1_d_valid),
    .auto_tl_out_d_bits_opcode       (_subsystem_fbus_xbar_auto_in_1_d_bits_opcode),
    .auto_tl_out_d_bits_size         (_subsystem_fbus_xbar_auto_in_1_d_bits_size),
    .auto_tl_out_d_bits_source       (_subsystem_fbus_xbar_auto_in_1_d_bits_source),
    .auto_tl_out_d_bits_denied       (_subsystem_fbus_xbar_auto_in_1_d_bits_denied),
    .auto_tl_out_d_bits_data         (_subsystem_fbus_xbar_auto_in_1_d_bits_data),
    .auto_tl_out_d_bits_corrupt      (_subsystem_fbus_xbar_auto_in_1_d_bits_corrupt),
    .auto_axi4index_in_aw_ready
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_ready),
    .auto_axi4index_in_w_ready
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_ready),
    .auto_axi4index_in_b_valid
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_valid),
    .auto_axi4index_in_b_bits_id
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_id),
    .auto_axi4index_in_b_bits_resp
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_resp),
    .auto_axi4index_in_ar_ready
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_ready),
    .auto_axi4index_in_r_valid
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_valid),
    .auto_axi4index_in_r_bits_id
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_id),
    .auto_axi4index_in_r_bits_data
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_data),
    .auto_axi4index_in_r_bits_resp
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_resp),
    .auto_axi4index_in_r_bits_last
      (auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_last),
    .auto_tl_out_a_valid
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_valid),
    .auto_tl_out_a_bits_opcode
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_opcode),
    .auto_tl_out_a_bits_param
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_param),
    .auto_tl_out_a_bits_size
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_size),
    .auto_tl_out_a_bits_source
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_source),
    .auto_tl_out_a_bits_address
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_address),
    .auto_tl_out_a_bits_mask
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_mask),
    .auto_tl_out_a_bits_data
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_a_bits_data),
    .auto_tl_out_d_ready
      (_coupler_from_port_named_slave_port_axi4_auto_tl_out_d_ready)
  );
endmodule

module FixedClockBroadcast_3(
  input  auto_in_clock,
         auto_in_reset,
  output auto_out_1_clock,
         auto_out_1_reset,
         auto_out_0_clock,
         auto_out_0_reset
);

  assign auto_out_1_clock = auto_in_clock;
  assign auto_out_1_reset = auto_in_reset;
  assign auto_out_0_clock = auto_in_clock;
  assign auto_out_0_reset = auto_in_reset;
endmodule

module TLFIFOFixer_3(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire [13:0] _GEN = auto_in_a_bits_address[29:16] ^ 14'h1001;
  wire [1:0]  _a_id_T_42 =
    {1'h0,
     {auto_in_a_bits_address[29:27],
      auto_in_a_bits_address[25],
      auto_in_a_bits_address[16],
      ~(auto_in_a_bits_address[13])} == 6'h0}
    | {2{{_GEN[13:11], auto_in_a_bits_address[25], _GEN[0]} == 5'h0
           | auto_in_a_bits_address[29]}};
  wire [2:0]  a_id =
    ({auto_in_a_bits_address[29:27],
      ~(auto_in_a_bits_address[25]),
      auto_in_a_bits_address[16]} == 5'h0
       ? 3'h5
       : 3'h0)
    | ({auto_in_a_bits_address[29:27],
        auto_in_a_bits_address[25],
        auto_in_a_bits_address[16],
        auto_in_a_bits_address[13]} == 6'h0
         ? 3'h6
         : 3'h0)
    | {auto_in_a_bits_address[29:27] == 3'h1,
       _a_id_T_42[1]
         | {auto_in_a_bits_address[29:27],
            auto_in_a_bits_address[25],
            ~(auto_in_a_bits_address[16])} == 5'h0,
       _a_id_T_42[0]};
  wire        a_noDomain = a_id == 3'h0;
  reg  [8:0]  a_first_counter;
  wire        a_first = a_first_counter == 9'h0;
  reg  [8:0]  d_first_counter;
  reg         flight_0;
  reg         flight_1;
  reg         flight_2;
  reg         flight_3;
  reg         flight_4;
  reg         flight_5;
  reg         flight_6;
  reg         flight_7;
  reg         flight_8;
  reg         flight_9;
  reg         flight_10;
  reg         flight_11;
  reg         flight_12;
  reg         flight_13;
  reg         flight_14;
  reg         flight_15;
  reg         flight_16;
  reg         flight_17;
  reg         flight_18;
  reg         flight_19;
  wire        stalls_a_sel = auto_in_a_bits_source[5:2] == 4'h4;
  reg  [2:0]  stalls_id;
  wire        stalls_a_sel_1 = auto_in_a_bits_source[5:3] == 3'h0;
  reg  [2:0]  stalls_id_1;
  wire        stalls_a_sel_2 = auto_in_a_bits_source[5:3] == 3'h1;
  reg  [2:0]  stalls_id_2;
  wire        stall =
    stalls_a_sel & a_first & (flight_16 | flight_17 | flight_18 | flight_19)
    & (a_noDomain | stalls_id != a_id) | stalls_a_sel_1 & a_first
    & (flight_0 | flight_1 | flight_2 | flight_3 | flight_4 | flight_5 | flight_6
       | flight_7) & (a_noDomain | stalls_id_1 != a_id) | stalls_a_sel_2 & a_first
    & (flight_8 | flight_9 | flight_10 | flight_11 | flight_12 | flight_13 | flight_14
       | flight_15) & (a_noDomain | stalls_id_2 != a_id);
  wire        nodeIn_a_ready = auto_out_a_ready & ~stall;
  wire [26:0] _a_first_beats1_decode_T_1 = 27'hFFF << auto_in_a_bits_size;
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;
  wire        d_first_first = d_first_counter == 9'h0;
  wire        _T_3 =
    d_first_first & auto_out_d_bits_opcode != 3'h6 & auto_in_d_ready & auto_out_d_valid;
  wire        _T_5 = nodeIn_a_ready & auto_in_a_valid;
  wire        _T_1 = a_first & _T_5;
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 9'h0;
      d_first_counter <= 9'h0;
      flight_0 <= 1'h0;
      flight_1 <= 1'h0;
      flight_2 <= 1'h0;
      flight_3 <= 1'h0;
      flight_4 <= 1'h0;
      flight_5 <= 1'h0;
      flight_6 <= 1'h0;
      flight_7 <= 1'h0;
      flight_8 <= 1'h0;
      flight_9 <= 1'h0;
      flight_10 <= 1'h0;
      flight_11 <= 1'h0;
      flight_12 <= 1'h0;
      flight_13 <= 1'h0;
      flight_14 <= 1'h0;
      flight_15 <= 1'h0;
      flight_16 <= 1'h0;
      flight_17 <= 1'h0;
      flight_18 <= 1'h0;
      flight_19 <= 1'h0;
    end
    else begin
      if (_T_5) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            a_first_counter <= 9'h0;
          else
            a_first_counter <= ~(_a_first_beats1_decode_T_1[11:3]);
        end
        else
          a_first_counter <= a_first_counter - 9'h1;
      end
      if (auto_in_d_ready & auto_out_d_valid) begin
        if (d_first_first) begin
          if (auto_out_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[11:3]);
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
      flight_0 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h0)
        & (_T_1 & auto_in_a_bits_source == 6'h0 | flight_0);
      flight_1 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h1)
        & (_T_1 & auto_in_a_bits_source == 6'h1 | flight_1);
      flight_2 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h2)
        & (_T_1 & auto_in_a_bits_source == 6'h2 | flight_2);
      flight_3 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h3)
        & (_T_1 & auto_in_a_bits_source == 6'h3 | flight_3);
      flight_4 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h4)
        & (_T_1 & auto_in_a_bits_source == 6'h4 | flight_4);
      flight_5 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h5)
        & (_T_1 & auto_in_a_bits_source == 6'h5 | flight_5);
      flight_6 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h6)
        & (_T_1 & auto_in_a_bits_source == 6'h6 | flight_6);
      flight_7 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h7)
        & (_T_1 & auto_in_a_bits_source == 6'h7 | flight_7);
      flight_8 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h8)
        & (_T_1 & auto_in_a_bits_source == 6'h8 | flight_8);
      flight_9 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h9)
        & (_T_1 & auto_in_a_bits_source == 6'h9 | flight_9);
      flight_10 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hA)
        & (_T_1 & auto_in_a_bits_source == 6'hA | flight_10);
      flight_11 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hB)
        & (_T_1 & auto_in_a_bits_source == 6'hB | flight_11);
      flight_12 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hC)
        & (_T_1 & auto_in_a_bits_source == 6'hC | flight_12);
      flight_13 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hD)
        & (_T_1 & auto_in_a_bits_source == 6'hD | flight_13);
      flight_14 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hE)
        & (_T_1 & auto_in_a_bits_source == 6'hE | flight_14);
      flight_15 <=
        ~(_T_3 & auto_out_d_bits_source == 6'hF)
        & (_T_1 & auto_in_a_bits_source == 6'hF | flight_15);
      flight_16 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h10)
        & (_T_1 & auto_in_a_bits_source == 6'h10 | flight_16);
      flight_17 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h11)
        & (_T_1 & auto_in_a_bits_source == 6'h11 | flight_17);
      flight_18 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h12)
        & (_T_1 & auto_in_a_bits_source == 6'h12 | flight_18);
      flight_19 <=
        ~(_T_3 & auto_out_d_bits_source == 6'h13)
        & (_T_1 & auto_in_a_bits_source == 6'h13 | flight_19);
    end
    if (_T_5 & stalls_a_sel)
      stalls_id <= a_id;
    if (_T_5 & stalls_a_sel_1)
      stalls_id_1 <= a_id;
    if (_T_5 & stalls_a_sel_2)
      stalls_id_2 <= a_id;
  end // always @(posedge)
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid & ~stall;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_param = auto_in_a_bits_param;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module TLXbar_5(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_5_a_ready,
                auto_out_5_d_valid,
  input  [2:0]  auto_out_5_d_bits_size,
  input  [5:0]  auto_out_5_d_bits_source,
  input  [63:0] auto_out_5_d_bits_data,
  input         auto_out_4_a_ready,
                auto_out_4_d_valid,
  input  [2:0]  auto_out_4_d_bits_opcode,
                auto_out_4_d_bits_size,
  input  [5:0]  auto_out_4_d_bits_source,
  input  [63:0] auto_out_4_d_bits_data,
  input         auto_out_3_a_ready,
                auto_out_3_d_valid,
  input  [2:0]  auto_out_3_d_bits_opcode,
                auto_out_3_d_bits_size,
  input  [5:0]  auto_out_3_d_bits_source,
  input  [63:0] auto_out_3_d_bits_data,
  input         auto_out_2_a_ready,
                auto_out_2_d_valid,
  input  [2:0]  auto_out_2_d_bits_opcode,
                auto_out_2_d_bits_size,
  input  [5:0]  auto_out_2_d_bits_source,
  input  [63:0] auto_out_2_d_bits_data,
  input         auto_out_1_a_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input  [1:0]  auto_out_1_d_bits_param,
  input  [2:0]  auto_out_1_d_bits_size,
  input  [5:0]  auto_out_1_d_bits_source,
  input         auto_out_1_d_bits_sink,
                auto_out_1_d_bits_denied,
  input  [63:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input  [1:0]  auto_out_0_d_bits_param,
  input  [3:0]  auto_out_0_d_bits_size,
  input  [5:0]  auto_out_0_d_bits_source,
  input         auto_out_0_d_bits_sink,
                auto_out_0_d_bits_denied,
  input  [63:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_5_a_valid,
  output [2:0]  auto_out_5_a_bits_size,
  output [5:0]  auto_out_5_a_bits_source,
  output [16:0] auto_out_5_a_bits_address,
  output [7:0]  auto_out_5_a_bits_mask,
  output        auto_out_5_d_ready,
                auto_out_4_a_valid,
  output [2:0]  auto_out_4_a_bits_opcode,
                auto_out_4_a_bits_size,
  output [5:0]  auto_out_4_a_bits_source,
  output [11:0] auto_out_4_a_bits_address,
  output [7:0]  auto_out_4_a_bits_mask,
  output [63:0] auto_out_4_a_bits_data,
  output        auto_out_4_d_ready,
                auto_out_3_a_valid,
  output [2:0]  auto_out_3_a_bits_opcode,
                auto_out_3_a_bits_size,
  output [5:0]  auto_out_3_a_bits_source,
  output [25:0] auto_out_3_a_bits_address,
  output [7:0]  auto_out_3_a_bits_mask,
  output [63:0] auto_out_3_a_bits_data,
  output        auto_out_3_d_ready,
                auto_out_2_a_valid,
  output [2:0]  auto_out_2_a_bits_opcode,
                auto_out_2_a_bits_size,
  output [5:0]  auto_out_2_a_bits_source,
  output [27:0] auto_out_2_a_bits_address,
  output [7:0]  auto_out_2_a_bits_mask,
  output [63:0] auto_out_2_a_bits_data,
  output        auto_out_2_d_ready,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
                auto_out_1_a_bits_param,
                auto_out_1_a_bits_size,
  output [5:0]  auto_out_1_a_bits_source,
  output [29:0] auto_out_1_a_bits_address,
  output [7:0]  auto_out_1_a_bits_mask,
  output [63:0] auto_out_1_a_bits_data,
  output        auto_out_1_d_ready,
                auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output [3:0]  auto_out_0_a_bits_size,
  output [5:0]  auto_out_0_a_bits_source,
  output        auto_out_0_d_ready
);

  wire        requestAIO_0_0 =
    {auto_in_a_bits_address[29:27],
     auto_in_a_bits_address[25],
     auto_in_a_bits_address[16],
     ~(auto_in_a_bits_address[13])} == 6'h0;
  wire [13:0] _GEN = auto_in_a_bits_address[29:16] ^ 14'h1001;
  wire        requestAIO_0_1 =
    {_GEN[13:11], auto_in_a_bits_address[25], _GEN[0]} == 5'h0
    | auto_in_a_bits_address[29];
  wire        requestAIO_0_2 = auto_in_a_bits_address[29:27] == 3'h1;
  wire        requestAIO_0_3 =
    {auto_in_a_bits_address[29:27],
     ~(auto_in_a_bits_address[25]),
     auto_in_a_bits_address[16]} == 5'h0;
  wire        requestAIO_0_4 =
    {auto_in_a_bits_address[29:27],
     auto_in_a_bits_address[25],
     auto_in_a_bits_address[16],
     auto_in_a_bits_address[13]} == 6'h0;
  wire        requestAIO_0_5 =
    {auto_in_a_bits_address[29:27],
     auto_in_a_bits_address[25],
     ~(auto_in_a_bits_address[16])} == 5'h0;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire [5:0]  readys_valid =
    {auto_out_5_d_valid,
     auto_out_4_d_valid,
     auto_out_3_d_valid,
     auto_out_2_d_valid,
     auto_out_1_d_valid,
     auto_out_0_d_valid};
  reg  [5:0]  readys_mask;
  wire [5:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [4:0]  _GEN_0 = _readys_filter_T_1[4:0] | _readys_filter_T_1[5:1];
  wire        _GEN_1 = auto_out_5_d_valid | _readys_filter_T_1[0];
  wire        _GEN_2 = auto_out_4_d_valid | auto_out_5_d_valid;
  wire        _GEN_3 = auto_out_3_d_valid | auto_out_4_d_valid;
  wire        _GEN_4 = _GEN_0[3] | _readys_filter_T_1[5];
  wire [2:0]  _GEN_5 = _GEN_0[2:0] | _GEN_0[4:2];
  wire        _GEN_6 = _GEN_1 | _GEN_0[1];
  wire [5:0]  readys_readys =
    ~({readys_mask[5],
       _readys_filter_T_1[5] | readys_mask[4],
       _GEN_0[4] | readys_mask[3],
       _GEN_4 | readys_mask[2],
       _GEN_5[2] | readys_mask[1],
       _GEN_5[1] | _readys_filter_T_1[5] | readys_mask[0]}
      & {_GEN_5[0] | _GEN_0[4],
         _GEN_6 | _GEN_4,
         _GEN_2 | _GEN_0[0] | _GEN_5[2],
         _GEN_3 | _GEN_1 | _GEN_5[1],
         auto_out_2_d_valid | auto_out_3_d_valid | _GEN_2 | _GEN_5[0],
         auto_out_1_d_valid | auto_out_2_d_valid | _GEN_3 | _GEN_6});
  wire        winner_0 = readys_readys[0] & auto_out_0_d_valid;
  wire        winner_1 = readys_readys[1] & auto_out_1_d_valid;
  wire        winner_2 = readys_readys[2] & auto_out_2_d_valid;
  wire        winner_3 = readys_readys[3] & auto_out_3_d_valid;
  wire        winner_4 = readys_readys[4] & auto_out_4_d_valid;
  wire        winner_5 = readys_readys[5] & auto_out_5_d_valid;
  wire        _in_0_d_valid_T = auto_out_0_d_valid | auto_out_1_d_valid;
  `ifndef SYNTHESIS
    wire prefixOR_2 = winner_0 | winner_1;
    wire prefixOR_3 = prefixOR_2 | winner_2;
    wire prefixOR_4 = prefixOR_3 | winner_3;
    always @(posedge clock) begin
      if (~reset
          & ~((~winner_0 | ~winner_1) & (~prefixOR_2 | ~winner_2)
              & (~prefixOR_3 | ~winner_3) & (~prefixOR_4 | ~winner_4)
              & (~(prefixOR_4 | winner_4) | ~winner_5))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_in_0_d_valid_T | auto_out_2_d_valid | auto_out_3_d_valid
                | auto_out_4_d_valid | auto_out_5_d_valid) | winner_0 | winner_1
              | winner_2 | winner_3 | winner_4 | winner_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  reg         state_2;
  reg         state_3;
  reg         state_4;
  reg         state_5;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        muxState_2 = idle ? winner_2 : state_2;
  wire        muxState_3 = idle ? winner_3 : state_3;
  wire        muxState_4 = idle ? winner_4 : state_4;
  wire        muxState_5 = idle ? winner_5 : state_5;
  wire        in_0_d_valid =
    idle
      ? _in_0_d_valid_T | auto_out_2_d_valid | auto_out_3_d_valid | auto_out_4_d_valid
        | auto_out_5_d_valid
      : state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid | state_2
        & auto_out_2_d_valid | state_3 & auto_out_3_d_valid | state_4 & auto_out_4_d_valid
        | state_5 & auto_out_5_d_valid;
  wire [20:0] _beatsDO_decode_T_21 = 21'h3F << auto_out_5_d_bits_size;
  wire [20:0] _beatsDO_decode_T_17 = 21'h3F << auto_out_4_d_bits_size;
  wire [20:0] _beatsDO_decode_T_13 = 21'h3F << auto_out_3_d_bits_size;
  wire [20:0] _beatsDO_decode_T_9 = 21'h3F << auto_out_2_d_bits_size;
  wire [20:0] _beatsDO_decode_T_5 = 21'h3F << auto_out_1_d_bits_size;
  wire [26:0] _beatsDO_decode_T_1 = 27'hFFF << auto_out_0_d_bits_size;
  wire [5:0]  _readys_mask_T = readys_readys & readys_valid;
  wire [5:0]  _readys_mask_T_3 = _readys_mask_T | {_readys_mask_T[4:0], 1'h0};
  wire [5:0]  _readys_mask_T_6 = _readys_mask_T_3 | {_readys_mask_T_3[3:0], 2'h0};
  wire        latch = idle & auto_in_d_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 6'h3F;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      state_2 <= 1'h0;
      state_3 <= 1'h0;
      state_4 <= 1'h0;
      state_5 <= 1'h0;
    end
    else begin
      if (latch)
        beatsLeft <=
          (winner_0 & auto_out_0_d_bits_opcode[0] ? ~(_beatsDO_decode_T_1[11:3]) : 9'h0)
          | {6'h0,
             (winner_1 & auto_out_1_d_bits_opcode[0] ? ~(_beatsDO_decode_T_5[5:3]) : 3'h0)
               | (winner_2 & auto_out_2_d_bits_opcode[0]
                    ? ~(_beatsDO_decode_T_9[5:3])
                    : 3'h0)
               | (winner_3 & auto_out_3_d_bits_opcode[0]
                    ? ~(_beatsDO_decode_T_13[5:3])
                    : 3'h0)
               | (winner_4 & auto_out_4_d_bits_opcode[0]
                    ? ~(_beatsDO_decode_T_17[5:3])
                    : 3'h0) | (winner_5 ? ~(_beatsDO_decode_T_21[5:3]) : 3'h0)};
      else
        beatsLeft <= beatsLeft - {8'h0, auto_in_d_ready & in_0_d_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T_6 | {_readys_mask_T_6[1:0], 4'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
        state_2 <= winner_2;
        state_3 <= winner_3;
        state_4 <= winner_4;
        state_5 <= winner_5;
      end
    end
  end // always @(posedge)
  assign auto_in_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready
    | requestAIO_0_2 & auto_out_2_a_ready | requestAIO_0_3 & auto_out_3_a_ready
    | requestAIO_0_4 & auto_out_4_a_ready | requestAIO_0_5 & auto_out_5_a_ready;
  assign auto_in_d_valid = in_0_d_valid;
  assign auto_in_d_bits_opcode =
    (muxState_0 ? auto_out_0_d_bits_opcode : 3'h0)
    | (muxState_1 ? auto_out_1_d_bits_opcode : 3'h0)
    | (muxState_2 ? auto_out_2_d_bits_opcode : 3'h0)
    | (muxState_3 ? auto_out_3_d_bits_opcode : 3'h0)
    | (muxState_4 ? auto_out_4_d_bits_opcode : 3'h0) | {2'h0, muxState_5};
  assign auto_in_d_bits_param =
    (muxState_0 ? auto_out_0_d_bits_param : 2'h0)
    | (muxState_1 ? auto_out_1_d_bits_param : 2'h0);
  assign auto_in_d_bits_size =
    (muxState_0 ? auto_out_0_d_bits_size : 4'h0)
    | (muxState_1 ? {1'h0, auto_out_1_d_bits_size} : 4'h0)
    | (muxState_2 ? {1'h0, auto_out_2_d_bits_size} : 4'h0)
    | (muxState_3 ? {1'h0, auto_out_3_d_bits_size} : 4'h0)
    | (muxState_4 ? {1'h0, auto_out_4_d_bits_size} : 4'h0)
    | (muxState_5 ? {1'h0, auto_out_5_d_bits_size} : 4'h0);
  assign auto_in_d_bits_source =
    (muxState_0 ? auto_out_0_d_bits_source : 6'h0)
    | (muxState_1 ? auto_out_1_d_bits_source : 6'h0)
    | (muxState_2 ? auto_out_2_d_bits_source : 6'h0)
    | (muxState_3 ? auto_out_3_d_bits_source : 6'h0)
    | (muxState_4 ? auto_out_4_d_bits_source : 6'h0)
    | (muxState_5 ? auto_out_5_d_bits_source : 6'h0);
  assign auto_in_d_bits_sink =
    muxState_0 & auto_out_0_d_bits_sink | muxState_1 & auto_out_1_d_bits_sink;
  assign auto_in_d_bits_denied =
    muxState_0 & auto_out_0_d_bits_denied | muxState_1 & auto_out_1_d_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_0 ? auto_out_0_d_bits_data : 64'h0)
    | (muxState_1 ? auto_out_1_d_bits_data : 64'h0)
    | (muxState_2 ? auto_out_2_d_bits_data : 64'h0)
    | (muxState_3 ? auto_out_3_d_bits_data : 64'h0)
    | (muxState_4 ? auto_out_4_d_bits_data : 64'h0)
    | (muxState_5 ? auto_out_5_d_bits_data : 64'h0);
  assign auto_in_d_bits_corrupt =
    muxState_0 & auto_out_0_d_bits_corrupt | muxState_1 & auto_out_1_d_bits_corrupt;
  assign auto_out_5_a_valid = auto_in_a_valid & requestAIO_0_5;
  assign auto_out_5_a_bits_size = auto_in_a_bits_size[2:0];
  assign auto_out_5_a_bits_source = auto_in_a_bits_source;
  assign auto_out_5_a_bits_address = auto_in_a_bits_address[16:0];
  assign auto_out_5_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_5_d_ready = auto_in_d_ready & (idle ? readys_readys[5] : state_5);
  assign auto_out_4_a_valid = auto_in_a_valid & requestAIO_0_4;
  assign auto_out_4_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_4_a_bits_size = auto_in_a_bits_size[2:0];
  assign auto_out_4_a_bits_source = auto_in_a_bits_source;
  assign auto_out_4_a_bits_address = auto_in_a_bits_address[11:0];
  assign auto_out_4_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_4_a_bits_data = auto_in_a_bits_data;
  assign auto_out_4_d_ready = auto_in_d_ready & (idle ? readys_readys[4] : state_4);
  assign auto_out_3_a_valid = auto_in_a_valid & requestAIO_0_3;
  assign auto_out_3_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_3_a_bits_size = auto_in_a_bits_size[2:0];
  assign auto_out_3_a_bits_source = auto_in_a_bits_source;
  assign auto_out_3_a_bits_address = auto_in_a_bits_address[25:0];
  assign auto_out_3_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_3_a_bits_data = auto_in_a_bits_data;
  assign auto_out_3_d_ready = auto_in_d_ready & (idle ? readys_readys[3] : state_3);
  assign auto_out_2_a_valid = auto_in_a_valid & requestAIO_0_2;
  assign auto_out_2_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_2_a_bits_size = auto_in_a_bits_size[2:0];
  assign auto_out_2_a_bits_source = auto_in_a_bits_source;
  assign auto_out_2_a_bits_address = auto_in_a_bits_address[27:0];
  assign auto_out_2_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_2_a_bits_data = auto_in_a_bits_data;
  assign auto_out_2_d_ready = auto_in_d_ready & (idle ? readys_readys[2] : state_2);
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_param = auto_in_a_bits_param;
  assign auto_out_1_a_bits_size = auto_in_a_bits_size[2:0];
  assign auto_out_1_a_bits_source = auto_in_a_bits_source;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address;
  assign auto_out_1_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & (idle ? readys_readys[1] : state_1);
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_size = auto_in_a_bits_size;
  assign auto_out_0_a_bits_source = auto_in_a_bits_source;
  assign auto_out_0_d_ready = auto_in_d_ready & (idle ? readys_readys[0] : state_0);
endmodule

module Queue_43(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [29:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [29:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_0 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_44(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input         io_enq_bits_sink,
                io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output        io_deq_bits_sink,
                io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_burst_combMem_0 ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_lock_combMem ram_sink_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_sink),
    .R0_data (io_deq_bits_sink)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_denied),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_corrupt),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_5(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  Queue_43 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_44 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_param   (auto_in_d_bits_param),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_sink    (auto_in_d_bits_sink),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module TLAtomicAutomata_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [29:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_sink,
                auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output [29:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        source_i_ready;
  reg  [3:0]  casez_tmp;
  reg  [1:0]  cam_s_0_state;
  reg  [2:0]  cam_a_0_bits_opcode;
  reg  [2:0]  cam_a_0_bits_param;
  reg  [3:0]  cam_a_0_bits_size;
  reg  [5:0]  cam_a_0_bits_source;
  reg  [29:0] cam_a_0_bits_address;
  reg  [7:0]  cam_a_0_bits_mask;
  reg  [63:0] cam_a_0_bits_data;
  reg         cam_a_0_fifoId;
  reg  [3:0]  cam_a_0_lut;
  reg  [63:0] cam_d_0_data;
  reg         cam_d_0_denied;
  reg         cam_d_0_corrupt;
  wire        cam_free_0 = cam_s_0_state == 2'h0;
  wire        winner_0 = cam_s_0_state == 2'h2;
  wire        _a_canArithmetic_T_3 = auto_in_a_bits_size < 4'h4;
  wire [5:0]  _GEN =
    {auto_in_a_bits_address[29:27],
     auto_in_a_bits_address[25],
     auto_in_a_bits_address[16],
     ~(auto_in_a_bits_address[13])};
  wire [13:0] _GEN_0 = auto_in_a_bits_address[29:16] ^ 14'h1001;
  wire [4:0]  _GEN_1 = {_GEN_0[13:11], auto_in_a_bits_address[25], _GEN_0[0]};
  wire        a_isSupported =
    auto_in_a_bits_opcode == 3'h3
      ? _a_canArithmetic_T_3 & (_GEN == 6'h0 | _GEN_1 == 5'h0)
      : auto_in_a_bits_opcode != 3'h2 | _a_canArithmetic_T_3
        & (_GEN == 6'h0 | _GEN_1 == 5'h0);
  wire [3:0]  _logic_out_T = cam_a_0_lut >> {2'h0, cam_a_0_bits_data[0], cam_d_0_data[0]};
  wire [3:0]  _logic_out_T_2 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[1], cam_d_0_data[1]};
  wire [3:0]  _logic_out_T_4 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[2], cam_d_0_data[2]};
  wire [3:0]  _logic_out_T_6 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[3], cam_d_0_data[3]};
  wire [3:0]  _logic_out_T_8 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[4], cam_d_0_data[4]};
  wire [3:0]  _logic_out_T_10 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[5], cam_d_0_data[5]};
  wire [3:0]  _logic_out_T_12 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[6], cam_d_0_data[6]};
  wire [3:0]  _logic_out_T_14 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[7], cam_d_0_data[7]};
  wire [3:0]  _logic_out_T_16 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[8], cam_d_0_data[8]};
  wire [3:0]  _logic_out_T_18 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[9], cam_d_0_data[9]};
  wire [3:0]  _logic_out_T_20 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[10], cam_d_0_data[10]};
  wire [3:0]  _logic_out_T_22 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[11], cam_d_0_data[11]};
  wire [3:0]  _logic_out_T_24 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[12], cam_d_0_data[12]};
  wire [3:0]  _logic_out_T_26 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[13], cam_d_0_data[13]};
  wire [3:0]  _logic_out_T_28 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[14], cam_d_0_data[14]};
  wire [3:0]  _logic_out_T_30 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[15], cam_d_0_data[15]};
  wire [3:0]  _logic_out_T_32 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[16], cam_d_0_data[16]};
  wire [3:0]  _logic_out_T_34 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[17], cam_d_0_data[17]};
  wire [3:0]  _logic_out_T_36 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[18], cam_d_0_data[18]};
  wire [3:0]  _logic_out_T_38 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[19], cam_d_0_data[19]};
  wire [3:0]  _logic_out_T_40 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[20], cam_d_0_data[20]};
  wire [3:0]  _logic_out_T_42 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[21], cam_d_0_data[21]};
  wire [3:0]  _logic_out_T_44 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[22], cam_d_0_data[22]};
  wire [3:0]  _logic_out_T_46 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[23], cam_d_0_data[23]};
  wire [3:0]  _logic_out_T_48 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[24], cam_d_0_data[24]};
  wire [3:0]  _logic_out_T_50 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[25], cam_d_0_data[25]};
  wire [3:0]  _logic_out_T_52 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[26], cam_d_0_data[26]};
  wire [3:0]  _logic_out_T_54 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[27], cam_d_0_data[27]};
  wire [3:0]  _logic_out_T_56 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[28], cam_d_0_data[28]};
  wire [3:0]  _logic_out_T_58 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[29], cam_d_0_data[29]};
  wire [3:0]  _logic_out_T_60 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[30], cam_d_0_data[30]};
  wire [3:0]  _logic_out_T_62 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[31], cam_d_0_data[31]};
  wire [3:0]  _logic_out_T_64 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[32], cam_d_0_data[32]};
  wire [3:0]  _logic_out_T_66 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[33], cam_d_0_data[33]};
  wire [3:0]  _logic_out_T_68 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[34], cam_d_0_data[34]};
  wire [3:0]  _logic_out_T_70 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[35], cam_d_0_data[35]};
  wire [3:0]  _logic_out_T_72 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[36], cam_d_0_data[36]};
  wire [3:0]  _logic_out_T_74 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[37], cam_d_0_data[37]};
  wire [3:0]  _logic_out_T_76 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[38], cam_d_0_data[38]};
  wire [3:0]  _logic_out_T_78 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[39], cam_d_0_data[39]};
  wire [3:0]  _logic_out_T_80 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[40], cam_d_0_data[40]};
  wire [3:0]  _logic_out_T_82 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[41], cam_d_0_data[41]};
  wire [3:0]  _logic_out_T_84 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[42], cam_d_0_data[42]};
  wire [3:0]  _logic_out_T_86 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[43], cam_d_0_data[43]};
  wire [3:0]  _logic_out_T_88 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[44], cam_d_0_data[44]};
  wire [3:0]  _logic_out_T_90 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[45], cam_d_0_data[45]};
  wire [3:0]  _logic_out_T_92 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[46], cam_d_0_data[46]};
  wire [3:0]  _logic_out_T_94 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[47], cam_d_0_data[47]};
  wire [3:0]  _logic_out_T_96 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[48], cam_d_0_data[48]};
  wire [3:0]  _logic_out_T_98 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[49], cam_d_0_data[49]};
  wire [3:0]  _logic_out_T_100 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[50], cam_d_0_data[50]};
  wire [3:0]  _logic_out_T_102 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[51], cam_d_0_data[51]};
  wire [3:0]  _logic_out_T_104 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[52], cam_d_0_data[52]};
  wire [3:0]  _logic_out_T_106 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[53], cam_d_0_data[53]};
  wire [3:0]  _logic_out_T_108 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[54], cam_d_0_data[54]};
  wire [3:0]  _logic_out_T_110 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[55], cam_d_0_data[55]};
  wire [3:0]  _logic_out_T_112 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[56], cam_d_0_data[56]};
  wire [3:0]  _logic_out_T_114 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[57], cam_d_0_data[57]};
  wire [3:0]  _logic_out_T_116 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[58], cam_d_0_data[58]};
  wire [3:0]  _logic_out_T_118 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[59], cam_d_0_data[59]};
  wire [3:0]  _logic_out_T_120 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[60], cam_d_0_data[60]};
  wire [3:0]  _logic_out_T_122 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[61], cam_d_0_data[61]};
  wire [3:0]  _logic_out_T_124 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[62], cam_d_0_data[62]};
  wire [3:0]  _logic_out_T_126 =
    cam_a_0_lut >> {2'h0, cam_a_0_bits_data[63], cam_d_0_data[63]};
  wire [6:0]  _GEN_2 = ~(cam_a_0_bits_mask[6:0]) | cam_a_0_bits_mask[7:1];
  wire [6:0]  _GEN_3 =
    {cam_a_0_bits_data[55],
     cam_a_0_bits_data[47],
     cam_a_0_bits_data[39],
     cam_a_0_bits_data[31],
     cam_a_0_bits_data[23],
     cam_a_0_bits_data[15],
     cam_a_0_bits_data[7]} & ~_GEN_2;
  wire [6:0]  _GEN_4 =
    {cam_d_0_data[55],
     cam_d_0_data[47],
     cam_d_0_data[39],
     cam_d_0_data[31],
     cam_d_0_data[23],
     cam_d_0_data[15],
     cam_d_0_data[7]} & ~_GEN_2;
  wire [5:0]  _GEN_5 = _GEN_3[6:1] | _GEN_3[5:0];
  wire [3:0]  _GEN_6 = _GEN_5[5:2] | _GEN_5[3:0];
  wire        _signext_a_T_24 = _GEN_5[1] | _GEN_3[0];
  wire [5:0]  _GEN_7 = _GEN_4[6:1] | _GEN_4[5:0];
  wire [3:0]  _GEN_8 = _GEN_7[5:2] | _GEN_7[3:0];
  wire        _signext_d_T_24 = _GEN_7[1] | _GEN_4[0];
  wire [63:0] wide_mask =
    {{8{cam_a_0_bits_mask[7]}},
     {8{cam_a_0_bits_mask[6]}},
     {8{cam_a_0_bits_mask[5]}},
     {8{cam_a_0_bits_mask[4]}},
     {8{cam_a_0_bits_mask[3]}},
     {8{cam_a_0_bits_mask[2]}},
     {8{cam_a_0_bits_mask[1]}},
     {8{cam_a_0_bits_mask[0]}}};
  wire [63:0] a_a_ext =
    cam_a_0_bits_data & wide_mask
    | {{8{_GEN_6[3] | _signext_a_T_24}},
       {8{_GEN_6[2] | _GEN_5[0]}},
       {8{_GEN_6[1] | _GEN_3[0]}},
       {8{_GEN_6[0]}},
       {8{_signext_a_T_24}},
       {8{_GEN_5[0]}},
       {8{_GEN_3[0]}},
       8'h0};
  wire [63:0] a_d_ext =
    cam_d_0_data & wide_mask
    | {{8{_GEN_8[3] | _signext_d_T_24}},
       {8{_GEN_8[2] | _GEN_7[0]}},
       {8{_GEN_8[1] | _GEN_4[0]}},
       {8{_GEN_8[0]}},
       {8{_signext_d_T_24}},
       {8{_GEN_7[0]}},
       {8{_GEN_4[0]}},
       8'h0};
  wire [63:0] adder_out = a_a_ext + ({64{~(cam_a_0_bits_param[2])}} ^ a_d_ext);
  wire        a_allow =
    ~(((&cam_s_0_state) | winner_0) & ~cam_a_0_fifoId) & (a_isSupported | cam_free_0);
  wire        source_i_valid = auto_in_a_valid & a_allow;
  wire        _source_c_bits_a_mask_T = cam_a_0_bits_size > 4'h2;
  wire        source_c_bits_a_mask_size = cam_a_0_bits_size[1:0] == 2'h2;
  wire        source_c_bits_a_mask_acc =
    _source_c_bits_a_mask_T | source_c_bits_a_mask_size & ~(cam_a_0_bits_address[2]);
  wire        source_c_bits_a_mask_acc_1 =
    _source_c_bits_a_mask_T | source_c_bits_a_mask_size & cam_a_0_bits_address[2];
  wire        source_c_bits_a_mask_size_1 = cam_a_0_bits_size[1:0] == 2'h1;
  wire        source_c_bits_a_mask_eq_2 =
    ~(cam_a_0_bits_address[2]) & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_2 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_2;
  wire        source_c_bits_a_mask_eq_3 =
    ~(cam_a_0_bits_address[2]) & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_3 =
    source_c_bits_a_mask_acc | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_3;
  wire        source_c_bits_a_mask_eq_4 =
    cam_a_0_bits_address[2] & ~(cam_a_0_bits_address[1]);
  wire        source_c_bits_a_mask_acc_4 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_4;
  wire        source_c_bits_a_mask_eq_5 =
    cam_a_0_bits_address[2] & cam_a_0_bits_address[1];
  wire        source_c_bits_a_mask_acc_5 =
    source_c_bits_a_mask_acc_1 | source_c_bits_a_mask_size_1 & source_c_bits_a_mask_eq_5;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire        winner_1 = ~winner_0 & source_i_valid;
  wire        _nodeOut_a_valid_T = winner_0 | source_i_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_nodeOut_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign source_i_ready = auto_out_a_ready & (idle ? ~winner_0 : state_1);
  wire        nodeOut_a_valid =
    idle ? _nodeOut_a_valid_T : state_0 & winner_0 | state_1 & source_i_valid;
  always @(*) begin
    casez (auto_in_a_bits_param[1:0])
      2'b00:
        casez_tmp = 4'h6;
      2'b01:
        casez_tmp = 4'hE;
      2'b10:
        casez_tmp = 4'h8;
      default:
        casez_tmp = 4'hC;
    endcase
  end // always @(*)
  reg  [8:0]  d_first_counter;
  wire        d_first = d_first_counter == 9'h0;
  wire        d_cam_sel_match_0 =
    cam_a_0_bits_source == auto_out_d_bits_source & (|cam_s_0_state);
  wire        d_ackd = auto_out_d_bits_opcode == 3'h1;
  wire        d_drop = d_first & d_ackd & d_cam_sel_match_0;
  wire        d_replace = d_first & auto_out_d_bits_opcode == 3'h0 & d_cam_sel_match_0;
  wire        nodeOut_d_ready = auto_in_d_ready | d_drop;
  wire [26:0] _decode_T_1 = 27'hFFF << auto_in_a_bits_size;
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;
  wire        _GEN_9 = source_i_ready & source_i_valid & ~a_isSupported & cam_free_0;
  wire        _T_23 = nodeOut_d_ready & auto_out_d_valid;
  wire        _T_24 = _T_23 & d_first;
  always @(posedge clock) begin
    if (reset) begin
      cam_s_0_state <= 2'h0;
      beatsLeft <= 9'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      d_first_counter <= 9'h0;
    end
    else begin
      if (_T_24 & d_cam_sel_match_0)
        cam_s_0_state <= {d_ackd, 1'h0};
      else if (auto_out_a_ready & (idle | state_0) & winner_0)
        cam_s_0_state <= 2'h1;
      else if (_GEN_9)
        cam_s_0_state <= 2'h3;
      if (idle & auto_out_a_ready) begin
        if (winner_1 & ~(auto_in_a_bits_opcode[2]))
          beatsLeft <= ~(_decode_T_1[11:3]);
        else
          beatsLeft <= 9'h0;
      end
      else
        beatsLeft <= beatsLeft - {8'h0, auto_out_a_ready & nodeOut_a_valid};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (_T_23) begin
        if (d_first) begin
          if (auto_out_d_bits_opcode[0])
            d_first_counter <= ~(_d_first_beats1_decode_T_1[11:3]);
          else
            d_first_counter <= 9'h0;
        end
        else
          d_first_counter <= d_first_counter - 9'h1;
      end
    end
    if (_GEN_9) begin
      cam_a_0_bits_opcode <= auto_in_a_bits_opcode;
      cam_a_0_bits_param <= auto_in_a_bits_param;
      cam_a_0_bits_size <= auto_in_a_bits_size;
      cam_a_0_bits_source <= auto_in_a_bits_source;
      cam_a_0_bits_address <= auto_in_a_bits_address;
      cam_a_0_bits_mask <= auto_in_a_bits_mask;
      cam_a_0_bits_data <= auto_in_a_bits_data;
      cam_a_0_lut <= casez_tmp;
    end
    cam_a_0_fifoId <= ~_GEN_9 & cam_a_0_fifoId;
    if (_T_24 & d_cam_sel_match_0 & d_ackd) begin
      cam_d_0_data <= auto_out_d_bits_data;
      cam_d_0_denied <= auto_out_d_bits_denied;
      cam_d_0_corrupt <= auto_out_d_bits_corrupt;
    end
  end // always @(posedge)
  assign auto_in_a_ready = source_i_ready & a_allow;
  assign auto_in_d_valid = auto_out_d_valid & ~d_drop;
  assign auto_in_d_bits_opcode = d_replace ? 3'h1 : auto_out_d_bits_opcode;
  assign auto_in_d_bits_param = auto_out_d_bits_param;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_d_bits_denied = d_replace & cam_d_0_denied | auto_out_d_bits_denied;
  assign auto_in_d_bits_data = d_replace ? cam_d_0_data : auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt =
    d_replace ? cam_d_0_corrupt | auto_out_d_bits_denied : auto_out_d_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode =
    muxState_1 ? (a_isSupported ? auto_in_a_bits_opcode : 3'h4) : 3'h0;
  assign auto_out_a_bits_param = muxState_1 & a_isSupported ? auto_in_a_bits_param : 3'h0;
  assign auto_out_a_bits_size =
    (muxState_0 ? cam_a_0_bits_size : 4'h0) | (muxState_1 ? auto_in_a_bits_size : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? cam_a_0_bits_source : 6'h0)
    | (muxState_1 ? auto_in_a_bits_source : 6'h0);
  assign auto_out_a_bits_address =
    (muxState_0 ? cam_a_0_bits_address : 30'h0)
    | (muxState_1 ? auto_in_a_bits_address : 30'h0);
  assign auto_out_a_bits_mask =
    (muxState_0
       ? {source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_5 | source_c_bits_a_mask_eq_5
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_4 | source_c_bits_a_mask_eq_4
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_3 | source_c_bits_a_mask_eq_3
            & ~(cam_a_0_bits_address[0]),
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & cam_a_0_bits_address[0],
          source_c_bits_a_mask_acc_2 | source_c_bits_a_mask_eq_2
            & ~(cam_a_0_bits_address[0])}
       : 8'h0) | (muxState_1 ? auto_in_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_0
       ? (cam_a_0_bits_opcode[0]
            ? {_logic_out_T_126[0],
               _logic_out_T_124[0],
               _logic_out_T_122[0],
               _logic_out_T_120[0],
               _logic_out_T_118[0],
               _logic_out_T_116[0],
               _logic_out_T_114[0],
               _logic_out_T_112[0],
               _logic_out_T_110[0],
               _logic_out_T_108[0],
               _logic_out_T_106[0],
               _logic_out_T_104[0],
               _logic_out_T_102[0],
               _logic_out_T_100[0],
               _logic_out_T_98[0],
               _logic_out_T_96[0],
               _logic_out_T_94[0],
               _logic_out_T_92[0],
               _logic_out_T_90[0],
               _logic_out_T_88[0],
               _logic_out_T_86[0],
               _logic_out_T_84[0],
               _logic_out_T_82[0],
               _logic_out_T_80[0],
               _logic_out_T_78[0],
               _logic_out_T_76[0],
               _logic_out_T_74[0],
               _logic_out_T_72[0],
               _logic_out_T_70[0],
               _logic_out_T_68[0],
               _logic_out_T_66[0],
               _logic_out_T_64[0],
               _logic_out_T_62[0],
               _logic_out_T_60[0],
               _logic_out_T_58[0],
               _logic_out_T_56[0],
               _logic_out_T_54[0],
               _logic_out_T_52[0],
               _logic_out_T_50[0],
               _logic_out_T_48[0],
               _logic_out_T_46[0],
               _logic_out_T_44[0],
               _logic_out_T_42[0],
               _logic_out_T_40[0],
               _logic_out_T_38[0],
               _logic_out_T_36[0],
               _logic_out_T_34[0],
               _logic_out_T_32[0],
               _logic_out_T_30[0],
               _logic_out_T_28[0],
               _logic_out_T_26[0],
               _logic_out_T_24[0],
               _logic_out_T_22[0],
               _logic_out_T_20[0],
               _logic_out_T_18[0],
               _logic_out_T_16[0],
               _logic_out_T_14[0],
               _logic_out_T_12[0],
               _logic_out_T_10[0],
               _logic_out_T_8[0],
               _logic_out_T_6[0],
               _logic_out_T_4[0],
               _logic_out_T_2[0],
               _logic_out_T[0]}
            : cam_a_0_bits_param[2]
                ? adder_out
                : cam_a_0_bits_param[0] == (a_a_ext[63] == a_d_ext[63]
                                              ? ~(adder_out[63])
                                              : cam_a_0_bits_param[1] == a_a_ext[63])
                    ? cam_a_0_bits_data
                    : cam_d_0_data)
       : 64'h0) | (muxState_1 ? auto_in_a_bits_data : 64'h0);
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module Queue_45(
  input        clock,
               reset,
               io_enq_valid,
  input  [2:0] io_enq_bits_opcode,
  input  [3:0] io_enq_bits_size,
  input  [5:0] io_enq_bits_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [2:0] io_deq_bits_opcode,
  output [3:0] io_deq_bits_size,
  output [5:0] io_deq_bits_source
);

  reg  maybe_full;
  wire do_enq = ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_id_combMem ram_opcode_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_tl_state_size_combMem ram_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_tl_state_source_combMem ram_source_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = maybe_full;
endmodule

module TLError(
  input        clock,
               reset,
               auto_in_a_valid,
  input  [2:0] auto_in_a_bits_opcode,
  input  [3:0] auto_in_a_bits_size,
  input  [5:0] auto_in_a_bits_source,
  input        auto_in_d_ready,
  output       auto_in_a_ready,
               auto_in_d_valid,
  output [2:0] auto_in_d_bits_opcode,
  output [3:0] auto_in_d_bits_size,
  output [5:0] auto_in_d_bits_source,
  output       auto_in_d_bits_corrupt
);

  wire        _a_q_io_deq_valid;
  wire [2:0]  _a_q_io_deq_bits_opcode;
  wire [3:0]  _a_q_io_deq_bits_size;
  reg  [2:0]  casez_tmp;
  wire [26:0] _GEN = {23'h0, _a_q_io_deq_bits_size};
  wire [26:0] _a_last_beats1_decode_T_1 = 27'hFFF << _GEN;
  reg  [8:0]  a_last_counter;
  wire        a_last =
    a_last_counter == 9'h1
    | (_a_q_io_deq_bits_opcode[2] ? 9'h0 : ~(_a_last_beats1_decode_T_1[11:3])) == 9'h0;
  wire [26:0] _beats1_decode_T_1 = 27'hFFF << _GEN;
  reg  [8:0]  counter;
  wire        _q_io_deq_ready_T_3 =
    auto_in_d_ready
    & (counter == 9'h1 | (casez_tmp[0] ? ~(_beats1_decode_T_1[11:3]) : 9'h0) == 9'h0)
    | ~a_last;
  wire        da_valid = _a_q_io_deq_valid & a_last;
  always @(*) begin
    casez (_a_q_io_deq_bits_opcode)
      3'b000:
        casez_tmp = 3'h0;
      3'b001:
        casez_tmp = 3'h0;
      3'b010:
        casez_tmp = 3'h1;
      3'b011:
        casez_tmp = 3'h1;
      3'b100:
        casez_tmp = 3'h1;
      3'b101:
        casez_tmp = 3'h2;
      3'b110:
        casez_tmp = 3'h4;
      default:
        casez_tmp = 3'h4;
    endcase
  end // always @(*)
  always @(posedge clock) begin
    if (reset) begin
      a_last_counter <= 9'h0;
      counter <= 9'h0;
    end
    else begin
      if (_q_io_deq_ready_T_3 & _a_q_io_deq_valid) begin
        if (a_last_counter == 9'h0) begin
          if (_a_q_io_deq_bits_opcode[2])
            a_last_counter <= 9'h0;
          else
            a_last_counter <= ~(_a_last_beats1_decode_T_1[11:3]);
        end
        else
          a_last_counter <= a_last_counter - 9'h1;
      end
      if (auto_in_d_ready & da_valid) begin
        if (counter == 9'h0) begin
          if (casez_tmp[0])
            counter <= ~(_beats1_decode_T_1[11:3]);
          else
            counter <= 9'h0;
        end
        else
          counter <= counter - 9'h1;
      end
    end
  end // always @(posedge)
  Queue_45 a_q (
    .clock              (clock),
    .reset              (reset),
    .io_enq_valid       (auto_in_a_valid),
    .io_enq_bits_opcode (auto_in_a_bits_opcode),
    .io_enq_bits_size   (auto_in_a_bits_size),
    .io_enq_bits_source (auto_in_a_bits_source),
    .io_deq_ready       (_q_io_deq_ready_T_3),
    .io_enq_ready       (auto_in_a_ready),
    .io_deq_valid       (_a_q_io_deq_valid),
    .io_deq_bits_opcode (_a_q_io_deq_bits_opcode),
    .io_deq_bits_size   (_a_q_io_deq_bits_size),
    .io_deq_bits_source (auto_in_d_bits_source)
  );
  assign auto_in_d_valid = da_valid;
  assign auto_in_d_bits_opcode = casez_tmp;
  assign auto_in_d_bits_size = _a_q_io_deq_bits_size;
  assign auto_in_d_bits_corrupt = casez_tmp[0];
endmodule

module Queue_46(
  input        clock,
               reset,
               io_enq_valid,
  input  [2:0] io_enq_bits_opcode,
  input  [3:0] io_enq_bits_size,
  input  [5:0] io_enq_bits_source,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [2:0] io_deq_bits_opcode,
  output [3:0] io_deq_bits_size,
  output [5:0] io_deq_bits_source
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_6(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [3:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [3:0]  auto_out_d_bits_size,
  input  [5:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [3:0]  auto_out_a_bits_size,
  output [5:0]  auto_out_a_bits_source,
  output        auto_out_d_ready
);

  Queue_46 nodeOut_a_q (
    .clock              (clock),
    .reset              (reset),
    .io_enq_valid       (auto_in_a_valid),
    .io_enq_bits_opcode (auto_in_a_bits_opcode),
    .io_enq_bits_size   (auto_in_a_bits_size),
    .io_enq_bits_source (auto_in_a_bits_source),
    .io_deq_ready       (auto_out_a_ready),
    .io_enq_ready       (auto_in_a_ready),
    .io_deq_valid       (auto_out_a_valid),
    .io_deq_bits_opcode (auto_out_a_bits_opcode),
    .io_deq_bits_size   (auto_out_a_bits_size),
    .io_deq_bits_source (auto_out_a_bits_source)
  );
  Queue_44 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (2'h0),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (1'h0),
    .io_enq_bits_denied  (1'h1),
    .io_enq_bits_data    (64'h0),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_param   (auto_in_d_bits_param),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_sink    (auto_in_d_bits_sink),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module ErrorDeviceWrapper(
  input         clock,
                reset,
                auto_buffer_in_a_valid,
  input  [2:0]  auto_buffer_in_a_bits_opcode,
  input  [3:0]  auto_buffer_in_a_bits_size,
  input  [5:0]  auto_buffer_in_a_bits_source,
  input         auto_buffer_in_d_ready,
  output        auto_buffer_in_a_ready,
                auto_buffer_in_d_valid,
  output [2:0]  auto_buffer_in_d_bits_opcode,
  output [1:0]  auto_buffer_in_d_bits_param,
  output [3:0]  auto_buffer_in_d_bits_size,
  output [5:0]  auto_buffer_in_d_bits_source,
  output        auto_buffer_in_d_bits_sink,
                auto_buffer_in_d_bits_denied,
  output [63:0] auto_buffer_in_d_bits_data,
  output        auto_buffer_in_d_bits_corrupt
);

  wire       _buffer_auto_out_a_valid;
  wire [2:0] _buffer_auto_out_a_bits_opcode;
  wire [3:0] _buffer_auto_out_a_bits_size;
  wire [5:0] _buffer_auto_out_a_bits_source;
  wire       _buffer_auto_out_d_ready;
  wire       _error_auto_in_a_ready;
  wire       _error_auto_in_d_valid;
  wire [2:0] _error_auto_in_d_bits_opcode;
  wire [3:0] _error_auto_in_d_bits_size;
  wire [5:0] _error_auto_in_d_bits_source;
  wire       _error_auto_in_d_bits_corrupt;
  TLError error (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_a_valid        (_buffer_auto_out_a_valid),
    .auto_in_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_in_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_in_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_in_d_ready        (_buffer_auto_out_d_ready),
    .auto_in_a_ready        (_error_auto_in_a_ready),
    .auto_in_d_valid        (_error_auto_in_d_valid),
    .auto_in_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_in_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_in_d_bits_source  (_error_auto_in_d_bits_source),
    .auto_in_d_bits_corrupt (_error_auto_in_d_bits_corrupt)
  );
  TLBuffer_6 buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_buffer_in_a_valid),
    .auto_in_a_bits_opcode   (auto_buffer_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_buffer_in_a_bits_size),
    .auto_in_a_bits_source   (auto_buffer_in_a_bits_source),
    .auto_in_d_ready         (auto_buffer_in_d_ready),
    .auto_out_a_ready        (_error_auto_in_a_ready),
    .auto_out_d_valid        (_error_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_error_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_error_auto_in_d_bits_source),
    .auto_out_d_bits_corrupt (_error_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_buffer_in_a_ready),
    .auto_in_d_valid         (auto_buffer_in_d_valid),
    .auto_in_d_bits_opcode   (auto_buffer_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_buffer_in_d_bits_param),
    .auto_in_d_bits_size     (auto_buffer_in_d_bits_size),
    .auto_in_d_bits_source   (auto_buffer_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_buffer_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_buffer_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_buffer_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_buffer_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
endmodule

module Repeater_6(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [27:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [27:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [27:0] saved_address;
  reg  [7:0]  saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter_5(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input  [63:0] auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [27:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [27:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _dsizeOH1_T_1 = 6'h7 << auto_out_d_bits_size;
  wire [5:0]  _GEN =
    {auto_out_d_bits_source[2:0], ~(_dsizeOH1_T_1[2:0])}
    & {1'h1, ~(auto_out_d_bits_source[2:0]), _dsizeOH1_T_1[2:1]};
  wire [2:0]  _GEN_0 = {1'h0, _GEN[5:4]} | _GEN[2:0];
  wire [2:0]  dFirst_size = {|(_GEN[5:3]), |(_GEN_0[2:1]), _GEN_0[2] | _GEN_0[0]};
  wire        drop = ~(auto_out_d_bits_opcode[0]) & (|(auto_out_d_bits_source[2:0]));
  wire        nodeOut_d_ready = auto_in_d_ready | drop;
  wire [2:0]  aFrag = _repeater_io_deq_bits_size[2] ? 3'h3 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  wire [9:0]  _aFragOH1_T_1 = 10'h7 << aFrag;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _old_gennum1_T_2 = gennum - 3'h1;
  wire [2:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:3]) : _old_gennum1_T_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:311 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = nodeOut_d_ready & auto_out_d_valid;
  wire        _GEN_1 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[2:0];
        else
          acknum <= acknum - {2'h0, auto_out_d_bits_opcode[0] | (&auto_out_d_bits_size)};
      end
      if (_GEN_1)
        dToggle <= auto_out_d_bits_source[3];
      if (auto_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_aOrigOH1_T_1[5:3]);
        else
          gennum <= _old_gennum1_T_2;
      end
    end
    if (_GEN_1)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater_6 repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|old_gennum1)),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid & ~drop;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[9:4];
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = aFrag[1:0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), old_gennum1};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address
    | {22'h0, ~(_aOrigOH1_T_1[5:0] | {old_gennum1, ~(_aFragOH1_T_1[2:0])} | 6'h7)};
  assign auto_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLInterconnectCoupler_13(
  input         clock,
                reset,
                auto_fragmenter_out_a_ready,
                auto_fragmenter_out_d_valid,
  input  [2:0]  auto_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_out_d_bits_size,
  input  [9:0]  auto_fragmenter_out_d_bits_source,
  input  [63:0] auto_fragmenter_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [27:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
  output        auto_fragmenter_out_a_valid,
  output [2:0]  auto_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_fragmenter_out_a_bits_size,
  output [9:0]  auto_fragmenter_out_a_bits_source,
  output [27:0] auto_fragmenter_out_a_bits_address,
  output [7:0]  auto_fragmenter_out_a_bits_mask,
  output [63:0] auto_fragmenter_out_a_bits_data,
  output        auto_fragmenter_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_5 fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (auto_fragmenter_out_a_ready),
    .auto_out_d_valid        (auto_fragmenter_out_d_valid),
    .auto_out_d_bits_opcode  (auto_fragmenter_out_d_bits_opcode),
    .auto_out_d_bits_size    (auto_fragmenter_out_d_bits_size),
    .auto_out_d_bits_source  (auto_fragmenter_out_d_bits_source),
    .auto_out_d_bits_data    (auto_fragmenter_out_d_bits_data),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_out_a_valid        (auto_fragmenter_out_a_valid),
    .auto_out_a_bits_opcode  (auto_fragmenter_out_a_bits_opcode),
    .auto_out_a_bits_size    (auto_fragmenter_out_a_bits_size),
    .auto_out_a_bits_source  (auto_fragmenter_out_a_bits_source),
    .auto_out_a_bits_address (auto_fragmenter_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_fragmenter_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_fragmenter_out_a_bits_data),
    .auto_out_d_ready        (auto_fragmenter_out_d_ready)
  );
endmodule

module Repeater_7(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [25:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [25:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [25:0] saved_address;
  reg  [7:0]  saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter_6(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [25:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input  [63:0] auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [25:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [25:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _dsizeOH1_T_1 = 6'h7 << auto_out_d_bits_size;
  wire [5:0]  _GEN =
    {auto_out_d_bits_source[2:0], ~(_dsizeOH1_T_1[2:0])}
    & {1'h1, ~(auto_out_d_bits_source[2:0]), _dsizeOH1_T_1[2:1]};
  wire [2:0]  _GEN_0 = {1'h0, _GEN[5:4]} | _GEN[2:0];
  wire [2:0]  dFirst_size = {|(_GEN[5:3]), |(_GEN_0[2:1]), _GEN_0[2] | _GEN_0[0]};
  wire        drop = ~(auto_out_d_bits_opcode[0]) & (|(auto_out_d_bits_source[2:0]));
  wire        nodeOut_d_ready = auto_in_d_ready | drop;
  wire [2:0]  aFrag = _repeater_io_deq_bits_size[2] ? 3'h3 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  wire [9:0]  _aFragOH1_T_1 = 10'h7 << aFrag;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _old_gennum1_T_2 = gennum - 3'h1;
  wire [2:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:3]) : _old_gennum1_T_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:311 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = nodeOut_d_ready & auto_out_d_valid;
  wire        _GEN_1 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[2:0];
        else
          acknum <= acknum - {2'h0, auto_out_d_bits_opcode[0] | (&auto_out_d_bits_size)};
      end
      if (_GEN_1)
        dToggle <= auto_out_d_bits_source[3];
      if (auto_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_aOrigOH1_T_1[5:3]);
        else
          gennum <= _old_gennum1_T_2;
      end
    end
    if (_GEN_1)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater_7 repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|old_gennum1)),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid & ~drop;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[9:4];
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = aFrag[1:0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), old_gennum1};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address
    | {20'h0, ~(_aOrigOH1_T_1[5:0] | {old_gennum1, ~(_aFragOH1_T_1[2:0])} | 6'h7)};
  assign auto_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLInterconnectCoupler_14(
  input         clock,
                reset,
                auto_fragmenter_out_a_ready,
                auto_fragmenter_out_d_valid,
  input  [2:0]  auto_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_out_d_bits_size,
  input  [9:0]  auto_fragmenter_out_d_bits_source,
  input  [63:0] auto_fragmenter_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [25:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
  output        auto_fragmenter_out_a_valid,
  output [2:0]  auto_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_fragmenter_out_a_bits_size,
  output [9:0]  auto_fragmenter_out_a_bits_source,
  output [25:0] auto_fragmenter_out_a_bits_address,
  output [7:0]  auto_fragmenter_out_a_bits_mask,
  output [63:0] auto_fragmenter_out_a_bits_data,
  output        auto_fragmenter_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_6 fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (auto_fragmenter_out_a_ready),
    .auto_out_d_valid        (auto_fragmenter_out_d_valid),
    .auto_out_d_bits_opcode  (auto_fragmenter_out_d_bits_opcode),
    .auto_out_d_bits_size    (auto_fragmenter_out_d_bits_size),
    .auto_out_d_bits_source  (auto_fragmenter_out_d_bits_source),
    .auto_out_d_bits_data    (auto_fragmenter_out_d_bits_data),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_out_a_valid        (auto_fragmenter_out_a_valid),
    .auto_out_a_bits_opcode  (auto_fragmenter_out_a_bits_opcode),
    .auto_out_a_bits_size    (auto_fragmenter_out_a_bits_size),
    .auto_out_a_bits_source  (auto_fragmenter_out_a_bits_source),
    .auto_out_a_bits_address (auto_fragmenter_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_fragmenter_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_fragmenter_out_a_bits_data),
    .auto_out_d_ready        (auto_fragmenter_out_d_ready)
  );
endmodule

module Repeater_8(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [11:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [11:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_opcode;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [11:0] saved_address;
  reg  [7:0]  saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_opcode <= io_enq_bits_opcode;
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = full ? saved_opcode : io_enq_bits_opcode;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter_7(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [11:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input  [63:0] auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [11:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_opcode;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [11:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _dsizeOH1_T_1 = 6'h7 << auto_out_d_bits_size;
  wire [5:0]  _GEN =
    {auto_out_d_bits_source[2:0], ~(_dsizeOH1_T_1[2:0])}
    & {1'h1, ~(auto_out_d_bits_source[2:0]), _dsizeOH1_T_1[2:1]};
  wire [2:0]  _GEN_0 = {1'h0, _GEN[5:4]} | _GEN[2:0];
  wire [2:0]  dFirst_size = {|(_GEN[5:3]), |(_GEN_0[2:1]), _GEN_0[2] | _GEN_0[0]};
  wire        drop = ~(auto_out_d_bits_opcode[0]) & (|(auto_out_d_bits_source[2:0]));
  wire        nodeOut_d_ready = auto_in_d_ready | drop;
  wire [2:0]  aFrag = _repeater_io_deq_bits_size[2] ? 3'h3 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  wire [9:0]  _aFragOH1_T_1 = 10'h7 << aFrag;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _old_gennum1_T_2 = gennum - 3'h1;
  wire [2:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:3]) : _old_gennum1_T_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | _repeater_io_deq_bits_opcode[2])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:311 assert (!repeater.io.full || !aHasData)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = nodeOut_d_ready & auto_out_d_valid;
  wire        _GEN_1 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[2:0];
        else
          acknum <= acknum - {2'h0, auto_out_d_bits_opcode[0] | (&auto_out_d_bits_size)};
      end
      if (_GEN_1)
        dToggle <= auto_out_d_bits_source[3];
      if (auto_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_aOrigOH1_T_1[5:3]);
        else
          gennum <= _old_gennum1_T_2;
      end
    end
    if (_GEN_1)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater_8 repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (_repeater_io_deq_bits_opcode[2] & (|old_gennum1)),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_opcode  (_repeater_io_deq_bits_opcode),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid & ~drop;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[9:4];
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_opcode = _repeater_io_deq_bits_opcode;
  assign auto_out_a_bits_size = aFrag[1:0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), old_gennum1};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address
    | {6'h0, ~(_aOrigOH1_T_1[5:0] | {old_gennum1, ~(_aFragOH1_T_1[2:0])} | 6'h7)};
  assign auto_out_a_bits_mask = _repeater_io_full ? 8'hFF : auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module TLInterconnectCoupler_16(
  input         clock,
                reset,
                auto_fragmenter_out_a_ready,
                auto_fragmenter_out_d_valid,
  input  [2:0]  auto_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_fragmenter_out_d_bits_size,
  input  [9:0]  auto_fragmenter_out_d_bits_source,
  input  [63:0] auto_fragmenter_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [11:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
  output        auto_fragmenter_out_a_valid,
  output [2:0]  auto_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_fragmenter_out_a_bits_size,
  output [9:0]  auto_fragmenter_out_a_bits_source,
  output [11:0] auto_fragmenter_out_a_bits_address,
  output [7:0]  auto_fragmenter_out_a_bits_mask,
  output [63:0] auto_fragmenter_out_a_bits_data,
  output        auto_fragmenter_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_7 fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_opcode   (auto_tl_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_tl_in_a_bits_data),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (auto_fragmenter_out_a_ready),
    .auto_out_d_valid        (auto_fragmenter_out_d_valid),
    .auto_out_d_bits_opcode  (auto_fragmenter_out_d_bits_opcode),
    .auto_out_d_bits_size    (auto_fragmenter_out_d_bits_size),
    .auto_out_d_bits_source  (auto_fragmenter_out_d_bits_source),
    .auto_out_d_bits_data    (auto_fragmenter_out_d_bits_data),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_opcode   (auto_tl_in_d_bits_opcode),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_out_a_valid        (auto_fragmenter_out_a_valid),
    .auto_out_a_bits_opcode  (auto_fragmenter_out_a_bits_opcode),
    .auto_out_a_bits_size    (auto_fragmenter_out_a_bits_size),
    .auto_out_a_bits_source  (auto_fragmenter_out_a_bits_source),
    .auto_out_a_bits_address (auto_fragmenter_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_fragmenter_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_fragmenter_out_a_bits_data),
    .auto_out_d_ready        (auto_fragmenter_out_d_ready)
  );
endmodule

module Repeater_9(
  input         clock,
                reset,
                io_repeat,
                io_enq_valid,
  input  [2:0]  io_enq_bits_size,
  input  [5:0]  io_enq_bits_source,
  input  [16:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input         io_deq_ready,
  output        io_full,
                io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_size,
  output [5:0]  io_deq_bits_source,
  output [16:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask
);

  reg         full;
  reg  [2:0]  saved_size;
  reg  [5:0]  saved_source;
  reg  [16:0] saved_address;
  reg  [7:0]  saved_mask;
  wire        _io_deq_valid_output = io_enq_valid | full;
  wire        _io_enq_ready_output = io_deq_ready & ~full;
  wire        _T_1 = _io_enq_ready_output & io_enq_valid & io_repeat;
  always @(posedge clock) begin
    if (reset)
      full <= 1'h0;
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_T_1 | full);
    if (_T_1) begin
      saved_size <= io_enq_bits_size;
      saved_source <= io_enq_bits_source;
      saved_address <= io_enq_bits_address;
      saved_mask <= io_enq_bits_mask;
    end
  end // always @(posedge)
  assign io_full = full;
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_size = full ? saved_size : io_enq_bits_size;
  assign io_deq_bits_source = full ? saved_source : io_enq_bits_source;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;
  assign io_deq_bits_mask = full ? saved_mask : io_enq_bits_mask;
endmodule

module TLFragmenter_8(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [16:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [1:0]  auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input  [63:0] auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data,
  output        auto_out_a_valid,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [16:0] auto_out_a_bits_address,
  output        auto_out_d_ready
);

  wire        _repeater_io_full;
  wire        _repeater_io_deq_valid;
  wire [2:0]  _repeater_io_deq_bits_size;
  wire [5:0]  _repeater_io_deq_bits_source;
  wire [16:0] _repeater_io_deq_bits_address;
  wire [7:0]  _repeater_io_deq_bits_mask;
  reg  [2:0]  acknum;
  reg  [2:0]  dOrig;
  reg         dToggle;
  wire        dFirst = acknum == 3'h0;
  wire [5:0]  _dsizeOH1_T_1 = 6'h7 << auto_out_d_bits_size;
  wire [5:0]  _GEN =
    {auto_out_d_bits_source[2:0], ~(_dsizeOH1_T_1[2:0])}
    & {1'h1, ~(auto_out_d_bits_source[2:0]), _dsizeOH1_T_1[2:1]};
  wire [2:0]  _GEN_0 = {1'h0, _GEN[5:4]} | _GEN[2:0];
  wire [2:0]  dFirst_size = {|(_GEN[5:3]), |(_GEN_0[2:1]), _GEN_0[2] | _GEN_0[0]};
  wire [2:0]  aFrag = _repeater_io_deq_bits_size[2] ? 3'h3 : _repeater_io_deq_bits_size;
  wire [12:0] _aOrigOH1_T_1 = 13'h3F << _repeater_io_deq_bits_size;
  wire [9:0]  _aFragOH1_T_1 = 10'h7 << aFrag;
  reg  [2:0]  gennum;
  wire        aFirst = gennum == 3'h0;
  wire [2:0]  _old_gennum1_T_2 = gennum - 3'h1;
  wire [2:0]  old_gennum1 = aFirst ? ~(_aOrigOH1_T_1[5:3]) : _old_gennum1_T_2;
  reg         aToggle_r;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~_repeater_io_full | (&_repeater_io_deq_bits_mask))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Fragmenter.scala:314 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_7 = auto_in_d_ready & auto_out_d_valid;
  wire        _GEN_1 = _T_7 & dFirst;
  always @(posedge clock) begin
    if (reset) begin
      acknum <= 3'h0;
      dToggle <= 1'h0;
      gennum <= 3'h0;
    end
    else begin
      if (_T_7) begin
        if (dFirst)
          acknum <= auto_out_d_bits_source[2:0];
        else
          acknum <= acknum - 3'h1;
      end
      if (_GEN_1)
        dToggle <= auto_out_d_bits_source[3];
      if (auto_out_a_ready & _repeater_io_deq_valid) begin
        if (aFirst)
          gennum <= ~(_aOrigOH1_T_1[5:3]);
        else
          gennum <= _old_gennum1_T_2;
      end
    end
    if (_GEN_1)
      dOrig <= dFirst_size;
    if (aFirst)
      aToggle_r <= dToggle;
  end // always @(posedge)
  Repeater_9 repeater (
    .clock               (clock),
    .reset               (reset),
    .io_repeat           (|old_gennum1),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_deq_ready        (auto_out_a_ready),
    .io_full             (_repeater_io_full),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (_repeater_io_deq_valid),
    .io_deq_bits_size    (_repeater_io_deq_bits_size),
    .io_deq_bits_source  (_repeater_io_deq_bits_source),
    .io_deq_bits_address (_repeater_io_deq_bits_address),
    .io_deq_bits_mask    (_repeater_io_deq_bits_mask)
  );
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_size = dFirst ? dFirst_size : dOrig;
  assign auto_in_d_bits_source = auto_out_d_bits_source[9:4];
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_out_a_valid = _repeater_io_deq_valid;
  assign auto_out_a_bits_size = aFrag[1:0];
  assign auto_out_a_bits_source =
    {_repeater_io_deq_bits_source, ~(aFirst ? dToggle : aToggle_r), old_gennum1};
  assign auto_out_a_bits_address =
    _repeater_io_deq_bits_address
    | {11'h0, ~(_aOrigOH1_T_1[5:0] | {old_gennum1, ~(_aFragOH1_T_1[2:0])} | 6'h7)};
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module TLInterconnectCoupler_17(
  input         clock,
                reset,
                auto_fragmenter_out_a_ready,
                auto_fragmenter_out_d_valid,
  input  [1:0]  auto_fragmenter_out_d_bits_size,
  input  [9:0]  auto_fragmenter_out_d_bits_source,
  input  [63:0] auto_fragmenter_out_d_bits_data,
  input         auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_size,
  input  [5:0]  auto_tl_in_a_bits_source,
  input  [16:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input         auto_tl_in_d_ready,
  output        auto_fragmenter_out_a_valid,
  output [1:0]  auto_fragmenter_out_a_bits_size,
  output [9:0]  auto_fragmenter_out_a_bits_source,
  output [16:0] auto_fragmenter_out_a_bits_address,
  output        auto_fragmenter_out_d_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_size,
  output [5:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data
);

  TLFragmenter_8 fragmenter (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_tl_in_a_valid),
    .auto_in_a_bits_size     (auto_tl_in_a_bits_size),
    .auto_in_a_bits_source   (auto_tl_in_a_bits_source),
    .auto_in_a_bits_address  (auto_tl_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_tl_in_a_bits_mask),
    .auto_in_d_ready         (auto_tl_in_d_ready),
    .auto_out_a_ready        (auto_fragmenter_out_a_ready),
    .auto_out_d_valid        (auto_fragmenter_out_d_valid),
    .auto_out_d_bits_size    (auto_fragmenter_out_d_bits_size),
    .auto_out_d_bits_source  (auto_fragmenter_out_d_bits_source),
    .auto_out_d_bits_data    (auto_fragmenter_out_d_bits_data),
    .auto_in_a_ready         (auto_tl_in_a_ready),
    .auto_in_d_valid         (auto_tl_in_d_valid),
    .auto_in_d_bits_size     (auto_tl_in_d_bits_size),
    .auto_in_d_bits_source   (auto_tl_in_d_bits_source),
    .auto_in_d_bits_data     (auto_tl_in_d_bits_data),
    .auto_out_a_valid        (auto_fragmenter_out_a_valid),
    .auto_out_a_bits_size    (auto_fragmenter_out_a_bits_size),
    .auto_out_a_bits_source  (auto_fragmenter_out_a_bits_source),
    .auto_out_a_bits_address (auto_fragmenter_out_a_bits_address),
    .auto_out_d_ready        (auto_fragmenter_out_d_ready)
  );
endmodule

module PeripheryBus_1(
  input         auto_coupler_to_bootrom_fragmenter_out_a_ready,
                auto_coupler_to_bootrom_fragmenter_out_d_valid,
  input  [1:0]  auto_coupler_to_bootrom_fragmenter_out_d_bits_size,
  input  [9:0]  auto_coupler_to_bootrom_fragmenter_out_d_bits_source,
  input  [63:0] auto_coupler_to_bootrom_fragmenter_out_d_bits_data,
  input         auto_coupler_to_debug_fragmenter_out_a_ready,
                auto_coupler_to_debug_fragmenter_out_d_valid,
  input  [2:0]  auto_coupler_to_debug_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_debug_fragmenter_out_d_bits_size,
  input  [9:0]  auto_coupler_to_debug_fragmenter_out_d_bits_source,
  input  [63:0] auto_coupler_to_debug_fragmenter_out_d_bits_data,
  input         auto_coupler_to_clint_fragmenter_out_a_ready,
                auto_coupler_to_clint_fragmenter_out_d_valid,
  input  [2:0]  auto_coupler_to_clint_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_clint_fragmenter_out_d_bits_size,
  input  [9:0]  auto_coupler_to_clint_fragmenter_out_d_bits_source,
  input  [63:0] auto_coupler_to_clint_fragmenter_out_d_bits_data,
  input         auto_coupler_to_plic_fragmenter_out_a_ready,
                auto_coupler_to_plic_fragmenter_out_d_valid,
  input  [2:0]  auto_coupler_to_plic_fragmenter_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_plic_fragmenter_out_d_bits_size,
  input  [9:0]  auto_coupler_to_plic_fragmenter_out_d_bits_source,
  input  [63:0] auto_coupler_to_plic_fragmenter_out_d_bits_data,
  input         auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_ready,
                auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_opcode,
  input  [1:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_param,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_size,
  input  [5:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_source,
  input         auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_sink,
                auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_data,
  input         auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_corrupt,
                auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock,
                auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset,
                auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock,
                auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset,
                auto_bus_xing_in_a_valid,
  input  [2:0]  auto_bus_xing_in_a_bits_opcode,
                auto_bus_xing_in_a_bits_param,
  input  [3:0]  auto_bus_xing_in_a_bits_size,
  input  [5:0]  auto_bus_xing_in_a_bits_source,
  input  [29:0] auto_bus_xing_in_a_bits_address,
  input  [7:0]  auto_bus_xing_in_a_bits_mask,
  input  [63:0] auto_bus_xing_in_a_bits_data,
  input         auto_bus_xing_in_d_ready,
  output        auto_coupler_to_bootrom_fragmenter_out_a_valid,
  output [1:0]  auto_coupler_to_bootrom_fragmenter_out_a_bits_size,
  output [9:0]  auto_coupler_to_bootrom_fragmenter_out_a_bits_source,
  output [16:0] auto_coupler_to_bootrom_fragmenter_out_a_bits_address,
  output        auto_coupler_to_bootrom_fragmenter_out_d_ready,
                auto_coupler_to_debug_fragmenter_out_a_valid,
  output [2:0]  auto_coupler_to_debug_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_debug_fragmenter_out_a_bits_size,
  output [9:0]  auto_coupler_to_debug_fragmenter_out_a_bits_source,
  output [11:0] auto_coupler_to_debug_fragmenter_out_a_bits_address,
  output [7:0]  auto_coupler_to_debug_fragmenter_out_a_bits_mask,
  output [63:0] auto_coupler_to_debug_fragmenter_out_a_bits_data,
  output        auto_coupler_to_debug_fragmenter_out_d_ready,
                auto_coupler_to_clint_fragmenter_out_a_valid,
  output [2:0]  auto_coupler_to_clint_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_clint_fragmenter_out_a_bits_size,
  output [9:0]  auto_coupler_to_clint_fragmenter_out_a_bits_source,
  output [25:0] auto_coupler_to_clint_fragmenter_out_a_bits_address,
  output [7:0]  auto_coupler_to_clint_fragmenter_out_a_bits_mask,
  output [63:0] auto_coupler_to_clint_fragmenter_out_a_bits_data,
  output        auto_coupler_to_clint_fragmenter_out_d_ready,
                auto_coupler_to_plic_fragmenter_out_a_valid,
  output [2:0]  auto_coupler_to_plic_fragmenter_out_a_bits_opcode,
  output [1:0]  auto_coupler_to_plic_fragmenter_out_a_bits_size,
  output [9:0]  auto_coupler_to_plic_fragmenter_out_a_bits_source,
  output [27:0] auto_coupler_to_plic_fragmenter_out_a_bits_address,
  output [7:0]  auto_coupler_to_plic_fragmenter_out_a_bits_mask,
  output [63:0] auto_coupler_to_plic_fragmenter_out_a_bits_data,
  output        auto_coupler_to_plic_fragmenter_out_d_ready,
                auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode,
                auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param,
                auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size,
  output [5:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source,
  output [29:0] auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data,
  output        auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready,
                auto_fixedClockNode_out_0_clock,
                auto_fixedClockNode_out_0_reset,
                auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock,
                auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset,
                auto_bus_xing_in_a_ready,
                auto_bus_xing_in_d_valid,
  output [2:0]  auto_bus_xing_in_d_bits_opcode,
  output [1:0]  auto_bus_xing_in_d_bits_param,
  output [3:0]  auto_bus_xing_in_d_bits_size,
  output [5:0]  auto_bus_xing_in_d_bits_source,
  output        auto_bus_xing_in_d_bits_sink,
                auto_bus_xing_in_d_bits_denied,
  output [63:0] auto_bus_xing_in_d_bits_data,
  output        auto_bus_xing_in_d_bits_corrupt,
                clock,
                reset
);

  wire        _coupler_to_bootrom_auto_tl_in_a_ready;
  wire        _coupler_to_bootrom_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_bootrom_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_bootrom_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_bootrom_auto_tl_in_d_bits_data;
  wire        _coupler_to_debug_auto_tl_in_a_ready;
  wire        _coupler_to_debug_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_debug_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_debug_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_debug_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_debug_auto_tl_in_d_bits_data;
  wire        _coupler_to_clint_auto_tl_in_a_ready;
  wire        _coupler_to_clint_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_clint_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_clint_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_clint_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_clint_auto_tl_in_d_bits_data;
  wire        _coupler_to_plic_auto_tl_in_a_ready;
  wire        _coupler_to_plic_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_plic_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_plic_auto_tl_in_d_bits_size;
  wire [5:0]  _coupler_to_plic_auto_tl_in_d_bits_source;
  wire [63:0] _coupler_to_plic_auto_tl_in_d_bits_data;
  wire        _wrapped_error_device_auto_buffer_in_a_ready;
  wire        _wrapped_error_device_auto_buffer_in_d_valid;
  wire [2:0]  _wrapped_error_device_auto_buffer_in_d_bits_opcode;
  wire [1:0]  _wrapped_error_device_auto_buffer_in_d_bits_param;
  wire [3:0]  _wrapped_error_device_auto_buffer_in_d_bits_size;
  wire [5:0]  _wrapped_error_device_auto_buffer_in_d_bits_source;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_sink;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_denied;
  wire [63:0] _wrapped_error_device_auto_buffer_in_d_bits_data;
  wire        _wrapped_error_device_auto_buffer_in_d_bits_corrupt;
  wire        _atomics_auto_out_a_valid;
  wire [2:0]  _atomics_auto_out_a_bits_opcode;
  wire [2:0]  _atomics_auto_out_a_bits_param;
  wire [3:0]  _atomics_auto_out_a_bits_size;
  wire [5:0]  _atomics_auto_out_a_bits_source;
  wire [29:0] _atomics_auto_out_a_bits_address;
  wire [7:0]  _atomics_auto_out_a_bits_mask;
  wire [63:0] _atomics_auto_out_a_bits_data;
  wire        _atomics_auto_out_d_ready;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [5:0]  _buffer_auto_in_d_bits_source;
  wire        _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [2:0]  _buffer_auto_out_a_bits_param;
  wire [3:0]  _buffer_auto_out_a_bits_size;
  wire [5:0]  _buffer_auto_out_a_bits_source;
  wire [29:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_d_ready;
  wire        _out_xbar_auto_in_a_ready;
  wire        _out_xbar_auto_in_d_valid;
  wire [2:0]  _out_xbar_auto_in_d_bits_opcode;
  wire [1:0]  _out_xbar_auto_in_d_bits_param;
  wire [3:0]  _out_xbar_auto_in_d_bits_size;
  wire [5:0]  _out_xbar_auto_in_d_bits_source;
  wire        _out_xbar_auto_in_d_bits_sink;
  wire        _out_xbar_auto_in_d_bits_denied;
  wire [63:0] _out_xbar_auto_in_d_bits_data;
  wire        _out_xbar_auto_in_d_bits_corrupt;
  wire        _out_xbar_auto_out_5_a_valid;
  wire [2:0]  _out_xbar_auto_out_5_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_5_a_bits_source;
  wire [16:0] _out_xbar_auto_out_5_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_5_a_bits_mask;
  wire        _out_xbar_auto_out_5_d_ready;
  wire        _out_xbar_auto_out_4_a_valid;
  wire [2:0]  _out_xbar_auto_out_4_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_4_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_4_a_bits_source;
  wire [11:0] _out_xbar_auto_out_4_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_4_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_4_a_bits_data;
  wire        _out_xbar_auto_out_4_d_ready;
  wire        _out_xbar_auto_out_3_a_valid;
  wire [2:0]  _out_xbar_auto_out_3_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_3_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_3_a_bits_source;
  wire [25:0] _out_xbar_auto_out_3_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_3_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_3_a_bits_data;
  wire        _out_xbar_auto_out_3_d_ready;
  wire        _out_xbar_auto_out_2_a_valid;
  wire [2:0]  _out_xbar_auto_out_2_a_bits_opcode;
  wire [2:0]  _out_xbar_auto_out_2_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_2_a_bits_source;
  wire [27:0] _out_xbar_auto_out_2_a_bits_address;
  wire [7:0]  _out_xbar_auto_out_2_a_bits_mask;
  wire [63:0] _out_xbar_auto_out_2_a_bits_data;
  wire        _out_xbar_auto_out_2_d_ready;
  wire        _out_xbar_auto_out_0_a_valid;
  wire [2:0]  _out_xbar_auto_out_0_a_bits_opcode;
  wire [3:0]  _out_xbar_auto_out_0_a_bits_size;
  wire [5:0]  _out_xbar_auto_out_0_a_bits_source;
  wire        _out_xbar_auto_out_0_d_ready;
  wire        _fixer_auto_in_a_ready;
  wire        _fixer_auto_in_d_valid;
  wire [2:0]  _fixer_auto_in_d_bits_opcode;
  wire [1:0]  _fixer_auto_in_d_bits_param;
  wire [3:0]  _fixer_auto_in_d_bits_size;
  wire [5:0]  _fixer_auto_in_d_bits_source;
  wire        _fixer_auto_in_d_bits_sink;
  wire        _fixer_auto_in_d_bits_denied;
  wire [63:0] _fixer_auto_in_d_bits_data;
  wire        _fixer_auto_in_d_bits_corrupt;
  wire        _fixer_auto_out_a_valid;
  wire [2:0]  _fixer_auto_out_a_bits_opcode;
  wire [2:0]  _fixer_auto_out_a_bits_param;
  wire [3:0]  _fixer_auto_out_a_bits_size;
  wire [5:0]  _fixer_auto_out_a_bits_source;
  wire [29:0] _fixer_auto_out_a_bits_address;
  wire [7:0]  _fixer_auto_out_a_bits_mask;
  wire [63:0] _fixer_auto_out_a_bits_data;
  wire        _fixer_auto_out_d_ready;
  wire        _fixedClockNode_auto_out_0_clock;
  wire        _fixedClockNode_auto_out_0_reset;
  FixedClockBroadcast_3 fixedClockNode (
    .auto_in_clock    (auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock),
    .auto_in_reset    (auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset),
    .auto_out_1_clock (auto_fixedClockNode_out_0_clock),
    .auto_out_1_reset (auto_fixedClockNode_out_0_reset),
    .auto_out_0_clock (_fixedClockNode_auto_out_0_clock),
    .auto_out_0_reset (_fixedClockNode_auto_out_0_reset)
  );
  TLFIFOFixer_3 fixer (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (_buffer_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_buffer_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_buffer_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_buffer_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_buffer_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_buffer_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_buffer_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_buffer_auto_out_a_bits_data),
    .auto_in_d_ready         (_buffer_auto_out_d_ready),
    .auto_out_a_ready        (_out_xbar_auto_in_a_ready),
    .auto_out_d_valid        (_out_xbar_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_out_xbar_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_out_xbar_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_out_xbar_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_out_xbar_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_out_xbar_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_out_xbar_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_out_xbar_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_out_xbar_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_fixer_auto_in_a_ready),
    .auto_in_d_valid         (_fixer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_fixer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_fixer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_fixer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_fixer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_fixer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_fixer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_fixer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_fixer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_fixer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_fixer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_fixer_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_fixer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_fixer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_fixer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_fixer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_fixer_auto_out_a_bits_data),
    .auto_out_d_ready        (_fixer_auto_out_d_ready)
  );
  TLXbar_5 out_xbar (
    .clock                     (_fixedClockNode_auto_out_0_clock),
    .reset                     (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid           (_fixer_auto_out_a_valid),
    .auto_in_a_bits_opcode     (_fixer_auto_out_a_bits_opcode),
    .auto_in_a_bits_param      (_fixer_auto_out_a_bits_param),
    .auto_in_a_bits_size       (_fixer_auto_out_a_bits_size),
    .auto_in_a_bits_source     (_fixer_auto_out_a_bits_source),
    .auto_in_a_bits_address    (_fixer_auto_out_a_bits_address),
    .auto_in_a_bits_mask       (_fixer_auto_out_a_bits_mask),
    .auto_in_a_bits_data       (_fixer_auto_out_a_bits_data),
    .auto_in_d_ready           (_fixer_auto_out_d_ready),
    .auto_out_5_a_ready        (_coupler_to_bootrom_auto_tl_in_a_ready),
    .auto_out_5_d_valid        (_coupler_to_bootrom_auto_tl_in_d_valid),
    .auto_out_5_d_bits_size    (_coupler_to_bootrom_auto_tl_in_d_bits_size),
    .auto_out_5_d_bits_source  (_coupler_to_bootrom_auto_tl_in_d_bits_source),
    .auto_out_5_d_bits_data    (_coupler_to_bootrom_auto_tl_in_d_bits_data),
    .auto_out_4_a_ready        (_coupler_to_debug_auto_tl_in_a_ready),
    .auto_out_4_d_valid        (_coupler_to_debug_auto_tl_in_d_valid),
    .auto_out_4_d_bits_opcode  (_coupler_to_debug_auto_tl_in_d_bits_opcode),
    .auto_out_4_d_bits_size    (_coupler_to_debug_auto_tl_in_d_bits_size),
    .auto_out_4_d_bits_source  (_coupler_to_debug_auto_tl_in_d_bits_source),
    .auto_out_4_d_bits_data    (_coupler_to_debug_auto_tl_in_d_bits_data),
    .auto_out_3_a_ready        (_coupler_to_clint_auto_tl_in_a_ready),
    .auto_out_3_d_valid        (_coupler_to_clint_auto_tl_in_d_valid),
    .auto_out_3_d_bits_opcode  (_coupler_to_clint_auto_tl_in_d_bits_opcode),
    .auto_out_3_d_bits_size    (_coupler_to_clint_auto_tl_in_d_bits_size),
    .auto_out_3_d_bits_source  (_coupler_to_clint_auto_tl_in_d_bits_source),
    .auto_out_3_d_bits_data    (_coupler_to_clint_auto_tl_in_d_bits_data),
    .auto_out_2_a_ready        (_coupler_to_plic_auto_tl_in_a_ready),
    .auto_out_2_d_valid        (_coupler_to_plic_auto_tl_in_d_valid),
    .auto_out_2_d_bits_opcode  (_coupler_to_plic_auto_tl_in_d_bits_opcode),
    .auto_out_2_d_bits_size    (_coupler_to_plic_auto_tl_in_d_bits_size),
    .auto_out_2_d_bits_source  (_coupler_to_plic_auto_tl_in_d_bits_source),
    .auto_out_2_d_bits_data    (_coupler_to_plic_auto_tl_in_d_bits_data),
    .auto_out_1_a_ready
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_ready),
    .auto_out_1_d_valid
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_valid),
    .auto_out_1_d_bits_opcode
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_opcode),
    .auto_out_1_d_bits_param
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_param),
    .auto_out_1_d_bits_size
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_size),
    .auto_out_1_d_bits_source
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_source),
    .auto_out_1_d_bits_sink
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_sink),
    .auto_out_1_d_bits_denied
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_denied),
    .auto_out_1_d_bits_data
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_data),
    .auto_out_1_d_bits_corrupt
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_corrupt),
    .auto_out_0_a_ready        (_wrapped_error_device_auto_buffer_in_a_ready),
    .auto_out_0_d_valid        (_wrapped_error_device_auto_buffer_in_d_valid),
    .auto_out_0_d_bits_opcode  (_wrapped_error_device_auto_buffer_in_d_bits_opcode),
    .auto_out_0_d_bits_param   (_wrapped_error_device_auto_buffer_in_d_bits_param),
    .auto_out_0_d_bits_size    (_wrapped_error_device_auto_buffer_in_d_bits_size),
    .auto_out_0_d_bits_source  (_wrapped_error_device_auto_buffer_in_d_bits_source),
    .auto_out_0_d_bits_sink    (_wrapped_error_device_auto_buffer_in_d_bits_sink),
    .auto_out_0_d_bits_denied  (_wrapped_error_device_auto_buffer_in_d_bits_denied),
    .auto_out_0_d_bits_data    (_wrapped_error_device_auto_buffer_in_d_bits_data),
    .auto_out_0_d_bits_corrupt (_wrapped_error_device_auto_buffer_in_d_bits_corrupt),
    .auto_in_a_ready           (_out_xbar_auto_in_a_ready),
    .auto_in_d_valid           (_out_xbar_auto_in_d_valid),
    .auto_in_d_bits_opcode     (_out_xbar_auto_in_d_bits_opcode),
    .auto_in_d_bits_param      (_out_xbar_auto_in_d_bits_param),
    .auto_in_d_bits_size       (_out_xbar_auto_in_d_bits_size),
    .auto_in_d_bits_source     (_out_xbar_auto_in_d_bits_source),
    .auto_in_d_bits_sink       (_out_xbar_auto_in_d_bits_sink),
    .auto_in_d_bits_denied     (_out_xbar_auto_in_d_bits_denied),
    .auto_in_d_bits_data       (_out_xbar_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt    (_out_xbar_auto_in_d_bits_corrupt),
    .auto_out_5_a_valid        (_out_xbar_auto_out_5_a_valid),
    .auto_out_5_a_bits_size    (_out_xbar_auto_out_5_a_bits_size),
    .auto_out_5_a_bits_source  (_out_xbar_auto_out_5_a_bits_source),
    .auto_out_5_a_bits_address (_out_xbar_auto_out_5_a_bits_address),
    .auto_out_5_a_bits_mask    (_out_xbar_auto_out_5_a_bits_mask),
    .auto_out_5_d_ready        (_out_xbar_auto_out_5_d_ready),
    .auto_out_4_a_valid        (_out_xbar_auto_out_4_a_valid),
    .auto_out_4_a_bits_opcode  (_out_xbar_auto_out_4_a_bits_opcode),
    .auto_out_4_a_bits_size    (_out_xbar_auto_out_4_a_bits_size),
    .auto_out_4_a_bits_source  (_out_xbar_auto_out_4_a_bits_source),
    .auto_out_4_a_bits_address (_out_xbar_auto_out_4_a_bits_address),
    .auto_out_4_a_bits_mask    (_out_xbar_auto_out_4_a_bits_mask),
    .auto_out_4_a_bits_data    (_out_xbar_auto_out_4_a_bits_data),
    .auto_out_4_d_ready        (_out_xbar_auto_out_4_d_ready),
    .auto_out_3_a_valid        (_out_xbar_auto_out_3_a_valid),
    .auto_out_3_a_bits_opcode  (_out_xbar_auto_out_3_a_bits_opcode),
    .auto_out_3_a_bits_size    (_out_xbar_auto_out_3_a_bits_size),
    .auto_out_3_a_bits_source  (_out_xbar_auto_out_3_a_bits_source),
    .auto_out_3_a_bits_address (_out_xbar_auto_out_3_a_bits_address),
    .auto_out_3_a_bits_mask    (_out_xbar_auto_out_3_a_bits_mask),
    .auto_out_3_a_bits_data    (_out_xbar_auto_out_3_a_bits_data),
    .auto_out_3_d_ready        (_out_xbar_auto_out_3_d_ready),
    .auto_out_2_a_valid        (_out_xbar_auto_out_2_a_valid),
    .auto_out_2_a_bits_opcode  (_out_xbar_auto_out_2_a_bits_opcode),
    .auto_out_2_a_bits_size    (_out_xbar_auto_out_2_a_bits_size),
    .auto_out_2_a_bits_source  (_out_xbar_auto_out_2_a_bits_source),
    .auto_out_2_a_bits_address (_out_xbar_auto_out_2_a_bits_address),
    .auto_out_2_a_bits_mask    (_out_xbar_auto_out_2_a_bits_mask),
    .auto_out_2_a_bits_data    (_out_xbar_auto_out_2_a_bits_data),
    .auto_out_2_d_ready        (_out_xbar_auto_out_2_d_ready),
    .auto_out_1_a_valid
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid),
    .auto_out_1_a_bits_opcode
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode),
    .auto_out_1_a_bits_param
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param),
    .auto_out_1_a_bits_size
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size),
    .auto_out_1_a_bits_source
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source),
    .auto_out_1_a_bits_address
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address),
    .auto_out_1_a_bits_mask
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask),
    .auto_out_1_a_bits_data
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data),
    .auto_out_1_d_ready
      (auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready),
    .auto_out_0_a_valid        (_out_xbar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_out_xbar_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_size    (_out_xbar_auto_out_0_a_bits_size),
    .auto_out_0_a_bits_source  (_out_xbar_auto_out_0_a_bits_source),
    .auto_out_0_d_ready        (_out_xbar_auto_out_0_d_ready)
  );
  TLBuffer_5 buffer (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (_atomics_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_atomics_auto_out_a_bits_opcode),
    .auto_in_a_bits_param    (_atomics_auto_out_a_bits_param),
    .auto_in_a_bits_size     (_atomics_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_atomics_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_atomics_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_atomics_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_atomics_auto_out_a_bits_data),
    .auto_in_d_ready         (_atomics_auto_out_d_ready),
    .auto_out_a_ready        (_fixer_auto_in_a_ready),
    .auto_out_d_valid        (_fixer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_fixer_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_fixer_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_fixer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_fixer_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_fixer_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_fixer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_fixer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_fixer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_buffer_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  TLAtomicAutomata_1 atomics (
    .clock                   (_fixedClockNode_auto_out_0_clock),
    .reset                   (_fixedClockNode_auto_out_0_reset),
    .auto_in_a_valid         (auto_bus_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_bus_xing_in_a_bits_opcode),
    .auto_in_a_bits_param    (auto_bus_xing_in_a_bits_param),
    .auto_in_a_bits_size     (auto_bus_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_bus_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_bus_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_bus_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_bus_xing_in_a_bits_data),
    .auto_in_d_ready         (auto_bus_xing_in_d_ready),
    .auto_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_out_d_bits_param   (_buffer_auto_in_d_bits_param),
    .auto_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_out_d_bits_sink    (_buffer_auto_in_d_bits_sink),
    .auto_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_bus_xing_in_a_ready),
    .auto_in_d_valid         (auto_bus_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_bus_xing_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_bus_xing_in_d_bits_param),
    .auto_in_d_bits_size     (auto_bus_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_bus_xing_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_bus_xing_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_bus_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_bus_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_bus_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_atomics_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_atomics_auto_out_a_bits_opcode),
    .auto_out_a_bits_param   (_atomics_auto_out_a_bits_param),
    .auto_out_a_bits_size    (_atomics_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_atomics_auto_out_a_bits_source),
    .auto_out_a_bits_address (_atomics_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_atomics_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_atomics_auto_out_a_bits_data),
    .auto_out_d_ready        (_atomics_auto_out_d_ready)
  );
  ErrorDeviceWrapper wrapped_error_device (
    .clock                         (_fixedClockNode_auto_out_0_clock),
    .reset                         (_fixedClockNode_auto_out_0_reset),
    .auto_buffer_in_a_valid        (_out_xbar_auto_out_0_a_valid),
    .auto_buffer_in_a_bits_opcode  (_out_xbar_auto_out_0_a_bits_opcode),
    .auto_buffer_in_a_bits_size    (_out_xbar_auto_out_0_a_bits_size),
    .auto_buffer_in_a_bits_source  (_out_xbar_auto_out_0_a_bits_source),
    .auto_buffer_in_d_ready        (_out_xbar_auto_out_0_d_ready),
    .auto_buffer_in_a_ready        (_wrapped_error_device_auto_buffer_in_a_ready),
    .auto_buffer_in_d_valid        (_wrapped_error_device_auto_buffer_in_d_valid),
    .auto_buffer_in_d_bits_opcode  (_wrapped_error_device_auto_buffer_in_d_bits_opcode),
    .auto_buffer_in_d_bits_param   (_wrapped_error_device_auto_buffer_in_d_bits_param),
    .auto_buffer_in_d_bits_size    (_wrapped_error_device_auto_buffer_in_d_bits_size),
    .auto_buffer_in_d_bits_source  (_wrapped_error_device_auto_buffer_in_d_bits_source),
    .auto_buffer_in_d_bits_sink    (_wrapped_error_device_auto_buffer_in_d_bits_sink),
    .auto_buffer_in_d_bits_denied  (_wrapped_error_device_auto_buffer_in_d_bits_denied),
    .auto_buffer_in_d_bits_data    (_wrapped_error_device_auto_buffer_in_d_bits_data),
    .auto_buffer_in_d_bits_corrupt (_wrapped_error_device_auto_buffer_in_d_bits_corrupt)
  );
  TLInterconnectCoupler_13 coupler_to_plic (
    .clock                              (_fixedClockNode_auto_out_0_clock),
    .reset                              (_fixedClockNode_auto_out_0_reset),
    .auto_fragmenter_out_a_ready        (auto_coupler_to_plic_fragmenter_out_a_ready),
    .auto_fragmenter_out_d_valid        (auto_coupler_to_plic_fragmenter_out_d_valid),
    .auto_fragmenter_out_d_bits_opcode
      (auto_coupler_to_plic_fragmenter_out_d_bits_opcode),
    .auto_fragmenter_out_d_bits_size    (auto_coupler_to_plic_fragmenter_out_d_bits_size),
    .auto_fragmenter_out_d_bits_source
      (auto_coupler_to_plic_fragmenter_out_d_bits_source),
    .auto_fragmenter_out_d_bits_data    (auto_coupler_to_plic_fragmenter_out_d_bits_data),
    .auto_tl_in_a_valid                 (_out_xbar_auto_out_2_a_valid),
    .auto_tl_in_a_bits_opcode           (_out_xbar_auto_out_2_a_bits_opcode),
    .auto_tl_in_a_bits_size             (_out_xbar_auto_out_2_a_bits_size),
    .auto_tl_in_a_bits_source           (_out_xbar_auto_out_2_a_bits_source),
    .auto_tl_in_a_bits_address          (_out_xbar_auto_out_2_a_bits_address),
    .auto_tl_in_a_bits_mask             (_out_xbar_auto_out_2_a_bits_mask),
    .auto_tl_in_a_bits_data             (_out_xbar_auto_out_2_a_bits_data),
    .auto_tl_in_d_ready                 (_out_xbar_auto_out_2_d_ready),
    .auto_fragmenter_out_a_valid        (auto_coupler_to_plic_fragmenter_out_a_valid),
    .auto_fragmenter_out_a_bits_opcode
      (auto_coupler_to_plic_fragmenter_out_a_bits_opcode),
    .auto_fragmenter_out_a_bits_size    (auto_coupler_to_plic_fragmenter_out_a_bits_size),
    .auto_fragmenter_out_a_bits_source
      (auto_coupler_to_plic_fragmenter_out_a_bits_source),
    .auto_fragmenter_out_a_bits_address
      (auto_coupler_to_plic_fragmenter_out_a_bits_address),
    .auto_fragmenter_out_a_bits_mask    (auto_coupler_to_plic_fragmenter_out_a_bits_mask),
    .auto_fragmenter_out_a_bits_data    (auto_coupler_to_plic_fragmenter_out_a_bits_data),
    .auto_fragmenter_out_d_ready        (auto_coupler_to_plic_fragmenter_out_d_ready),
    .auto_tl_in_a_ready                 (_coupler_to_plic_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                 (_coupler_to_plic_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode           (_coupler_to_plic_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size             (_coupler_to_plic_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source           (_coupler_to_plic_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data             (_coupler_to_plic_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_14 coupler_to_clint (
    .clock                              (_fixedClockNode_auto_out_0_clock),
    .reset                              (_fixedClockNode_auto_out_0_reset),
    .auto_fragmenter_out_a_ready        (auto_coupler_to_clint_fragmenter_out_a_ready),
    .auto_fragmenter_out_d_valid        (auto_coupler_to_clint_fragmenter_out_d_valid),
    .auto_fragmenter_out_d_bits_opcode
      (auto_coupler_to_clint_fragmenter_out_d_bits_opcode),
    .auto_fragmenter_out_d_bits_size
      (auto_coupler_to_clint_fragmenter_out_d_bits_size),
    .auto_fragmenter_out_d_bits_source
      (auto_coupler_to_clint_fragmenter_out_d_bits_source),
    .auto_fragmenter_out_d_bits_data
      (auto_coupler_to_clint_fragmenter_out_d_bits_data),
    .auto_tl_in_a_valid                 (_out_xbar_auto_out_3_a_valid),
    .auto_tl_in_a_bits_opcode           (_out_xbar_auto_out_3_a_bits_opcode),
    .auto_tl_in_a_bits_size             (_out_xbar_auto_out_3_a_bits_size),
    .auto_tl_in_a_bits_source           (_out_xbar_auto_out_3_a_bits_source),
    .auto_tl_in_a_bits_address          (_out_xbar_auto_out_3_a_bits_address),
    .auto_tl_in_a_bits_mask             (_out_xbar_auto_out_3_a_bits_mask),
    .auto_tl_in_a_bits_data             (_out_xbar_auto_out_3_a_bits_data),
    .auto_tl_in_d_ready                 (_out_xbar_auto_out_3_d_ready),
    .auto_fragmenter_out_a_valid        (auto_coupler_to_clint_fragmenter_out_a_valid),
    .auto_fragmenter_out_a_bits_opcode
      (auto_coupler_to_clint_fragmenter_out_a_bits_opcode),
    .auto_fragmenter_out_a_bits_size
      (auto_coupler_to_clint_fragmenter_out_a_bits_size),
    .auto_fragmenter_out_a_bits_source
      (auto_coupler_to_clint_fragmenter_out_a_bits_source),
    .auto_fragmenter_out_a_bits_address
      (auto_coupler_to_clint_fragmenter_out_a_bits_address),
    .auto_fragmenter_out_a_bits_mask
      (auto_coupler_to_clint_fragmenter_out_a_bits_mask),
    .auto_fragmenter_out_a_bits_data
      (auto_coupler_to_clint_fragmenter_out_a_bits_data),
    .auto_fragmenter_out_d_ready        (auto_coupler_to_clint_fragmenter_out_d_ready),
    .auto_tl_in_a_ready                 (_coupler_to_clint_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                 (_coupler_to_clint_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode           (_coupler_to_clint_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size             (_coupler_to_clint_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source           (_coupler_to_clint_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data             (_coupler_to_clint_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_16 coupler_to_debug (
    .clock                              (_fixedClockNode_auto_out_0_clock),
    .reset                              (_fixedClockNode_auto_out_0_reset),
    .auto_fragmenter_out_a_ready        (auto_coupler_to_debug_fragmenter_out_a_ready),
    .auto_fragmenter_out_d_valid        (auto_coupler_to_debug_fragmenter_out_d_valid),
    .auto_fragmenter_out_d_bits_opcode
      (auto_coupler_to_debug_fragmenter_out_d_bits_opcode),
    .auto_fragmenter_out_d_bits_size
      (auto_coupler_to_debug_fragmenter_out_d_bits_size),
    .auto_fragmenter_out_d_bits_source
      (auto_coupler_to_debug_fragmenter_out_d_bits_source),
    .auto_fragmenter_out_d_bits_data
      (auto_coupler_to_debug_fragmenter_out_d_bits_data),
    .auto_tl_in_a_valid                 (_out_xbar_auto_out_4_a_valid),
    .auto_tl_in_a_bits_opcode           (_out_xbar_auto_out_4_a_bits_opcode),
    .auto_tl_in_a_bits_size             (_out_xbar_auto_out_4_a_bits_size),
    .auto_tl_in_a_bits_source           (_out_xbar_auto_out_4_a_bits_source),
    .auto_tl_in_a_bits_address          (_out_xbar_auto_out_4_a_bits_address),
    .auto_tl_in_a_bits_mask             (_out_xbar_auto_out_4_a_bits_mask),
    .auto_tl_in_a_bits_data             (_out_xbar_auto_out_4_a_bits_data),
    .auto_tl_in_d_ready                 (_out_xbar_auto_out_4_d_ready),
    .auto_fragmenter_out_a_valid        (auto_coupler_to_debug_fragmenter_out_a_valid),
    .auto_fragmenter_out_a_bits_opcode
      (auto_coupler_to_debug_fragmenter_out_a_bits_opcode),
    .auto_fragmenter_out_a_bits_size
      (auto_coupler_to_debug_fragmenter_out_a_bits_size),
    .auto_fragmenter_out_a_bits_source
      (auto_coupler_to_debug_fragmenter_out_a_bits_source),
    .auto_fragmenter_out_a_bits_address
      (auto_coupler_to_debug_fragmenter_out_a_bits_address),
    .auto_fragmenter_out_a_bits_mask
      (auto_coupler_to_debug_fragmenter_out_a_bits_mask),
    .auto_fragmenter_out_a_bits_data
      (auto_coupler_to_debug_fragmenter_out_a_bits_data),
    .auto_fragmenter_out_d_ready        (auto_coupler_to_debug_fragmenter_out_d_ready),
    .auto_tl_in_a_ready                 (_coupler_to_debug_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                 (_coupler_to_debug_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode           (_coupler_to_debug_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size             (_coupler_to_debug_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source           (_coupler_to_debug_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data             (_coupler_to_debug_auto_tl_in_d_bits_data)
  );
  TLInterconnectCoupler_17 coupler_to_bootrom (
    .clock                              (_fixedClockNode_auto_out_0_clock),
    .reset                              (_fixedClockNode_auto_out_0_reset),
    .auto_fragmenter_out_a_ready        (auto_coupler_to_bootrom_fragmenter_out_a_ready),
    .auto_fragmenter_out_d_valid        (auto_coupler_to_bootrom_fragmenter_out_d_valid),
    .auto_fragmenter_out_d_bits_size
      (auto_coupler_to_bootrom_fragmenter_out_d_bits_size),
    .auto_fragmenter_out_d_bits_source
      (auto_coupler_to_bootrom_fragmenter_out_d_bits_source),
    .auto_fragmenter_out_d_bits_data
      (auto_coupler_to_bootrom_fragmenter_out_d_bits_data),
    .auto_tl_in_a_valid                 (_out_xbar_auto_out_5_a_valid),
    .auto_tl_in_a_bits_size             (_out_xbar_auto_out_5_a_bits_size),
    .auto_tl_in_a_bits_source           (_out_xbar_auto_out_5_a_bits_source),
    .auto_tl_in_a_bits_address          (_out_xbar_auto_out_5_a_bits_address),
    .auto_tl_in_a_bits_mask             (_out_xbar_auto_out_5_a_bits_mask),
    .auto_tl_in_d_ready                 (_out_xbar_auto_out_5_d_ready),
    .auto_fragmenter_out_a_valid        (auto_coupler_to_bootrom_fragmenter_out_a_valid),
    .auto_fragmenter_out_a_bits_size
      (auto_coupler_to_bootrom_fragmenter_out_a_bits_size),
    .auto_fragmenter_out_a_bits_source
      (auto_coupler_to_bootrom_fragmenter_out_a_bits_source),
    .auto_fragmenter_out_a_bits_address
      (auto_coupler_to_bootrom_fragmenter_out_a_bits_address),
    .auto_fragmenter_out_d_ready        (auto_coupler_to_bootrom_fragmenter_out_d_ready),
    .auto_tl_in_a_ready                 (_coupler_to_bootrom_auto_tl_in_a_ready),
    .auto_tl_in_d_valid                 (_coupler_to_bootrom_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_size             (_coupler_to_bootrom_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source           (_coupler_to_bootrom_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data             (_coupler_to_bootrom_auto_tl_in_d_bits_data)
  );
  assign auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock =
    auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock;
  assign auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset =
    auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset;
  assign clock = _fixedClockNode_auto_out_0_clock;
  assign reset = _fixedClockNode_auto_out_0_reset;
endmodule

module TLFIFOFixer_4(
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [7:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [7:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [7:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_size,
  output [7:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  assign auto_in_a_ready = auto_out_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module ProbePicker(
  input         auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [7:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [7:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [7:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_size,
  output [7:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  assign auto_in_a_ready = auto_out_a_ready;
  assign auto_in_d_valid = auto_out_d_valid;
  assign auto_in_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_d_bits_size = auto_out_d_bits_size;
  assign auto_in_d_bits_source = auto_out_d_bits_source;
  assign auto_in_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_d_bits_data = auto_out_d_bits_data;
  assign auto_in_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_out_a_valid = auto_in_a_valid;
  assign auto_out_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_a_bits_size = auto_in_a_bits_size;
  assign auto_out_a_bits_source = auto_in_a_bits_source;
  assign auto_out_a_bits_address = auto_in_a_bits_address;
  assign auto_out_a_bits_mask = auto_in_a_bits_mask;
  assign auto_out_a_bits_data = auto_in_a_bits_data;
  assign auto_out_d_ready = auto_in_d_ready;
endmodule

module Queue_48(
  input        clock,
               reset,
               io_enq_valid,
  input  [3:0] io_enq_bits_tl_state_size,
  input  [7:0] io_enq_bits_tl_state_source,
  input  [3:0] io_enq_bits_extra_id,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [3:0] io_deq_bits_tl_state_size,
  output [7:0] io_deq_bits_tl_state_source,
  output [3:0] io_deq_bits_extra_id
);

  reg  [3:0] enq_ptr_value;
  reg  [3:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_tl_state_size_combMem_2 ram_tl_state_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_size),
    .R0_data (io_deq_bits_tl_state_size)
  );
  ram_tl_state_source_combMem_2 ram_tl_state_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_tl_state_source),
    .R0_data (io_deq_bits_tl_state_source)
  );
  ram_tl_state_size_combMem_2 ram_extra_id_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_extra_id),
    .R0_data (io_deq_bits_extra_id)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module AXI4UserYanker_2(
  input         clock,
                reset,
                auto_in_aw_valid,
  input  [3:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [7:0]  auto_in_aw_bits_echo_tl_state_source,
  input  [3:0]  auto_in_aw_bits_echo_extra_id,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [3:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [7:0]  auto_in_ar_bits_echo_tl_state_source,
  input  [3:0]  auto_in_ar_bits_echo_extra_id,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [3:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [7:0]  auto_in_b_bits_echo_tl_state_source,
  output [3:0]  auto_in_b_bits_echo_extra_id,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [3:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [7:0]  auto_in_r_bits_echo_tl_state_source,
  output [3:0]  auto_in_r_bits_echo_extra_id,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
  output        auto_out_r_ready
);

  wire       _Queue_31_io_enq_ready;
  wire       _Queue_31_io_deq_valid;
  wire [3:0] _Queue_31_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_31_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_31_io_deq_bits_extra_id;
  wire       _Queue_30_io_enq_ready;
  wire       _Queue_30_io_deq_valid;
  wire [3:0] _Queue_30_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_30_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_30_io_deq_bits_extra_id;
  wire       _Queue_29_io_enq_ready;
  wire       _Queue_29_io_deq_valid;
  wire [3:0] _Queue_29_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_29_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_29_io_deq_bits_extra_id;
  wire       _Queue_28_io_enq_ready;
  wire       _Queue_28_io_deq_valid;
  wire [3:0] _Queue_28_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_28_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_28_io_deq_bits_extra_id;
  wire       _Queue_27_io_enq_ready;
  wire       _Queue_27_io_deq_valid;
  wire [3:0] _Queue_27_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_27_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_27_io_deq_bits_extra_id;
  wire       _Queue_26_io_enq_ready;
  wire       _Queue_26_io_deq_valid;
  wire [3:0] _Queue_26_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_26_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_26_io_deq_bits_extra_id;
  wire       _Queue_25_io_enq_ready;
  wire       _Queue_25_io_deq_valid;
  wire [3:0] _Queue_25_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_25_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_25_io_deq_bits_extra_id;
  wire       _Queue_24_io_enq_ready;
  wire       _Queue_24_io_deq_valid;
  wire [3:0] _Queue_24_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_24_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_24_io_deq_bits_extra_id;
  wire       _Queue_23_io_enq_ready;
  wire       _Queue_23_io_deq_valid;
  wire [3:0] _Queue_23_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_23_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_23_io_deq_bits_extra_id;
  wire       _Queue_22_io_enq_ready;
  wire       _Queue_22_io_deq_valid;
  wire [3:0] _Queue_22_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_22_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_22_io_deq_bits_extra_id;
  wire       _Queue_21_io_enq_ready;
  wire       _Queue_21_io_deq_valid;
  wire [3:0] _Queue_21_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_21_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_21_io_deq_bits_extra_id;
  wire       _Queue_20_io_enq_ready;
  wire       _Queue_20_io_deq_valid;
  wire [3:0] _Queue_20_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_20_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_20_io_deq_bits_extra_id;
  wire       _Queue_19_io_enq_ready;
  wire       _Queue_19_io_deq_valid;
  wire [3:0] _Queue_19_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_19_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_19_io_deq_bits_extra_id;
  wire       _Queue_18_io_enq_ready;
  wire       _Queue_18_io_deq_valid;
  wire [3:0] _Queue_18_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_18_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_18_io_deq_bits_extra_id;
  wire       _Queue_17_io_enq_ready;
  wire       _Queue_17_io_deq_valid;
  wire [3:0] _Queue_17_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_17_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_17_io_deq_bits_extra_id;
  wire       _Queue_16_io_enq_ready;
  wire       _Queue_16_io_deq_valid;
  wire [3:0] _Queue_16_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_16_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_16_io_deq_bits_extra_id;
  wire       _Queue_15_io_enq_ready;
  wire       _Queue_15_io_deq_valid;
  wire [3:0] _Queue_15_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_15_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_15_io_deq_bits_extra_id;
  wire       _Queue_14_io_enq_ready;
  wire       _Queue_14_io_deq_valid;
  wire [3:0] _Queue_14_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_14_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_14_io_deq_bits_extra_id;
  wire       _Queue_13_io_enq_ready;
  wire       _Queue_13_io_deq_valid;
  wire [3:0] _Queue_13_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_13_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_13_io_deq_bits_extra_id;
  wire       _Queue_12_io_enq_ready;
  wire       _Queue_12_io_deq_valid;
  wire [3:0] _Queue_12_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_12_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_12_io_deq_bits_extra_id;
  wire       _Queue_11_io_enq_ready;
  wire       _Queue_11_io_deq_valid;
  wire [3:0] _Queue_11_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_11_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_11_io_deq_bits_extra_id;
  wire       _Queue_10_io_enq_ready;
  wire       _Queue_10_io_deq_valid;
  wire [3:0] _Queue_10_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_10_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_10_io_deq_bits_extra_id;
  wire       _Queue_9_io_enq_ready;
  wire       _Queue_9_io_deq_valid;
  wire [3:0] _Queue_9_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_9_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_9_io_deq_bits_extra_id;
  wire       _Queue_8_io_enq_ready;
  wire       _Queue_8_io_deq_valid;
  wire [3:0] _Queue_8_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_8_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_8_io_deq_bits_extra_id;
  wire       _Queue_7_io_enq_ready;
  wire       _Queue_7_io_deq_valid;
  wire [3:0] _Queue_7_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_7_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_7_io_deq_bits_extra_id;
  wire       _Queue_6_io_enq_ready;
  wire       _Queue_6_io_deq_valid;
  wire [3:0] _Queue_6_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_6_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_6_io_deq_bits_extra_id;
  wire       _Queue_5_io_enq_ready;
  wire       _Queue_5_io_deq_valid;
  wire [3:0] _Queue_5_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_5_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_5_io_deq_bits_extra_id;
  wire       _Queue_4_io_enq_ready;
  wire       _Queue_4_io_deq_valid;
  wire [3:0] _Queue_4_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_4_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_4_io_deq_bits_extra_id;
  wire       _Queue_3_io_enq_ready;
  wire       _Queue_3_io_deq_valid;
  wire [3:0] _Queue_3_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_3_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_3_io_deq_bits_extra_id;
  wire       _Queue_2_io_enq_ready;
  wire       _Queue_2_io_deq_valid;
  wire [3:0] _Queue_2_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_2_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_2_io_deq_bits_extra_id;
  wire       _Queue_1_io_enq_ready;
  wire       _Queue_1_io_deq_valid;
  wire [3:0] _Queue_1_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_1_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_1_io_deq_bits_extra_id;
  wire       _Queue_io_enq_ready;
  wire       _Queue_io_deq_valid;
  wire [3:0] _Queue_io_deq_bits_tl_state_size;
  wire [7:0] _Queue_io_deq_bits_tl_state_source;
  wire [3:0] _Queue_io_deq_bits_extra_id;
  reg        casez_tmp;
  reg        casez_tmp_0;
  reg  [3:0] casez_tmp_1;
  reg  [7:0] casez_tmp_2;
  reg  [3:0] casez_tmp_3;
  reg        casez_tmp_4;
  reg        casez_tmp_5;
  reg  [3:0] casez_tmp_6;
  reg  [7:0] casez_tmp_7;
  reg  [3:0] casez_tmp_8;
  always @(*) begin
    casez (auto_in_ar_bits_id)
      4'b0000:
        casez_tmp = _Queue_io_enq_ready;
      4'b0001:
        casez_tmp = _Queue_1_io_enq_ready;
      4'b0010:
        casez_tmp = _Queue_2_io_enq_ready;
      4'b0011:
        casez_tmp = _Queue_3_io_enq_ready;
      4'b0100:
        casez_tmp = _Queue_4_io_enq_ready;
      4'b0101:
        casez_tmp = _Queue_5_io_enq_ready;
      4'b0110:
        casez_tmp = _Queue_6_io_enq_ready;
      4'b0111:
        casez_tmp = _Queue_7_io_enq_ready;
      4'b1000:
        casez_tmp = _Queue_8_io_enq_ready;
      4'b1001:
        casez_tmp = _Queue_9_io_enq_ready;
      4'b1010:
        casez_tmp = _Queue_10_io_enq_ready;
      4'b1011:
        casez_tmp = _Queue_11_io_enq_ready;
      4'b1100:
        casez_tmp = _Queue_12_io_enq_ready;
      4'b1101:
        casez_tmp = _Queue_13_io_enq_ready;
      4'b1110:
        casez_tmp = _Queue_14_io_enq_ready;
      default:
        casez_tmp = _Queue_15_io_enq_ready;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_0 = _Queue_io_deq_valid;
      4'b0001:
        casez_tmp_0 = _Queue_1_io_deq_valid;
      4'b0010:
        casez_tmp_0 = _Queue_2_io_deq_valid;
      4'b0011:
        casez_tmp_0 = _Queue_3_io_deq_valid;
      4'b0100:
        casez_tmp_0 = _Queue_4_io_deq_valid;
      4'b0101:
        casez_tmp_0 = _Queue_5_io_deq_valid;
      4'b0110:
        casez_tmp_0 = _Queue_6_io_deq_valid;
      4'b0111:
        casez_tmp_0 = _Queue_7_io_deq_valid;
      4'b1000:
        casez_tmp_0 = _Queue_8_io_deq_valid;
      4'b1001:
        casez_tmp_0 = _Queue_9_io_deq_valid;
      4'b1010:
        casez_tmp_0 = _Queue_10_io_deq_valid;
      4'b1011:
        casez_tmp_0 = _Queue_11_io_deq_valid;
      4'b1100:
        casez_tmp_0 = _Queue_12_io_deq_valid;
      4'b1101:
        casez_tmp_0 = _Queue_13_io_deq_valid;
      4'b1110:
        casez_tmp_0 = _Queue_14_io_deq_valid;
      default:
        casez_tmp_0 = _Queue_15_io_deq_valid;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_1 = _Queue_io_deq_bits_tl_state_size;
      4'b0001:
        casez_tmp_1 = _Queue_1_io_deq_bits_tl_state_size;
      4'b0010:
        casez_tmp_1 = _Queue_2_io_deq_bits_tl_state_size;
      4'b0011:
        casez_tmp_1 = _Queue_3_io_deq_bits_tl_state_size;
      4'b0100:
        casez_tmp_1 = _Queue_4_io_deq_bits_tl_state_size;
      4'b0101:
        casez_tmp_1 = _Queue_5_io_deq_bits_tl_state_size;
      4'b0110:
        casez_tmp_1 = _Queue_6_io_deq_bits_tl_state_size;
      4'b0111:
        casez_tmp_1 = _Queue_7_io_deq_bits_tl_state_size;
      4'b1000:
        casez_tmp_1 = _Queue_8_io_deq_bits_tl_state_size;
      4'b1001:
        casez_tmp_1 = _Queue_9_io_deq_bits_tl_state_size;
      4'b1010:
        casez_tmp_1 = _Queue_10_io_deq_bits_tl_state_size;
      4'b1011:
        casez_tmp_1 = _Queue_11_io_deq_bits_tl_state_size;
      4'b1100:
        casez_tmp_1 = _Queue_12_io_deq_bits_tl_state_size;
      4'b1101:
        casez_tmp_1 = _Queue_13_io_deq_bits_tl_state_size;
      4'b1110:
        casez_tmp_1 = _Queue_14_io_deq_bits_tl_state_size;
      default:
        casez_tmp_1 = _Queue_15_io_deq_bits_tl_state_size;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_2 = _Queue_io_deq_bits_tl_state_source;
      4'b0001:
        casez_tmp_2 = _Queue_1_io_deq_bits_tl_state_source;
      4'b0010:
        casez_tmp_2 = _Queue_2_io_deq_bits_tl_state_source;
      4'b0011:
        casez_tmp_2 = _Queue_3_io_deq_bits_tl_state_source;
      4'b0100:
        casez_tmp_2 = _Queue_4_io_deq_bits_tl_state_source;
      4'b0101:
        casez_tmp_2 = _Queue_5_io_deq_bits_tl_state_source;
      4'b0110:
        casez_tmp_2 = _Queue_6_io_deq_bits_tl_state_source;
      4'b0111:
        casez_tmp_2 = _Queue_7_io_deq_bits_tl_state_source;
      4'b1000:
        casez_tmp_2 = _Queue_8_io_deq_bits_tl_state_source;
      4'b1001:
        casez_tmp_2 = _Queue_9_io_deq_bits_tl_state_source;
      4'b1010:
        casez_tmp_2 = _Queue_10_io_deq_bits_tl_state_source;
      4'b1011:
        casez_tmp_2 = _Queue_11_io_deq_bits_tl_state_source;
      4'b1100:
        casez_tmp_2 = _Queue_12_io_deq_bits_tl_state_source;
      4'b1101:
        casez_tmp_2 = _Queue_13_io_deq_bits_tl_state_source;
      4'b1110:
        casez_tmp_2 = _Queue_14_io_deq_bits_tl_state_source;
      default:
        casez_tmp_2 = _Queue_15_io_deq_bits_tl_state_source;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_r_bits_id)
      4'b0000:
        casez_tmp_3 = _Queue_io_deq_bits_extra_id;
      4'b0001:
        casez_tmp_3 = _Queue_1_io_deq_bits_extra_id;
      4'b0010:
        casez_tmp_3 = _Queue_2_io_deq_bits_extra_id;
      4'b0011:
        casez_tmp_3 = _Queue_3_io_deq_bits_extra_id;
      4'b0100:
        casez_tmp_3 = _Queue_4_io_deq_bits_extra_id;
      4'b0101:
        casez_tmp_3 = _Queue_5_io_deq_bits_extra_id;
      4'b0110:
        casez_tmp_3 = _Queue_6_io_deq_bits_extra_id;
      4'b0111:
        casez_tmp_3 = _Queue_7_io_deq_bits_extra_id;
      4'b1000:
        casez_tmp_3 = _Queue_8_io_deq_bits_extra_id;
      4'b1001:
        casez_tmp_3 = _Queue_9_io_deq_bits_extra_id;
      4'b1010:
        casez_tmp_3 = _Queue_10_io_deq_bits_extra_id;
      4'b1011:
        casez_tmp_3 = _Queue_11_io_deq_bits_extra_id;
      4'b1100:
        casez_tmp_3 = _Queue_12_io_deq_bits_extra_id;
      4'b1101:
        casez_tmp_3 = _Queue_13_io_deq_bits_extra_id;
      4'b1110:
        casez_tmp_3 = _Queue_14_io_deq_bits_extra_id;
      default:
        casez_tmp_3 = _Queue_15_io_deq_bits_extra_id;
    endcase
  end // always @(*)
  wire       _T_80 = auto_out_r_valid & auto_in_r_ready;
  wire       _T_83 = auto_in_ar_valid & auto_out_ar_ready;
  always @(*) begin
    casez (auto_in_aw_bits_id)
      4'b0000:
        casez_tmp_4 = _Queue_16_io_enq_ready;
      4'b0001:
        casez_tmp_4 = _Queue_17_io_enq_ready;
      4'b0010:
        casez_tmp_4 = _Queue_18_io_enq_ready;
      4'b0011:
        casez_tmp_4 = _Queue_19_io_enq_ready;
      4'b0100:
        casez_tmp_4 = _Queue_20_io_enq_ready;
      4'b0101:
        casez_tmp_4 = _Queue_21_io_enq_ready;
      4'b0110:
        casez_tmp_4 = _Queue_22_io_enq_ready;
      4'b0111:
        casez_tmp_4 = _Queue_23_io_enq_ready;
      4'b1000:
        casez_tmp_4 = _Queue_24_io_enq_ready;
      4'b1001:
        casez_tmp_4 = _Queue_25_io_enq_ready;
      4'b1010:
        casez_tmp_4 = _Queue_26_io_enq_ready;
      4'b1011:
        casez_tmp_4 = _Queue_27_io_enq_ready;
      4'b1100:
        casez_tmp_4 = _Queue_28_io_enq_ready;
      4'b1101:
        casez_tmp_4 = _Queue_29_io_enq_ready;
      4'b1110:
        casez_tmp_4 = _Queue_30_io_enq_ready;
      default:
        casez_tmp_4 = _Queue_31_io_enq_ready;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_5 = _Queue_16_io_deq_valid;
      4'b0001:
        casez_tmp_5 = _Queue_17_io_deq_valid;
      4'b0010:
        casez_tmp_5 = _Queue_18_io_deq_valid;
      4'b0011:
        casez_tmp_5 = _Queue_19_io_deq_valid;
      4'b0100:
        casez_tmp_5 = _Queue_20_io_deq_valid;
      4'b0101:
        casez_tmp_5 = _Queue_21_io_deq_valid;
      4'b0110:
        casez_tmp_5 = _Queue_22_io_deq_valid;
      4'b0111:
        casez_tmp_5 = _Queue_23_io_deq_valid;
      4'b1000:
        casez_tmp_5 = _Queue_24_io_deq_valid;
      4'b1001:
        casez_tmp_5 = _Queue_25_io_deq_valid;
      4'b1010:
        casez_tmp_5 = _Queue_26_io_deq_valid;
      4'b1011:
        casez_tmp_5 = _Queue_27_io_deq_valid;
      4'b1100:
        casez_tmp_5 = _Queue_28_io_deq_valid;
      4'b1101:
        casez_tmp_5 = _Queue_29_io_deq_valid;
      4'b1110:
        casez_tmp_5 = _Queue_30_io_deq_valid;
      default:
        casez_tmp_5 = _Queue_31_io_deq_valid;
    endcase
  end // always @(*)
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~auto_out_r_valid | casez_tmp_0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:66 assert (!out.r.valid || r_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~auto_out_b_valid | casez_tmp_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at UserYanker.scala:95 assert (!out.b.valid || b_valid) // Q must be ready faster than the response\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_6 = _Queue_16_io_deq_bits_tl_state_size;
      4'b0001:
        casez_tmp_6 = _Queue_17_io_deq_bits_tl_state_size;
      4'b0010:
        casez_tmp_6 = _Queue_18_io_deq_bits_tl_state_size;
      4'b0011:
        casez_tmp_6 = _Queue_19_io_deq_bits_tl_state_size;
      4'b0100:
        casez_tmp_6 = _Queue_20_io_deq_bits_tl_state_size;
      4'b0101:
        casez_tmp_6 = _Queue_21_io_deq_bits_tl_state_size;
      4'b0110:
        casez_tmp_6 = _Queue_22_io_deq_bits_tl_state_size;
      4'b0111:
        casez_tmp_6 = _Queue_23_io_deq_bits_tl_state_size;
      4'b1000:
        casez_tmp_6 = _Queue_24_io_deq_bits_tl_state_size;
      4'b1001:
        casez_tmp_6 = _Queue_25_io_deq_bits_tl_state_size;
      4'b1010:
        casez_tmp_6 = _Queue_26_io_deq_bits_tl_state_size;
      4'b1011:
        casez_tmp_6 = _Queue_27_io_deq_bits_tl_state_size;
      4'b1100:
        casez_tmp_6 = _Queue_28_io_deq_bits_tl_state_size;
      4'b1101:
        casez_tmp_6 = _Queue_29_io_deq_bits_tl_state_size;
      4'b1110:
        casez_tmp_6 = _Queue_30_io_deq_bits_tl_state_size;
      default:
        casez_tmp_6 = _Queue_31_io_deq_bits_tl_state_size;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_7 = _Queue_16_io_deq_bits_tl_state_source;
      4'b0001:
        casez_tmp_7 = _Queue_17_io_deq_bits_tl_state_source;
      4'b0010:
        casez_tmp_7 = _Queue_18_io_deq_bits_tl_state_source;
      4'b0011:
        casez_tmp_7 = _Queue_19_io_deq_bits_tl_state_source;
      4'b0100:
        casez_tmp_7 = _Queue_20_io_deq_bits_tl_state_source;
      4'b0101:
        casez_tmp_7 = _Queue_21_io_deq_bits_tl_state_source;
      4'b0110:
        casez_tmp_7 = _Queue_22_io_deq_bits_tl_state_source;
      4'b0111:
        casez_tmp_7 = _Queue_23_io_deq_bits_tl_state_source;
      4'b1000:
        casez_tmp_7 = _Queue_24_io_deq_bits_tl_state_source;
      4'b1001:
        casez_tmp_7 = _Queue_25_io_deq_bits_tl_state_source;
      4'b1010:
        casez_tmp_7 = _Queue_26_io_deq_bits_tl_state_source;
      4'b1011:
        casez_tmp_7 = _Queue_27_io_deq_bits_tl_state_source;
      4'b1100:
        casez_tmp_7 = _Queue_28_io_deq_bits_tl_state_source;
      4'b1101:
        casez_tmp_7 = _Queue_29_io_deq_bits_tl_state_source;
      4'b1110:
        casez_tmp_7 = _Queue_30_io_deq_bits_tl_state_source;
      default:
        casez_tmp_7 = _Queue_31_io_deq_bits_tl_state_source;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_out_b_bits_id)
      4'b0000:
        casez_tmp_8 = _Queue_16_io_deq_bits_extra_id;
      4'b0001:
        casez_tmp_8 = _Queue_17_io_deq_bits_extra_id;
      4'b0010:
        casez_tmp_8 = _Queue_18_io_deq_bits_extra_id;
      4'b0011:
        casez_tmp_8 = _Queue_19_io_deq_bits_extra_id;
      4'b0100:
        casez_tmp_8 = _Queue_20_io_deq_bits_extra_id;
      4'b0101:
        casez_tmp_8 = _Queue_21_io_deq_bits_extra_id;
      4'b0110:
        casez_tmp_8 = _Queue_22_io_deq_bits_extra_id;
      4'b0111:
        casez_tmp_8 = _Queue_23_io_deq_bits_extra_id;
      4'b1000:
        casez_tmp_8 = _Queue_24_io_deq_bits_extra_id;
      4'b1001:
        casez_tmp_8 = _Queue_25_io_deq_bits_extra_id;
      4'b1010:
        casez_tmp_8 = _Queue_26_io_deq_bits_extra_id;
      4'b1011:
        casez_tmp_8 = _Queue_27_io_deq_bits_extra_id;
      4'b1100:
        casez_tmp_8 = _Queue_28_io_deq_bits_extra_id;
      4'b1101:
        casez_tmp_8 = _Queue_29_io_deq_bits_extra_id;
      4'b1110:
        casez_tmp_8 = _Queue_30_io_deq_bits_extra_id;
      default:
        casez_tmp_8 = _Queue_31_io_deq_bits_extra_id;
    endcase
  end // always @(*)
  wire       _T_150 = auto_out_b_valid & auto_in_b_ready;
  wire       _T_152 = auto_in_aw_valid & auto_out_aw_ready;
  Queue_48 Queue (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h0 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_io_enq_ready),
    .io_deq_valid                (_Queue_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_io_deq_bits_extra_id)
  );
  Queue_48 Queue_1 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h1 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_1_io_enq_ready),
    .io_deq_valid                (_Queue_1_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_1_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_1_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_1_io_deq_bits_extra_id)
  );
  Queue_48 Queue_2 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h2 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_2_io_enq_ready),
    .io_deq_valid                (_Queue_2_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_2_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_2_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_2_io_deq_bits_extra_id)
  );
  Queue_48 Queue_3 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h3 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_3_io_enq_ready),
    .io_deq_valid                (_Queue_3_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_3_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_3_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_3_io_deq_bits_extra_id)
  );
  Queue_48 Queue_4 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h4 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_4_io_enq_ready),
    .io_deq_valid                (_Queue_4_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_4_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_4_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_4_io_deq_bits_extra_id)
  );
  Queue_48 Queue_5 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h5 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_5_io_enq_ready),
    .io_deq_valid                (_Queue_5_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_5_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_5_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_5_io_deq_bits_extra_id)
  );
  Queue_48 Queue_6 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h6),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h6 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_6_io_enq_ready),
    .io_deq_valid                (_Queue_6_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_6_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_6_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_6_io_deq_bits_extra_id)
  );
  Queue_48 Queue_7 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h7),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h7 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_7_io_enq_ready),
    .io_deq_valid                (_Queue_7_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_7_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_7_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_7_io_deq_bits_extra_id)
  );
  Queue_48 Queue_8 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h8),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h8 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_8_io_enq_ready),
    .io_deq_valid                (_Queue_8_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_8_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_8_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_8_io_deq_bits_extra_id)
  );
  Queue_48 Queue_9 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'h9),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'h9 & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_9_io_enq_ready),
    .io_deq_valid                (_Queue_9_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_9_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_9_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_9_io_deq_bits_extra_id)
  );
  Queue_48 Queue_10 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'hA),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'hA & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_10_io_enq_ready),
    .io_deq_valid                (_Queue_10_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_10_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_10_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_10_io_deq_bits_extra_id)
  );
  Queue_48 Queue_11 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'hB),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'hB & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_11_io_enq_ready),
    .io_deq_valid                (_Queue_11_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_11_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_11_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_11_io_deq_bits_extra_id)
  );
  Queue_48 Queue_12 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'hC),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'hC & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_12_io_enq_ready),
    .io_deq_valid                (_Queue_12_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_12_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_12_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_12_io_deq_bits_extra_id)
  );
  Queue_48 Queue_13 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'hD),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'hD & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_13_io_enq_ready),
    .io_deq_valid                (_Queue_13_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_13_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_13_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_13_io_deq_bits_extra_id)
  );
  Queue_48 Queue_14 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & auto_in_ar_bits_id == 4'hE),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready
      (_T_80 & auto_out_r_bits_id == 4'hE & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_14_io_enq_ready),
    .io_deq_valid                (_Queue_14_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_14_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_14_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_14_io_deq_bits_extra_id)
  );
  Queue_48 Queue_15 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_83 & (&auto_in_ar_bits_id)),
    .io_enq_bits_tl_state_size   (auto_in_ar_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_ar_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_ar_bits_echo_extra_id),
    .io_deq_ready                (_T_80 & (&auto_out_r_bits_id) & auto_out_r_bits_last),
    .io_enq_ready                (_Queue_15_io_enq_ready),
    .io_deq_valid                (_Queue_15_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_15_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_15_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_15_io_deq_bits_extra_id)
  );
  Queue_48 Queue_16 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h0),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h0),
    .io_enq_ready                (_Queue_16_io_enq_ready),
    .io_deq_valid                (_Queue_16_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_16_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_16_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_16_io_deq_bits_extra_id)
  );
  Queue_48 Queue_17 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h1),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h1),
    .io_enq_ready                (_Queue_17_io_enq_ready),
    .io_deq_valid                (_Queue_17_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_17_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_17_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_17_io_deq_bits_extra_id)
  );
  Queue_48 Queue_18 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h2),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h2),
    .io_enq_ready                (_Queue_18_io_enq_ready),
    .io_deq_valid                (_Queue_18_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_18_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_18_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_18_io_deq_bits_extra_id)
  );
  Queue_48 Queue_19 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h3),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h3),
    .io_enq_ready                (_Queue_19_io_enq_ready),
    .io_deq_valid                (_Queue_19_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_19_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_19_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_19_io_deq_bits_extra_id)
  );
  Queue_48 Queue_20 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h4),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h4),
    .io_enq_ready                (_Queue_20_io_enq_ready),
    .io_deq_valid                (_Queue_20_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_20_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_20_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_20_io_deq_bits_extra_id)
  );
  Queue_48 Queue_21 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h5),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h5),
    .io_enq_ready                (_Queue_21_io_enq_ready),
    .io_deq_valid                (_Queue_21_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_21_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_21_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_21_io_deq_bits_extra_id)
  );
  Queue_48 Queue_22 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h6),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h6),
    .io_enq_ready                (_Queue_22_io_enq_ready),
    .io_deq_valid                (_Queue_22_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_22_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_22_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_22_io_deq_bits_extra_id)
  );
  Queue_48 Queue_23 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h7),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h7),
    .io_enq_ready                (_Queue_23_io_enq_ready),
    .io_deq_valid                (_Queue_23_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_23_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_23_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_23_io_deq_bits_extra_id)
  );
  Queue_48 Queue_24 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h8),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h8),
    .io_enq_ready                (_Queue_24_io_enq_ready),
    .io_deq_valid                (_Queue_24_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_24_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_24_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_24_io_deq_bits_extra_id)
  );
  Queue_48 Queue_25 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'h9),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'h9),
    .io_enq_ready                (_Queue_25_io_enq_ready),
    .io_deq_valid                (_Queue_25_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_25_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_25_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_25_io_deq_bits_extra_id)
  );
  Queue_48 Queue_26 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'hA),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'hA),
    .io_enq_ready                (_Queue_26_io_enq_ready),
    .io_deq_valid                (_Queue_26_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_26_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_26_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_26_io_deq_bits_extra_id)
  );
  Queue_48 Queue_27 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'hB),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'hB),
    .io_enq_ready                (_Queue_27_io_enq_ready),
    .io_deq_valid                (_Queue_27_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_27_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_27_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_27_io_deq_bits_extra_id)
  );
  Queue_48 Queue_28 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'hC),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'hC),
    .io_enq_ready                (_Queue_28_io_enq_ready),
    .io_deq_valid                (_Queue_28_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_28_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_28_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_28_io_deq_bits_extra_id)
  );
  Queue_48 Queue_29 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'hD),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'hD),
    .io_enq_ready                (_Queue_29_io_enq_ready),
    .io_deq_valid                (_Queue_29_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_29_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_29_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_29_io_deq_bits_extra_id)
  );
  Queue_48 Queue_30 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & auto_in_aw_bits_id == 4'hE),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & auto_out_b_bits_id == 4'hE),
    .io_enq_ready                (_Queue_30_io_enq_ready),
    .io_deq_valid                (_Queue_30_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_30_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_30_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_30_io_deq_bits_extra_id)
  );
  Queue_48 Queue_31 (
    .clock                       (clock),
    .reset                       (reset),
    .io_enq_valid                (_T_152 & (&auto_in_aw_bits_id)),
    .io_enq_bits_tl_state_size   (auto_in_aw_bits_echo_tl_state_size),
    .io_enq_bits_tl_state_source (auto_in_aw_bits_echo_tl_state_source),
    .io_enq_bits_extra_id        (auto_in_aw_bits_echo_extra_id),
    .io_deq_ready                (_T_150 & (&auto_out_b_bits_id)),
    .io_enq_ready                (_Queue_31_io_enq_ready),
    .io_deq_valid                (_Queue_31_io_deq_valid),
    .io_deq_bits_tl_state_size   (_Queue_31_io_deq_bits_tl_state_size),
    .io_deq_bits_tl_state_source (_Queue_31_io_deq_bits_tl_state_source),
    .io_deq_bits_extra_id        (_Queue_31_io_deq_bits_extra_id)
  );
  assign auto_in_aw_ready = auto_out_aw_ready & casez_tmp_4;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = auto_out_b_bits_id;
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = casez_tmp_6;
  assign auto_in_b_bits_echo_tl_state_source = casez_tmp_7;
  assign auto_in_b_bits_echo_extra_id = casez_tmp_8;
  assign auto_in_ar_ready = auto_out_ar_ready & casez_tmp;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = auto_out_r_bits_id;
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = casez_tmp_1;
  assign auto_in_r_bits_echo_tl_state_source = casez_tmp_2;
  assign auto_in_r_bits_echo_extra_id = casez_tmp_3;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid & casez_tmp_4;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id;
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid & casez_tmp;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id;
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module AXI4IdIndexer_2(
  input         auto_in_aw_valid,
  input  [7:0]  auto_in_aw_bits_id,
  input  [31:0] auto_in_aw_bits_addr,
  input  [7:0]  auto_in_aw_bits_len,
  input  [2:0]  auto_in_aw_bits_size,
  input  [1:0]  auto_in_aw_bits_burst,
  input         auto_in_aw_bits_lock,
  input  [3:0]  auto_in_aw_bits_cache,
  input  [2:0]  auto_in_aw_bits_prot,
  input  [3:0]  auto_in_aw_bits_qos,
                auto_in_aw_bits_echo_tl_state_size,
  input  [7:0]  auto_in_aw_bits_echo_tl_state_source,
  input         auto_in_w_valid,
  input  [63:0] auto_in_w_bits_data,
  input  [7:0]  auto_in_w_bits_strb,
  input         auto_in_w_bits_last,
                auto_in_b_ready,
                auto_in_ar_valid,
  input  [7:0]  auto_in_ar_bits_id,
  input  [31:0] auto_in_ar_bits_addr,
  input  [7:0]  auto_in_ar_bits_len,
  input  [2:0]  auto_in_ar_bits_size,
  input  [1:0]  auto_in_ar_bits_burst,
  input         auto_in_ar_bits_lock,
  input  [3:0]  auto_in_ar_bits_cache,
  input  [2:0]  auto_in_ar_bits_prot,
  input  [3:0]  auto_in_ar_bits_qos,
                auto_in_ar_bits_echo_tl_state_size,
  input  [7:0]  auto_in_ar_bits_echo_tl_state_source,
  input         auto_in_r_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [3:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [7:0]  auto_out_b_bits_echo_tl_state_source,
  input  [3:0]  auto_out_b_bits_echo_extra_id,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [3:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [7:0]  auto_out_r_bits_echo_tl_state_source,
  input  [3:0]  auto_out_r_bits_echo_extra_id,
  input         auto_out_r_bits_last,
  output        auto_in_aw_ready,
                auto_in_w_ready,
                auto_in_b_valid,
  output [7:0]  auto_in_b_bits_id,
  output [1:0]  auto_in_b_bits_resp,
  output [3:0]  auto_in_b_bits_echo_tl_state_size,
  output [7:0]  auto_in_b_bits_echo_tl_state_source,
  output        auto_in_ar_ready,
                auto_in_r_valid,
  output [7:0]  auto_in_r_bits_id,
  output [63:0] auto_in_r_bits_data,
  output [1:0]  auto_in_r_bits_resp,
  output [3:0]  auto_in_r_bits_echo_tl_state_size,
  output [7:0]  auto_in_r_bits_echo_tl_state_source,
  output        auto_in_r_bits_last,
                auto_out_aw_valid,
  output [3:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [7:0]  auto_out_aw_bits_echo_tl_state_source,
  output [3:0]  auto_out_aw_bits_echo_extra_id,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [3:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [7:0]  auto_out_ar_bits_echo_tl_state_source,
  output [3:0]  auto_out_ar_bits_echo_extra_id,
  output        auto_out_r_ready
);

  assign auto_in_aw_ready = auto_out_aw_ready;
  assign auto_in_w_ready = auto_out_w_ready;
  assign auto_in_b_valid = auto_out_b_valid;
  assign auto_in_b_bits_id = {auto_out_b_bits_echo_extra_id, auto_out_b_bits_id};
  assign auto_in_b_bits_resp = auto_out_b_bits_resp;
  assign auto_in_b_bits_echo_tl_state_size = auto_out_b_bits_echo_tl_state_size;
  assign auto_in_b_bits_echo_tl_state_source = auto_out_b_bits_echo_tl_state_source;
  assign auto_in_ar_ready = auto_out_ar_ready;
  assign auto_in_r_valid = auto_out_r_valid;
  assign auto_in_r_bits_id = {auto_out_r_bits_echo_extra_id, auto_out_r_bits_id};
  assign auto_in_r_bits_data = auto_out_r_bits_data;
  assign auto_in_r_bits_resp = auto_out_r_bits_resp;
  assign auto_in_r_bits_echo_tl_state_size = auto_out_r_bits_echo_tl_state_size;
  assign auto_in_r_bits_echo_tl_state_source = auto_out_r_bits_echo_tl_state_source;
  assign auto_in_r_bits_last = auto_out_r_bits_last;
  assign auto_out_aw_valid = auto_in_aw_valid;
  assign auto_out_aw_bits_id = auto_in_aw_bits_id[3:0];
  assign auto_out_aw_bits_addr = auto_in_aw_bits_addr;
  assign auto_out_aw_bits_len = auto_in_aw_bits_len;
  assign auto_out_aw_bits_size = auto_in_aw_bits_size;
  assign auto_out_aw_bits_burst = auto_in_aw_bits_burst;
  assign auto_out_aw_bits_lock = auto_in_aw_bits_lock;
  assign auto_out_aw_bits_cache = auto_in_aw_bits_cache;
  assign auto_out_aw_bits_prot = auto_in_aw_bits_prot;
  assign auto_out_aw_bits_qos = auto_in_aw_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size = auto_in_aw_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source = auto_in_aw_bits_echo_tl_state_source;
  assign auto_out_aw_bits_echo_extra_id = auto_in_aw_bits_id[7:4];
  assign auto_out_w_valid = auto_in_w_valid;
  assign auto_out_w_bits_data = auto_in_w_bits_data;
  assign auto_out_w_bits_strb = auto_in_w_bits_strb;
  assign auto_out_w_bits_last = auto_in_w_bits_last;
  assign auto_out_b_ready = auto_in_b_ready;
  assign auto_out_ar_valid = auto_in_ar_valid;
  assign auto_out_ar_bits_id = auto_in_ar_bits_id[3:0];
  assign auto_out_ar_bits_addr = auto_in_ar_bits_addr;
  assign auto_out_ar_bits_len = auto_in_ar_bits_len;
  assign auto_out_ar_bits_size = auto_in_ar_bits_size;
  assign auto_out_ar_bits_burst = auto_in_ar_bits_burst;
  assign auto_out_ar_bits_lock = auto_in_ar_bits_lock;
  assign auto_out_ar_bits_cache = auto_in_ar_bits_cache;
  assign auto_out_ar_bits_prot = auto_in_ar_bits_prot;
  assign auto_out_ar_bits_qos = auto_in_ar_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size = auto_in_ar_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source = auto_in_ar_bits_echo_tl_state_source;
  assign auto_out_ar_bits_echo_extra_id = auto_in_ar_bits_id[7:4];
  assign auto_out_r_ready = auto_in_r_ready;
endmodule

module Queue_81(
  input         clock,
                reset,
                io_enq_valid,
  input  [7:0]  io_enq_bits_id,
  input  [31:0] io_enq_bits_addr,
  input  [7:0]  io_enq_bits_len,
  input  [2:0]  io_enq_bits_size,
  input  [3:0]  io_enq_bits_echo_tl_state_size,
  input  [7:0]  io_enq_bits_echo_tl_state_source,
  input         io_enq_bits_wen,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [7:0]  io_deq_bits_id,
  output [31:0] io_deq_bits_addr,
  output [7:0]  io_deq_bits_len,
  output [2:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_burst,
  output        io_deq_bits_lock,
  output [3:0]  io_deq_bits_cache,
  output [2:0]  io_deq_bits_prot,
  output [3:0]  io_deq_bits_qos,
                io_deq_bits_echo_tl_state_size,
  output [7:0]  io_deq_bits_echo_tl_state_source,
  output        io_deq_bits_wen
);

  wire _io_enq_ready_output;
  reg  maybe_full;
  wire do_enq = _io_enq_ready_output & io_enq_valid;
  assign _io_enq_ready_output = io_deq_ready | ~maybe_full;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_strb_combMem ram_id_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_id),
    .R0_data (io_deq_bits_id)
  );
  ram_addr_combMem_1 ram_addr_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_addr),
    .R0_data (io_deq_bits_addr)
  );
  ram_strb_combMem ram_len_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_len),
    .R0_data (io_deq_bits_len)
  );
  ram_id_combMem ram_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem ram_burst_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (2'h1),
    .R0_data (io_deq_bits_burst)
  );
  ram_last_combMem ram_lock_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (1'h0),
    .R0_data (io_deq_bits_lock)
  );
  ram_tl_state_size_combMem ram_cache_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (4'h0),
    .R0_data (io_deq_bits_cache)
  );
  ram_id_combMem ram_prot_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (3'h2),
    .R0_data (io_deq_bits_prot)
  );
  ram_tl_state_size_combMem ram_qos_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (4'h0),
    .R0_data (io_deq_bits_qos)
  );
  ram_tl_state_size_combMem ram_echo_tl_state_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_size),
    .R0_data (io_deq_bits_echo_tl_state_size)
  );
  ram_strb_combMem ram_echo_tl_state_source_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_echo_tl_state_source),
    .R0_data (io_deq_bits_echo_tl_state_source)
  );
  ram_last_combMem ram_wen_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_wen),
    .R0_data (io_deq_bits_wen)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_deq_valid = maybe_full;
endmodule

module TLToAXI4_1(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_size,
  input  [7:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_aw_ready,
                auto_out_w_ready,
                auto_out_b_valid,
  input  [7:0]  auto_out_b_bits_id,
  input  [1:0]  auto_out_b_bits_resp,
  input  [3:0]  auto_out_b_bits_echo_tl_state_size,
  input  [7:0]  auto_out_b_bits_echo_tl_state_source,
  input         auto_out_ar_ready,
                auto_out_r_valid,
  input  [7:0]  auto_out_r_bits_id,
  input  [63:0] auto_out_r_bits_data,
  input  [1:0]  auto_out_r_bits_resp,
  input  [3:0]  auto_out_r_bits_echo_tl_state_size,
  input  [7:0]  auto_out_r_bits_echo_tl_state_source,
  input         auto_out_r_bits_last,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
                auto_in_d_bits_size,
  output [7:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_aw_valid,
  output [7:0]  auto_out_aw_bits_id,
  output [31:0] auto_out_aw_bits_addr,
  output [7:0]  auto_out_aw_bits_len,
  output [2:0]  auto_out_aw_bits_size,
  output [1:0]  auto_out_aw_bits_burst,
  output        auto_out_aw_bits_lock,
  output [3:0]  auto_out_aw_bits_cache,
  output [2:0]  auto_out_aw_bits_prot,
  output [3:0]  auto_out_aw_bits_qos,
                auto_out_aw_bits_echo_tl_state_size,
  output [7:0]  auto_out_aw_bits_echo_tl_state_source,
  output        auto_out_w_valid,
  output [63:0] auto_out_w_bits_data,
  output [7:0]  auto_out_w_bits_strb,
  output        auto_out_w_bits_last,
                auto_out_b_ready,
                auto_out_ar_valid,
  output [7:0]  auto_out_ar_bits_id,
  output [31:0] auto_out_ar_bits_addr,
  output [7:0]  auto_out_ar_bits_len,
  output [2:0]  auto_out_ar_bits_size,
  output [1:0]  auto_out_ar_bits_burst,
  output        auto_out_ar_bits_lock,
  output [3:0]  auto_out_ar_bits_cache,
  output [2:0]  auto_out_ar_bits_prot,
  output [3:0]  auto_out_ar_bits_qos,
                auto_out_ar_bits_echo_tl_state_size,
  output [7:0]  auto_out_ar_bits_echo_tl_state_source,
  output        auto_out_r_ready
);

  reg         count_256;
  reg         count_255;
  reg         count_254;
  reg         count_253;
  reg         count_252;
  reg         count_251;
  reg         count_250;
  reg         count_249;
  reg         count_248;
  reg         count_247;
  reg         count_246;
  reg         count_245;
  reg         count_244;
  reg         count_243;
  reg         count_242;
  reg         count_241;
  reg         count_240;
  reg         count_239;
  reg         count_238;
  reg         count_237;
  reg         count_236;
  reg         count_235;
  reg         count_234;
  reg         count_233;
  reg         count_232;
  reg         count_231;
  reg         count_230;
  reg         count_229;
  reg         count_228;
  reg         count_227;
  reg         count_226;
  reg         count_225;
  reg         count_224;
  reg         count_223;
  reg         count_222;
  reg         count_221;
  reg         count_220;
  reg         count_219;
  reg         count_218;
  reg         count_217;
  reg         count_216;
  reg         count_215;
  reg         count_214;
  reg         count_213;
  reg         count_212;
  reg         count_211;
  reg         count_210;
  reg         count_209;
  reg         count_208;
  reg         count_207;
  reg         count_206;
  reg         count_205;
  reg         count_204;
  reg         count_203;
  reg         count_202;
  reg         count_201;
  reg         count_200;
  reg         count_199;
  reg         count_198;
  reg         count_197;
  reg         count_196;
  reg         count_195;
  reg         count_194;
  reg         count_193;
  reg         count_192;
  reg         count_191;
  reg         count_190;
  reg         count_189;
  reg         count_188;
  reg         count_187;
  reg         count_186;
  reg         count_185;
  reg         count_184;
  reg         count_183;
  reg         count_182;
  reg         count_181;
  reg         count_180;
  reg         count_179;
  reg         count_178;
  reg         count_177;
  reg         count_176;
  reg         count_175;
  reg         count_174;
  reg         count_173;
  reg         count_172;
  reg         count_171;
  reg         count_170;
  reg         count_169;
  reg         count_168;
  reg         count_167;
  reg         count_166;
  reg         count_165;
  reg         count_164;
  reg         count_163;
  reg         count_162;
  reg         count_161;
  reg         count_160;
  reg         count_159;
  reg         count_158;
  reg         count_157;
  reg         count_156;
  reg         count_155;
  reg         count_154;
  reg         count_153;
  reg         count_152;
  reg         count_151;
  reg         count_150;
  reg         count_149;
  reg         count_148;
  reg         count_147;
  reg         count_146;
  reg         count_145;
  reg         count_144;
  reg         count_143;
  reg         count_142;
  reg         count_141;
  reg         count_140;
  reg         count_139;
  reg         count_138;
  reg         count_137;
  reg         count_136;
  reg         count_135;
  reg         count_134;
  reg         count_133;
  reg         count_132;
  reg         count_131;
  reg         count_130;
  reg         count_129;
  reg         count_128;
  reg         count_127;
  reg         count_126;
  reg         count_125;
  reg         count_124;
  reg         count_123;
  reg         count_122;
  reg         count_121;
  reg         count_120;
  reg         count_119;
  reg         count_118;
  reg         count_117;
  reg         count_116;
  reg         count_115;
  reg         count_114;
  reg         count_113;
  reg         count_112;
  reg         count_111;
  reg         count_110;
  reg         count_109;
  reg         count_108;
  reg         count_107;
  reg         count_106;
  reg         count_105;
  reg         count_104;
  reg         count_103;
  reg         count_102;
  reg         count_101;
  reg         count_100;
  reg         count_99;
  reg         count_98;
  reg         count_97;
  reg         count_96;
  reg         count_95;
  reg         count_94;
  reg         count_93;
  reg         count_92;
  reg         count_91;
  reg         count_90;
  reg         count_89;
  reg         count_88;
  reg         count_87;
  reg         count_86;
  reg         count_85;
  reg         count_84;
  reg         count_83;
  reg         count_82;
  reg         count_81;
  reg         count_80;
  reg         count_79;
  reg         count_78;
  reg         count_77;
  reg         count_76;
  reg         count_75;
  reg         count_74;
  reg         count_73;
  reg         count_72;
  reg         count_71;
  reg         count_70;
  reg         count_69;
  reg         count_68;
  reg         count_67;
  reg         count_66;
  reg         count_65;
  reg         count_64;
  reg         count_63;
  reg         count_62;
  reg         count_61;
  reg         count_60;
  reg         count_59;
  reg         count_58;
  reg         count_57;
  reg         count_56;
  reg         count_55;
  reg         count_54;
  reg         count_53;
  reg         count_52;
  reg         count_51;
  reg         count_50;
  reg         count_49;
  reg         count_48;
  reg         count_47;
  reg         count_46;
  reg         count_45;
  reg         count_44;
  reg         count_43;
  reg         count_42;
  reg         count_41;
  reg         count_40;
  reg         count_39;
  reg         count_38;
  reg         count_37;
  reg         count_36;
  reg         count_35;
  reg         count_34;
  reg         count_33;
  reg         count_32;
  reg         count_31;
  reg         count_30;
  reg         count_29;
  reg         count_28;
  reg         count_27;
  reg         count_26;
  reg         count_25;
  reg         count_24;
  reg         count_23;
  reg         count_22;
  reg         count_21;
  reg         count_20;
  reg         count_19;
  reg         count_18;
  reg         count_17;
  reg         count_16;
  reg         count_15;
  reg         count_14;
  reg         count_13;
  reg         count_12;
  reg         count_11;
  reg         count_10;
  reg         count_9;
  reg         count_8;
  reg         count_7;
  reg         count_6;
  reg         count_5;
  reg         count_4;
  reg         count_3;
  reg         count_2;
  reg         count_1;
  wire        _queue_arw_deq_q_io_enq_ready;
  wire        _queue_arw_deq_q_io_deq_valid;
  wire [7:0]  _queue_arw_deq_q_io_deq_bits_id;
  wire [31:0] _queue_arw_deq_q_io_deq_bits_addr;
  wire [7:0]  _queue_arw_deq_q_io_deq_bits_len;
  wire [2:0]  _queue_arw_deq_q_io_deq_bits_size;
  wire [1:0]  _queue_arw_deq_q_io_deq_bits_burst;
  wire        _queue_arw_deq_q_io_deq_bits_lock;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_cache;
  wire [2:0]  _queue_arw_deq_q_io_deq_bits_prot;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_qos;
  wire [3:0]  _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  wire [7:0]  _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  wire        _queue_arw_deq_q_io_deq_bits_wen;
  wire        _nodeOut_w_deq_q_io_enq_ready;
  reg  [7:0]  casez_tmp;
  reg         casez_tmp_0;
  wire [12:0] _beats1_decode_T_1 = 13'h3F << auto_in_a_bits_size;
  reg  [2:0]  counter;
  wire        a_first = counter == 3'h0;
  wire        out_w_bits_last =
    counter == 3'h1
    | (auto_in_a_bits_opcode[2] ? 3'h0 : ~(_beats1_decode_T_1[5:3])) == 3'h0;
  reg         doneAW;
  always @(*) begin
    casez (auto_in_a_bits_source)
      8'b00000000:
        casez_tmp = 8'h0;
      8'b00000001:
        casez_tmp = 8'h1;
      8'b00000010:
        casez_tmp = 8'h2;
      8'b00000011:
        casez_tmp = 8'h3;
      8'b00000100:
        casez_tmp = 8'h4;
      8'b00000101:
        casez_tmp = 8'h5;
      8'b00000110:
        casez_tmp = 8'h6;
      8'b00000111:
        casez_tmp = 8'h7;
      8'b00001000:
        casez_tmp = 8'h8;
      8'b00001001:
        casez_tmp = 8'h9;
      8'b00001010:
        casez_tmp = 8'hA;
      8'b00001011:
        casez_tmp = 8'hB;
      8'b00001100:
        casez_tmp = 8'hC;
      8'b00001101:
        casez_tmp = 8'hD;
      8'b00001110:
        casez_tmp = 8'hE;
      8'b00001111:
        casez_tmp = 8'hF;
      8'b00010000:
        casez_tmp = 8'h10;
      8'b00010001:
        casez_tmp = 8'h11;
      8'b00010010:
        casez_tmp = 8'h12;
      8'b00010011:
        casez_tmp = 8'h13;
      8'b00010100:
        casez_tmp = 8'h14;
      8'b00010101:
        casez_tmp = 8'h15;
      8'b00010110:
        casez_tmp = 8'h16;
      8'b00010111:
        casez_tmp = 8'h17;
      8'b00011000:
        casez_tmp = 8'h18;
      8'b00011001:
        casez_tmp = 8'h19;
      8'b00011010:
        casez_tmp = 8'h1A;
      8'b00011011:
        casez_tmp = 8'h1B;
      8'b00011100:
        casez_tmp = 8'h1C;
      8'b00011101:
        casez_tmp = 8'h1D;
      8'b00011110:
        casez_tmp = 8'h1E;
      8'b00011111:
        casez_tmp = 8'h1F;
      8'b00100000:
        casez_tmp = 8'h20;
      8'b00100001:
        casez_tmp = 8'h21;
      8'b00100010:
        casez_tmp = 8'h22;
      8'b00100011:
        casez_tmp = 8'h23;
      8'b00100100:
        casez_tmp = 8'h24;
      8'b00100101:
        casez_tmp = 8'h25;
      8'b00100110:
        casez_tmp = 8'h26;
      8'b00100111:
        casez_tmp = 8'h27;
      8'b00101000:
        casez_tmp = 8'h28;
      8'b00101001:
        casez_tmp = 8'h29;
      8'b00101010:
        casez_tmp = 8'h2A;
      8'b00101011:
        casez_tmp = 8'h2B;
      8'b00101100:
        casez_tmp = 8'h2C;
      8'b00101101:
        casez_tmp = 8'h2D;
      8'b00101110:
        casez_tmp = 8'h2E;
      8'b00101111:
        casez_tmp = 8'h2F;
      8'b00110000:
        casez_tmp = 8'h30;
      8'b00110001:
        casez_tmp = 8'h31;
      8'b00110010:
        casez_tmp = 8'h32;
      8'b00110011:
        casez_tmp = 8'h33;
      8'b00110100:
        casez_tmp = 8'h34;
      8'b00110101:
        casez_tmp = 8'h35;
      8'b00110110:
        casez_tmp = 8'h36;
      8'b00110111:
        casez_tmp = 8'h37;
      8'b00111000:
        casez_tmp = 8'h38;
      8'b00111001:
        casez_tmp = 8'h39;
      8'b00111010:
        casez_tmp = 8'h3A;
      8'b00111011:
        casez_tmp = 8'h3B;
      8'b00111100:
        casez_tmp = 8'h3C;
      8'b00111101:
        casez_tmp = 8'h3D;
      8'b00111110:
        casez_tmp = 8'h3E;
      8'b00111111:
        casez_tmp = 8'h3F;
      8'b01000000:
        casez_tmp = 8'h40;
      8'b01000001:
        casez_tmp = 8'h41;
      8'b01000010:
        casez_tmp = 8'h42;
      8'b01000011:
        casez_tmp = 8'h43;
      8'b01000100:
        casez_tmp = 8'h44;
      8'b01000101:
        casez_tmp = 8'h45;
      8'b01000110:
        casez_tmp = 8'h46;
      8'b01000111:
        casez_tmp = 8'h47;
      8'b01001000:
        casez_tmp = 8'h48;
      8'b01001001:
        casez_tmp = 8'h49;
      8'b01001010:
        casez_tmp = 8'h4A;
      8'b01001011:
        casez_tmp = 8'h4B;
      8'b01001100:
        casez_tmp = 8'h4C;
      8'b01001101:
        casez_tmp = 8'h4D;
      8'b01001110:
        casez_tmp = 8'h4E;
      8'b01001111:
        casez_tmp = 8'h4F;
      8'b01010000:
        casez_tmp = 8'h50;
      8'b01010001:
        casez_tmp = 8'h51;
      8'b01010010:
        casez_tmp = 8'h52;
      8'b01010011:
        casez_tmp = 8'h53;
      8'b01010100:
        casez_tmp = 8'h54;
      8'b01010101:
        casez_tmp = 8'h55;
      8'b01010110:
        casez_tmp = 8'h56;
      8'b01010111:
        casez_tmp = 8'h57;
      8'b01011000:
        casez_tmp = 8'h58;
      8'b01011001:
        casez_tmp = 8'h59;
      8'b01011010:
        casez_tmp = 8'h5A;
      8'b01011011:
        casez_tmp = 8'h5B;
      8'b01011100:
        casez_tmp = 8'h5C;
      8'b01011101:
        casez_tmp = 8'h5D;
      8'b01011110:
        casez_tmp = 8'h5E;
      8'b01011111:
        casez_tmp = 8'h5F;
      8'b01100000:
        casez_tmp = 8'h60;
      8'b01100001:
        casez_tmp = 8'h61;
      8'b01100010:
        casez_tmp = 8'h62;
      8'b01100011:
        casez_tmp = 8'h63;
      8'b01100100:
        casez_tmp = 8'h64;
      8'b01100101:
        casez_tmp = 8'h65;
      8'b01100110:
        casez_tmp = 8'h66;
      8'b01100111:
        casez_tmp = 8'h67;
      8'b01101000:
        casez_tmp = 8'h68;
      8'b01101001:
        casez_tmp = 8'h69;
      8'b01101010:
        casez_tmp = 8'h6A;
      8'b01101011:
        casez_tmp = 8'h6B;
      8'b01101100:
        casez_tmp = 8'h6C;
      8'b01101101:
        casez_tmp = 8'h6D;
      8'b01101110:
        casez_tmp = 8'h6E;
      8'b01101111:
        casez_tmp = 8'h6F;
      8'b01110000:
        casez_tmp = 8'h70;
      8'b01110001:
        casez_tmp = 8'h71;
      8'b01110010:
        casez_tmp = 8'h72;
      8'b01110011:
        casez_tmp = 8'h73;
      8'b01110100:
        casez_tmp = 8'h74;
      8'b01110101:
        casez_tmp = 8'h75;
      8'b01110110:
        casez_tmp = 8'h76;
      8'b01110111:
        casez_tmp = 8'h77;
      8'b01111000:
        casez_tmp = 8'h78;
      8'b01111001:
        casez_tmp = 8'h79;
      8'b01111010:
        casez_tmp = 8'h7A;
      8'b01111011:
        casez_tmp = 8'h7B;
      8'b01111100:
        casez_tmp = 8'h7C;
      8'b01111101:
        casez_tmp = 8'h7D;
      8'b01111110:
        casez_tmp = 8'h7E;
      8'b01111111:
        casez_tmp = 8'h7F;
      8'b10000000:
        casez_tmp = 8'h80;
      8'b10000001:
        casez_tmp = 8'h81;
      8'b10000010:
        casez_tmp = 8'h82;
      8'b10000011:
        casez_tmp = 8'h83;
      8'b10000100:
        casez_tmp = 8'h84;
      8'b10000101:
        casez_tmp = 8'h85;
      8'b10000110:
        casez_tmp = 8'h86;
      8'b10000111:
        casez_tmp = 8'h87;
      8'b10001000:
        casez_tmp = 8'h88;
      8'b10001001:
        casez_tmp = 8'h89;
      8'b10001010:
        casez_tmp = 8'h8A;
      8'b10001011:
        casez_tmp = 8'h8B;
      8'b10001100:
        casez_tmp = 8'h8C;
      8'b10001101:
        casez_tmp = 8'h8D;
      8'b10001110:
        casez_tmp = 8'h8E;
      8'b10001111:
        casez_tmp = 8'h8F;
      8'b10010000:
        casez_tmp = 8'h90;
      8'b10010001:
        casez_tmp = 8'h91;
      8'b10010010:
        casez_tmp = 8'h92;
      8'b10010011:
        casez_tmp = 8'h93;
      8'b10010100:
        casez_tmp = 8'h94;
      8'b10010101:
        casez_tmp = 8'h95;
      8'b10010110:
        casez_tmp = 8'h96;
      8'b10010111:
        casez_tmp = 8'h97;
      8'b10011000:
        casez_tmp = 8'h98;
      8'b10011001:
        casez_tmp = 8'h99;
      8'b10011010:
        casez_tmp = 8'h9A;
      8'b10011011:
        casez_tmp = 8'h9B;
      8'b10011100:
        casez_tmp = 8'h9C;
      8'b10011101:
        casez_tmp = 8'h9D;
      8'b10011110:
        casez_tmp = 8'h9E;
      8'b10011111:
        casez_tmp = 8'h9F;
      8'b10100000:
        casez_tmp = 8'hA0;
      8'b10100001:
        casez_tmp = 8'hA1;
      8'b10100010:
        casez_tmp = 8'hA2;
      8'b10100011:
        casez_tmp = 8'hA3;
      8'b10100100:
        casez_tmp = 8'hA4;
      8'b10100101:
        casez_tmp = 8'hA5;
      8'b10100110:
        casez_tmp = 8'hA6;
      8'b10100111:
        casez_tmp = 8'hA7;
      8'b10101000:
        casez_tmp = 8'hA8;
      8'b10101001:
        casez_tmp = 8'hA9;
      8'b10101010:
        casez_tmp = 8'hAA;
      8'b10101011:
        casez_tmp = 8'hAB;
      8'b10101100:
        casez_tmp = 8'hAC;
      8'b10101101:
        casez_tmp = 8'hAD;
      8'b10101110:
        casez_tmp = 8'hAE;
      8'b10101111:
        casez_tmp = 8'hAF;
      8'b10110000:
        casez_tmp = 8'hB0;
      8'b10110001:
        casez_tmp = 8'hB1;
      8'b10110010:
        casez_tmp = 8'hB2;
      8'b10110011:
        casez_tmp = 8'hB3;
      8'b10110100:
        casez_tmp = 8'hB4;
      8'b10110101:
        casez_tmp = 8'hB5;
      8'b10110110:
        casez_tmp = 8'hB6;
      8'b10110111:
        casez_tmp = 8'hB7;
      8'b10111000:
        casez_tmp = 8'hB8;
      8'b10111001:
        casez_tmp = 8'hB9;
      8'b10111010:
        casez_tmp = 8'hBA;
      8'b10111011:
        casez_tmp = 8'hBB;
      8'b10111100:
        casez_tmp = 8'hBC;
      8'b10111101:
        casez_tmp = 8'hBD;
      8'b10111110:
        casez_tmp = 8'hBE;
      8'b10111111:
        casez_tmp = 8'hBF;
      8'b11000000:
        casez_tmp = 8'hC0;
      8'b11000001:
        casez_tmp = 8'hC1;
      8'b11000010:
        casez_tmp = 8'hC2;
      8'b11000011:
        casez_tmp = 8'hC3;
      8'b11000100:
        casez_tmp = 8'hC4;
      8'b11000101:
        casez_tmp = 8'hC5;
      8'b11000110:
        casez_tmp = 8'hC6;
      8'b11000111:
        casez_tmp = 8'hC7;
      8'b11001000:
        casez_tmp = 8'hC8;
      8'b11001001:
        casez_tmp = 8'hC9;
      8'b11001010:
        casez_tmp = 8'hCA;
      8'b11001011:
        casez_tmp = 8'hCB;
      8'b11001100:
        casez_tmp = 8'hCC;
      8'b11001101:
        casez_tmp = 8'hCD;
      8'b11001110:
        casez_tmp = 8'hCE;
      8'b11001111:
        casez_tmp = 8'hCF;
      8'b11010000:
        casez_tmp = 8'hD0;
      8'b11010001:
        casez_tmp = 8'hD1;
      8'b11010010:
        casez_tmp = 8'hD2;
      8'b11010011:
        casez_tmp = 8'hD3;
      8'b11010100:
        casez_tmp = 8'hD4;
      8'b11010101:
        casez_tmp = 8'hD5;
      8'b11010110:
        casez_tmp = 8'hD6;
      8'b11010111:
        casez_tmp = 8'hD7;
      8'b11011000:
        casez_tmp = 8'hD8;
      8'b11011001:
        casez_tmp = 8'hD9;
      8'b11011010:
        casez_tmp = 8'hDA;
      8'b11011011:
        casez_tmp = 8'hDB;
      8'b11011100:
        casez_tmp = 8'hDC;
      8'b11011101:
        casez_tmp = 8'hDD;
      8'b11011110:
        casez_tmp = 8'hDE;
      8'b11011111:
        casez_tmp = 8'hDF;
      8'b11100000:
        casez_tmp = 8'hE0;
      8'b11100001:
        casez_tmp = 8'hE1;
      8'b11100010:
        casez_tmp = 8'hE2;
      8'b11100011:
        casez_tmp = 8'hE3;
      8'b11100100:
        casez_tmp = 8'hE4;
      8'b11100101:
        casez_tmp = 8'hE5;
      8'b11100110:
        casez_tmp = 8'hE6;
      8'b11100111:
        casez_tmp = 8'hE7;
      8'b11101000:
        casez_tmp = 8'hE8;
      8'b11101001:
        casez_tmp = 8'hE9;
      8'b11101010:
        casez_tmp = 8'hEA;
      8'b11101011:
        casez_tmp = 8'hEB;
      8'b11101100:
        casez_tmp = 8'hEC;
      8'b11101101:
        casez_tmp = 8'hED;
      8'b11101110:
        casez_tmp = 8'hEE;
      8'b11101111:
        casez_tmp = 8'hEF;
      8'b11110000:
        casez_tmp = 8'hF0;
      8'b11110001:
        casez_tmp = 8'hF1;
      8'b11110010:
        casez_tmp = 8'hF2;
      8'b11110011:
        casez_tmp = 8'hF3;
      8'b11110100:
        casez_tmp = 8'hF4;
      8'b11110101:
        casez_tmp = 8'hF5;
      8'b11110110:
        casez_tmp = 8'hF6;
      8'b11110111:
        casez_tmp = 8'hF7;
      8'b11111000:
        casez_tmp = 8'hF8;
      8'b11111001:
        casez_tmp = 8'hF9;
      8'b11111010:
        casez_tmp = 8'hFA;
      8'b11111011:
        casez_tmp = 8'hFB;
      8'b11111100:
        casez_tmp = 8'hFC;
      8'b11111101:
        casez_tmp = 8'hFD;
      8'b11111110:
        casez_tmp = 8'hFE;
      default:
        casez_tmp = 8'hFF;
    endcase
  end // always @(*)
  wire [17:0] _out_arw_bits_len_T_1 = 18'h7FF << auto_in_a_bits_size;
  always @(*) begin
    casez (auto_in_a_bits_source)
      8'b00000000:
        casez_tmp_0 = count_1;
      8'b00000001:
        casez_tmp_0 = count_2;
      8'b00000010:
        casez_tmp_0 = count_3;
      8'b00000011:
        casez_tmp_0 = count_4;
      8'b00000100:
        casez_tmp_0 = count_5;
      8'b00000101:
        casez_tmp_0 = count_6;
      8'b00000110:
        casez_tmp_0 = count_7;
      8'b00000111:
        casez_tmp_0 = count_8;
      8'b00001000:
        casez_tmp_0 = count_9;
      8'b00001001:
        casez_tmp_0 = count_10;
      8'b00001010:
        casez_tmp_0 = count_11;
      8'b00001011:
        casez_tmp_0 = count_12;
      8'b00001100:
        casez_tmp_0 = count_13;
      8'b00001101:
        casez_tmp_0 = count_14;
      8'b00001110:
        casez_tmp_0 = count_15;
      8'b00001111:
        casez_tmp_0 = count_16;
      8'b00010000:
        casez_tmp_0 = count_17;
      8'b00010001:
        casez_tmp_0 = count_18;
      8'b00010010:
        casez_tmp_0 = count_19;
      8'b00010011:
        casez_tmp_0 = count_20;
      8'b00010100:
        casez_tmp_0 = count_21;
      8'b00010101:
        casez_tmp_0 = count_22;
      8'b00010110:
        casez_tmp_0 = count_23;
      8'b00010111:
        casez_tmp_0 = count_24;
      8'b00011000:
        casez_tmp_0 = count_25;
      8'b00011001:
        casez_tmp_0 = count_26;
      8'b00011010:
        casez_tmp_0 = count_27;
      8'b00011011:
        casez_tmp_0 = count_28;
      8'b00011100:
        casez_tmp_0 = count_29;
      8'b00011101:
        casez_tmp_0 = count_30;
      8'b00011110:
        casez_tmp_0 = count_31;
      8'b00011111:
        casez_tmp_0 = count_32;
      8'b00100000:
        casez_tmp_0 = count_33;
      8'b00100001:
        casez_tmp_0 = count_34;
      8'b00100010:
        casez_tmp_0 = count_35;
      8'b00100011:
        casez_tmp_0 = count_36;
      8'b00100100:
        casez_tmp_0 = count_37;
      8'b00100101:
        casez_tmp_0 = count_38;
      8'b00100110:
        casez_tmp_0 = count_39;
      8'b00100111:
        casez_tmp_0 = count_40;
      8'b00101000:
        casez_tmp_0 = count_41;
      8'b00101001:
        casez_tmp_0 = count_42;
      8'b00101010:
        casez_tmp_0 = count_43;
      8'b00101011:
        casez_tmp_0 = count_44;
      8'b00101100:
        casez_tmp_0 = count_45;
      8'b00101101:
        casez_tmp_0 = count_46;
      8'b00101110:
        casez_tmp_0 = count_47;
      8'b00101111:
        casez_tmp_0 = count_48;
      8'b00110000:
        casez_tmp_0 = count_49;
      8'b00110001:
        casez_tmp_0 = count_50;
      8'b00110010:
        casez_tmp_0 = count_51;
      8'b00110011:
        casez_tmp_0 = count_52;
      8'b00110100:
        casez_tmp_0 = count_53;
      8'b00110101:
        casez_tmp_0 = count_54;
      8'b00110110:
        casez_tmp_0 = count_55;
      8'b00110111:
        casez_tmp_0 = count_56;
      8'b00111000:
        casez_tmp_0 = count_57;
      8'b00111001:
        casez_tmp_0 = count_58;
      8'b00111010:
        casez_tmp_0 = count_59;
      8'b00111011:
        casez_tmp_0 = count_60;
      8'b00111100:
        casez_tmp_0 = count_61;
      8'b00111101:
        casez_tmp_0 = count_62;
      8'b00111110:
        casez_tmp_0 = count_63;
      8'b00111111:
        casez_tmp_0 = count_64;
      8'b01000000:
        casez_tmp_0 = count_65;
      8'b01000001:
        casez_tmp_0 = count_66;
      8'b01000010:
        casez_tmp_0 = count_67;
      8'b01000011:
        casez_tmp_0 = count_68;
      8'b01000100:
        casez_tmp_0 = count_69;
      8'b01000101:
        casez_tmp_0 = count_70;
      8'b01000110:
        casez_tmp_0 = count_71;
      8'b01000111:
        casez_tmp_0 = count_72;
      8'b01001000:
        casez_tmp_0 = count_73;
      8'b01001001:
        casez_tmp_0 = count_74;
      8'b01001010:
        casez_tmp_0 = count_75;
      8'b01001011:
        casez_tmp_0 = count_76;
      8'b01001100:
        casez_tmp_0 = count_77;
      8'b01001101:
        casez_tmp_0 = count_78;
      8'b01001110:
        casez_tmp_0 = count_79;
      8'b01001111:
        casez_tmp_0 = count_80;
      8'b01010000:
        casez_tmp_0 = count_81;
      8'b01010001:
        casez_tmp_0 = count_82;
      8'b01010010:
        casez_tmp_0 = count_83;
      8'b01010011:
        casez_tmp_0 = count_84;
      8'b01010100:
        casez_tmp_0 = count_85;
      8'b01010101:
        casez_tmp_0 = count_86;
      8'b01010110:
        casez_tmp_0 = count_87;
      8'b01010111:
        casez_tmp_0 = count_88;
      8'b01011000:
        casez_tmp_0 = count_89;
      8'b01011001:
        casez_tmp_0 = count_90;
      8'b01011010:
        casez_tmp_0 = count_91;
      8'b01011011:
        casez_tmp_0 = count_92;
      8'b01011100:
        casez_tmp_0 = count_93;
      8'b01011101:
        casez_tmp_0 = count_94;
      8'b01011110:
        casez_tmp_0 = count_95;
      8'b01011111:
        casez_tmp_0 = count_96;
      8'b01100000:
        casez_tmp_0 = count_97;
      8'b01100001:
        casez_tmp_0 = count_98;
      8'b01100010:
        casez_tmp_0 = count_99;
      8'b01100011:
        casez_tmp_0 = count_100;
      8'b01100100:
        casez_tmp_0 = count_101;
      8'b01100101:
        casez_tmp_0 = count_102;
      8'b01100110:
        casez_tmp_0 = count_103;
      8'b01100111:
        casez_tmp_0 = count_104;
      8'b01101000:
        casez_tmp_0 = count_105;
      8'b01101001:
        casez_tmp_0 = count_106;
      8'b01101010:
        casez_tmp_0 = count_107;
      8'b01101011:
        casez_tmp_0 = count_108;
      8'b01101100:
        casez_tmp_0 = count_109;
      8'b01101101:
        casez_tmp_0 = count_110;
      8'b01101110:
        casez_tmp_0 = count_111;
      8'b01101111:
        casez_tmp_0 = count_112;
      8'b01110000:
        casez_tmp_0 = count_113;
      8'b01110001:
        casez_tmp_0 = count_114;
      8'b01110010:
        casez_tmp_0 = count_115;
      8'b01110011:
        casez_tmp_0 = count_116;
      8'b01110100:
        casez_tmp_0 = count_117;
      8'b01110101:
        casez_tmp_0 = count_118;
      8'b01110110:
        casez_tmp_0 = count_119;
      8'b01110111:
        casez_tmp_0 = count_120;
      8'b01111000:
        casez_tmp_0 = count_121;
      8'b01111001:
        casez_tmp_0 = count_122;
      8'b01111010:
        casez_tmp_0 = count_123;
      8'b01111011:
        casez_tmp_0 = count_124;
      8'b01111100:
        casez_tmp_0 = count_125;
      8'b01111101:
        casez_tmp_0 = count_126;
      8'b01111110:
        casez_tmp_0 = count_127;
      8'b01111111:
        casez_tmp_0 = count_128;
      8'b10000000:
        casez_tmp_0 = count_129;
      8'b10000001:
        casez_tmp_0 = count_130;
      8'b10000010:
        casez_tmp_0 = count_131;
      8'b10000011:
        casez_tmp_0 = count_132;
      8'b10000100:
        casez_tmp_0 = count_133;
      8'b10000101:
        casez_tmp_0 = count_134;
      8'b10000110:
        casez_tmp_0 = count_135;
      8'b10000111:
        casez_tmp_0 = count_136;
      8'b10001000:
        casez_tmp_0 = count_137;
      8'b10001001:
        casez_tmp_0 = count_138;
      8'b10001010:
        casez_tmp_0 = count_139;
      8'b10001011:
        casez_tmp_0 = count_140;
      8'b10001100:
        casez_tmp_0 = count_141;
      8'b10001101:
        casez_tmp_0 = count_142;
      8'b10001110:
        casez_tmp_0 = count_143;
      8'b10001111:
        casez_tmp_0 = count_144;
      8'b10010000:
        casez_tmp_0 = count_145;
      8'b10010001:
        casez_tmp_0 = count_146;
      8'b10010010:
        casez_tmp_0 = count_147;
      8'b10010011:
        casez_tmp_0 = count_148;
      8'b10010100:
        casez_tmp_0 = count_149;
      8'b10010101:
        casez_tmp_0 = count_150;
      8'b10010110:
        casez_tmp_0 = count_151;
      8'b10010111:
        casez_tmp_0 = count_152;
      8'b10011000:
        casez_tmp_0 = count_153;
      8'b10011001:
        casez_tmp_0 = count_154;
      8'b10011010:
        casez_tmp_0 = count_155;
      8'b10011011:
        casez_tmp_0 = count_156;
      8'b10011100:
        casez_tmp_0 = count_157;
      8'b10011101:
        casez_tmp_0 = count_158;
      8'b10011110:
        casez_tmp_0 = count_159;
      8'b10011111:
        casez_tmp_0 = count_160;
      8'b10100000:
        casez_tmp_0 = count_161;
      8'b10100001:
        casez_tmp_0 = count_162;
      8'b10100010:
        casez_tmp_0 = count_163;
      8'b10100011:
        casez_tmp_0 = count_164;
      8'b10100100:
        casez_tmp_0 = count_165;
      8'b10100101:
        casez_tmp_0 = count_166;
      8'b10100110:
        casez_tmp_0 = count_167;
      8'b10100111:
        casez_tmp_0 = count_168;
      8'b10101000:
        casez_tmp_0 = count_169;
      8'b10101001:
        casez_tmp_0 = count_170;
      8'b10101010:
        casez_tmp_0 = count_171;
      8'b10101011:
        casez_tmp_0 = count_172;
      8'b10101100:
        casez_tmp_0 = count_173;
      8'b10101101:
        casez_tmp_0 = count_174;
      8'b10101110:
        casez_tmp_0 = count_175;
      8'b10101111:
        casez_tmp_0 = count_176;
      8'b10110000:
        casez_tmp_0 = count_177;
      8'b10110001:
        casez_tmp_0 = count_178;
      8'b10110010:
        casez_tmp_0 = count_179;
      8'b10110011:
        casez_tmp_0 = count_180;
      8'b10110100:
        casez_tmp_0 = count_181;
      8'b10110101:
        casez_tmp_0 = count_182;
      8'b10110110:
        casez_tmp_0 = count_183;
      8'b10110111:
        casez_tmp_0 = count_184;
      8'b10111000:
        casez_tmp_0 = count_185;
      8'b10111001:
        casez_tmp_0 = count_186;
      8'b10111010:
        casez_tmp_0 = count_187;
      8'b10111011:
        casez_tmp_0 = count_188;
      8'b10111100:
        casez_tmp_0 = count_189;
      8'b10111101:
        casez_tmp_0 = count_190;
      8'b10111110:
        casez_tmp_0 = count_191;
      8'b10111111:
        casez_tmp_0 = count_192;
      8'b11000000:
        casez_tmp_0 = count_193;
      8'b11000001:
        casez_tmp_0 = count_194;
      8'b11000010:
        casez_tmp_0 = count_195;
      8'b11000011:
        casez_tmp_0 = count_196;
      8'b11000100:
        casez_tmp_0 = count_197;
      8'b11000101:
        casez_tmp_0 = count_198;
      8'b11000110:
        casez_tmp_0 = count_199;
      8'b11000111:
        casez_tmp_0 = count_200;
      8'b11001000:
        casez_tmp_0 = count_201;
      8'b11001001:
        casez_tmp_0 = count_202;
      8'b11001010:
        casez_tmp_0 = count_203;
      8'b11001011:
        casez_tmp_0 = count_204;
      8'b11001100:
        casez_tmp_0 = count_205;
      8'b11001101:
        casez_tmp_0 = count_206;
      8'b11001110:
        casez_tmp_0 = count_207;
      8'b11001111:
        casez_tmp_0 = count_208;
      8'b11010000:
        casez_tmp_0 = count_209;
      8'b11010001:
        casez_tmp_0 = count_210;
      8'b11010010:
        casez_tmp_0 = count_211;
      8'b11010011:
        casez_tmp_0 = count_212;
      8'b11010100:
        casez_tmp_0 = count_213;
      8'b11010101:
        casez_tmp_0 = count_214;
      8'b11010110:
        casez_tmp_0 = count_215;
      8'b11010111:
        casez_tmp_0 = count_216;
      8'b11011000:
        casez_tmp_0 = count_217;
      8'b11011001:
        casez_tmp_0 = count_218;
      8'b11011010:
        casez_tmp_0 = count_219;
      8'b11011011:
        casez_tmp_0 = count_220;
      8'b11011100:
        casez_tmp_0 = count_221;
      8'b11011101:
        casez_tmp_0 = count_222;
      8'b11011110:
        casez_tmp_0 = count_223;
      8'b11011111:
        casez_tmp_0 = count_224;
      8'b11100000:
        casez_tmp_0 = count_225;
      8'b11100001:
        casez_tmp_0 = count_226;
      8'b11100010:
        casez_tmp_0 = count_227;
      8'b11100011:
        casez_tmp_0 = count_228;
      8'b11100100:
        casez_tmp_0 = count_229;
      8'b11100101:
        casez_tmp_0 = count_230;
      8'b11100110:
        casez_tmp_0 = count_231;
      8'b11100111:
        casez_tmp_0 = count_232;
      8'b11101000:
        casez_tmp_0 = count_233;
      8'b11101001:
        casez_tmp_0 = count_234;
      8'b11101010:
        casez_tmp_0 = count_235;
      8'b11101011:
        casez_tmp_0 = count_236;
      8'b11101100:
        casez_tmp_0 = count_237;
      8'b11101101:
        casez_tmp_0 = count_238;
      8'b11101110:
        casez_tmp_0 = count_239;
      8'b11101111:
        casez_tmp_0 = count_240;
      8'b11110000:
        casez_tmp_0 = count_241;
      8'b11110001:
        casez_tmp_0 = count_242;
      8'b11110010:
        casez_tmp_0 = count_243;
      8'b11110011:
        casez_tmp_0 = count_244;
      8'b11110100:
        casez_tmp_0 = count_245;
      8'b11110101:
        casez_tmp_0 = count_246;
      8'b11110110:
        casez_tmp_0 = count_247;
      8'b11110111:
        casez_tmp_0 = count_248;
      8'b11111000:
        casez_tmp_0 = count_249;
      8'b11111001:
        casez_tmp_0 = count_250;
      8'b11111010:
        casez_tmp_0 = count_251;
      8'b11111011:
        casez_tmp_0 = count_252;
      8'b11111100:
        casez_tmp_0 = count_253;
      8'b11111101:
        casez_tmp_0 = count_254;
      8'b11111110:
        casez_tmp_0 = count_255;
      default:
        casez_tmp_0 = count_256;
    endcase
  end // always @(*)
  wire        stall = casez_tmp_0 & a_first;
  wire        _out_w_valid_T_3 = doneAW | _queue_arw_deq_q_io_enq_ready;
  wire        nodeIn_a_ready =
    ~stall
    & (auto_in_a_bits_opcode[2]
         ? _queue_arw_deq_q_io_enq_ready
         : _out_w_valid_T_3 & _nodeOut_w_deq_q_io_enq_ready);
  wire        out_arw_valid =
    ~stall & auto_in_a_valid
    & (auto_in_a_bits_opcode[2] | ~doneAW & _nodeOut_w_deq_q_io_enq_ready);
  reg         r_holds_d;
  reg  [2:0]  b_delay;
  wire        r_wins = auto_out_r_valid & b_delay != 3'h7 | r_holds_d;
  wire        nodeOut_r_ready = auto_in_d_ready & r_wins;
  wire        nodeOut_b_ready = auto_in_d_ready & ~r_wins;
  wire        nodeIn_d_valid = r_wins ? auto_out_r_valid : auto_out_b_valid;
  reg         r_first;
  reg         r_denied_r;
  wire        r_d_denied = r_first ? (&auto_out_r_bits_resp) : r_denied_r;
  wire [7:0]  d_sel_shiftAmount = r_wins ? auto_out_r_bits_id : auto_out_b_bits_id;
  wire        d_last = ~r_wins | auto_out_r_bits_last;
  wire        _inc_T_255 = _queue_arw_deq_q_io_enq_ready & out_arw_valid;
  wire        inc = casez_tmp == 8'h0 & _inc_T_255;
  wire        _dec_T_511 = auto_in_d_ready & nodeIn_d_valid;
  wire        dec = d_sel_shiftAmount == 8'h0 & d_last & _dec_T_511;
  wire        inc_1 = casez_tmp == 8'h1 & _inc_T_255;
  wire        dec_1 = d_sel_shiftAmount == 8'h1 & d_last & _dec_T_511;
  wire        inc_2 = casez_tmp == 8'h2 & _inc_T_255;
  wire        dec_2 = d_sel_shiftAmount == 8'h2 & d_last & _dec_T_511;
  wire        inc_3 = casez_tmp == 8'h3 & _inc_T_255;
  wire        dec_3 = d_sel_shiftAmount == 8'h3 & d_last & _dec_T_511;
  wire        inc_4 = casez_tmp == 8'h4 & _inc_T_255;
  wire        dec_4 = d_sel_shiftAmount == 8'h4 & d_last & _dec_T_511;
  wire        inc_5 = casez_tmp == 8'h5 & _inc_T_255;
  wire        dec_5 = d_sel_shiftAmount == 8'h5 & d_last & _dec_T_511;
  wire        inc_6 = casez_tmp == 8'h6 & _inc_T_255;
  wire        dec_6 = d_sel_shiftAmount == 8'h6 & d_last & _dec_T_511;
  wire        inc_7 = casez_tmp == 8'h7 & _inc_T_255;
  wire        dec_7 = d_sel_shiftAmount == 8'h7 & d_last & _dec_T_511;
  wire        inc_8 = casez_tmp == 8'h8 & _inc_T_255;
  wire        dec_8 = d_sel_shiftAmount == 8'h8 & d_last & _dec_T_511;
  wire        inc_9 = casez_tmp == 8'h9 & _inc_T_255;
  wire        dec_9 = d_sel_shiftAmount == 8'h9 & d_last & _dec_T_511;
  wire        inc_10 = casez_tmp == 8'hA & _inc_T_255;
  wire        dec_10 = d_sel_shiftAmount == 8'hA & d_last & _dec_T_511;
  wire        inc_11 = casez_tmp == 8'hB & _inc_T_255;
  wire        dec_11 = d_sel_shiftAmount == 8'hB & d_last & _dec_T_511;
  wire        inc_12 = casez_tmp == 8'hC & _inc_T_255;
  wire        dec_12 = d_sel_shiftAmount == 8'hC & d_last & _dec_T_511;
  wire        inc_13 = casez_tmp == 8'hD & _inc_T_255;
  wire        dec_13 = d_sel_shiftAmount == 8'hD & d_last & _dec_T_511;
  wire        inc_14 = casez_tmp == 8'hE & _inc_T_255;
  wire        dec_14 = d_sel_shiftAmount == 8'hE & d_last & _dec_T_511;
  wire        inc_15 = casez_tmp == 8'hF & _inc_T_255;
  wire        dec_15 = d_sel_shiftAmount == 8'hF & d_last & _dec_T_511;
  wire        inc_16 = casez_tmp == 8'h10 & _inc_T_255;
  wire        dec_16 = d_sel_shiftAmount == 8'h10 & d_last & _dec_T_511;
  wire        inc_17 = casez_tmp == 8'h11 & _inc_T_255;
  wire        dec_17 = d_sel_shiftAmount == 8'h11 & d_last & _dec_T_511;
  wire        inc_18 = casez_tmp == 8'h12 & _inc_T_255;
  wire        dec_18 = d_sel_shiftAmount == 8'h12 & d_last & _dec_T_511;
  wire        inc_19 = casez_tmp == 8'h13 & _inc_T_255;
  wire        dec_19 = d_sel_shiftAmount == 8'h13 & d_last & _dec_T_511;
  wire        inc_20 = casez_tmp == 8'h14 & _inc_T_255;
  wire        dec_20 = d_sel_shiftAmount == 8'h14 & d_last & _dec_T_511;
  wire        inc_21 = casez_tmp == 8'h15 & _inc_T_255;
  wire        dec_21 = d_sel_shiftAmount == 8'h15 & d_last & _dec_T_511;
  wire        inc_22 = casez_tmp == 8'h16 & _inc_T_255;
  wire        dec_22 = d_sel_shiftAmount == 8'h16 & d_last & _dec_T_511;
  wire        inc_23 = casez_tmp == 8'h17 & _inc_T_255;
  wire        dec_23 = d_sel_shiftAmount == 8'h17 & d_last & _dec_T_511;
  wire        inc_24 = casez_tmp == 8'h18 & _inc_T_255;
  wire        dec_24 = d_sel_shiftAmount == 8'h18 & d_last & _dec_T_511;
  wire        inc_25 = casez_tmp == 8'h19 & _inc_T_255;
  wire        dec_25 = d_sel_shiftAmount == 8'h19 & d_last & _dec_T_511;
  wire        inc_26 = casez_tmp == 8'h1A & _inc_T_255;
  wire        dec_26 = d_sel_shiftAmount == 8'h1A & d_last & _dec_T_511;
  wire        inc_27 = casez_tmp == 8'h1B & _inc_T_255;
  wire        dec_27 = d_sel_shiftAmount == 8'h1B & d_last & _dec_T_511;
  wire        inc_28 = casez_tmp == 8'h1C & _inc_T_255;
  wire        dec_28 = d_sel_shiftAmount == 8'h1C & d_last & _dec_T_511;
  wire        inc_29 = casez_tmp == 8'h1D & _inc_T_255;
  wire        dec_29 = d_sel_shiftAmount == 8'h1D & d_last & _dec_T_511;
  wire        inc_30 = casez_tmp == 8'h1E & _inc_T_255;
  wire        dec_30 = d_sel_shiftAmount == 8'h1E & d_last & _dec_T_511;
  wire        inc_31 = casez_tmp == 8'h1F & _inc_T_255;
  wire        dec_31 = d_sel_shiftAmount == 8'h1F & d_last & _dec_T_511;
  wire        inc_32 = casez_tmp == 8'h20 & _inc_T_255;
  wire        dec_32 = d_sel_shiftAmount == 8'h20 & d_last & _dec_T_511;
  wire        inc_33 = casez_tmp == 8'h21 & _inc_T_255;
  wire        dec_33 = d_sel_shiftAmount == 8'h21 & d_last & _dec_T_511;
  wire        inc_34 = casez_tmp == 8'h22 & _inc_T_255;
  wire        dec_34 = d_sel_shiftAmount == 8'h22 & d_last & _dec_T_511;
  wire        inc_35 = casez_tmp == 8'h23 & _inc_T_255;
  wire        dec_35 = d_sel_shiftAmount == 8'h23 & d_last & _dec_T_511;
  wire        inc_36 = casez_tmp == 8'h24 & _inc_T_255;
  wire        dec_36 = d_sel_shiftAmount == 8'h24 & d_last & _dec_T_511;
  wire        inc_37 = casez_tmp == 8'h25 & _inc_T_255;
  wire        dec_37 = d_sel_shiftAmount == 8'h25 & d_last & _dec_T_511;
  wire        inc_38 = casez_tmp == 8'h26 & _inc_T_255;
  wire        dec_38 = d_sel_shiftAmount == 8'h26 & d_last & _dec_T_511;
  wire        inc_39 = casez_tmp == 8'h27 & _inc_T_255;
  wire        dec_39 = d_sel_shiftAmount == 8'h27 & d_last & _dec_T_511;
  wire        inc_40 = casez_tmp == 8'h28 & _inc_T_255;
  wire        dec_40 = d_sel_shiftAmount == 8'h28 & d_last & _dec_T_511;
  wire        inc_41 = casez_tmp == 8'h29 & _inc_T_255;
  wire        dec_41 = d_sel_shiftAmount == 8'h29 & d_last & _dec_T_511;
  wire        inc_42 = casez_tmp == 8'h2A & _inc_T_255;
  wire        dec_42 = d_sel_shiftAmount == 8'h2A & d_last & _dec_T_511;
  wire        inc_43 = casez_tmp == 8'h2B & _inc_T_255;
  wire        dec_43 = d_sel_shiftAmount == 8'h2B & d_last & _dec_T_511;
  wire        inc_44 = casez_tmp == 8'h2C & _inc_T_255;
  wire        dec_44 = d_sel_shiftAmount == 8'h2C & d_last & _dec_T_511;
  wire        inc_45 = casez_tmp == 8'h2D & _inc_T_255;
  wire        dec_45 = d_sel_shiftAmount == 8'h2D & d_last & _dec_T_511;
  wire        inc_46 = casez_tmp == 8'h2E & _inc_T_255;
  wire        dec_46 = d_sel_shiftAmount == 8'h2E & d_last & _dec_T_511;
  wire        inc_47 = casez_tmp == 8'h2F & _inc_T_255;
  wire        dec_47 = d_sel_shiftAmount == 8'h2F & d_last & _dec_T_511;
  wire        inc_48 = casez_tmp == 8'h30 & _inc_T_255;
  wire        dec_48 = d_sel_shiftAmount == 8'h30 & d_last & _dec_T_511;
  wire        inc_49 = casez_tmp == 8'h31 & _inc_T_255;
  wire        dec_49 = d_sel_shiftAmount == 8'h31 & d_last & _dec_T_511;
  wire        inc_50 = casez_tmp == 8'h32 & _inc_T_255;
  wire        dec_50 = d_sel_shiftAmount == 8'h32 & d_last & _dec_T_511;
  wire        inc_51 = casez_tmp == 8'h33 & _inc_T_255;
  wire        dec_51 = d_sel_shiftAmount == 8'h33 & d_last & _dec_T_511;
  wire        inc_52 = casez_tmp == 8'h34 & _inc_T_255;
  wire        dec_52 = d_sel_shiftAmount == 8'h34 & d_last & _dec_T_511;
  wire        inc_53 = casez_tmp == 8'h35 & _inc_T_255;
  wire        dec_53 = d_sel_shiftAmount == 8'h35 & d_last & _dec_T_511;
  wire        inc_54 = casez_tmp == 8'h36 & _inc_T_255;
  wire        dec_54 = d_sel_shiftAmount == 8'h36 & d_last & _dec_T_511;
  wire        inc_55 = casez_tmp == 8'h37 & _inc_T_255;
  wire        dec_55 = d_sel_shiftAmount == 8'h37 & d_last & _dec_T_511;
  wire        inc_56 = casez_tmp == 8'h38 & _inc_T_255;
  wire        dec_56 = d_sel_shiftAmount == 8'h38 & d_last & _dec_T_511;
  wire        inc_57 = casez_tmp == 8'h39 & _inc_T_255;
  wire        dec_57 = d_sel_shiftAmount == 8'h39 & d_last & _dec_T_511;
  wire        inc_58 = casez_tmp == 8'h3A & _inc_T_255;
  wire        dec_58 = d_sel_shiftAmount == 8'h3A & d_last & _dec_T_511;
  wire        inc_59 = casez_tmp == 8'h3B & _inc_T_255;
  wire        dec_59 = d_sel_shiftAmount == 8'h3B & d_last & _dec_T_511;
  wire        inc_60 = casez_tmp == 8'h3C & _inc_T_255;
  wire        dec_60 = d_sel_shiftAmount == 8'h3C & d_last & _dec_T_511;
  wire        inc_61 = casez_tmp == 8'h3D & _inc_T_255;
  wire        dec_61 = d_sel_shiftAmount == 8'h3D & d_last & _dec_T_511;
  wire        inc_62 = casez_tmp == 8'h3E & _inc_T_255;
  wire        dec_62 = d_sel_shiftAmount == 8'h3E & d_last & _dec_T_511;
  wire        inc_63 = casez_tmp == 8'h3F & _inc_T_255;
  wire        dec_63 = d_sel_shiftAmount == 8'h3F & d_last & _dec_T_511;
  wire        inc_64 = casez_tmp == 8'h40 & _inc_T_255;
  wire        dec_64 = d_sel_shiftAmount == 8'h40 & d_last & _dec_T_511;
  wire        inc_65 = casez_tmp == 8'h41 & _inc_T_255;
  wire        dec_65 = d_sel_shiftAmount == 8'h41 & d_last & _dec_T_511;
  wire        inc_66 = casez_tmp == 8'h42 & _inc_T_255;
  wire        dec_66 = d_sel_shiftAmount == 8'h42 & d_last & _dec_T_511;
  wire        inc_67 = casez_tmp == 8'h43 & _inc_T_255;
  wire        dec_67 = d_sel_shiftAmount == 8'h43 & d_last & _dec_T_511;
  wire        inc_68 = casez_tmp == 8'h44 & _inc_T_255;
  wire        dec_68 = d_sel_shiftAmount == 8'h44 & d_last & _dec_T_511;
  wire        inc_69 = casez_tmp == 8'h45 & _inc_T_255;
  wire        dec_69 = d_sel_shiftAmount == 8'h45 & d_last & _dec_T_511;
  wire        inc_70 = casez_tmp == 8'h46 & _inc_T_255;
  wire        dec_70 = d_sel_shiftAmount == 8'h46 & d_last & _dec_T_511;
  wire        inc_71 = casez_tmp == 8'h47 & _inc_T_255;
  wire        dec_71 = d_sel_shiftAmount == 8'h47 & d_last & _dec_T_511;
  wire        inc_72 = casez_tmp == 8'h48 & _inc_T_255;
  wire        dec_72 = d_sel_shiftAmount == 8'h48 & d_last & _dec_T_511;
  wire        inc_73 = casez_tmp == 8'h49 & _inc_T_255;
  wire        dec_73 = d_sel_shiftAmount == 8'h49 & d_last & _dec_T_511;
  wire        inc_74 = casez_tmp == 8'h4A & _inc_T_255;
  wire        dec_74 = d_sel_shiftAmount == 8'h4A & d_last & _dec_T_511;
  wire        inc_75 = casez_tmp == 8'h4B & _inc_T_255;
  wire        dec_75 = d_sel_shiftAmount == 8'h4B & d_last & _dec_T_511;
  wire        inc_76 = casez_tmp == 8'h4C & _inc_T_255;
  wire        dec_76 = d_sel_shiftAmount == 8'h4C & d_last & _dec_T_511;
  wire        inc_77 = casez_tmp == 8'h4D & _inc_T_255;
  wire        dec_77 = d_sel_shiftAmount == 8'h4D & d_last & _dec_T_511;
  wire        inc_78 = casez_tmp == 8'h4E & _inc_T_255;
  wire        dec_78 = d_sel_shiftAmount == 8'h4E & d_last & _dec_T_511;
  wire        inc_79 = casez_tmp == 8'h4F & _inc_T_255;
  wire        dec_79 = d_sel_shiftAmount == 8'h4F & d_last & _dec_T_511;
  wire        inc_80 = casez_tmp == 8'h50 & _inc_T_255;
  wire        dec_80 = d_sel_shiftAmount == 8'h50 & d_last & _dec_T_511;
  wire        inc_81 = casez_tmp == 8'h51 & _inc_T_255;
  wire        dec_81 = d_sel_shiftAmount == 8'h51 & d_last & _dec_T_511;
  wire        inc_82 = casez_tmp == 8'h52 & _inc_T_255;
  wire        dec_82 = d_sel_shiftAmount == 8'h52 & d_last & _dec_T_511;
  wire        inc_83 = casez_tmp == 8'h53 & _inc_T_255;
  wire        dec_83 = d_sel_shiftAmount == 8'h53 & d_last & _dec_T_511;
  wire        inc_84 = casez_tmp == 8'h54 & _inc_T_255;
  wire        dec_84 = d_sel_shiftAmount == 8'h54 & d_last & _dec_T_511;
  wire        inc_85 = casez_tmp == 8'h55 & _inc_T_255;
  wire        dec_85 = d_sel_shiftAmount == 8'h55 & d_last & _dec_T_511;
  wire        inc_86 = casez_tmp == 8'h56 & _inc_T_255;
  wire        dec_86 = d_sel_shiftAmount == 8'h56 & d_last & _dec_T_511;
  wire        inc_87 = casez_tmp == 8'h57 & _inc_T_255;
  wire        dec_87 = d_sel_shiftAmount == 8'h57 & d_last & _dec_T_511;
  wire        inc_88 = casez_tmp == 8'h58 & _inc_T_255;
  wire        dec_88 = d_sel_shiftAmount == 8'h58 & d_last & _dec_T_511;
  wire        inc_89 = casez_tmp == 8'h59 & _inc_T_255;
  wire        dec_89 = d_sel_shiftAmount == 8'h59 & d_last & _dec_T_511;
  wire        inc_90 = casez_tmp == 8'h5A & _inc_T_255;
  wire        dec_90 = d_sel_shiftAmount == 8'h5A & d_last & _dec_T_511;
  wire        inc_91 = casez_tmp == 8'h5B & _inc_T_255;
  wire        dec_91 = d_sel_shiftAmount == 8'h5B & d_last & _dec_T_511;
  wire        inc_92 = casez_tmp == 8'h5C & _inc_T_255;
  wire        dec_92 = d_sel_shiftAmount == 8'h5C & d_last & _dec_T_511;
  wire        inc_93 = casez_tmp == 8'h5D & _inc_T_255;
  wire        dec_93 = d_sel_shiftAmount == 8'h5D & d_last & _dec_T_511;
  wire        inc_94 = casez_tmp == 8'h5E & _inc_T_255;
  wire        dec_94 = d_sel_shiftAmount == 8'h5E & d_last & _dec_T_511;
  wire        inc_95 = casez_tmp == 8'h5F & _inc_T_255;
  wire        dec_95 = d_sel_shiftAmount == 8'h5F & d_last & _dec_T_511;
  wire        inc_96 = casez_tmp == 8'h60 & _inc_T_255;
  wire        dec_96 = d_sel_shiftAmount == 8'h60 & d_last & _dec_T_511;
  wire        inc_97 = casez_tmp == 8'h61 & _inc_T_255;
  wire        dec_97 = d_sel_shiftAmount == 8'h61 & d_last & _dec_T_511;
  wire        inc_98 = casez_tmp == 8'h62 & _inc_T_255;
  wire        dec_98 = d_sel_shiftAmount == 8'h62 & d_last & _dec_T_511;
  wire        inc_99 = casez_tmp == 8'h63 & _inc_T_255;
  wire        dec_99 = d_sel_shiftAmount == 8'h63 & d_last & _dec_T_511;
  wire        inc_100 = casez_tmp == 8'h64 & _inc_T_255;
  wire        dec_100 = d_sel_shiftAmount == 8'h64 & d_last & _dec_T_511;
  wire        inc_101 = casez_tmp == 8'h65 & _inc_T_255;
  wire        dec_101 = d_sel_shiftAmount == 8'h65 & d_last & _dec_T_511;
  wire        inc_102 = casez_tmp == 8'h66 & _inc_T_255;
  wire        dec_102 = d_sel_shiftAmount == 8'h66 & d_last & _dec_T_511;
  wire        inc_103 = casez_tmp == 8'h67 & _inc_T_255;
  wire        dec_103 = d_sel_shiftAmount == 8'h67 & d_last & _dec_T_511;
  wire        inc_104 = casez_tmp == 8'h68 & _inc_T_255;
  wire        dec_104 = d_sel_shiftAmount == 8'h68 & d_last & _dec_T_511;
  wire        inc_105 = casez_tmp == 8'h69 & _inc_T_255;
  wire        dec_105 = d_sel_shiftAmount == 8'h69 & d_last & _dec_T_511;
  wire        inc_106 = casez_tmp == 8'h6A & _inc_T_255;
  wire        dec_106 = d_sel_shiftAmount == 8'h6A & d_last & _dec_T_511;
  wire        inc_107 = casez_tmp == 8'h6B & _inc_T_255;
  wire        dec_107 = d_sel_shiftAmount == 8'h6B & d_last & _dec_T_511;
  wire        inc_108 = casez_tmp == 8'h6C & _inc_T_255;
  wire        dec_108 = d_sel_shiftAmount == 8'h6C & d_last & _dec_T_511;
  wire        inc_109 = casez_tmp == 8'h6D & _inc_T_255;
  wire        dec_109 = d_sel_shiftAmount == 8'h6D & d_last & _dec_T_511;
  wire        inc_110 = casez_tmp == 8'h6E & _inc_T_255;
  wire        dec_110 = d_sel_shiftAmount == 8'h6E & d_last & _dec_T_511;
  wire        inc_111 = casez_tmp == 8'h6F & _inc_T_255;
  wire        dec_111 = d_sel_shiftAmount == 8'h6F & d_last & _dec_T_511;
  wire        inc_112 = casez_tmp == 8'h70 & _inc_T_255;
  wire        dec_112 = d_sel_shiftAmount == 8'h70 & d_last & _dec_T_511;
  wire        inc_113 = casez_tmp == 8'h71 & _inc_T_255;
  wire        dec_113 = d_sel_shiftAmount == 8'h71 & d_last & _dec_T_511;
  wire        inc_114 = casez_tmp == 8'h72 & _inc_T_255;
  wire        dec_114 = d_sel_shiftAmount == 8'h72 & d_last & _dec_T_511;
  wire        inc_115 = casez_tmp == 8'h73 & _inc_T_255;
  wire        dec_115 = d_sel_shiftAmount == 8'h73 & d_last & _dec_T_511;
  wire        inc_116 = casez_tmp == 8'h74 & _inc_T_255;
  wire        dec_116 = d_sel_shiftAmount == 8'h74 & d_last & _dec_T_511;
  wire        inc_117 = casez_tmp == 8'h75 & _inc_T_255;
  wire        dec_117 = d_sel_shiftAmount == 8'h75 & d_last & _dec_T_511;
  wire        inc_118 = casez_tmp == 8'h76 & _inc_T_255;
  wire        dec_118 = d_sel_shiftAmount == 8'h76 & d_last & _dec_T_511;
  wire        inc_119 = casez_tmp == 8'h77 & _inc_T_255;
  wire        dec_119 = d_sel_shiftAmount == 8'h77 & d_last & _dec_T_511;
  wire        inc_120 = casez_tmp == 8'h78 & _inc_T_255;
  wire        dec_120 = d_sel_shiftAmount == 8'h78 & d_last & _dec_T_511;
  wire        inc_121 = casez_tmp == 8'h79 & _inc_T_255;
  wire        dec_121 = d_sel_shiftAmount == 8'h79 & d_last & _dec_T_511;
  wire        inc_122 = casez_tmp == 8'h7A & _inc_T_255;
  wire        dec_122 = d_sel_shiftAmount == 8'h7A & d_last & _dec_T_511;
  wire        inc_123 = casez_tmp == 8'h7B & _inc_T_255;
  wire        dec_123 = d_sel_shiftAmount == 8'h7B & d_last & _dec_T_511;
  wire        inc_124 = casez_tmp == 8'h7C & _inc_T_255;
  wire        dec_124 = d_sel_shiftAmount == 8'h7C & d_last & _dec_T_511;
  wire        inc_125 = casez_tmp == 8'h7D & _inc_T_255;
  wire        dec_125 = d_sel_shiftAmount == 8'h7D & d_last & _dec_T_511;
  wire        inc_126 = casez_tmp == 8'h7E & _inc_T_255;
  wire        dec_126 = d_sel_shiftAmount == 8'h7E & d_last & _dec_T_511;
  wire        inc_127 = casez_tmp == 8'h7F & _inc_T_255;
  wire        dec_127 = d_sel_shiftAmount == 8'h7F & d_last & _dec_T_511;
  wire        inc_128 = casez_tmp == 8'h80 & _inc_T_255;
  wire        dec_128 = d_sel_shiftAmount == 8'h80 & d_last & _dec_T_511;
  wire        inc_129 = casez_tmp == 8'h81 & _inc_T_255;
  wire        dec_129 = d_sel_shiftAmount == 8'h81 & d_last & _dec_T_511;
  wire        inc_130 = casez_tmp == 8'h82 & _inc_T_255;
  wire        dec_130 = d_sel_shiftAmount == 8'h82 & d_last & _dec_T_511;
  wire        inc_131 = casez_tmp == 8'h83 & _inc_T_255;
  wire        dec_131 = d_sel_shiftAmount == 8'h83 & d_last & _dec_T_511;
  wire        inc_132 = casez_tmp == 8'h84 & _inc_T_255;
  wire        dec_132 = d_sel_shiftAmount == 8'h84 & d_last & _dec_T_511;
  wire        inc_133 = casez_tmp == 8'h85 & _inc_T_255;
  wire        dec_133 = d_sel_shiftAmount == 8'h85 & d_last & _dec_T_511;
  wire        inc_134 = casez_tmp == 8'h86 & _inc_T_255;
  wire        dec_134 = d_sel_shiftAmount == 8'h86 & d_last & _dec_T_511;
  wire        inc_135 = casez_tmp == 8'h87 & _inc_T_255;
  wire        dec_135 = d_sel_shiftAmount == 8'h87 & d_last & _dec_T_511;
  wire        inc_136 = casez_tmp == 8'h88 & _inc_T_255;
  wire        dec_136 = d_sel_shiftAmount == 8'h88 & d_last & _dec_T_511;
  wire        inc_137 = casez_tmp == 8'h89 & _inc_T_255;
  wire        dec_137 = d_sel_shiftAmount == 8'h89 & d_last & _dec_T_511;
  wire        inc_138 = casez_tmp == 8'h8A & _inc_T_255;
  wire        dec_138 = d_sel_shiftAmount == 8'h8A & d_last & _dec_T_511;
  wire        inc_139 = casez_tmp == 8'h8B & _inc_T_255;
  wire        dec_139 = d_sel_shiftAmount == 8'h8B & d_last & _dec_T_511;
  wire        inc_140 = casez_tmp == 8'h8C & _inc_T_255;
  wire        dec_140 = d_sel_shiftAmount == 8'h8C & d_last & _dec_T_511;
  wire        inc_141 = casez_tmp == 8'h8D & _inc_T_255;
  wire        dec_141 = d_sel_shiftAmount == 8'h8D & d_last & _dec_T_511;
  wire        inc_142 = casez_tmp == 8'h8E & _inc_T_255;
  wire        dec_142 = d_sel_shiftAmount == 8'h8E & d_last & _dec_T_511;
  wire        inc_143 = casez_tmp == 8'h8F & _inc_T_255;
  wire        dec_143 = d_sel_shiftAmount == 8'h8F & d_last & _dec_T_511;
  wire        inc_144 = casez_tmp == 8'h90 & _inc_T_255;
  wire        dec_144 = d_sel_shiftAmount == 8'h90 & d_last & _dec_T_511;
  wire        inc_145 = casez_tmp == 8'h91 & _inc_T_255;
  wire        dec_145 = d_sel_shiftAmount == 8'h91 & d_last & _dec_T_511;
  wire        inc_146 = casez_tmp == 8'h92 & _inc_T_255;
  wire        dec_146 = d_sel_shiftAmount == 8'h92 & d_last & _dec_T_511;
  wire        inc_147 = casez_tmp == 8'h93 & _inc_T_255;
  wire        dec_147 = d_sel_shiftAmount == 8'h93 & d_last & _dec_T_511;
  wire        inc_148 = casez_tmp == 8'h94 & _inc_T_255;
  wire        dec_148 = d_sel_shiftAmount == 8'h94 & d_last & _dec_T_511;
  wire        inc_149 = casez_tmp == 8'h95 & _inc_T_255;
  wire        dec_149 = d_sel_shiftAmount == 8'h95 & d_last & _dec_T_511;
  wire        inc_150 = casez_tmp == 8'h96 & _inc_T_255;
  wire        dec_150 = d_sel_shiftAmount == 8'h96 & d_last & _dec_T_511;
  wire        inc_151 = casez_tmp == 8'h97 & _inc_T_255;
  wire        dec_151 = d_sel_shiftAmount == 8'h97 & d_last & _dec_T_511;
  wire        inc_152 = casez_tmp == 8'h98 & _inc_T_255;
  wire        dec_152 = d_sel_shiftAmount == 8'h98 & d_last & _dec_T_511;
  wire        inc_153 = casez_tmp == 8'h99 & _inc_T_255;
  wire        dec_153 = d_sel_shiftAmount == 8'h99 & d_last & _dec_T_511;
  wire        inc_154 = casez_tmp == 8'h9A & _inc_T_255;
  wire        dec_154 = d_sel_shiftAmount == 8'h9A & d_last & _dec_T_511;
  wire        inc_155 = casez_tmp == 8'h9B & _inc_T_255;
  wire        dec_155 = d_sel_shiftAmount == 8'h9B & d_last & _dec_T_511;
  wire        inc_156 = casez_tmp == 8'h9C & _inc_T_255;
  wire        dec_156 = d_sel_shiftAmount == 8'h9C & d_last & _dec_T_511;
  wire        inc_157 = casez_tmp == 8'h9D & _inc_T_255;
  wire        dec_157 = d_sel_shiftAmount == 8'h9D & d_last & _dec_T_511;
  wire        inc_158 = casez_tmp == 8'h9E & _inc_T_255;
  wire        dec_158 = d_sel_shiftAmount == 8'h9E & d_last & _dec_T_511;
  wire        inc_159 = casez_tmp == 8'h9F & _inc_T_255;
  wire        dec_159 = d_sel_shiftAmount == 8'h9F & d_last & _dec_T_511;
  wire        inc_160 = casez_tmp == 8'hA0 & _inc_T_255;
  wire        dec_160 = d_sel_shiftAmount == 8'hA0 & d_last & _dec_T_511;
  wire        inc_161 = casez_tmp == 8'hA1 & _inc_T_255;
  wire        dec_161 = d_sel_shiftAmount == 8'hA1 & d_last & _dec_T_511;
  wire        inc_162 = casez_tmp == 8'hA2 & _inc_T_255;
  wire        dec_162 = d_sel_shiftAmount == 8'hA2 & d_last & _dec_T_511;
  wire        inc_163 = casez_tmp == 8'hA3 & _inc_T_255;
  wire        dec_163 = d_sel_shiftAmount == 8'hA3 & d_last & _dec_T_511;
  wire        inc_164 = casez_tmp == 8'hA4 & _inc_T_255;
  wire        dec_164 = d_sel_shiftAmount == 8'hA4 & d_last & _dec_T_511;
  wire        inc_165 = casez_tmp == 8'hA5 & _inc_T_255;
  wire        dec_165 = d_sel_shiftAmount == 8'hA5 & d_last & _dec_T_511;
  wire        inc_166 = casez_tmp == 8'hA6 & _inc_T_255;
  wire        dec_166 = d_sel_shiftAmount == 8'hA6 & d_last & _dec_T_511;
  wire        inc_167 = casez_tmp == 8'hA7 & _inc_T_255;
  wire        dec_167 = d_sel_shiftAmount == 8'hA7 & d_last & _dec_T_511;
  wire        inc_168 = casez_tmp == 8'hA8 & _inc_T_255;
  wire        dec_168 = d_sel_shiftAmount == 8'hA8 & d_last & _dec_T_511;
  wire        inc_169 = casez_tmp == 8'hA9 & _inc_T_255;
  wire        dec_169 = d_sel_shiftAmount == 8'hA9 & d_last & _dec_T_511;
  wire        inc_170 = casez_tmp == 8'hAA & _inc_T_255;
  wire        dec_170 = d_sel_shiftAmount == 8'hAA & d_last & _dec_T_511;
  wire        inc_171 = casez_tmp == 8'hAB & _inc_T_255;
  wire        dec_171 = d_sel_shiftAmount == 8'hAB & d_last & _dec_T_511;
  wire        inc_172 = casez_tmp == 8'hAC & _inc_T_255;
  wire        dec_172 = d_sel_shiftAmount == 8'hAC & d_last & _dec_T_511;
  wire        inc_173 = casez_tmp == 8'hAD & _inc_T_255;
  wire        dec_173 = d_sel_shiftAmount == 8'hAD & d_last & _dec_T_511;
  wire        inc_174 = casez_tmp == 8'hAE & _inc_T_255;
  wire        dec_174 = d_sel_shiftAmount == 8'hAE & d_last & _dec_T_511;
  wire        inc_175 = casez_tmp == 8'hAF & _inc_T_255;
  wire        dec_175 = d_sel_shiftAmount == 8'hAF & d_last & _dec_T_511;
  wire        inc_176 = casez_tmp == 8'hB0 & _inc_T_255;
  wire        dec_176 = d_sel_shiftAmount == 8'hB0 & d_last & _dec_T_511;
  wire        inc_177 = casez_tmp == 8'hB1 & _inc_T_255;
  wire        dec_177 = d_sel_shiftAmount == 8'hB1 & d_last & _dec_T_511;
  wire        inc_178 = casez_tmp == 8'hB2 & _inc_T_255;
  wire        dec_178 = d_sel_shiftAmount == 8'hB2 & d_last & _dec_T_511;
  wire        inc_179 = casez_tmp == 8'hB3 & _inc_T_255;
  wire        dec_179 = d_sel_shiftAmount == 8'hB3 & d_last & _dec_T_511;
  wire        inc_180 = casez_tmp == 8'hB4 & _inc_T_255;
  wire        dec_180 = d_sel_shiftAmount == 8'hB4 & d_last & _dec_T_511;
  wire        inc_181 = casez_tmp == 8'hB5 & _inc_T_255;
  wire        dec_181 = d_sel_shiftAmount == 8'hB5 & d_last & _dec_T_511;
  wire        inc_182 = casez_tmp == 8'hB6 & _inc_T_255;
  wire        dec_182 = d_sel_shiftAmount == 8'hB6 & d_last & _dec_T_511;
  wire        inc_183 = casez_tmp == 8'hB7 & _inc_T_255;
  wire        dec_183 = d_sel_shiftAmount == 8'hB7 & d_last & _dec_T_511;
  wire        inc_184 = casez_tmp == 8'hB8 & _inc_T_255;
  wire        dec_184 = d_sel_shiftAmount == 8'hB8 & d_last & _dec_T_511;
  wire        inc_185 = casez_tmp == 8'hB9 & _inc_T_255;
  wire        dec_185 = d_sel_shiftAmount == 8'hB9 & d_last & _dec_T_511;
  wire        inc_186 = casez_tmp == 8'hBA & _inc_T_255;
  wire        dec_186 = d_sel_shiftAmount == 8'hBA & d_last & _dec_T_511;
  wire        inc_187 = casez_tmp == 8'hBB & _inc_T_255;
  wire        dec_187 = d_sel_shiftAmount == 8'hBB & d_last & _dec_T_511;
  wire        inc_188 = casez_tmp == 8'hBC & _inc_T_255;
  wire        dec_188 = d_sel_shiftAmount == 8'hBC & d_last & _dec_T_511;
  wire        inc_189 = casez_tmp == 8'hBD & _inc_T_255;
  wire        dec_189 = d_sel_shiftAmount == 8'hBD & d_last & _dec_T_511;
  wire        inc_190 = casez_tmp == 8'hBE & _inc_T_255;
  wire        dec_190 = d_sel_shiftAmount == 8'hBE & d_last & _dec_T_511;
  wire        inc_191 = casez_tmp == 8'hBF & _inc_T_255;
  wire        dec_191 = d_sel_shiftAmount == 8'hBF & d_last & _dec_T_511;
  wire        inc_192 = casez_tmp == 8'hC0 & _inc_T_255;
  wire        dec_192 = d_sel_shiftAmount == 8'hC0 & d_last & _dec_T_511;
  wire        inc_193 = casez_tmp == 8'hC1 & _inc_T_255;
  wire        dec_193 = d_sel_shiftAmount == 8'hC1 & d_last & _dec_T_511;
  wire        inc_194 = casez_tmp == 8'hC2 & _inc_T_255;
  wire        dec_194 = d_sel_shiftAmount == 8'hC2 & d_last & _dec_T_511;
  wire        inc_195 = casez_tmp == 8'hC3 & _inc_T_255;
  wire        dec_195 = d_sel_shiftAmount == 8'hC3 & d_last & _dec_T_511;
  wire        inc_196 = casez_tmp == 8'hC4 & _inc_T_255;
  wire        dec_196 = d_sel_shiftAmount == 8'hC4 & d_last & _dec_T_511;
  wire        inc_197 = casez_tmp == 8'hC5 & _inc_T_255;
  wire        dec_197 = d_sel_shiftAmount == 8'hC5 & d_last & _dec_T_511;
  wire        inc_198 = casez_tmp == 8'hC6 & _inc_T_255;
  wire        dec_198 = d_sel_shiftAmount == 8'hC6 & d_last & _dec_T_511;
  wire        inc_199 = casez_tmp == 8'hC7 & _inc_T_255;
  wire        dec_199 = d_sel_shiftAmount == 8'hC7 & d_last & _dec_T_511;
  wire        inc_200 = casez_tmp == 8'hC8 & _inc_T_255;
  wire        dec_200 = d_sel_shiftAmount == 8'hC8 & d_last & _dec_T_511;
  wire        inc_201 = casez_tmp == 8'hC9 & _inc_T_255;
  wire        dec_201 = d_sel_shiftAmount == 8'hC9 & d_last & _dec_T_511;
  wire        inc_202 = casez_tmp == 8'hCA & _inc_T_255;
  wire        dec_202 = d_sel_shiftAmount == 8'hCA & d_last & _dec_T_511;
  wire        inc_203 = casez_tmp == 8'hCB & _inc_T_255;
  wire        dec_203 = d_sel_shiftAmount == 8'hCB & d_last & _dec_T_511;
  wire        inc_204 = casez_tmp == 8'hCC & _inc_T_255;
  wire        dec_204 = d_sel_shiftAmount == 8'hCC & d_last & _dec_T_511;
  wire        inc_205 = casez_tmp == 8'hCD & _inc_T_255;
  wire        dec_205 = d_sel_shiftAmount == 8'hCD & d_last & _dec_T_511;
  wire        inc_206 = casez_tmp == 8'hCE & _inc_T_255;
  wire        dec_206 = d_sel_shiftAmount == 8'hCE & d_last & _dec_T_511;
  wire        inc_207 = casez_tmp == 8'hCF & _inc_T_255;
  wire        dec_207 = d_sel_shiftAmount == 8'hCF & d_last & _dec_T_511;
  wire        inc_208 = casez_tmp == 8'hD0 & _inc_T_255;
  wire        dec_208 = d_sel_shiftAmount == 8'hD0 & d_last & _dec_T_511;
  wire        inc_209 = casez_tmp == 8'hD1 & _inc_T_255;
  wire        dec_209 = d_sel_shiftAmount == 8'hD1 & d_last & _dec_T_511;
  wire        inc_210 = casez_tmp == 8'hD2 & _inc_T_255;
  wire        dec_210 = d_sel_shiftAmount == 8'hD2 & d_last & _dec_T_511;
  wire        inc_211 = casez_tmp == 8'hD3 & _inc_T_255;
  wire        dec_211 = d_sel_shiftAmount == 8'hD3 & d_last & _dec_T_511;
  wire        inc_212 = casez_tmp == 8'hD4 & _inc_T_255;
  wire        dec_212 = d_sel_shiftAmount == 8'hD4 & d_last & _dec_T_511;
  wire        inc_213 = casez_tmp == 8'hD5 & _inc_T_255;
  wire        dec_213 = d_sel_shiftAmount == 8'hD5 & d_last & _dec_T_511;
  wire        inc_214 = casez_tmp == 8'hD6 & _inc_T_255;
  wire        dec_214 = d_sel_shiftAmount == 8'hD6 & d_last & _dec_T_511;
  wire        inc_215 = casez_tmp == 8'hD7 & _inc_T_255;
  wire        dec_215 = d_sel_shiftAmount == 8'hD7 & d_last & _dec_T_511;
  wire        inc_216 = casez_tmp == 8'hD8 & _inc_T_255;
  wire        dec_216 = d_sel_shiftAmount == 8'hD8 & d_last & _dec_T_511;
  wire        inc_217 = casez_tmp == 8'hD9 & _inc_T_255;
  wire        dec_217 = d_sel_shiftAmount == 8'hD9 & d_last & _dec_T_511;
  wire        inc_218 = casez_tmp == 8'hDA & _inc_T_255;
  wire        dec_218 = d_sel_shiftAmount == 8'hDA & d_last & _dec_T_511;
  wire        inc_219 = casez_tmp == 8'hDB & _inc_T_255;
  wire        dec_219 = d_sel_shiftAmount == 8'hDB & d_last & _dec_T_511;
  wire        inc_220 = casez_tmp == 8'hDC & _inc_T_255;
  wire        dec_220 = d_sel_shiftAmount == 8'hDC & d_last & _dec_T_511;
  wire        inc_221 = casez_tmp == 8'hDD & _inc_T_255;
  wire        dec_221 = d_sel_shiftAmount == 8'hDD & d_last & _dec_T_511;
  wire        inc_222 = casez_tmp == 8'hDE & _inc_T_255;
  wire        dec_222 = d_sel_shiftAmount == 8'hDE & d_last & _dec_T_511;
  wire        inc_223 = casez_tmp == 8'hDF & _inc_T_255;
  wire        dec_223 = d_sel_shiftAmount == 8'hDF & d_last & _dec_T_511;
  wire        inc_224 = casez_tmp == 8'hE0 & _inc_T_255;
  wire        dec_224 = d_sel_shiftAmount == 8'hE0 & d_last & _dec_T_511;
  wire        inc_225 = casez_tmp == 8'hE1 & _inc_T_255;
  wire        dec_225 = d_sel_shiftAmount == 8'hE1 & d_last & _dec_T_511;
  wire        inc_226 = casez_tmp == 8'hE2 & _inc_T_255;
  wire        dec_226 = d_sel_shiftAmount == 8'hE2 & d_last & _dec_T_511;
  wire        inc_227 = casez_tmp == 8'hE3 & _inc_T_255;
  wire        dec_227 = d_sel_shiftAmount == 8'hE3 & d_last & _dec_T_511;
  wire        inc_228 = casez_tmp == 8'hE4 & _inc_T_255;
  wire        dec_228 = d_sel_shiftAmount == 8'hE4 & d_last & _dec_T_511;
  wire        inc_229 = casez_tmp == 8'hE5 & _inc_T_255;
  wire        dec_229 = d_sel_shiftAmount == 8'hE5 & d_last & _dec_T_511;
  wire        inc_230 = casez_tmp == 8'hE6 & _inc_T_255;
  wire        dec_230 = d_sel_shiftAmount == 8'hE6 & d_last & _dec_T_511;
  wire        inc_231 = casez_tmp == 8'hE7 & _inc_T_255;
  wire        dec_231 = d_sel_shiftAmount == 8'hE7 & d_last & _dec_T_511;
  wire        inc_232 = casez_tmp == 8'hE8 & _inc_T_255;
  wire        dec_232 = d_sel_shiftAmount == 8'hE8 & d_last & _dec_T_511;
  wire        inc_233 = casez_tmp == 8'hE9 & _inc_T_255;
  wire        dec_233 = d_sel_shiftAmount == 8'hE9 & d_last & _dec_T_511;
  wire        inc_234 = casez_tmp == 8'hEA & _inc_T_255;
  wire        dec_234 = d_sel_shiftAmount == 8'hEA & d_last & _dec_T_511;
  wire        inc_235 = casez_tmp == 8'hEB & _inc_T_255;
  wire        dec_235 = d_sel_shiftAmount == 8'hEB & d_last & _dec_T_511;
  wire        inc_236 = casez_tmp == 8'hEC & _inc_T_255;
  wire        dec_236 = d_sel_shiftAmount == 8'hEC & d_last & _dec_T_511;
  wire        inc_237 = casez_tmp == 8'hED & _inc_T_255;
  wire        dec_237 = d_sel_shiftAmount == 8'hED & d_last & _dec_T_511;
  wire        inc_238 = casez_tmp == 8'hEE & _inc_T_255;
  wire        dec_238 = d_sel_shiftAmount == 8'hEE & d_last & _dec_T_511;
  wire        inc_239 = casez_tmp == 8'hEF & _inc_T_255;
  wire        dec_239 = d_sel_shiftAmount == 8'hEF & d_last & _dec_T_511;
  wire        inc_240 = casez_tmp == 8'hF0 & _inc_T_255;
  wire        dec_240 = d_sel_shiftAmount == 8'hF0 & d_last & _dec_T_511;
  wire        inc_241 = casez_tmp == 8'hF1 & _inc_T_255;
  wire        dec_241 = d_sel_shiftAmount == 8'hF1 & d_last & _dec_T_511;
  wire        inc_242 = casez_tmp == 8'hF2 & _inc_T_255;
  wire        dec_242 = d_sel_shiftAmount == 8'hF2 & d_last & _dec_T_511;
  wire        inc_243 = casez_tmp == 8'hF3 & _inc_T_255;
  wire        dec_243 = d_sel_shiftAmount == 8'hF3 & d_last & _dec_T_511;
  wire        inc_244 = casez_tmp == 8'hF4 & _inc_T_255;
  wire        dec_244 = d_sel_shiftAmount == 8'hF4 & d_last & _dec_T_511;
  wire        inc_245 = casez_tmp == 8'hF5 & _inc_T_255;
  wire        dec_245 = d_sel_shiftAmount == 8'hF5 & d_last & _dec_T_511;
  wire        inc_246 = casez_tmp == 8'hF6 & _inc_T_255;
  wire        dec_246 = d_sel_shiftAmount == 8'hF6 & d_last & _dec_T_511;
  wire        inc_247 = casez_tmp == 8'hF7 & _inc_T_255;
  wire        dec_247 = d_sel_shiftAmount == 8'hF7 & d_last & _dec_T_511;
  wire        inc_248 = casez_tmp == 8'hF8 & _inc_T_255;
  wire        dec_248 = d_sel_shiftAmount == 8'hF8 & d_last & _dec_T_511;
  wire        inc_249 = casez_tmp == 8'hF9 & _inc_T_255;
  wire        dec_249 = d_sel_shiftAmount == 8'hF9 & d_last & _dec_T_511;
  wire        inc_250 = casez_tmp == 8'hFA & _inc_T_255;
  wire        dec_250 = d_sel_shiftAmount == 8'hFA & d_last & _dec_T_511;
  wire        inc_251 = casez_tmp == 8'hFB & _inc_T_255;
  wire        dec_251 = d_sel_shiftAmount == 8'hFB & d_last & _dec_T_511;
  wire        inc_252 = casez_tmp == 8'hFC & _inc_T_255;
  wire        dec_252 = d_sel_shiftAmount == 8'hFC & d_last & _dec_T_511;
  wire        inc_253 = casez_tmp == 8'hFD & _inc_T_255;
  wire        dec_253 = d_sel_shiftAmount == 8'hFD & d_last & _dec_T_511;
  wire        inc_254 = casez_tmp == 8'hFE & _inc_T_255;
  wire        dec_254 = d_sel_shiftAmount == 8'hFE & d_last & _dec_T_511;
  wire        inc_255 = (&casez_tmp) & _inc_T_255;
  wire        dec_255 = (&d_sel_shiftAmount) & d_last & _dec_T_511;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~dec | count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc | ~count_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_1 | count_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_1 | ~count_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_2 | count_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_2 | ~count_3)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_3 | count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_3 | ~count_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_4 | count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_4 | ~count_5)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_5 | count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_5 | ~count_6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_6 | count_7)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_6 | ~count_7)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_7 | count_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_7 | ~count_8)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_8 | count_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_8 | ~count_9)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_9 | count_10)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_9 | ~count_10)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_10 | count_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_10 | ~count_11)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_11 | count_12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_11 | ~count_12)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_12 | count_13)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_12 | ~count_13)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_13 | count_14)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_13 | ~count_14)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_14 | count_15)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_14 | ~count_15)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_15 | count_16)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_15 | ~count_16)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_16 | count_17)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_16 | ~count_17)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_17 | count_18)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_17 | ~count_18)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_18 | count_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_18 | ~count_19)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_19 | count_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_19 | ~count_20)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_20 | count_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_20 | ~count_21)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_21 | count_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_21 | ~count_22)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_22 | count_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_22 | ~count_23)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_23 | count_24)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_23 | ~count_24)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_24 | count_25)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_24 | ~count_25)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_25 | count_26)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_25 | ~count_26)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_26 | count_27)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_26 | ~count_27)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_27 | count_28)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_27 | ~count_28)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_28 | count_29)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_28 | ~count_29)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_29 | count_30)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_29 | ~count_30)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_30 | count_31)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_30 | ~count_31)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_31 | count_32)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_31 | ~count_32)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_32 | count_33)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_32 | ~count_33)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_33 | count_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_33 | ~count_34)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_34 | count_35)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_34 | ~count_35)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_35 | count_36)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_35 | ~count_36)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_36 | count_37)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_36 | ~count_37)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_37 | count_38)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_37 | ~count_38)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_38 | count_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_38 | ~count_39)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_39 | count_40)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_39 | ~count_40)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_40 | count_41)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_40 | ~count_41)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_41 | count_42)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_41 | ~count_42)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_42 | count_43)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_42 | ~count_43)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_43 | count_44)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_43 | ~count_44)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_44 | count_45)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_44 | ~count_45)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_45 | count_46)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_45 | ~count_46)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_46 | count_47)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_46 | ~count_47)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_47 | count_48)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_47 | ~count_48)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_48 | count_49)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_48 | ~count_49)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_49 | count_50)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_49 | ~count_50)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_50 | count_51)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_50 | ~count_51)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_51 | count_52)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_51 | ~count_52)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_52 | count_53)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_52 | ~count_53)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_53 | count_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_53 | ~count_54)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_54 | count_55)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_54 | ~count_55)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_55 | count_56)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_55 | ~count_56)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_56 | count_57)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_56 | ~count_57)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_57 | count_58)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_57 | ~count_58)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_58 | count_59)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_58 | ~count_59)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_59 | count_60)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_59 | ~count_60)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_60 | count_61)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_60 | ~count_61)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_61 | count_62)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_61 | ~count_62)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_62 | count_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_62 | ~count_63)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_63 | count_64)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_63 | ~count_64)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_64 | count_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_64 | ~count_65)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_65 | count_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_65 | ~count_66)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_66 | count_67)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_66 | ~count_67)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_67 | count_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_67 | ~count_68)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_68 | count_69)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_68 | ~count_69)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_69 | count_70)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_69 | ~count_70)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_70 | count_71)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_70 | ~count_71)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_71 | count_72)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_71 | ~count_72)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_72 | count_73)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_72 | ~count_73)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_73 | count_74)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_73 | ~count_74)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_74 | count_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_74 | ~count_75)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_75 | count_76)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_75 | ~count_76)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_76 | count_77)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_76 | ~count_77)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_77 | count_78)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_77 | ~count_78)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_78 | count_79)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_78 | ~count_79)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_79 | count_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_79 | ~count_80)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_80 | count_81)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_80 | ~count_81)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_81 | count_82)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_81 | ~count_82)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_82 | count_83)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_82 | ~count_83)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_83 | count_84)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_83 | ~count_84)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_84 | count_85)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_84 | ~count_85)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_85 | count_86)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_85 | ~count_86)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_86 | count_87)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_86 | ~count_87)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_87 | count_88)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_87 | ~count_88)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_88 | count_89)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_88 | ~count_89)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_89 | count_90)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_89 | ~count_90)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_90 | count_91)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_90 | ~count_91)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_91 | count_92)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_91 | ~count_92)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_92 | count_93)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_92 | ~count_93)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_93 | count_94)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_93 | ~count_94)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_94 | count_95)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_94 | ~count_95)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_95 | count_96)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_95 | ~count_96)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_96 | count_97)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_96 | ~count_97)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_97 | count_98)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_97 | ~count_98)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_98 | count_99)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_98 | ~count_99)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_99 | count_100)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_99 | ~count_100)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_100 | count_101)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_100 | ~count_101)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_101 | count_102)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_101 | ~count_102)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_102 | count_103)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_102 | ~count_103)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_103 | count_104)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_103 | ~count_104)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_104 | count_105)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_104 | ~count_105)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_105 | count_106)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_105 | ~count_106)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_106 | count_107)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_106 | ~count_107)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_107 | count_108)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_107 | ~count_108)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_108 | count_109)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_108 | ~count_109)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_109 | count_110)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_109 | ~count_110)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_110 | count_111)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_110 | ~count_111)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_111 | count_112)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_111 | ~count_112)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_112 | count_113)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_112 | ~count_113)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_113 | count_114)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_113 | ~count_114)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_114 | count_115)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_114 | ~count_115)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_115 | count_116)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_115 | ~count_116)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_116 | count_117)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_116 | ~count_117)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_117 | count_118)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_117 | ~count_118)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_118 | count_119)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_118 | ~count_119)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_119 | count_120)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_119 | ~count_120)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_120 | count_121)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_120 | ~count_121)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_121 | count_122)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_121 | ~count_122)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_122 | count_123)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_122 | ~count_123)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_123 | count_124)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_123 | ~count_124)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_124 | count_125)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_124 | ~count_125)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_125 | count_126)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_125 | ~count_126)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_126 | count_127)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_126 | ~count_127)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_127 | count_128)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_127 | ~count_128)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_128 | count_129)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_128 | ~count_129)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_129 | count_130)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_129 | ~count_130)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_130 | count_131)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_130 | ~count_131)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_131 | count_132)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_131 | ~count_132)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_132 | count_133)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_132 | ~count_133)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_133 | count_134)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_133 | ~count_134)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_134 | count_135)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_134 | ~count_135)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_135 | count_136)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_135 | ~count_136)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_136 | count_137)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_136 | ~count_137)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_137 | count_138)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_137 | ~count_138)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_138 | count_139)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_138 | ~count_139)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_139 | count_140)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_139 | ~count_140)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_140 | count_141)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_140 | ~count_141)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_141 | count_142)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_141 | ~count_142)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_142 | count_143)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_142 | ~count_143)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_143 | count_144)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_143 | ~count_144)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_144 | count_145)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_144 | ~count_145)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_145 | count_146)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_145 | ~count_146)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_146 | count_147)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_146 | ~count_147)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_147 | count_148)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_147 | ~count_148)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_148 | count_149)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_148 | ~count_149)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_149 | count_150)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_149 | ~count_150)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_150 | count_151)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_150 | ~count_151)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_151 | count_152)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_151 | ~count_152)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_152 | count_153)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_152 | ~count_153)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_153 | count_154)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_153 | ~count_154)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_154 | count_155)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_154 | ~count_155)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_155 | count_156)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_155 | ~count_156)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_156 | count_157)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_156 | ~count_157)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_157 | count_158)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_157 | ~count_158)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_158 | count_159)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_158 | ~count_159)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_159 | count_160)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_159 | ~count_160)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_160 | count_161)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_160 | ~count_161)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_161 | count_162)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_161 | ~count_162)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_162 | count_163)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_162 | ~count_163)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_163 | count_164)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_163 | ~count_164)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_164 | count_165)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_164 | ~count_165)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_165 | count_166)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_165 | ~count_166)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_166 | count_167)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_166 | ~count_167)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_167 | count_168)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_167 | ~count_168)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_168 | count_169)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_168 | ~count_169)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_169 | count_170)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_169 | ~count_170)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_170 | count_171)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_170 | ~count_171)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_171 | count_172)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_171 | ~count_172)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_172 | count_173)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_172 | ~count_173)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_173 | count_174)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_173 | ~count_174)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_174 | count_175)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_174 | ~count_175)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_175 | count_176)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_175 | ~count_176)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_176 | count_177)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_176 | ~count_177)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_177 | count_178)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_177 | ~count_178)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_178 | count_179)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_178 | ~count_179)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_179 | count_180)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_179 | ~count_180)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_180 | count_181)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_180 | ~count_181)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_181 | count_182)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_181 | ~count_182)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_182 | count_183)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_182 | ~count_183)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_183 | count_184)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_183 | ~count_184)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_184 | count_185)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_184 | ~count_185)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_185 | count_186)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_185 | ~count_186)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_186 | count_187)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_186 | ~count_187)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_187 | count_188)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_187 | ~count_188)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_188 | count_189)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_188 | ~count_189)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_189 | count_190)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_189 | ~count_190)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_190 | count_191)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_190 | ~count_191)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_191 | count_192)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_191 | ~count_192)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_192 | count_193)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_192 | ~count_193)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_193 | count_194)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_193 | ~count_194)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_194 | count_195)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_194 | ~count_195)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_195 | count_196)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_195 | ~count_196)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_196 | count_197)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_196 | ~count_197)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_197 | count_198)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_197 | ~count_198)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_198 | count_199)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_198 | ~count_199)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_199 | count_200)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_199 | ~count_200)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_200 | count_201)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_200 | ~count_201)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_201 | count_202)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_201 | ~count_202)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_202 | count_203)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_202 | ~count_203)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_203 | count_204)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_203 | ~count_204)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_204 | count_205)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_204 | ~count_205)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_205 | count_206)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_205 | ~count_206)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_206 | count_207)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_206 | ~count_207)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_207 | count_208)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_207 | ~count_208)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_208 | count_209)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_208 | ~count_209)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_209 | count_210)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_209 | ~count_210)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_210 | count_211)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_210 | ~count_211)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_211 | count_212)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_211 | ~count_212)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_212 | count_213)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_212 | ~count_213)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_213 | count_214)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_213 | ~count_214)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_214 | count_215)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_214 | ~count_215)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_215 | count_216)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_215 | ~count_216)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_216 | count_217)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_216 | ~count_217)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_217 | count_218)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_217 | ~count_218)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_218 | count_219)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_218 | ~count_219)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_219 | count_220)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_219 | ~count_220)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_220 | count_221)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_220 | ~count_221)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_221 | count_222)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_221 | ~count_222)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_222 | count_223)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_222 | ~count_223)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_223 | count_224)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_223 | ~count_224)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_224 | count_225)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_224 | ~count_225)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_225 | count_226)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_225 | ~count_226)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_226 | count_227)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_226 | ~count_227)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_227 | count_228)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_227 | ~count_228)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_228 | count_229)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_228 | ~count_229)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_229 | count_230)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_229 | ~count_230)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_230 | count_231)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_230 | ~count_231)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_231 | count_232)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_231 | ~count_232)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_232 | count_233)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_232 | ~count_233)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_233 | count_234)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_233 | ~count_234)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_234 | count_235)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_234 | ~count_235)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_235 | count_236)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_235 | ~count_236)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_236 | count_237)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_236 | ~count_237)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_237 | count_238)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_237 | ~count_238)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_238 | count_239)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_238 | ~count_239)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_239 | count_240)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_239 | ~count_240)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_240 | count_241)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_240 | ~count_241)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_241 | count_242)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_241 | ~count_242)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_242 | count_243)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_242 | ~count_243)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_243 | count_244)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_243 | ~count_244)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_244 | count_245)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_244 | ~count_245)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_245 | count_246)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_245 | ~count_246)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_246 | count_247)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_246 | ~count_247)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_247 | count_248)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_247 | ~count_248)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_248 | count_249)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_248 | ~count_249)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_249 | count_250)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_249 | ~count_250)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_250 | count_251)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_250 | ~count_251)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_251 | count_252)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_251 | ~count_252)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_252 | count_253)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_252 | ~count_253)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_253 | count_254)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_253 | ~count_254)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_254 | count_255)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_254 | ~count_255)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~dec_255 | count_256)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:273 assert (!dec || count =/= 0.U)        // underflow\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~inc_255 | ~count_256)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at ToAXI4.scala:274 assert (!inc || count =/= maxCount.U) // overflow\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      counter <= 3'h0;
      doneAW <= 1'h0;
      r_holds_d <= 1'h0;
      r_first <= 1'h1;
      count_1 <= 1'h0;
      count_2 <= 1'h0;
      count_3 <= 1'h0;
      count_4 <= 1'h0;
      count_5 <= 1'h0;
      count_6 <= 1'h0;
      count_7 <= 1'h0;
      count_8 <= 1'h0;
      count_9 <= 1'h0;
      count_10 <= 1'h0;
      count_11 <= 1'h0;
      count_12 <= 1'h0;
      count_13 <= 1'h0;
      count_14 <= 1'h0;
      count_15 <= 1'h0;
      count_16 <= 1'h0;
      count_17 <= 1'h0;
      count_18 <= 1'h0;
      count_19 <= 1'h0;
      count_20 <= 1'h0;
      count_21 <= 1'h0;
      count_22 <= 1'h0;
      count_23 <= 1'h0;
      count_24 <= 1'h0;
      count_25 <= 1'h0;
      count_26 <= 1'h0;
      count_27 <= 1'h0;
      count_28 <= 1'h0;
      count_29 <= 1'h0;
      count_30 <= 1'h0;
      count_31 <= 1'h0;
      count_32 <= 1'h0;
      count_33 <= 1'h0;
      count_34 <= 1'h0;
      count_35 <= 1'h0;
      count_36 <= 1'h0;
      count_37 <= 1'h0;
      count_38 <= 1'h0;
      count_39 <= 1'h0;
      count_40 <= 1'h0;
      count_41 <= 1'h0;
      count_42 <= 1'h0;
      count_43 <= 1'h0;
      count_44 <= 1'h0;
      count_45 <= 1'h0;
      count_46 <= 1'h0;
      count_47 <= 1'h0;
      count_48 <= 1'h0;
      count_49 <= 1'h0;
      count_50 <= 1'h0;
      count_51 <= 1'h0;
      count_52 <= 1'h0;
      count_53 <= 1'h0;
      count_54 <= 1'h0;
      count_55 <= 1'h0;
      count_56 <= 1'h0;
      count_57 <= 1'h0;
      count_58 <= 1'h0;
      count_59 <= 1'h0;
      count_60 <= 1'h0;
      count_61 <= 1'h0;
      count_62 <= 1'h0;
      count_63 <= 1'h0;
      count_64 <= 1'h0;
      count_65 <= 1'h0;
      count_66 <= 1'h0;
      count_67 <= 1'h0;
      count_68 <= 1'h0;
      count_69 <= 1'h0;
      count_70 <= 1'h0;
      count_71 <= 1'h0;
      count_72 <= 1'h0;
      count_73 <= 1'h0;
      count_74 <= 1'h0;
      count_75 <= 1'h0;
      count_76 <= 1'h0;
      count_77 <= 1'h0;
      count_78 <= 1'h0;
      count_79 <= 1'h0;
      count_80 <= 1'h0;
      count_81 <= 1'h0;
      count_82 <= 1'h0;
      count_83 <= 1'h0;
      count_84 <= 1'h0;
      count_85 <= 1'h0;
      count_86 <= 1'h0;
      count_87 <= 1'h0;
      count_88 <= 1'h0;
      count_89 <= 1'h0;
      count_90 <= 1'h0;
      count_91 <= 1'h0;
      count_92 <= 1'h0;
      count_93 <= 1'h0;
      count_94 <= 1'h0;
      count_95 <= 1'h0;
      count_96 <= 1'h0;
      count_97 <= 1'h0;
      count_98 <= 1'h0;
      count_99 <= 1'h0;
      count_100 <= 1'h0;
      count_101 <= 1'h0;
      count_102 <= 1'h0;
      count_103 <= 1'h0;
      count_104 <= 1'h0;
      count_105 <= 1'h0;
      count_106 <= 1'h0;
      count_107 <= 1'h0;
      count_108 <= 1'h0;
      count_109 <= 1'h0;
      count_110 <= 1'h0;
      count_111 <= 1'h0;
      count_112 <= 1'h0;
      count_113 <= 1'h0;
      count_114 <= 1'h0;
      count_115 <= 1'h0;
      count_116 <= 1'h0;
      count_117 <= 1'h0;
      count_118 <= 1'h0;
      count_119 <= 1'h0;
      count_120 <= 1'h0;
      count_121 <= 1'h0;
      count_122 <= 1'h0;
      count_123 <= 1'h0;
      count_124 <= 1'h0;
      count_125 <= 1'h0;
      count_126 <= 1'h0;
      count_127 <= 1'h0;
      count_128 <= 1'h0;
      count_129 <= 1'h0;
      count_130 <= 1'h0;
      count_131 <= 1'h0;
      count_132 <= 1'h0;
      count_133 <= 1'h0;
      count_134 <= 1'h0;
      count_135 <= 1'h0;
      count_136 <= 1'h0;
      count_137 <= 1'h0;
      count_138 <= 1'h0;
      count_139 <= 1'h0;
      count_140 <= 1'h0;
      count_141 <= 1'h0;
      count_142 <= 1'h0;
      count_143 <= 1'h0;
      count_144 <= 1'h0;
      count_145 <= 1'h0;
      count_146 <= 1'h0;
      count_147 <= 1'h0;
      count_148 <= 1'h0;
      count_149 <= 1'h0;
      count_150 <= 1'h0;
      count_151 <= 1'h0;
      count_152 <= 1'h0;
      count_153 <= 1'h0;
      count_154 <= 1'h0;
      count_155 <= 1'h0;
      count_156 <= 1'h0;
      count_157 <= 1'h0;
      count_158 <= 1'h0;
      count_159 <= 1'h0;
      count_160 <= 1'h0;
      count_161 <= 1'h0;
      count_162 <= 1'h0;
      count_163 <= 1'h0;
      count_164 <= 1'h0;
      count_165 <= 1'h0;
      count_166 <= 1'h0;
      count_167 <= 1'h0;
      count_168 <= 1'h0;
      count_169 <= 1'h0;
      count_170 <= 1'h0;
      count_171 <= 1'h0;
      count_172 <= 1'h0;
      count_173 <= 1'h0;
      count_174 <= 1'h0;
      count_175 <= 1'h0;
      count_176 <= 1'h0;
      count_177 <= 1'h0;
      count_178 <= 1'h0;
      count_179 <= 1'h0;
      count_180 <= 1'h0;
      count_181 <= 1'h0;
      count_182 <= 1'h0;
      count_183 <= 1'h0;
      count_184 <= 1'h0;
      count_185 <= 1'h0;
      count_186 <= 1'h0;
      count_187 <= 1'h0;
      count_188 <= 1'h0;
      count_189 <= 1'h0;
      count_190 <= 1'h0;
      count_191 <= 1'h0;
      count_192 <= 1'h0;
      count_193 <= 1'h0;
      count_194 <= 1'h0;
      count_195 <= 1'h0;
      count_196 <= 1'h0;
      count_197 <= 1'h0;
      count_198 <= 1'h0;
      count_199 <= 1'h0;
      count_200 <= 1'h0;
      count_201 <= 1'h0;
      count_202 <= 1'h0;
      count_203 <= 1'h0;
      count_204 <= 1'h0;
      count_205 <= 1'h0;
      count_206 <= 1'h0;
      count_207 <= 1'h0;
      count_208 <= 1'h0;
      count_209 <= 1'h0;
      count_210 <= 1'h0;
      count_211 <= 1'h0;
      count_212 <= 1'h0;
      count_213 <= 1'h0;
      count_214 <= 1'h0;
      count_215 <= 1'h0;
      count_216 <= 1'h0;
      count_217 <= 1'h0;
      count_218 <= 1'h0;
      count_219 <= 1'h0;
      count_220 <= 1'h0;
      count_221 <= 1'h0;
      count_222 <= 1'h0;
      count_223 <= 1'h0;
      count_224 <= 1'h0;
      count_225 <= 1'h0;
      count_226 <= 1'h0;
      count_227 <= 1'h0;
      count_228 <= 1'h0;
      count_229 <= 1'h0;
      count_230 <= 1'h0;
      count_231 <= 1'h0;
      count_232 <= 1'h0;
      count_233 <= 1'h0;
      count_234 <= 1'h0;
      count_235 <= 1'h0;
      count_236 <= 1'h0;
      count_237 <= 1'h0;
      count_238 <= 1'h0;
      count_239 <= 1'h0;
      count_240 <= 1'h0;
      count_241 <= 1'h0;
      count_242 <= 1'h0;
      count_243 <= 1'h0;
      count_244 <= 1'h0;
      count_245 <= 1'h0;
      count_246 <= 1'h0;
      count_247 <= 1'h0;
      count_248 <= 1'h0;
      count_249 <= 1'h0;
      count_250 <= 1'h0;
      count_251 <= 1'h0;
      count_252 <= 1'h0;
      count_253 <= 1'h0;
      count_254 <= 1'h0;
      count_255 <= 1'h0;
      count_256 <= 1'h0;
    end
    else begin
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (a_first) begin
          if (auto_in_a_bits_opcode[2])
            counter <= 3'h0;
          else
            counter <= ~(_beats1_decode_T_1[5:3]);
        end
        else
          counter <= counter - 3'h1;
        doneAW <= ~out_w_bits_last;
      end
      if (nodeOut_r_ready & auto_out_r_valid) begin
        r_holds_d <= ~auto_out_r_bits_last;
        r_first <= auto_out_r_bits_last;
      end
      count_1 <= count_1 + inc - dec;
      count_2 <= count_2 + inc_1 - dec_1;
      count_3 <= count_3 + inc_2 - dec_2;
      count_4 <= count_4 + inc_3 - dec_3;
      count_5 <= count_5 + inc_4 - dec_4;
      count_6 <= count_6 + inc_5 - dec_5;
      count_7 <= count_7 + inc_6 - dec_6;
      count_8 <= count_8 + inc_7 - dec_7;
      count_9 <= count_9 + inc_8 - dec_8;
      count_10 <= count_10 + inc_9 - dec_9;
      count_11 <= count_11 + inc_10 - dec_10;
      count_12 <= count_12 + inc_11 - dec_11;
      count_13 <= count_13 + inc_12 - dec_12;
      count_14 <= count_14 + inc_13 - dec_13;
      count_15 <= count_15 + inc_14 - dec_14;
      count_16 <= count_16 + inc_15 - dec_15;
      count_17 <= count_17 + inc_16 - dec_16;
      count_18 <= count_18 + inc_17 - dec_17;
      count_19 <= count_19 + inc_18 - dec_18;
      count_20 <= count_20 + inc_19 - dec_19;
      count_21 <= count_21 + inc_20 - dec_20;
      count_22 <= count_22 + inc_21 - dec_21;
      count_23 <= count_23 + inc_22 - dec_22;
      count_24 <= count_24 + inc_23 - dec_23;
      count_25 <= count_25 + inc_24 - dec_24;
      count_26 <= count_26 + inc_25 - dec_25;
      count_27 <= count_27 + inc_26 - dec_26;
      count_28 <= count_28 + inc_27 - dec_27;
      count_29 <= count_29 + inc_28 - dec_28;
      count_30 <= count_30 + inc_29 - dec_29;
      count_31 <= count_31 + inc_30 - dec_30;
      count_32 <= count_32 + inc_31 - dec_31;
      count_33 <= count_33 + inc_32 - dec_32;
      count_34 <= count_34 + inc_33 - dec_33;
      count_35 <= count_35 + inc_34 - dec_34;
      count_36 <= count_36 + inc_35 - dec_35;
      count_37 <= count_37 + inc_36 - dec_36;
      count_38 <= count_38 + inc_37 - dec_37;
      count_39 <= count_39 + inc_38 - dec_38;
      count_40 <= count_40 + inc_39 - dec_39;
      count_41 <= count_41 + inc_40 - dec_40;
      count_42 <= count_42 + inc_41 - dec_41;
      count_43 <= count_43 + inc_42 - dec_42;
      count_44 <= count_44 + inc_43 - dec_43;
      count_45 <= count_45 + inc_44 - dec_44;
      count_46 <= count_46 + inc_45 - dec_45;
      count_47 <= count_47 + inc_46 - dec_46;
      count_48 <= count_48 + inc_47 - dec_47;
      count_49 <= count_49 + inc_48 - dec_48;
      count_50 <= count_50 + inc_49 - dec_49;
      count_51 <= count_51 + inc_50 - dec_50;
      count_52 <= count_52 + inc_51 - dec_51;
      count_53 <= count_53 + inc_52 - dec_52;
      count_54 <= count_54 + inc_53 - dec_53;
      count_55 <= count_55 + inc_54 - dec_54;
      count_56 <= count_56 + inc_55 - dec_55;
      count_57 <= count_57 + inc_56 - dec_56;
      count_58 <= count_58 + inc_57 - dec_57;
      count_59 <= count_59 + inc_58 - dec_58;
      count_60 <= count_60 + inc_59 - dec_59;
      count_61 <= count_61 + inc_60 - dec_60;
      count_62 <= count_62 + inc_61 - dec_61;
      count_63 <= count_63 + inc_62 - dec_62;
      count_64 <= count_64 + inc_63 - dec_63;
      count_65 <= count_65 + inc_64 - dec_64;
      count_66 <= count_66 + inc_65 - dec_65;
      count_67 <= count_67 + inc_66 - dec_66;
      count_68 <= count_68 + inc_67 - dec_67;
      count_69 <= count_69 + inc_68 - dec_68;
      count_70 <= count_70 + inc_69 - dec_69;
      count_71 <= count_71 + inc_70 - dec_70;
      count_72 <= count_72 + inc_71 - dec_71;
      count_73 <= count_73 + inc_72 - dec_72;
      count_74 <= count_74 + inc_73 - dec_73;
      count_75 <= count_75 + inc_74 - dec_74;
      count_76 <= count_76 + inc_75 - dec_75;
      count_77 <= count_77 + inc_76 - dec_76;
      count_78 <= count_78 + inc_77 - dec_77;
      count_79 <= count_79 + inc_78 - dec_78;
      count_80 <= count_80 + inc_79 - dec_79;
      count_81 <= count_81 + inc_80 - dec_80;
      count_82 <= count_82 + inc_81 - dec_81;
      count_83 <= count_83 + inc_82 - dec_82;
      count_84 <= count_84 + inc_83 - dec_83;
      count_85 <= count_85 + inc_84 - dec_84;
      count_86 <= count_86 + inc_85 - dec_85;
      count_87 <= count_87 + inc_86 - dec_86;
      count_88 <= count_88 + inc_87 - dec_87;
      count_89 <= count_89 + inc_88 - dec_88;
      count_90 <= count_90 + inc_89 - dec_89;
      count_91 <= count_91 + inc_90 - dec_90;
      count_92 <= count_92 + inc_91 - dec_91;
      count_93 <= count_93 + inc_92 - dec_92;
      count_94 <= count_94 + inc_93 - dec_93;
      count_95 <= count_95 + inc_94 - dec_94;
      count_96 <= count_96 + inc_95 - dec_95;
      count_97 <= count_97 + inc_96 - dec_96;
      count_98 <= count_98 + inc_97 - dec_97;
      count_99 <= count_99 + inc_98 - dec_98;
      count_100 <= count_100 + inc_99 - dec_99;
      count_101 <= count_101 + inc_100 - dec_100;
      count_102 <= count_102 + inc_101 - dec_101;
      count_103 <= count_103 + inc_102 - dec_102;
      count_104 <= count_104 + inc_103 - dec_103;
      count_105 <= count_105 + inc_104 - dec_104;
      count_106 <= count_106 + inc_105 - dec_105;
      count_107 <= count_107 + inc_106 - dec_106;
      count_108 <= count_108 + inc_107 - dec_107;
      count_109 <= count_109 + inc_108 - dec_108;
      count_110 <= count_110 + inc_109 - dec_109;
      count_111 <= count_111 + inc_110 - dec_110;
      count_112 <= count_112 + inc_111 - dec_111;
      count_113 <= count_113 + inc_112 - dec_112;
      count_114 <= count_114 + inc_113 - dec_113;
      count_115 <= count_115 + inc_114 - dec_114;
      count_116 <= count_116 + inc_115 - dec_115;
      count_117 <= count_117 + inc_116 - dec_116;
      count_118 <= count_118 + inc_117 - dec_117;
      count_119 <= count_119 + inc_118 - dec_118;
      count_120 <= count_120 + inc_119 - dec_119;
      count_121 <= count_121 + inc_120 - dec_120;
      count_122 <= count_122 + inc_121 - dec_121;
      count_123 <= count_123 + inc_122 - dec_122;
      count_124 <= count_124 + inc_123 - dec_123;
      count_125 <= count_125 + inc_124 - dec_124;
      count_126 <= count_126 + inc_125 - dec_125;
      count_127 <= count_127 + inc_126 - dec_126;
      count_128 <= count_128 + inc_127 - dec_127;
      count_129 <= count_129 + inc_128 - dec_128;
      count_130 <= count_130 + inc_129 - dec_129;
      count_131 <= count_131 + inc_130 - dec_130;
      count_132 <= count_132 + inc_131 - dec_131;
      count_133 <= count_133 + inc_132 - dec_132;
      count_134 <= count_134 + inc_133 - dec_133;
      count_135 <= count_135 + inc_134 - dec_134;
      count_136 <= count_136 + inc_135 - dec_135;
      count_137 <= count_137 + inc_136 - dec_136;
      count_138 <= count_138 + inc_137 - dec_137;
      count_139 <= count_139 + inc_138 - dec_138;
      count_140 <= count_140 + inc_139 - dec_139;
      count_141 <= count_141 + inc_140 - dec_140;
      count_142 <= count_142 + inc_141 - dec_141;
      count_143 <= count_143 + inc_142 - dec_142;
      count_144 <= count_144 + inc_143 - dec_143;
      count_145 <= count_145 + inc_144 - dec_144;
      count_146 <= count_146 + inc_145 - dec_145;
      count_147 <= count_147 + inc_146 - dec_146;
      count_148 <= count_148 + inc_147 - dec_147;
      count_149 <= count_149 + inc_148 - dec_148;
      count_150 <= count_150 + inc_149 - dec_149;
      count_151 <= count_151 + inc_150 - dec_150;
      count_152 <= count_152 + inc_151 - dec_151;
      count_153 <= count_153 + inc_152 - dec_152;
      count_154 <= count_154 + inc_153 - dec_153;
      count_155 <= count_155 + inc_154 - dec_154;
      count_156 <= count_156 + inc_155 - dec_155;
      count_157 <= count_157 + inc_156 - dec_156;
      count_158 <= count_158 + inc_157 - dec_157;
      count_159 <= count_159 + inc_158 - dec_158;
      count_160 <= count_160 + inc_159 - dec_159;
      count_161 <= count_161 + inc_160 - dec_160;
      count_162 <= count_162 + inc_161 - dec_161;
      count_163 <= count_163 + inc_162 - dec_162;
      count_164 <= count_164 + inc_163 - dec_163;
      count_165 <= count_165 + inc_164 - dec_164;
      count_166 <= count_166 + inc_165 - dec_165;
      count_167 <= count_167 + inc_166 - dec_166;
      count_168 <= count_168 + inc_167 - dec_167;
      count_169 <= count_169 + inc_168 - dec_168;
      count_170 <= count_170 + inc_169 - dec_169;
      count_171 <= count_171 + inc_170 - dec_170;
      count_172 <= count_172 + inc_171 - dec_171;
      count_173 <= count_173 + inc_172 - dec_172;
      count_174 <= count_174 + inc_173 - dec_173;
      count_175 <= count_175 + inc_174 - dec_174;
      count_176 <= count_176 + inc_175 - dec_175;
      count_177 <= count_177 + inc_176 - dec_176;
      count_178 <= count_178 + inc_177 - dec_177;
      count_179 <= count_179 + inc_178 - dec_178;
      count_180 <= count_180 + inc_179 - dec_179;
      count_181 <= count_181 + inc_180 - dec_180;
      count_182 <= count_182 + inc_181 - dec_181;
      count_183 <= count_183 + inc_182 - dec_182;
      count_184 <= count_184 + inc_183 - dec_183;
      count_185 <= count_185 + inc_184 - dec_184;
      count_186 <= count_186 + inc_185 - dec_185;
      count_187 <= count_187 + inc_186 - dec_186;
      count_188 <= count_188 + inc_187 - dec_187;
      count_189 <= count_189 + inc_188 - dec_188;
      count_190 <= count_190 + inc_189 - dec_189;
      count_191 <= count_191 + inc_190 - dec_190;
      count_192 <= count_192 + inc_191 - dec_191;
      count_193 <= count_193 + inc_192 - dec_192;
      count_194 <= count_194 + inc_193 - dec_193;
      count_195 <= count_195 + inc_194 - dec_194;
      count_196 <= count_196 + inc_195 - dec_195;
      count_197 <= count_197 + inc_196 - dec_196;
      count_198 <= count_198 + inc_197 - dec_197;
      count_199 <= count_199 + inc_198 - dec_198;
      count_200 <= count_200 + inc_199 - dec_199;
      count_201 <= count_201 + inc_200 - dec_200;
      count_202 <= count_202 + inc_201 - dec_201;
      count_203 <= count_203 + inc_202 - dec_202;
      count_204 <= count_204 + inc_203 - dec_203;
      count_205 <= count_205 + inc_204 - dec_204;
      count_206 <= count_206 + inc_205 - dec_205;
      count_207 <= count_207 + inc_206 - dec_206;
      count_208 <= count_208 + inc_207 - dec_207;
      count_209 <= count_209 + inc_208 - dec_208;
      count_210 <= count_210 + inc_209 - dec_209;
      count_211 <= count_211 + inc_210 - dec_210;
      count_212 <= count_212 + inc_211 - dec_211;
      count_213 <= count_213 + inc_212 - dec_212;
      count_214 <= count_214 + inc_213 - dec_213;
      count_215 <= count_215 + inc_214 - dec_214;
      count_216 <= count_216 + inc_215 - dec_215;
      count_217 <= count_217 + inc_216 - dec_216;
      count_218 <= count_218 + inc_217 - dec_217;
      count_219 <= count_219 + inc_218 - dec_218;
      count_220 <= count_220 + inc_219 - dec_219;
      count_221 <= count_221 + inc_220 - dec_220;
      count_222 <= count_222 + inc_221 - dec_221;
      count_223 <= count_223 + inc_222 - dec_222;
      count_224 <= count_224 + inc_223 - dec_223;
      count_225 <= count_225 + inc_224 - dec_224;
      count_226 <= count_226 + inc_225 - dec_225;
      count_227 <= count_227 + inc_226 - dec_226;
      count_228 <= count_228 + inc_227 - dec_227;
      count_229 <= count_229 + inc_228 - dec_228;
      count_230 <= count_230 + inc_229 - dec_229;
      count_231 <= count_231 + inc_230 - dec_230;
      count_232 <= count_232 + inc_231 - dec_231;
      count_233 <= count_233 + inc_232 - dec_232;
      count_234 <= count_234 + inc_233 - dec_233;
      count_235 <= count_235 + inc_234 - dec_234;
      count_236 <= count_236 + inc_235 - dec_235;
      count_237 <= count_237 + inc_236 - dec_236;
      count_238 <= count_238 + inc_237 - dec_237;
      count_239 <= count_239 + inc_238 - dec_238;
      count_240 <= count_240 + inc_239 - dec_239;
      count_241 <= count_241 + inc_240 - dec_240;
      count_242 <= count_242 + inc_241 - dec_241;
      count_243 <= count_243 + inc_242 - dec_242;
      count_244 <= count_244 + inc_243 - dec_243;
      count_245 <= count_245 + inc_244 - dec_244;
      count_246 <= count_246 + inc_245 - dec_245;
      count_247 <= count_247 + inc_246 - dec_246;
      count_248 <= count_248 + inc_247 - dec_247;
      count_249 <= count_249 + inc_248 - dec_248;
      count_250 <= count_250 + inc_249 - dec_249;
      count_251 <= count_251 + inc_250 - dec_250;
      count_252 <= count_252 + inc_251 - dec_251;
      count_253 <= count_253 + inc_252 - dec_252;
      count_254 <= count_254 + inc_253 - dec_253;
      count_255 <= count_255 + inc_254 - dec_254;
      count_256 <= count_256 + inc_255 - dec_255;
    end
    if (auto_out_b_valid & ~nodeOut_b_ready)
      b_delay <= b_delay + 3'h1;
    else
      b_delay <= 3'h0;
    if (r_first)
      r_denied_r <= &auto_out_r_bits_resp;
  end // always @(posedge)
  Queue_23 nodeOut_w_deq_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid
      (~stall & auto_in_a_valid & ~(auto_in_a_bits_opcode[2]) & _out_w_valid_T_3),
    .io_enq_bits_data (auto_in_a_bits_data),
    .io_enq_bits_strb (auto_in_a_bits_mask),
    .io_enq_bits_last (out_w_bits_last),
    .io_deq_ready     (auto_out_w_ready),
    .io_enq_ready     (_nodeOut_w_deq_q_io_enq_ready),
    .io_deq_valid     (auto_out_w_valid),
    .io_deq_bits_data (auto_out_w_bits_data),
    .io_deq_bits_strb (auto_out_w_bits_strb),
    .io_deq_bits_last (auto_out_w_bits_last)
  );
  Queue_81 queue_arw_deq_q (
    .clock                            (clock),
    .reset                            (reset),
    .io_enq_valid                     (out_arw_valid),
    .io_enq_bits_id                   (casez_tmp),
    .io_enq_bits_addr                 (auto_in_a_bits_address),
    .io_enq_bits_len                  (~(_out_arw_bits_len_T_1[10:3])),
    .io_enq_bits_size
      (auto_in_a_bits_size > 3'h2 ? 3'h3 : auto_in_a_bits_size),
    .io_enq_bits_echo_tl_state_size   ({1'h0, auto_in_a_bits_size}),
    .io_enq_bits_echo_tl_state_source (auto_in_a_bits_source),
    .io_enq_bits_wen                  (~(auto_in_a_bits_opcode[2])),
    .io_deq_ready
      (_queue_arw_deq_q_io_deq_bits_wen ? auto_out_aw_ready : auto_out_ar_ready),
    .io_enq_ready                     (_queue_arw_deq_q_io_enq_ready),
    .io_deq_valid                     (_queue_arw_deq_q_io_deq_valid),
    .io_deq_bits_id                   (_queue_arw_deq_q_io_deq_bits_id),
    .io_deq_bits_addr                 (_queue_arw_deq_q_io_deq_bits_addr),
    .io_deq_bits_len                  (_queue_arw_deq_q_io_deq_bits_len),
    .io_deq_bits_size                 (_queue_arw_deq_q_io_deq_bits_size),
    .io_deq_bits_burst                (_queue_arw_deq_q_io_deq_bits_burst),
    .io_deq_bits_lock                 (_queue_arw_deq_q_io_deq_bits_lock),
    .io_deq_bits_cache                (_queue_arw_deq_q_io_deq_bits_cache),
    .io_deq_bits_prot                 (_queue_arw_deq_q_io_deq_bits_prot),
    .io_deq_bits_qos                  (_queue_arw_deq_q_io_deq_bits_qos),
    .io_deq_bits_echo_tl_state_size   (_queue_arw_deq_q_io_deq_bits_echo_tl_state_size),
    .io_deq_bits_echo_tl_state_source (_queue_arw_deq_q_io_deq_bits_echo_tl_state_source),
    .io_deq_bits_wen                  (_queue_arw_deq_q_io_deq_bits_wen)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = {2'h0, r_wins};
  assign auto_in_d_bits_size =
    r_wins
      ? auto_out_r_bits_echo_tl_state_size[2:0]
      : auto_out_b_bits_echo_tl_state_size[2:0];
  assign auto_in_d_bits_source =
    r_wins ? auto_out_r_bits_echo_tl_state_source : auto_out_b_bits_echo_tl_state_source;
  assign auto_in_d_bits_denied = r_wins ? r_d_denied : (|auto_out_b_bits_resp);
  assign auto_in_d_bits_data = auto_out_r_bits_data;
  assign auto_in_d_bits_corrupt = r_wins & ((|auto_out_r_bits_resp) | r_d_denied);
  assign auto_out_aw_valid =
    _queue_arw_deq_q_io_deq_valid & _queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_aw_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_aw_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_aw_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_aw_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_aw_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_aw_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_aw_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_aw_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_aw_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_aw_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_aw_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_ar_valid =
    _queue_arw_deq_q_io_deq_valid & ~_queue_arw_deq_q_io_deq_bits_wen;
  assign auto_out_ar_bits_id = _queue_arw_deq_q_io_deq_bits_id;
  assign auto_out_ar_bits_addr = _queue_arw_deq_q_io_deq_bits_addr;
  assign auto_out_ar_bits_len = _queue_arw_deq_q_io_deq_bits_len;
  assign auto_out_ar_bits_size = _queue_arw_deq_q_io_deq_bits_size;
  assign auto_out_ar_bits_burst = _queue_arw_deq_q_io_deq_bits_burst;
  assign auto_out_ar_bits_lock = _queue_arw_deq_q_io_deq_bits_lock;
  assign auto_out_ar_bits_cache = _queue_arw_deq_q_io_deq_bits_cache;
  assign auto_out_ar_bits_prot = _queue_arw_deq_q_io_deq_bits_prot;
  assign auto_out_ar_bits_qos = _queue_arw_deq_q_io_deq_bits_qos;
  assign auto_out_ar_bits_echo_tl_state_size =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_size;
  assign auto_out_ar_bits_echo_tl_state_source =
    _queue_arw_deq_q_io_deq_bits_echo_tl_state_source;
  assign auto_out_r_ready = nodeOut_r_ready;
endmodule

module TLInterconnectCoupler_18(
  input         clock,
                reset,
                auto_widget_in_a_valid,
  input  [2:0]  auto_widget_in_a_bits_opcode,
                auto_widget_in_a_bits_size,
  input  [7:0]  auto_widget_in_a_bits_source,
  input  [31:0] auto_widget_in_a_bits_address,
  input  [7:0]  auto_widget_in_a_bits_mask,
  input  [63:0] auto_widget_in_a_bits_data,
  input         auto_widget_in_d_ready,
                auto_axi4yank_out_aw_ready,
                auto_axi4yank_out_w_ready,
                auto_axi4yank_out_b_valid,
  input  [3:0]  auto_axi4yank_out_b_bits_id,
  input  [1:0]  auto_axi4yank_out_b_bits_resp,
  input         auto_axi4yank_out_ar_ready,
                auto_axi4yank_out_r_valid,
  input  [3:0]  auto_axi4yank_out_r_bits_id,
  input  [63:0] auto_axi4yank_out_r_bits_data,
  input  [1:0]  auto_axi4yank_out_r_bits_resp,
  input         auto_axi4yank_out_r_bits_last,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
                auto_tl_in_a_bits_size,
  input  [7:0]  auto_tl_in_a_bits_source,
  input  [31:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
                auto_tl_out_a_ready,
                auto_tl_out_d_valid,
  input  [2:0]  auto_tl_out_d_bits_opcode,
                auto_tl_out_d_bits_size,
  input  [7:0]  auto_tl_out_d_bits_source,
  input         auto_tl_out_d_bits_denied,
  input  [63:0] auto_tl_out_d_bits_data,
  input         auto_tl_out_d_bits_corrupt,
  output        auto_widget_in_a_ready,
                auto_widget_in_d_valid,
  output [2:0]  auto_widget_in_d_bits_opcode,
                auto_widget_in_d_bits_size,
  output [7:0]  auto_widget_in_d_bits_source,
  output        auto_widget_in_d_bits_denied,
  output [63:0] auto_widget_in_d_bits_data,
  output        auto_widget_in_d_bits_corrupt,
                auto_axi4yank_out_aw_valid,
  output [3:0]  auto_axi4yank_out_aw_bits_id,
  output [31:0] auto_axi4yank_out_aw_bits_addr,
  output [7:0]  auto_axi4yank_out_aw_bits_len,
  output [2:0]  auto_axi4yank_out_aw_bits_size,
  output [1:0]  auto_axi4yank_out_aw_bits_burst,
  output        auto_axi4yank_out_aw_bits_lock,
  output [3:0]  auto_axi4yank_out_aw_bits_cache,
  output [2:0]  auto_axi4yank_out_aw_bits_prot,
  output [3:0]  auto_axi4yank_out_aw_bits_qos,
  output        auto_axi4yank_out_w_valid,
  output [63:0] auto_axi4yank_out_w_bits_data,
  output [7:0]  auto_axi4yank_out_w_bits_strb,
  output        auto_axi4yank_out_w_bits_last,
                auto_axi4yank_out_b_ready,
                auto_axi4yank_out_ar_valid,
  output [3:0]  auto_axi4yank_out_ar_bits_id,
  output [31:0] auto_axi4yank_out_ar_bits_addr,
  output [7:0]  auto_axi4yank_out_ar_bits_len,
  output [2:0]  auto_axi4yank_out_ar_bits_size,
  output [1:0]  auto_axi4yank_out_ar_bits_burst,
  output        auto_axi4yank_out_ar_bits_lock,
  output [3:0]  auto_axi4yank_out_ar_bits_cache,
  output [2:0]  auto_axi4yank_out_ar_bits_prot,
  output [3:0]  auto_axi4yank_out_ar_bits_qos,
  output        auto_axi4yank_out_r_ready,
                auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
                auto_tl_in_d_bits_size,
  output [7:0]  auto_tl_in_d_bits_source,
  output        auto_tl_in_d_bits_denied,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_tl_in_d_bits_corrupt,
                auto_tl_out_a_valid,
  output [2:0]  auto_tl_out_a_bits_opcode,
                auto_tl_out_a_bits_size,
  output [7:0]  auto_tl_out_a_bits_source,
  output [31:0] auto_tl_out_a_bits_address,
  output [7:0]  auto_tl_out_a_bits_mask,
  output [63:0] auto_tl_out_a_bits_data,
  output        auto_tl_out_d_ready
);

  wire        _tl2axi4_auto_out_aw_valid;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_id;
  wire [31:0] _tl2axi4_auto_out_aw_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_len;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_size;
  wire [1:0]  _tl2axi4_auto_out_aw_bits_burst;
  wire        _tl2axi4_auto_out_aw_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_aw_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_size;
  wire [7:0]  _tl2axi4_auto_out_aw_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_w_valid;
  wire [63:0] _tl2axi4_auto_out_w_bits_data;
  wire [7:0]  _tl2axi4_auto_out_w_bits_strb;
  wire        _tl2axi4_auto_out_w_bits_last;
  wire        _tl2axi4_auto_out_b_ready;
  wire        _tl2axi4_auto_out_ar_valid;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_id;
  wire [31:0] _tl2axi4_auto_out_ar_bits_addr;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_len;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_size;
  wire [1:0]  _tl2axi4_auto_out_ar_bits_burst;
  wire        _tl2axi4_auto_out_ar_bits_lock;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_cache;
  wire [2:0]  _tl2axi4_auto_out_ar_bits_prot;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_qos;
  wire [3:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_size;
  wire [7:0]  _tl2axi4_auto_out_ar_bits_echo_tl_state_source;
  wire        _tl2axi4_auto_out_r_ready;
  wire        _axi4index_auto_in_aw_ready;
  wire        _axi4index_auto_in_w_ready;
  wire        _axi4index_auto_in_b_valid;
  wire [7:0]  _axi4index_auto_in_b_bits_id;
  wire [1:0]  _axi4index_auto_in_b_bits_resp;
  wire [3:0]  _axi4index_auto_in_b_bits_echo_tl_state_size;
  wire [7:0]  _axi4index_auto_in_b_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_ar_ready;
  wire        _axi4index_auto_in_r_valid;
  wire [7:0]  _axi4index_auto_in_r_bits_id;
  wire [63:0] _axi4index_auto_in_r_bits_data;
  wire [1:0]  _axi4index_auto_in_r_bits_resp;
  wire [3:0]  _axi4index_auto_in_r_bits_echo_tl_state_size;
  wire [7:0]  _axi4index_auto_in_r_bits_echo_tl_state_source;
  wire        _axi4index_auto_in_r_bits_last;
  wire        _axi4index_auto_out_aw_valid;
  wire [3:0]  _axi4index_auto_out_aw_bits_id;
  wire [31:0] _axi4index_auto_out_aw_bits_addr;
  wire [7:0]  _axi4index_auto_out_aw_bits_len;
  wire [2:0]  _axi4index_auto_out_aw_bits_size;
  wire [1:0]  _axi4index_auto_out_aw_bits_burst;
  wire        _axi4index_auto_out_aw_bits_lock;
  wire [3:0]  _axi4index_auto_out_aw_bits_cache;
  wire [2:0]  _axi4index_auto_out_aw_bits_prot;
  wire [3:0]  _axi4index_auto_out_aw_bits_qos;
  wire [3:0]  _axi4index_auto_out_aw_bits_echo_tl_state_size;
  wire [7:0]  _axi4index_auto_out_aw_bits_echo_tl_state_source;
  wire [3:0]  _axi4index_auto_out_aw_bits_echo_extra_id;
  wire        _axi4index_auto_out_w_valid;
  wire [63:0] _axi4index_auto_out_w_bits_data;
  wire [7:0]  _axi4index_auto_out_w_bits_strb;
  wire        _axi4index_auto_out_w_bits_last;
  wire        _axi4index_auto_out_b_ready;
  wire        _axi4index_auto_out_ar_valid;
  wire [3:0]  _axi4index_auto_out_ar_bits_id;
  wire [31:0] _axi4index_auto_out_ar_bits_addr;
  wire [7:0]  _axi4index_auto_out_ar_bits_len;
  wire [2:0]  _axi4index_auto_out_ar_bits_size;
  wire [1:0]  _axi4index_auto_out_ar_bits_burst;
  wire        _axi4index_auto_out_ar_bits_lock;
  wire [3:0]  _axi4index_auto_out_ar_bits_cache;
  wire [2:0]  _axi4index_auto_out_ar_bits_prot;
  wire [3:0]  _axi4index_auto_out_ar_bits_qos;
  wire [3:0]  _axi4index_auto_out_ar_bits_echo_tl_state_size;
  wire [7:0]  _axi4index_auto_out_ar_bits_echo_tl_state_source;
  wire [3:0]  _axi4index_auto_out_ar_bits_echo_extra_id;
  wire        _axi4index_auto_out_r_ready;
  wire        _axi4yank_auto_in_aw_ready;
  wire        _axi4yank_auto_in_w_ready;
  wire        _axi4yank_auto_in_b_valid;
  wire [3:0]  _axi4yank_auto_in_b_bits_id;
  wire [1:0]  _axi4yank_auto_in_b_bits_resp;
  wire [3:0]  _axi4yank_auto_in_b_bits_echo_tl_state_size;
  wire [7:0]  _axi4yank_auto_in_b_bits_echo_tl_state_source;
  wire [3:0]  _axi4yank_auto_in_b_bits_echo_extra_id;
  wire        _axi4yank_auto_in_ar_ready;
  wire        _axi4yank_auto_in_r_valid;
  wire [3:0]  _axi4yank_auto_in_r_bits_id;
  wire [63:0] _axi4yank_auto_in_r_bits_data;
  wire [1:0]  _axi4yank_auto_in_r_bits_resp;
  wire [3:0]  _axi4yank_auto_in_r_bits_echo_tl_state_size;
  wire [7:0]  _axi4yank_auto_in_r_bits_echo_tl_state_source;
  wire [3:0]  _axi4yank_auto_in_r_bits_echo_extra_id;
  wire        _axi4yank_auto_in_r_bits_last;
  AXI4UserYanker_2 axi4yank (
    .clock                                (clock),
    .reset                                (reset),
    .auto_in_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_in_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_aw_bits_echo_extra_id        (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_in_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_in_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_in_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_in_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_in_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_in_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_in_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_ar_bits_echo_extra_id        (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_in_r_ready                      (_axi4index_auto_out_r_ready),
    .auto_out_aw_ready                    (auto_axi4yank_out_aw_ready),
    .auto_out_w_ready                     (auto_axi4yank_out_w_ready),
    .auto_out_b_valid                     (auto_axi4yank_out_b_valid),
    .auto_out_b_bits_id                   (auto_axi4yank_out_b_bits_id),
    .auto_out_b_bits_resp                 (auto_axi4yank_out_b_bits_resp),
    .auto_out_ar_ready                    (auto_axi4yank_out_ar_ready),
    .auto_out_r_valid                     (auto_axi4yank_out_r_valid),
    .auto_out_r_bits_id                   (auto_axi4yank_out_r_bits_id),
    .auto_out_r_bits_data                 (auto_axi4yank_out_r_bits_data),
    .auto_out_r_bits_resp                 (auto_axi4yank_out_r_bits_resp),
    .auto_out_r_bits_last                 (auto_axi4yank_out_r_bits_last),
    .auto_in_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_in_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_in_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_in_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_in_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source  (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_in_b_bits_echo_extra_id         (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_in_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_in_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_in_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_in_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_in_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source  (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_echo_extra_id         (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_in_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_out_aw_valid                    (auto_axi4yank_out_aw_valid),
    .auto_out_aw_bits_id                  (auto_axi4yank_out_aw_bits_id),
    .auto_out_aw_bits_addr                (auto_axi4yank_out_aw_bits_addr),
    .auto_out_aw_bits_len                 (auto_axi4yank_out_aw_bits_len),
    .auto_out_aw_bits_size                (auto_axi4yank_out_aw_bits_size),
    .auto_out_aw_bits_burst               (auto_axi4yank_out_aw_bits_burst),
    .auto_out_aw_bits_lock                (auto_axi4yank_out_aw_bits_lock),
    .auto_out_aw_bits_cache               (auto_axi4yank_out_aw_bits_cache),
    .auto_out_aw_bits_prot                (auto_axi4yank_out_aw_bits_prot),
    .auto_out_aw_bits_qos                 (auto_axi4yank_out_aw_bits_qos),
    .auto_out_w_valid                     (auto_axi4yank_out_w_valid),
    .auto_out_w_bits_data                 (auto_axi4yank_out_w_bits_data),
    .auto_out_w_bits_strb                 (auto_axi4yank_out_w_bits_strb),
    .auto_out_w_bits_last                 (auto_axi4yank_out_w_bits_last),
    .auto_out_b_ready                     (auto_axi4yank_out_b_ready),
    .auto_out_ar_valid                    (auto_axi4yank_out_ar_valid),
    .auto_out_ar_bits_id                  (auto_axi4yank_out_ar_bits_id),
    .auto_out_ar_bits_addr                (auto_axi4yank_out_ar_bits_addr),
    .auto_out_ar_bits_len                 (auto_axi4yank_out_ar_bits_len),
    .auto_out_ar_bits_size                (auto_axi4yank_out_ar_bits_size),
    .auto_out_ar_bits_burst               (auto_axi4yank_out_ar_bits_burst),
    .auto_out_ar_bits_lock                (auto_axi4yank_out_ar_bits_lock),
    .auto_out_ar_bits_cache               (auto_axi4yank_out_ar_bits_cache),
    .auto_out_ar_bits_prot                (auto_axi4yank_out_ar_bits_prot),
    .auto_out_ar_bits_qos                 (auto_axi4yank_out_ar_bits_qos),
    .auto_out_r_ready                     (auto_axi4yank_out_r_ready)
  );
  AXI4IdIndexer_2 axi4index (
    .auto_in_aw_valid                      (_tl2axi4_auto_out_aw_valid),
    .auto_in_aw_bits_id                    (_tl2axi4_auto_out_aw_bits_id),
    .auto_in_aw_bits_addr                  (_tl2axi4_auto_out_aw_bits_addr),
    .auto_in_aw_bits_len                   (_tl2axi4_auto_out_aw_bits_len),
    .auto_in_aw_bits_size                  (_tl2axi4_auto_out_aw_bits_size),
    .auto_in_aw_bits_burst                 (_tl2axi4_auto_out_aw_bits_burst),
    .auto_in_aw_bits_lock                  (_tl2axi4_auto_out_aw_bits_lock),
    .auto_in_aw_bits_cache                 (_tl2axi4_auto_out_aw_bits_cache),
    .auto_in_aw_bits_prot                  (_tl2axi4_auto_out_aw_bits_prot),
    .auto_in_aw_bits_qos                   (_tl2axi4_auto_out_aw_bits_qos),
    .auto_in_aw_bits_echo_tl_state_size    (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_in_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_in_w_valid                       (_tl2axi4_auto_out_w_valid),
    .auto_in_w_bits_data                   (_tl2axi4_auto_out_w_bits_data),
    .auto_in_w_bits_strb                   (_tl2axi4_auto_out_w_bits_strb),
    .auto_in_w_bits_last                   (_tl2axi4_auto_out_w_bits_last),
    .auto_in_b_ready                       (_tl2axi4_auto_out_b_ready),
    .auto_in_ar_valid                      (_tl2axi4_auto_out_ar_valid),
    .auto_in_ar_bits_id                    (_tl2axi4_auto_out_ar_bits_id),
    .auto_in_ar_bits_addr                  (_tl2axi4_auto_out_ar_bits_addr),
    .auto_in_ar_bits_len                   (_tl2axi4_auto_out_ar_bits_len),
    .auto_in_ar_bits_size                  (_tl2axi4_auto_out_ar_bits_size),
    .auto_in_ar_bits_burst                 (_tl2axi4_auto_out_ar_bits_burst),
    .auto_in_ar_bits_lock                  (_tl2axi4_auto_out_ar_bits_lock),
    .auto_in_ar_bits_cache                 (_tl2axi4_auto_out_ar_bits_cache),
    .auto_in_ar_bits_prot                  (_tl2axi4_auto_out_ar_bits_prot),
    .auto_in_ar_bits_qos                   (_tl2axi4_auto_out_ar_bits_qos),
    .auto_in_ar_bits_echo_tl_state_size    (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_in_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_in_r_ready                       (_tl2axi4_auto_out_r_ready),
    .auto_out_aw_ready                     (_axi4yank_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4yank_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4yank_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4yank_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4yank_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4yank_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4yank_auto_in_b_bits_echo_tl_state_source),
    .auto_out_b_bits_echo_extra_id         (_axi4yank_auto_in_b_bits_echo_extra_id),
    .auto_out_ar_ready                     (_axi4yank_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4yank_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4yank_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4yank_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4yank_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4yank_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4yank_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_echo_extra_id         (_axi4yank_auto_in_r_bits_echo_extra_id),
    .auto_out_r_bits_last                  (_axi4yank_auto_in_r_bits_last),
    .auto_in_aw_ready                      (_axi4index_auto_in_aw_ready),
    .auto_in_w_ready                       (_axi4index_auto_in_w_ready),
    .auto_in_b_valid                       (_axi4index_auto_in_b_valid),
    .auto_in_b_bits_id                     (_axi4index_auto_in_b_bits_id),
    .auto_in_b_bits_resp                   (_axi4index_auto_in_b_bits_resp),
    .auto_in_b_bits_echo_tl_state_size     (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_in_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_in_ar_ready                      (_axi4index_auto_in_ar_ready),
    .auto_in_r_valid                       (_axi4index_auto_in_r_valid),
    .auto_in_r_bits_id                     (_axi4index_auto_in_r_bits_id),
    .auto_in_r_bits_data                   (_axi4index_auto_in_r_bits_data),
    .auto_in_r_bits_resp                   (_axi4index_auto_in_r_bits_resp),
    .auto_in_r_bits_echo_tl_state_size     (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_in_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_in_r_bits_last                   (_axi4index_auto_in_r_bits_last),
    .auto_out_aw_valid                     (_axi4index_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_axi4index_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_axi4index_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_axi4index_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_axi4index_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_axi4index_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_axi4index_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_axi4index_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_axi4index_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_axi4index_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size
      (_axi4index_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_axi4index_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_aw_bits_echo_extra_id        (_axi4index_auto_out_aw_bits_echo_extra_id),
    .auto_out_w_valid                      (_axi4index_auto_out_w_valid),
    .auto_out_w_bits_data                  (_axi4index_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_axi4index_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_axi4index_auto_out_w_bits_last),
    .auto_out_b_ready                      (_axi4index_auto_out_b_ready),
    .auto_out_ar_valid                     (_axi4index_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_axi4index_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_axi4index_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_axi4index_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_axi4index_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_axi4index_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_axi4index_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_axi4index_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_axi4index_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_axi4index_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size
      (_axi4index_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_axi4index_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_ar_bits_echo_extra_id        (_axi4index_auto_out_ar_bits_echo_extra_id),
    .auto_out_r_ready                      (_axi4index_auto_out_r_ready)
  );
  TLToAXI4_1 tl2axi4 (
    .clock                                 (clock),
    .reset                                 (reset),
    .auto_in_a_valid                       (auto_widget_in_a_valid),
    .auto_in_a_bits_opcode                 (auto_widget_in_a_bits_opcode),
    .auto_in_a_bits_size                   (auto_widget_in_a_bits_size),
    .auto_in_a_bits_source                 (auto_widget_in_a_bits_source),
    .auto_in_a_bits_address                (auto_widget_in_a_bits_address),
    .auto_in_a_bits_mask                   (auto_widget_in_a_bits_mask),
    .auto_in_a_bits_data                   (auto_widget_in_a_bits_data),
    .auto_in_d_ready                       (auto_widget_in_d_ready),
    .auto_out_aw_ready                     (_axi4index_auto_in_aw_ready),
    .auto_out_w_ready                      (_axi4index_auto_in_w_ready),
    .auto_out_b_valid                      (_axi4index_auto_in_b_valid),
    .auto_out_b_bits_id                    (_axi4index_auto_in_b_bits_id),
    .auto_out_b_bits_resp                  (_axi4index_auto_in_b_bits_resp),
    .auto_out_b_bits_echo_tl_state_size    (_axi4index_auto_in_b_bits_echo_tl_state_size),
    .auto_out_b_bits_echo_tl_state_source
      (_axi4index_auto_in_b_bits_echo_tl_state_source),
    .auto_out_ar_ready                     (_axi4index_auto_in_ar_ready),
    .auto_out_r_valid                      (_axi4index_auto_in_r_valid),
    .auto_out_r_bits_id                    (_axi4index_auto_in_r_bits_id),
    .auto_out_r_bits_data                  (_axi4index_auto_in_r_bits_data),
    .auto_out_r_bits_resp                  (_axi4index_auto_in_r_bits_resp),
    .auto_out_r_bits_echo_tl_state_size    (_axi4index_auto_in_r_bits_echo_tl_state_size),
    .auto_out_r_bits_echo_tl_state_source
      (_axi4index_auto_in_r_bits_echo_tl_state_source),
    .auto_out_r_bits_last                  (_axi4index_auto_in_r_bits_last),
    .auto_in_a_ready                       (auto_widget_in_a_ready),
    .auto_in_d_valid                       (auto_widget_in_d_valid),
    .auto_in_d_bits_opcode                 (auto_widget_in_d_bits_opcode),
    .auto_in_d_bits_size                   (auto_widget_in_d_bits_size),
    .auto_in_d_bits_source                 (auto_widget_in_d_bits_source),
    .auto_in_d_bits_denied                 (auto_widget_in_d_bits_denied),
    .auto_in_d_bits_data                   (auto_widget_in_d_bits_data),
    .auto_in_d_bits_corrupt                (auto_widget_in_d_bits_corrupt),
    .auto_out_aw_valid                     (_tl2axi4_auto_out_aw_valid),
    .auto_out_aw_bits_id                   (_tl2axi4_auto_out_aw_bits_id),
    .auto_out_aw_bits_addr                 (_tl2axi4_auto_out_aw_bits_addr),
    .auto_out_aw_bits_len                  (_tl2axi4_auto_out_aw_bits_len),
    .auto_out_aw_bits_size                 (_tl2axi4_auto_out_aw_bits_size),
    .auto_out_aw_bits_burst                (_tl2axi4_auto_out_aw_bits_burst),
    .auto_out_aw_bits_lock                 (_tl2axi4_auto_out_aw_bits_lock),
    .auto_out_aw_bits_cache                (_tl2axi4_auto_out_aw_bits_cache),
    .auto_out_aw_bits_prot                 (_tl2axi4_auto_out_aw_bits_prot),
    .auto_out_aw_bits_qos                  (_tl2axi4_auto_out_aw_bits_qos),
    .auto_out_aw_bits_echo_tl_state_size   (_tl2axi4_auto_out_aw_bits_echo_tl_state_size),
    .auto_out_aw_bits_echo_tl_state_source
      (_tl2axi4_auto_out_aw_bits_echo_tl_state_source),
    .auto_out_w_valid                      (_tl2axi4_auto_out_w_valid),
    .auto_out_w_bits_data                  (_tl2axi4_auto_out_w_bits_data),
    .auto_out_w_bits_strb                  (_tl2axi4_auto_out_w_bits_strb),
    .auto_out_w_bits_last                  (_tl2axi4_auto_out_w_bits_last),
    .auto_out_b_ready                      (_tl2axi4_auto_out_b_ready),
    .auto_out_ar_valid                     (_tl2axi4_auto_out_ar_valid),
    .auto_out_ar_bits_id                   (_tl2axi4_auto_out_ar_bits_id),
    .auto_out_ar_bits_addr                 (_tl2axi4_auto_out_ar_bits_addr),
    .auto_out_ar_bits_len                  (_tl2axi4_auto_out_ar_bits_len),
    .auto_out_ar_bits_size                 (_tl2axi4_auto_out_ar_bits_size),
    .auto_out_ar_bits_burst                (_tl2axi4_auto_out_ar_bits_burst),
    .auto_out_ar_bits_lock                 (_tl2axi4_auto_out_ar_bits_lock),
    .auto_out_ar_bits_cache                (_tl2axi4_auto_out_ar_bits_cache),
    .auto_out_ar_bits_prot                 (_tl2axi4_auto_out_ar_bits_prot),
    .auto_out_ar_bits_qos                  (_tl2axi4_auto_out_ar_bits_qos),
    .auto_out_ar_bits_echo_tl_state_size   (_tl2axi4_auto_out_ar_bits_echo_tl_state_size),
    .auto_out_ar_bits_echo_tl_state_source
      (_tl2axi4_auto_out_ar_bits_echo_tl_state_source),
    .auto_out_r_ready                      (_tl2axi4_auto_out_r_ready)
  );
  assign auto_tl_in_a_ready = auto_tl_out_a_ready;
  assign auto_tl_in_d_valid = auto_tl_out_d_valid;
  assign auto_tl_in_d_bits_opcode = auto_tl_out_d_bits_opcode;
  assign auto_tl_in_d_bits_size = auto_tl_out_d_bits_size;
  assign auto_tl_in_d_bits_source = auto_tl_out_d_bits_source;
  assign auto_tl_in_d_bits_denied = auto_tl_out_d_bits_denied;
  assign auto_tl_in_d_bits_data = auto_tl_out_d_bits_data;
  assign auto_tl_in_d_bits_corrupt = auto_tl_out_d_bits_corrupt;
  assign auto_tl_out_a_valid = auto_tl_in_a_valid;
  assign auto_tl_out_a_bits_opcode = auto_tl_in_a_bits_opcode;
  assign auto_tl_out_a_bits_size = auto_tl_in_a_bits_size;
  assign auto_tl_out_a_bits_source = auto_tl_in_a_bits_source;
  assign auto_tl_out_a_bits_address = auto_tl_in_a_bits_address;
  assign auto_tl_out_a_bits_mask = auto_tl_in_a_bits_mask;
  assign auto_tl_out_a_bits_data = auto_tl_in_a_bits_data;
  assign auto_tl_out_d_ready = auto_tl_in_d_ready;
endmodule

module MemoryBus(
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid,
  input  [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id,
  input  [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp,
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid,
  input  [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id,
  input  [63:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data,
  input  [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp,
  input         auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last,
                auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock,
                auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset,
                auto_bus_xing_in_a_valid,
  input  [2:0]  auto_bus_xing_in_a_bits_opcode,
                auto_bus_xing_in_a_bits_size,
  input  [7:0]  auto_bus_xing_in_a_bits_source,
  input  [31:0] auto_bus_xing_in_a_bits_address,
  input  [7:0]  auto_bus_xing_in_a_bits_mask,
  input  [63:0] auto_bus_xing_in_a_bits_data,
  input         auto_bus_xing_in_d_ready,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id,
  output [31:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size,
  output [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid,
  output [63:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready,
                auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id,
  output [31:0] auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr,
  output [7:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size,
  output [1:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache,
  output [2:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot,
  output [3:0]  auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos,
  output        auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready,
                auto_bus_xing_in_a_ready,
                auto_bus_xing_in_d_valid,
  output [2:0]  auto_bus_xing_in_d_bits_opcode,
                auto_bus_xing_in_d_bits_size,
  output [7:0]  auto_bus_xing_in_d_bits_source,
  output        auto_bus_xing_in_d_bits_denied,
  output [63:0] auto_bus_xing_in_d_bits_data,
  output        auto_bus_xing_in_d_bits_corrupt
);

  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_in_a_ready;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_valid;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_opcode;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_size;
  wire [7:0]  _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_source;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_denied;
  wire [63:0] _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_data;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_corrupt;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size;
  wire [7:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied;
  wire [63:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode;
  wire [2:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size;
  wire [7:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source;
  wire [31:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address;
  wire [7:0]  _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask;
  wire [63:0] _coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data;
  wire        _coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready;
  wire        _picker_auto_in_a_ready;
  wire        _picker_auto_in_d_valid;
  wire [2:0]  _picker_auto_in_d_bits_opcode;
  wire [2:0]  _picker_auto_in_d_bits_size;
  wire [7:0]  _picker_auto_in_d_bits_source;
  wire        _picker_auto_in_d_bits_denied;
  wire [63:0] _picker_auto_in_d_bits_data;
  wire        _picker_auto_in_d_bits_corrupt;
  wire        _picker_auto_out_a_valid;
  wire [2:0]  _picker_auto_out_a_bits_opcode;
  wire [2:0]  _picker_auto_out_a_bits_size;
  wire [7:0]  _picker_auto_out_a_bits_source;
  wire [31:0] _picker_auto_out_a_bits_address;
  wire [7:0]  _picker_auto_out_a_bits_mask;
  wire [63:0] _picker_auto_out_a_bits_data;
  wire        _picker_auto_out_d_ready;
  wire        _fixer_auto_out_a_valid;
  wire [2:0]  _fixer_auto_out_a_bits_opcode;
  wire [2:0]  _fixer_auto_out_a_bits_size;
  wire [7:0]  _fixer_auto_out_a_bits_source;
  wire [31:0] _fixer_auto_out_a_bits_address;
  wire [7:0]  _fixer_auto_out_a_bits_mask;
  wire [63:0] _fixer_auto_out_a_bits_data;
  wire        _fixer_auto_out_d_ready;
  TLFIFOFixer_4 fixer (
    .auto_in_a_valid         (auto_bus_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_bus_xing_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_bus_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_bus_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_bus_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_bus_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_bus_xing_in_a_bits_data),
    .auto_in_d_ready         (auto_bus_xing_in_d_ready),
    .auto_out_a_ready        (_picker_auto_in_a_ready),
    .auto_out_d_valid        (_picker_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_picker_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_picker_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_picker_auto_in_d_bits_source),
    .auto_out_d_bits_denied  (_picker_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_picker_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_picker_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_bus_xing_in_a_ready),
    .auto_in_d_valid         (auto_bus_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_bus_xing_in_d_bits_opcode),
    .auto_in_d_bits_size     (auto_bus_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_bus_xing_in_d_bits_source),
    .auto_in_d_bits_denied   (auto_bus_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_bus_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_bus_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_fixer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_fixer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_fixer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_fixer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_fixer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_fixer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_fixer_auto_out_a_bits_data),
    .auto_out_d_ready        (_fixer_auto_out_d_ready)
  );
  ProbePicker picker (
    .auto_in_a_valid         (_fixer_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_fixer_auto_out_a_bits_opcode),
    .auto_in_a_bits_size     (_fixer_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_fixer_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_fixer_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_fixer_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_fixer_auto_out_a_bits_data),
    .auto_in_d_ready         (_fixer_auto_out_d_ready),
    .auto_out_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready),
    .auto_out_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid),
    .auto_out_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode),
    .auto_out_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size),
    .auto_out_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source),
    .auto_out_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied),
    .auto_out_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data),
    .auto_out_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt),
    .auto_in_a_ready         (_picker_auto_in_a_ready),
    .auto_in_d_valid         (_picker_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_picker_auto_in_d_bits_opcode),
    .auto_in_d_bits_size     (_picker_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_picker_auto_in_d_bits_source),
    .auto_in_d_bits_denied   (_picker_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_picker_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_picker_auto_in_d_bits_corrupt),
    .auto_out_a_valid        (_picker_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_picker_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_picker_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_picker_auto_out_a_bits_source),
    .auto_out_a_bits_address (_picker_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_picker_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_picker_auto_out_a_bits_data),
    .auto_out_d_ready        (_picker_auto_out_d_ready)
  );
  TLInterconnectCoupler_18 coupler_to_memory_controller_port_named_axi4 (
    .clock
      (auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock),
    .reset
      (auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset),
    .auto_widget_in_a_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid),
    .auto_widget_in_a_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode),
    .auto_widget_in_a_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size),
    .auto_widget_in_a_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source),
    .auto_widget_in_a_bits_address
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address),
    .auto_widget_in_a_bits_mask
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask),
    .auto_widget_in_a_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data),
    .auto_widget_in_d_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready),
    .auto_axi4yank_out_aw_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready),
    .auto_axi4yank_out_w_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready),
    .auto_axi4yank_out_b_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid),
    .auto_axi4yank_out_b_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id),
    .auto_axi4yank_out_b_bits_resp
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp),
    .auto_axi4yank_out_ar_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready),
    .auto_axi4yank_out_r_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid),
    .auto_axi4yank_out_r_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id),
    .auto_axi4yank_out_r_bits_data
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data),
    .auto_axi4yank_out_r_bits_resp
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp),
    .auto_axi4yank_out_r_bits_last
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last),
    .auto_tl_in_a_valid              (_picker_auto_out_a_valid),
    .auto_tl_in_a_bits_opcode        (_picker_auto_out_a_bits_opcode),
    .auto_tl_in_a_bits_size          (_picker_auto_out_a_bits_size),
    .auto_tl_in_a_bits_source        (_picker_auto_out_a_bits_source),
    .auto_tl_in_a_bits_address       (_picker_auto_out_a_bits_address),
    .auto_tl_in_a_bits_mask          (_picker_auto_out_a_bits_mask),
    .auto_tl_in_a_bits_data          (_picker_auto_out_a_bits_data),
    .auto_tl_in_d_ready              (_picker_auto_out_d_ready),
    .auto_tl_out_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_a_ready),
    .auto_tl_out_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_valid),
    .auto_tl_out_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_opcode),
    .auto_tl_out_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_size),
    .auto_tl_out_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_source),
    .auto_tl_out_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_denied),
    .auto_tl_out_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_data),
    .auto_tl_out_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_corrupt),
    .auto_widget_in_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_a_ready),
    .auto_widget_in_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_valid),
    .auto_widget_in_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_opcode),
    .auto_widget_in_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_size),
    .auto_widget_in_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_source),
    .auto_widget_in_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_denied),
    .auto_widget_in_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_data),
    .auto_widget_in_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_widget_in_d_bits_corrupt),
    .auto_axi4yank_out_aw_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid),
    .auto_axi4yank_out_aw_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id),
    .auto_axi4yank_out_aw_bits_addr
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr),
    .auto_axi4yank_out_aw_bits_len
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len),
    .auto_axi4yank_out_aw_bits_size
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size),
    .auto_axi4yank_out_aw_bits_burst
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst),
    .auto_axi4yank_out_aw_bits_lock
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock),
    .auto_axi4yank_out_aw_bits_cache
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache),
    .auto_axi4yank_out_aw_bits_prot
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot),
    .auto_axi4yank_out_aw_bits_qos
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos),
    .auto_axi4yank_out_w_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid),
    .auto_axi4yank_out_w_bits_data
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data),
    .auto_axi4yank_out_w_bits_strb
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb),
    .auto_axi4yank_out_w_bits_last
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last),
    .auto_axi4yank_out_b_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready),
    .auto_axi4yank_out_ar_valid
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid),
    .auto_axi4yank_out_ar_bits_id
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id),
    .auto_axi4yank_out_ar_bits_addr
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr),
    .auto_axi4yank_out_ar_bits_len
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len),
    .auto_axi4yank_out_ar_bits_size
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size),
    .auto_axi4yank_out_ar_bits_burst
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst),
    .auto_axi4yank_out_ar_bits_lock
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock),
    .auto_axi4yank_out_ar_bits_cache
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache),
    .auto_axi4yank_out_ar_bits_prot
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot),
    .auto_axi4yank_out_ar_bits_qos
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos),
    .auto_axi4yank_out_r_ready
      (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready),
    .auto_tl_in_a_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_a_ready),
    .auto_tl_in_d_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_source),
    .auto_tl_in_d_bits_denied
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_denied),
    .auto_tl_in_d_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_data),
    .auto_tl_in_d_bits_corrupt
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_in_d_bits_corrupt),
    .auto_tl_out_a_valid
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_valid),
    .auto_tl_out_a_bits_opcode
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_opcode),
    .auto_tl_out_a_bits_size
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_size),
    .auto_tl_out_a_bits_source
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_source),
    .auto_tl_out_a_bits_address
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_address),
    .auto_tl_out_a_bits_mask
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_mask),
    .auto_tl_out_a_bits_data
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_a_bits_data),
    .auto_tl_out_d_ready
      (_coupler_to_memory_controller_port_named_axi4_auto_tl_out_d_ready)
  );
endmodule

module BroadcastFilter(
  input         io_request_valid,
  input  [1:0]  io_request_bits_mshr,
  input  [31:0] io_request_bits_address,
  input         io_request_bits_allocOH,
                io_request_bits_needT,
                io_response_ready,
  output        io_request_ready,
                io_response_valid,
  output [1:0]  io_response_bits_mshr,
  output [31:0] io_response_bits_address,
  output        io_response_bits_allocOH,
                io_response_bits_needT
);

  assign io_request_ready = io_response_ready;
  assign io_response_valid = io_request_valid;
  assign io_response_bits_mshr = io_request_bits_mshr;
  assign io_response_bits_address = io_request_bits_address;
  assign io_response_bits_allocOH = io_request_bits_allocOH;
  assign io_response_bits_needT = io_request_bits_needT;
endmodule

module Queue_82(
  input         clock,
                reset,
                io_enq_valid,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_mask_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_1 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBroadcastTracker(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_size,
  output [7:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [5:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  size;
  reg  [5:0]  source;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _T_1 = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _T_13 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_T_1 & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:439 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:460 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:464 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_T_13 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:469 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign _io_in_a_ready_output = (idle | ~io_in_a_first) & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h0;
    end
    else begin
      got_e <=
        io_e_last
        | (_T_1 ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_T_1 & sent_d;
      if (_T_1)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_T_1 & shared;
    if (_T_1) begin
      opcode <= io_in_a_bits_opcode;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
    end
    if (_T_13)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _T_1 | count;
  end // always @(posedge)
  Queue_82 o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     ((idle | ~io_in_a_first) & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_1(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_size,
  output [7:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [5:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  size;
  reg  [5:0]  source;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _T_1 = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _T_13 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_T_1 & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:439 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:460 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:464 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_T_13 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:469 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign _io_in_a_ready_output = (idle | ~io_in_a_first) & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h40;
    end
    else begin
      got_e <=
        io_e_last
        | (_T_1 ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_T_1 & sent_d;
      if (_T_1)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_T_1 & shared;
    if (_T_1) begin
      opcode <= io_in_a_bits_opcode;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
    end
    if (_T_13)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _T_1 | count;
  end // always @(posedge)
  Queue_82 o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     ((idle | ~io_in_a_first) & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_2(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_size,
  output [7:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [5:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  size;
  reg  [5:0]  source;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _T_1 = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _T_13 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_T_1 & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:439 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:460 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:464 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_T_13 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:469 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign _io_in_a_ready_output = (idle | ~io_in_a_first) & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'h80;
    end
    else begin
      got_e <=
        io_e_last
        | (_T_1 ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_T_1 & sent_d;
      if (_T_1)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_T_1 & shared;
    if (_T_1) begin
      opcode <= io_in_a_bits_opcode;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
    end
    if (_T_13)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _T_1 | count;
  end // always @(posedge)
  Queue_82 o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     ((idle | ~io_in_a_first) & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcastTracker_3(
  input         clock,
                reset,
                io_in_a_first,
                io_in_a_valid,
  input  [2:0]  io_in_a_bits_opcode,
                io_in_a_bits_size,
  input  [5:0]  io_in_a_bits_source,
  input  [31:0] io_in_a_bits_address,
  input  [7:0]  io_in_a_bits_mask,
  input  [63:0] io_in_a_bits_data,
  input         io_out_a_ready,
                io_probe_valid,
                io_probe_bits_count,
                io_probenack,
                io_probedack,
                io_probesack,
                io_d_last,
                io_e_last,
  output        io_in_a_ready,
                io_out_a_valid,
  output [2:0]  io_out_a_bits_opcode,
                io_out_a_bits_size,
  output [7:0]  io_out_a_bits_source,
  output [31:0] io_out_a_bits_address,
  output [7:0]  io_out_a_bits_mask,
  output [63:0] io_out_a_bits_data,
  output [5:0]  io_source,
  output [25:0] io_line,
  output        io_idle,
                io_need_d
);

  wire        _io_in_a_ready_output;
  wire        _o_data_q_io_enq_ready;
  wire        _o_data_q_io_deq_valid;
  reg         got_e;
  reg         sent_d;
  reg         shared;
  reg  [2:0]  opcode;
  reg  [2:0]  size;
  reg  [5:0]  source;
  reg  [31:0] address;
  reg         count;
  wire        idle = got_e & sent_d;
  wire        _T_1 = _io_in_a_ready_output & io_in_a_valid & io_in_a_first;
  wire        _T_13 = io_probenack | io_probedack;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_T_1 & ~reset & ~idle) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:439 assert (idle)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_d_last & ~reset & sent_d) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:460 assert (!sent_d)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_e_last & ~reset & got_e) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:464 assert (!got_e)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_T_13 & ~reset & ~count) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:469 assert (count > 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign _io_in_a_ready_output = (idle | ~io_in_a_first) & _o_data_q_io_enq_ready;
  wire        acquire = opcode == 3'h6 | (&opcode);
  always @(posedge clock) begin
    if (reset) begin
      got_e <= 1'h1;
      sent_d <= 1'h1;
      address <= 32'hC0;
    end
    else begin
      got_e <=
        io_e_last
        | (_T_1 ? io_in_a_bits_opcode != 3'h6 & io_in_a_bits_opcode != 3'h7 : got_e);
      sent_d <= io_d_last | ~_T_1 & sent_d;
      if (_T_1)
        address <= io_in_a_bits_address;
    end
    if (io_probesack)
      shared <= 1'h1;
    else
      shared <= ~_T_1 & shared;
    if (_T_1) begin
      opcode <= io_in_a_bits_opcode;
      size <= io_in_a_bits_size;
      source <= io_in_a_bits_source;
    end
    if (_T_13)
      count <= count - ~(io_probenack & io_probedack);
    else if (io_probe_valid)
      count <= io_probe_bits_count;
    else
      count <= _T_1 | count;
  end // always @(posedge)
  Queue_82 o_data_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     ((idle | ~io_in_a_first) & io_in_a_valid),
    .io_enq_bits_mask (io_in_a_bits_mask),
    .io_enq_bits_data (io_in_a_bits_data),
    .io_deq_ready     (io_out_a_ready & ~count),
    .io_enq_ready     (_o_data_q_io_enq_ready),
    .io_deq_valid     (_o_data_q_io_deq_valid),
    .io_deq_bits_mask (io_out_a_bits_mask),
    .io_deq_bits_data (io_out_a_bits_data)
  );
  assign io_in_a_ready = _io_in_a_ready_output;
  assign io_out_a_valid = _o_data_q_io_deq_valid & ~count;
  assign io_out_a_bits_opcode = acquire ? 3'h4 : opcode;
  assign io_out_a_bits_size = size;
  assign io_out_a_bits_source = {acquire ? {1'h1, ~shared} : 2'h0, source};
  assign io_out_a_bits_address = address;
  assign io_source = source;
  assign io_line = address[31:6];
  assign io_idle = idle;
  assign io_need_d = ~sent_d;
endmodule

module TLBroadcast(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
                auto_in_a_bits_size,
  input  [5:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_b_ready,
                auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
                auto_in_c_bits_param,
                auto_in_c_bits_size,
  input  [5:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input  [63:0] auto_in_c_bits_data,
  input         auto_in_d_ready,
                auto_in_e_valid,
  input  [1:0]  auto_in_e_bits_sink,
  input         auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
                auto_out_d_bits_size,
  input  [7:0]  auto_out_d_bits_source,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_b_valid,
  output [1:0]  auto_in_b_bits_param,
  output [31:0] auto_in_b_bits_address,
  output        auto_in_c_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [2:0]  auto_in_d_bits_size,
  output [5:0]  auto_in_d_bits_source,
  output [1:0]  auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_size,
  output [7:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  reg  [2:0]  a_first_counter;
  reg         probe_todo;
  wire        putfull_ready;
  wire        d_normal_ready;
  wire        releaseack_ready;
  wire        nodeIn_c_ready;
  wire [2:0]  d_normal_bits_opcode;
  wire [5:0]  d_normal_bits_source;
  wire        d_normal_valid;
  wire        _TLBroadcastTracker_3_io_in_a_ready;
  wire        _TLBroadcastTracker_3_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_3_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_3_io_out_a_bits_size;
  wire [7:0]  _TLBroadcastTracker_3_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_3_io_out_a_bits_address;
  wire [7:0]  _TLBroadcastTracker_3_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_3_io_out_a_bits_data;
  wire [5:0]  _TLBroadcastTracker_3_io_source;
  wire [25:0] _TLBroadcastTracker_3_io_line;
  wire        _TLBroadcastTracker_3_io_idle;
  wire        _TLBroadcastTracker_3_io_need_d;
  wire        _TLBroadcastTracker_2_io_in_a_ready;
  wire        _TLBroadcastTracker_2_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_2_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_2_io_out_a_bits_size;
  wire [7:0]  _TLBroadcastTracker_2_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_2_io_out_a_bits_address;
  wire [7:0]  _TLBroadcastTracker_2_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_2_io_out_a_bits_data;
  wire [5:0]  _TLBroadcastTracker_2_io_source;
  wire [25:0] _TLBroadcastTracker_2_io_line;
  wire        _TLBroadcastTracker_2_io_idle;
  wire        _TLBroadcastTracker_2_io_need_d;
  wire        _TLBroadcastTracker_1_io_in_a_ready;
  wire        _TLBroadcastTracker_1_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_1_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_1_io_out_a_bits_size;
  wire [7:0]  _TLBroadcastTracker_1_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_1_io_out_a_bits_address;
  wire [7:0]  _TLBroadcastTracker_1_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_1_io_out_a_bits_data;
  wire [5:0]  _TLBroadcastTracker_1_io_source;
  wire [25:0] _TLBroadcastTracker_1_io_line;
  wire        _TLBroadcastTracker_1_io_idle;
  wire        _TLBroadcastTracker_1_io_need_d;
  wire        _TLBroadcastTracker_io_in_a_ready;
  wire        _TLBroadcastTracker_io_out_a_valid;
  wire [2:0]  _TLBroadcastTracker_io_out_a_bits_opcode;
  wire [2:0]  _TLBroadcastTracker_io_out_a_bits_size;
  wire [7:0]  _TLBroadcastTracker_io_out_a_bits_source;
  wire [31:0] _TLBroadcastTracker_io_out_a_bits_address;
  wire [7:0]  _TLBroadcastTracker_io_out_a_bits_mask;
  wire [63:0] _TLBroadcastTracker_io_out_a_bits_data;
  wire [5:0]  _TLBroadcastTracker_io_source;
  wire [25:0] _TLBroadcastTracker_io_line;
  wire        _TLBroadcastTracker_io_idle;
  wire        _TLBroadcastTracker_io_need_d;
  wire        _filter_io_request_ready;
  wire        _filter_io_response_valid;
  wire [1:0]  _filter_io_response_bits_mshr;
  wire [31:0] _filter_io_response_bits_address;
  wire        _filter_io_response_bits_allocOH;
  wire        _filter_io_response_bits_needT;
  wire        d_drop = auto_out_d_bits_source[7:6] == 2'h1;
  wire        _T_56 = d_normal_ready & d_normal_valid;
  wire [12:0] _GEN = {10'h0, auto_out_d_bits_size};
  wire [12:0] _beats1_decode_T_1 = 13'h3F << _GEN;
  reg  [2:0]  counter;
  wire        d_first = counter == 3'h0;
  wire        d_last =
    counter == 3'h1
    | (d_normal_bits_opcode[0] ? ~(_beats1_decode_T_1[5:3]) : 3'h0) == 3'h0;
  wire [3:0]  _d_trackerOH_T_8 =
    {_TLBroadcastTracker_3_io_need_d
       & _TLBroadcastTracker_3_io_source == d_normal_bits_source,
     _TLBroadcastTracker_2_io_need_d
       & _TLBroadcastTracker_2_io_source == d_normal_bits_source,
     _TLBroadcastTracker_1_io_need_d
       & _TLBroadcastTracker_1_io_source == d_normal_bits_source,
     _TLBroadcastTracker_io_need_d
       & _TLBroadcastTracker_io_source == d_normal_bits_source};
  reg  [3:0]  d_trackerOH_r;
  wire [3:0]  d_trackerOH = d_first ? _d_trackerOH_T_8 : d_trackerOH_r;
  wire        nodeOut_d_ready = d_normal_ready | d_drop;
  assign d_normal_valid = auto_out_d_valid & ~d_drop;
  assign d_normal_bits_source = auto_out_d_bits_source[5:0];
  assign d_normal_bits_opcode =
    auto_out_d_bits_source[7]
      ? (auto_out_d_bits_opcode[0] ? 3'h5 : 3'h6)
      : auto_out_d_bits_opcode;
  wire        d_response = auto_out_d_bits_opcode[0] | ~(auto_out_d_bits_source[7]);
  wire        _T_60 = nodeOut_d_ready & auto_out_d_valid;
  wire        c_probeack = auto_in_c_bits_opcode == 3'h4;
  wire        c_probeackdata = auto_in_c_bits_opcode == 3'h5;
  wire        c_release = auto_in_c_bits_opcode == 3'h6;
  wire        c_trackerOH_0 = _TLBroadcastTracker_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_1 =
    _TLBroadcastTracker_1_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_2 =
    _TLBroadcastTracker_2_io_line == auto_in_c_bits_address[31:6];
  wire        c_trackerOH_3 =
    _TLBroadcastTracker_3_io_line == auto_in_c_bits_address[31:6];
  wire        _c_first_T = nodeIn_c_ready & auto_in_c_valid;
  wire        _T_105 = c_probeack | c_probeackdata;
  wire        _filter_io_release_bits_keepB_T = auto_in_c_bits_param == 3'h0;
  wire        _T_108 = auto_in_c_bits_param == 3'h4;
  assign nodeIn_c_ready = c_probeack | (c_release ? releaseack_ready : putfull_ready);
  wire        winner_0 = auto_in_c_valid & c_release;
  wire        winner_1_0 = auto_in_c_valid & (c_probeackdata | (&auto_in_c_bits_opcode));
  wire        _putfull_bits_a_mask_T = auto_in_c_bits_size > 3'h2;
  wire        putfull_bits_a_mask_size = auto_in_c_bits_size[1:0] == 2'h2;
  wire        putfull_bits_a_mask_acc =
    _putfull_bits_a_mask_T | putfull_bits_a_mask_size & ~(auto_in_c_bits_address[2]);
  wire        putfull_bits_a_mask_acc_1 =
    _putfull_bits_a_mask_T | putfull_bits_a_mask_size & auto_in_c_bits_address[2];
  wire        putfull_bits_a_mask_size_1 = auto_in_c_bits_size[1:0] == 2'h1;
  wire        putfull_bits_a_mask_eq_2 =
    ~(auto_in_c_bits_address[2]) & ~(auto_in_c_bits_address[1]);
  wire        putfull_bits_a_mask_acc_2 =
    putfull_bits_a_mask_acc | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_2;
  wire        putfull_bits_a_mask_eq_3 =
    ~(auto_in_c_bits_address[2]) & auto_in_c_bits_address[1];
  wire        putfull_bits_a_mask_acc_3 =
    putfull_bits_a_mask_acc | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_3;
  wire        putfull_bits_a_mask_eq_4 =
    auto_in_c_bits_address[2] & ~(auto_in_c_bits_address[1]);
  wire        putfull_bits_a_mask_acc_4 =
    putfull_bits_a_mask_acc_1 | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_4;
  wire        putfull_bits_a_mask_eq_5 =
    auto_in_c_bits_address[2] & auto_in_c_bits_address[1];
  wire        putfull_bits_a_mask_acc_5 =
    putfull_bits_a_mask_acc_1 | putfull_bits_a_mask_size_1 & putfull_bits_a_mask_eq_5;
  reg  [2:0]  beatsLeft;
  wire        idle = beatsLeft == 3'h0;
  wire        winner_1 = ~winner_0 & d_normal_valid;
  wire        _nodeIn_d_valid_T = winner_0 | d_normal_valid;
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  assign releaseack_ready = auto_in_d_ready & (idle | state_0);
  assign d_normal_ready = auto_in_d_ready & (idle ? ~winner_0 : state_1);
  wire        nodeIn_d_valid =
    idle ? _nodeIn_d_valid_T : state_0 & winner_0 | state_1 & d_normal_valid;
  reg  [2:0]  beatsLeft_1;
  wire        idle_1 = beatsLeft_1 == 3'h0;
  wire        _GEN_0 = _TLBroadcastTracker_io_out_a_valid | winner_1_0;
  wire        _GEN_1 =
    _TLBroadcastTracker_2_io_out_a_valid | _TLBroadcastTracker_1_io_out_a_valid | _GEN_0;
  wire        _GEN_2 =
    _TLBroadcastTracker_1_io_out_a_valid | _TLBroadcastTracker_io_out_a_valid
    | winner_1_0;
  wire        winner_1_1 = ~winner_1_0 & _TLBroadcastTracker_io_out_a_valid;
  wire        winner_1_2 = ~_GEN_0 & _TLBroadcastTracker_1_io_out_a_valid;
  wire        winner_1_3 = ~_GEN_2 & _TLBroadcastTracker_2_io_out_a_valid;
  wire        winner_1_4 = ~_GEN_1 & _TLBroadcastTracker_3_io_out_a_valid;
  wire        _nodeOut_a_valid_T = winner_1_0 | _TLBroadcastTracker_io_out_a_valid;
  `ifndef SYNTHESIS
    wire prefixOR_2 = winner_1_0 | winner_1_1;
    wire prefixOR_3 = prefixOR_2 | winner_1_2;
    always @(posedge clock) begin
      if (~reset & ~(~auto_out_d_valid | ~d_drop | auto_out_d_bits_opcode == 3'h0)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:125 assert (!out.d.valid || !d_drop || out.d.bits.opcode === TLMessages.AccessAck)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~d_normal_valid | (|d_trackerOH) | d_normal_bits_opcode == 3'h6)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Broadcast.scala:137 assert (!d_normal.valid || (d_trackerOH.orR || d_normal.bits.opcode === TLMessages.ReleaseAck))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_nodeIn_d_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~((~winner_1_0 | ~winner_1_1) & (~prefixOR_2 | ~winner_1_2)
              & (~prefixOR_3 | ~winner_1_3)
              & (~(prefixOR_3 | winner_1_3) | ~winner_1_4))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_nodeOut_a_valid_T | _TLBroadcastTracker_1_io_out_a_valid
                | _TLBroadcastTracker_2_io_out_a_valid
                | _TLBroadcastTracker_3_io_out_a_valid) | winner_1_0 | winner_1_1
              | winner_1_2 | winner_1_3 | winner_1_4)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_1_0;
  reg         state_1_1;
  reg         state_1_2;
  reg         state_1_3;
  reg         state_1_4;
  wire        muxState_1_0 = idle_1 ? winner_1_0 : state_1_0;
  wire        muxState_1_1 = idle_1 ? winner_1_1 : state_1_1;
  wire        muxState_1_2 = idle_1 ? winner_1_2 : state_1_2;
  wire        muxState_1_3 = idle_1 ? winner_1_3 : state_1_3;
  wire        muxState_1_4 = idle_1 ? winner_1_4 : state_1_4;
  assign putfull_ready = auto_out_a_ready & (idle_1 | state_1_0);
  wire        nodeOut_a_valid =
    idle_1
      ? _nodeOut_a_valid_T | _TLBroadcastTracker_1_io_out_a_valid
        | _TLBroadcastTracker_2_io_out_a_valid | _TLBroadcastTracker_3_io_out_a_valid
      : state_1_0 & winner_1_0 | state_1_1 & _TLBroadcastTracker_io_out_a_valid
        | state_1_2 & _TLBroadcastTracker_1_io_out_a_valid | state_1_3
        & _TLBroadcastTracker_2_io_out_a_valid | state_1_4
        & _TLBroadcastTracker_3_io_out_a_valid;
  reg  [25:0] probe_line;
  reg  [1:0]  probe_perms;
  wire        _matchTrackers_WIRE_0 =
    _TLBroadcastTracker_io_line == auto_in_a_bits_address[31:6];
  wire        _matchTrackers_WIRE_1 =
    _TLBroadcastTracker_1_io_line == auto_in_a_bits_address[31:6];
  wire        _matchTrackers_WIRE_2 =
    _TLBroadcastTracker_2_io_line == auto_in_a_bits_address[31:6];
  wire        _matchTrackers_WIRE_3 =
    _TLBroadcastTracker_3_io_line == auto_in_a_bits_address[31:6];
  wire [3:0]  _GEN_3 =
    (|{_matchTrackers_WIRE_3,
       _matchTrackers_WIRE_2,
       _matchTrackers_WIRE_1,
       _matchTrackers_WIRE_0})
      ? {_matchTrackers_WIRE_3,
         _matchTrackers_WIRE_2,
         _matchTrackers_WIRE_1,
         _matchTrackers_WIRE_0}
      : {_TLBroadcastTracker_3_io_idle,
         _TLBroadcastTracker_2_io_idle,
         _TLBroadcastTracker_1_io_idle,
         _TLBroadcastTracker_io_idle}
        & {~(_TLBroadcastTracker_2_io_idle | _TLBroadcastTracker_1_io_idle
             | _TLBroadcastTracker_io_idle),
           ~(_TLBroadcastTracker_1_io_idle | _TLBroadcastTracker_io_idle),
           ~_TLBroadcastTracker_io_idle,
           1'h1};
  wire [3:0]  _GEN_4 =
    _GEN_3
    & {_TLBroadcastTracker_3_io_in_a_ready,
       _TLBroadcastTracker_2_io_in_a_ready,
       _TLBroadcastTracker_1_io_in_a_ready,
       _TLBroadcastTracker_io_in_a_ready};
  wire        nodeIn_a_ready =
    ((|a_first_counter) | _filter_io_request_ready) & (|_GEN_4);
  wire        _T_206 = ~probe_todo & _filter_io_response_valid;
  wire [12:0] _decode_T_5 = 13'h3F << _GEN;
  wire [12:0] _decode_T_25 = 13'h3F << _TLBroadcastTracker_3_io_out_a_bits_size;
  wire [12:0] _decode_T_21 = 13'h3F << _TLBroadcastTracker_2_io_out_a_bits_size;
  wire [12:0] _decode_T_17 = 13'h3F << _TLBroadcastTracker_1_io_out_a_bits_size;
  wire [12:0] _decode_T_13 = 13'h3F << _TLBroadcastTracker_io_out_a_bits_size;
  wire [12:0] _decode_T_9 = 13'h3F << auto_in_c_bits_size;
  wire [12:0] _a_first_beats1_decode_T_1 = 13'h3F << auto_in_a_bits_size;
  always @(posedge clock) begin
    if (reset) begin
      counter <= 3'h0;
      beatsLeft <= 3'h0;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
      beatsLeft_1 <= 3'h0;
      state_1_0 <= 1'h0;
      state_1_1 <= 1'h0;
      state_1_2 <= 1'h0;
      state_1_3 <= 1'h0;
      state_1_4 <= 1'h0;
      probe_todo <= 1'h0;
      a_first_counter <= 3'h0;
    end
    else begin
      if (_T_56) begin
        if (d_first) begin
          if (d_normal_bits_opcode[0])
            counter <= ~(_beats1_decode_T_1[5:3]);
          else
            counter <= 3'h0;
        end
        else
          counter <= counter - 3'h1;
      end
      if (idle & auto_in_d_ready) begin
        if (winner_1 & d_normal_bits_opcode[0])
          beatsLeft <= ~(_decode_T_5[5:3]);
        else
          beatsLeft <= 3'h0;
      end
      else
        beatsLeft <= beatsLeft - {2'h0, auto_in_d_ready & nodeIn_d_valid};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
      if (idle_1 & auto_out_a_ready)
        beatsLeft_1 <=
          (winner_1_0 ? ~(_decode_T_9[5:3]) : 3'h0)
          | (winner_1_1 & ~(_TLBroadcastTracker_io_out_a_bits_opcode[2])
               ? ~(_decode_T_13[5:3])
               : 3'h0)
          | (winner_1_2 & ~(_TLBroadcastTracker_1_io_out_a_bits_opcode[2])
               ? ~(_decode_T_17[5:3])
               : 3'h0)
          | (winner_1_3 & ~(_TLBroadcastTracker_2_io_out_a_bits_opcode[2])
               ? ~(_decode_T_21[5:3])
               : 3'h0)
          | (winner_1_4 & ~(_TLBroadcastTracker_3_io_out_a_bits_opcode[2])
               ? ~(_decode_T_25[5:3])
               : 3'h0);
      else
        beatsLeft_1 <= beatsLeft_1 - {2'h0, auto_out_a_ready & nodeOut_a_valid};
      if (idle_1) begin
        state_1_0 <= winner_1_0;
        state_1_1 <= winner_1_1;
        state_1_2 <= winner_1_2;
        state_1_3 <= winner_1_3;
        state_1_4 <= winner_1_4;
      end
      if (_T_206)
        probe_todo <= ~_filter_io_response_bits_allocOH;
      else
        probe_todo <= (~(auto_in_b_ready & probe_todo) | ~probe_todo) & probe_todo;
      if (nodeIn_a_ready & auto_in_a_valid) begin
        if (|a_first_counter)
          a_first_counter <= a_first_counter - 3'h1;
        else if (auto_in_a_bits_opcode[2])
          a_first_counter <= 3'h0;
        else
          a_first_counter <= ~(_a_first_beats1_decode_T_1[5:3]);
      end
    end
    if (d_first)
      d_trackerOH_r <= _d_trackerOH_T_8;
    if (_T_206) begin
      probe_line <= _filter_io_response_bits_address[31:6];
      if (_filter_io_response_bits_needT)
        probe_perms <= 2'h2;
      else
        probe_perms <= 2'h1;
    end
  end // always @(posedge)
  BroadcastFilter filter (
    .io_request_valid         (auto_in_a_valid & ~(|a_first_counter) & (|_GEN_4)),
    .io_request_bits_mshr     ({|(_GEN_3[3:2]), _GEN_3[3] | _GEN_3[1]}),
    .io_request_bits_address  (auto_in_a_bits_address),
    .io_request_bits_allocOH  (auto_in_a_bits_source == 6'h20),
    .io_request_bits_needT
      ((&auto_in_a_bits_opcode) | auto_in_a_bits_opcode == 3'h6
         ? auto_in_a_bits_param == 3'h2 | auto_in_a_bits_param == 3'h1
         : auto_in_a_bits_opcode == 3'h5
             ? auto_in_a_bits_param == 3'h1
             : auto_in_a_bits_opcode != 3'h4),
    .io_response_ready        (~probe_todo),
    .io_request_ready         (_filter_io_request_ready),
    .io_response_valid        (_filter_io_response_valid),
    .io_response_bits_mshr    (_filter_io_response_bits_mshr),
    .io_response_bits_address (_filter_io_response_bits_address),
    .io_response_bits_allocOH (_filter_io_response_bits_allocOH),
    .io_response_bits_needT   (_filter_io_response_bits_needT)
  );
  TLBroadcastTracker TLBroadcastTracker (
    .clock                 (clock),
    .reset                 (reset),
    .io_in_a_first         (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & _GEN_3[0] & ((|a_first_counter) | _filter_io_request_ready)),
    .io_in_a_bits_opcode   (auto_in_a_bits_opcode),
    .io_in_a_bits_size     (auto_in_a_bits_size),
    .io_in_a_bits_source   (auto_in_a_bits_source),
    .io_in_a_bits_address  (auto_in_a_bits_address),
    .io_in_a_bits_mask     (auto_in_a_bits_mask),
    .io_in_a_bits_data     (auto_in_a_bits_data),
    .io_out_a_ready        (auto_out_a_ready & (idle_1 ? ~winner_1_0 : state_1_1)),
    .io_probe_valid        (_T_206 & _filter_io_response_bits_mshr == 2'h0),
    .io_probe_bits_count   (~_filter_io_response_bits_allocOH),
    .io_probenack          (_c_first_T & c_probeack & c_trackerOH_0),
    .io_probedack          (d_trackerOH[0] & _T_60 & d_drop),
    .io_probesack
      (_c_first_T & c_trackerOH_0 & _T_105 & (_filter_io_release_bits_keepB_T | _T_108)),
    .io_d_last             (d_trackerOH[0] & _T_56 & d_response & d_last),
    .io_e_last             (auto_in_e_bits_sink == 2'h0 & auto_in_e_valid),
    .io_in_a_ready         (_TLBroadcastTracker_io_in_a_ready),
    .io_out_a_valid        (_TLBroadcastTracker_io_out_a_valid),
    .io_out_a_bits_opcode  (_TLBroadcastTracker_io_out_a_bits_opcode),
    .io_out_a_bits_size    (_TLBroadcastTracker_io_out_a_bits_size),
    .io_out_a_bits_source  (_TLBroadcastTracker_io_out_a_bits_source),
    .io_out_a_bits_address (_TLBroadcastTracker_io_out_a_bits_address),
    .io_out_a_bits_mask    (_TLBroadcastTracker_io_out_a_bits_mask),
    .io_out_a_bits_data    (_TLBroadcastTracker_io_out_a_bits_data),
    .io_source             (_TLBroadcastTracker_io_source),
    .io_line               (_TLBroadcastTracker_io_line),
    .io_idle               (_TLBroadcastTracker_io_idle),
    .io_need_d             (_TLBroadcastTracker_io_need_d)
  );
  TLBroadcastTracker_1 TLBroadcastTracker_1 (
    .clock                 (clock),
    .reset                 (reset),
    .io_in_a_first         (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & _GEN_3[1] & ((|a_first_counter) | _filter_io_request_ready)),
    .io_in_a_bits_opcode   (auto_in_a_bits_opcode),
    .io_in_a_bits_size     (auto_in_a_bits_size),
    .io_in_a_bits_source   (auto_in_a_bits_source),
    .io_in_a_bits_address  (auto_in_a_bits_address),
    .io_in_a_bits_mask     (auto_in_a_bits_mask),
    .io_in_a_bits_data     (auto_in_a_bits_data),
    .io_out_a_ready        (auto_out_a_ready & (idle_1 ? ~_GEN_0 : state_1_2)),
    .io_probe_valid        (_T_206 & _filter_io_response_bits_mshr == 2'h1),
    .io_probe_bits_count   (~_filter_io_response_bits_allocOH),
    .io_probenack          (_c_first_T & c_probeack & c_trackerOH_1),
    .io_probedack          (d_trackerOH[1] & _T_60 & d_drop),
    .io_probesack
      (_c_first_T & c_trackerOH_1 & _T_105 & (_filter_io_release_bits_keepB_T | _T_108)),
    .io_d_last             (d_trackerOH[1] & _T_56 & d_response & d_last),
    .io_e_last             (auto_in_e_bits_sink == 2'h1 & auto_in_e_valid),
    .io_in_a_ready         (_TLBroadcastTracker_1_io_in_a_ready),
    .io_out_a_valid        (_TLBroadcastTracker_1_io_out_a_valid),
    .io_out_a_bits_opcode  (_TLBroadcastTracker_1_io_out_a_bits_opcode),
    .io_out_a_bits_size    (_TLBroadcastTracker_1_io_out_a_bits_size),
    .io_out_a_bits_source  (_TLBroadcastTracker_1_io_out_a_bits_source),
    .io_out_a_bits_address (_TLBroadcastTracker_1_io_out_a_bits_address),
    .io_out_a_bits_mask    (_TLBroadcastTracker_1_io_out_a_bits_mask),
    .io_out_a_bits_data    (_TLBroadcastTracker_1_io_out_a_bits_data),
    .io_source             (_TLBroadcastTracker_1_io_source),
    .io_line               (_TLBroadcastTracker_1_io_line),
    .io_idle               (_TLBroadcastTracker_1_io_idle),
    .io_need_d             (_TLBroadcastTracker_1_io_need_d)
  );
  TLBroadcastTracker_2 TLBroadcastTracker_2 (
    .clock                 (clock),
    .reset                 (reset),
    .io_in_a_first         (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & _GEN_3[2] & ((|a_first_counter) | _filter_io_request_ready)),
    .io_in_a_bits_opcode   (auto_in_a_bits_opcode),
    .io_in_a_bits_size     (auto_in_a_bits_size),
    .io_in_a_bits_source   (auto_in_a_bits_source),
    .io_in_a_bits_address  (auto_in_a_bits_address),
    .io_in_a_bits_mask     (auto_in_a_bits_mask),
    .io_in_a_bits_data     (auto_in_a_bits_data),
    .io_out_a_ready        (auto_out_a_ready & (idle_1 ? ~_GEN_2 : state_1_3)),
    .io_probe_valid        (_T_206 & _filter_io_response_bits_mshr == 2'h2),
    .io_probe_bits_count   (~_filter_io_response_bits_allocOH),
    .io_probenack          (_c_first_T & c_probeack & c_trackerOH_2),
    .io_probedack          (d_trackerOH[2] & _T_60 & d_drop),
    .io_probesack
      (_c_first_T & c_trackerOH_2 & _T_105 & (_filter_io_release_bits_keepB_T | _T_108)),
    .io_d_last             (d_trackerOH[2] & _T_56 & d_response & d_last),
    .io_e_last             (auto_in_e_bits_sink == 2'h2 & auto_in_e_valid),
    .io_in_a_ready         (_TLBroadcastTracker_2_io_in_a_ready),
    .io_out_a_valid        (_TLBroadcastTracker_2_io_out_a_valid),
    .io_out_a_bits_opcode  (_TLBroadcastTracker_2_io_out_a_bits_opcode),
    .io_out_a_bits_size    (_TLBroadcastTracker_2_io_out_a_bits_size),
    .io_out_a_bits_source  (_TLBroadcastTracker_2_io_out_a_bits_source),
    .io_out_a_bits_address (_TLBroadcastTracker_2_io_out_a_bits_address),
    .io_out_a_bits_mask    (_TLBroadcastTracker_2_io_out_a_bits_mask),
    .io_out_a_bits_data    (_TLBroadcastTracker_2_io_out_a_bits_data),
    .io_source             (_TLBroadcastTracker_2_io_source),
    .io_line               (_TLBroadcastTracker_2_io_line),
    .io_idle               (_TLBroadcastTracker_2_io_idle),
    .io_need_d             (_TLBroadcastTracker_2_io_need_d)
  );
  TLBroadcastTracker_3 TLBroadcastTracker_3 (
    .clock                 (clock),
    .reset                 (reset),
    .io_in_a_first         (~(|a_first_counter)),
    .io_in_a_valid
      (auto_in_a_valid & _GEN_3[3] & ((|a_first_counter) | _filter_io_request_ready)),
    .io_in_a_bits_opcode   (auto_in_a_bits_opcode),
    .io_in_a_bits_size     (auto_in_a_bits_size),
    .io_in_a_bits_source   (auto_in_a_bits_source),
    .io_in_a_bits_address  (auto_in_a_bits_address),
    .io_in_a_bits_mask     (auto_in_a_bits_mask),
    .io_in_a_bits_data     (auto_in_a_bits_data),
    .io_out_a_ready        (auto_out_a_ready & (idle_1 ? ~_GEN_1 : state_1_4)),
    .io_probe_valid        (_T_206 & (&_filter_io_response_bits_mshr)),
    .io_probe_bits_count   (~_filter_io_response_bits_allocOH),
    .io_probenack          (_c_first_T & c_probeack & c_trackerOH_3),
    .io_probedack          (d_trackerOH[3] & _T_60 & d_drop),
    .io_probesack
      (_c_first_T & c_trackerOH_3 & _T_105 & (_filter_io_release_bits_keepB_T | _T_108)),
    .io_d_last             (d_trackerOH[3] & _T_56 & d_response & d_last),
    .io_e_last             ((&auto_in_e_bits_sink) & auto_in_e_valid),
    .io_in_a_ready         (_TLBroadcastTracker_3_io_in_a_ready),
    .io_out_a_valid        (_TLBroadcastTracker_3_io_out_a_valid),
    .io_out_a_bits_opcode  (_TLBroadcastTracker_3_io_out_a_bits_opcode),
    .io_out_a_bits_size    (_TLBroadcastTracker_3_io_out_a_bits_size),
    .io_out_a_bits_source  (_TLBroadcastTracker_3_io_out_a_bits_source),
    .io_out_a_bits_address (_TLBroadcastTracker_3_io_out_a_bits_address),
    .io_out_a_bits_mask    (_TLBroadcastTracker_3_io_out_a_bits_mask),
    .io_out_a_bits_data    (_TLBroadcastTracker_3_io_out_a_bits_data),
    .io_source             (_TLBroadcastTracker_3_io_source),
    .io_line               (_TLBroadcastTracker_3_io_line),
    .io_idle               (_TLBroadcastTracker_3_io_idle),
    .io_need_d             (_TLBroadcastTracker_3_io_need_d)
  );
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_b_valid = probe_todo;
  assign auto_in_b_bits_param = probe_perms;
  assign auto_in_b_bits_address = {probe_line, 6'h0};
  assign auto_in_c_ready = nodeIn_c_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode =
    (muxState_0 ? 3'h6 : 3'h0) | (muxState_1 ? d_normal_bits_opcode : 3'h0);
  assign auto_in_d_bits_param =
    muxState_1 & auto_out_d_bits_source[7] & auto_out_d_bits_opcode[0]
      ? {1'h0, ~(auto_out_d_bits_source[6])}
      : 2'h0;
  assign auto_in_d_bits_size =
    (muxState_0 ? auto_in_c_bits_size : 3'h0)
    | (muxState_1 ? auto_out_d_bits_size : 3'h0);
  assign auto_in_d_bits_source =
    (muxState_0 ? auto_in_c_bits_source : 6'h0)
    | (muxState_1 ? d_normal_bits_source : 6'h0);
  assign auto_in_d_bits_sink =
    muxState_1 ? {|(d_trackerOH[3:2]), d_trackerOH[3] | d_trackerOH[1]} : 2'h0;
  assign auto_in_d_bits_denied = muxState_1 & auto_out_d_bits_denied;
  assign auto_in_d_bits_data = muxState_1 ? auto_out_d_bits_data : 64'h0;
  assign auto_in_d_bits_corrupt = muxState_1 & auto_out_d_bits_corrupt;
  assign auto_out_a_valid = nodeOut_a_valid;
  assign auto_out_a_bits_opcode =
    (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_opcode : 3'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_opcode : 3'h0);
  assign auto_out_a_bits_size =
    (muxState_1_0 ? auto_in_c_bits_size : 3'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_size : 3'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_size : 3'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_size : 3'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_size : 3'h0);
  assign auto_out_a_bits_source =
    (muxState_1_0
       ? {(&auto_in_c_bits_opcode) ? 2'h2 : 2'h1,
          (&auto_in_c_bits_opcode)
            ? auto_in_c_bits_source
            : (c_trackerOH_0 ? _TLBroadcastTracker_io_source : 6'h0)
              | (c_trackerOH_1 ? _TLBroadcastTracker_1_io_source : 6'h0)
              | (c_trackerOH_2 ? _TLBroadcastTracker_2_io_source : 6'h0)
              | (c_trackerOH_3 ? _TLBroadcastTracker_3_io_source : 6'h0)}
       : 8'h0) | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_source : 8'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_source : 8'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_source : 8'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_source : 8'h0);
  assign auto_out_a_bits_address =
    (muxState_1_0 ? auto_in_c_bits_address : 32'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_address : 32'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_address : 32'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_address : 32'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_address : 32'h0);
  assign auto_out_a_bits_mask =
    (muxState_1_0
       ? {putfull_bits_a_mask_acc_5 | putfull_bits_a_mask_eq_5
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_5 | putfull_bits_a_mask_eq_5
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_4 | putfull_bits_a_mask_eq_4
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_4 | putfull_bits_a_mask_eq_4
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_3 | putfull_bits_a_mask_eq_3
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_3 | putfull_bits_a_mask_eq_3
            & ~(auto_in_c_bits_address[0]),
          putfull_bits_a_mask_acc_2 | putfull_bits_a_mask_eq_2
            & auto_in_c_bits_address[0],
          putfull_bits_a_mask_acc_2 | putfull_bits_a_mask_eq_2
            & ~(auto_in_c_bits_address[0])}
       : 8'h0) | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_mask : 8'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_mask : 8'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_mask : 8'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_mask : 8'h0);
  assign auto_out_a_bits_data =
    (muxState_1_0 ? auto_in_c_bits_data : 64'h0)
    | (muxState_1_1 ? _TLBroadcastTracker_io_out_a_bits_data : 64'h0)
    | (muxState_1_2 ? _TLBroadcastTracker_1_io_out_a_bits_data : 64'h0)
    | (muxState_1_3 ? _TLBroadcastTracker_2_io_out_a_bits_data : 64'h0)
    | (muxState_1_4 ? _TLBroadcastTracker_3_io_out_a_bits_data : 64'h0);
  assign auto_out_d_ready = nodeOut_d_ready;
endmodule

module CoherenceManagerWrapper(
  input         auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready,
                auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid,
  input  [2:0]  auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode,
                auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size,
  input  [7:0]  auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source,
  input         auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied,
  input  [63:0] auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data,
  input         auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt,
                auto_coherent_jbar_in_a_valid,
  input  [2:0]  auto_coherent_jbar_in_a_bits_opcode,
                auto_coherent_jbar_in_a_bits_param,
                auto_coherent_jbar_in_a_bits_size,
  input  [5:0]  auto_coherent_jbar_in_a_bits_source,
  input  [31:0] auto_coherent_jbar_in_a_bits_address,
  input  [7:0]  auto_coherent_jbar_in_a_bits_mask,
  input  [63:0] auto_coherent_jbar_in_a_bits_data,
  input         auto_coherent_jbar_in_b_ready,
                auto_coherent_jbar_in_c_valid,
  input  [2:0]  auto_coherent_jbar_in_c_bits_opcode,
                auto_coherent_jbar_in_c_bits_param,
                auto_coherent_jbar_in_c_bits_size,
  input  [5:0]  auto_coherent_jbar_in_c_bits_source,
  input  [31:0] auto_coherent_jbar_in_c_bits_address,
  input  [63:0] auto_coherent_jbar_in_c_bits_data,
  input         auto_coherent_jbar_in_d_ready,
                auto_coherent_jbar_in_e_valid,
  input  [1:0]  auto_coherent_jbar_in_e_bits_sink,
  input         auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock,
                auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset,
                auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock,
                auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset,
  output        auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid,
  output [2:0]  auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode,
                auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size,
  output [7:0]  auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source,
  output [31:0] auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address,
  output [7:0]  auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask,
  output [63:0] auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data,
  output        auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready,
                auto_coherent_jbar_in_a_ready,
                auto_coherent_jbar_in_b_valid,
  output [1:0]  auto_coherent_jbar_in_b_bits_param,
  output [31:0] auto_coherent_jbar_in_b_bits_address,
  output        auto_coherent_jbar_in_c_ready,
                auto_coherent_jbar_in_d_valid,
  output [2:0]  auto_coherent_jbar_in_d_bits_opcode,
  output [1:0]  auto_coherent_jbar_in_d_bits_param,
  output [2:0]  auto_coherent_jbar_in_d_bits_size,
  output [5:0]  auto_coherent_jbar_in_d_bits_source,
  output [1:0]  auto_coherent_jbar_in_d_bits_sink,
  output        auto_coherent_jbar_in_d_bits_denied,
  output [63:0] auto_coherent_jbar_in_d_bits_data,
  output        auto_coherent_jbar_in_d_bits_corrupt,
                auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock,
                auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset
);

  wire        _binder_auto_in_a_ready;
  wire        _binder_auto_in_d_valid;
  wire [2:0]  _binder_auto_in_d_bits_opcode;
  wire [2:0]  _binder_auto_in_d_bits_size;
  wire [7:0]  _binder_auto_in_d_bits_source;
  wire        _binder_auto_in_d_bits_denied;
  wire [63:0] _binder_auto_in_d_bits_data;
  wire        _binder_auto_in_d_bits_corrupt;
  wire        _broadcast_1_auto_out_a_valid;
  wire [2:0]  _broadcast_1_auto_out_a_bits_opcode;
  wire [2:0]  _broadcast_1_auto_out_a_bits_size;
  wire [7:0]  _broadcast_1_auto_out_a_bits_source;
  wire [31:0] _broadcast_1_auto_out_a_bits_address;
  wire [7:0]  _broadcast_1_auto_out_a_bits_mask;
  wire [63:0] _broadcast_1_auto_out_a_bits_data;
  wire        _broadcast_1_auto_out_d_ready;
  TLBroadcast broadcast_1 (
    .clock
      (auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock),
    .reset
      (auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset),
    .auto_in_a_valid         (auto_coherent_jbar_in_a_valid),
    .auto_in_a_bits_opcode   (auto_coherent_jbar_in_a_bits_opcode),
    .auto_in_a_bits_param    (auto_coherent_jbar_in_a_bits_param),
    .auto_in_a_bits_size     (auto_coherent_jbar_in_a_bits_size),
    .auto_in_a_bits_source   (auto_coherent_jbar_in_a_bits_source),
    .auto_in_a_bits_address  (auto_coherent_jbar_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_coherent_jbar_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_coherent_jbar_in_a_bits_data),
    .auto_in_b_ready         (auto_coherent_jbar_in_b_ready),
    .auto_in_c_valid         (auto_coherent_jbar_in_c_valid),
    .auto_in_c_bits_opcode   (auto_coherent_jbar_in_c_bits_opcode),
    .auto_in_c_bits_param    (auto_coherent_jbar_in_c_bits_param),
    .auto_in_c_bits_size     (auto_coherent_jbar_in_c_bits_size),
    .auto_in_c_bits_source   (auto_coherent_jbar_in_c_bits_source),
    .auto_in_c_bits_address  (auto_coherent_jbar_in_c_bits_address),
    .auto_in_c_bits_data     (auto_coherent_jbar_in_c_bits_data),
    .auto_in_d_ready         (auto_coherent_jbar_in_d_ready),
    .auto_in_e_valid         (auto_coherent_jbar_in_e_valid),
    .auto_in_e_bits_sink     (auto_coherent_jbar_in_e_bits_sink),
    .auto_out_a_ready        (_binder_auto_in_a_ready),
    .auto_out_d_valid        (_binder_auto_in_d_valid),
    .auto_out_d_bits_opcode  (_binder_auto_in_d_bits_opcode),
    .auto_out_d_bits_size    (_binder_auto_in_d_bits_size),
    .auto_out_d_bits_source  (_binder_auto_in_d_bits_source),
    .auto_out_d_bits_denied  (_binder_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_binder_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_binder_auto_in_d_bits_corrupt),
    .auto_in_a_ready         (auto_coherent_jbar_in_a_ready),
    .auto_in_b_valid         (auto_coherent_jbar_in_b_valid),
    .auto_in_b_bits_param    (auto_coherent_jbar_in_b_bits_param),
    .auto_in_b_bits_address  (auto_coherent_jbar_in_b_bits_address),
    .auto_in_c_ready         (auto_coherent_jbar_in_c_ready),
    .auto_in_d_valid         (auto_coherent_jbar_in_d_valid),
    .auto_in_d_bits_opcode   (auto_coherent_jbar_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_coherent_jbar_in_d_bits_param),
    .auto_in_d_bits_size     (auto_coherent_jbar_in_d_bits_size),
    .auto_in_d_bits_source   (auto_coherent_jbar_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_coherent_jbar_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_coherent_jbar_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_coherent_jbar_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_coherent_jbar_in_d_bits_corrupt),
    .auto_out_a_valid        (_broadcast_1_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_broadcast_1_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_broadcast_1_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_broadcast_1_auto_out_a_bits_source),
    .auto_out_a_bits_address (_broadcast_1_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_broadcast_1_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_broadcast_1_auto_out_a_bits_data),
    .auto_out_d_ready        (_broadcast_1_auto_out_d_ready)
  );
  ProbePicker binder (
    .auto_in_a_valid         (_broadcast_1_auto_out_a_valid),
    .auto_in_a_bits_opcode   (_broadcast_1_auto_out_a_bits_opcode),
    .auto_in_a_bits_size     (_broadcast_1_auto_out_a_bits_size),
    .auto_in_a_bits_source   (_broadcast_1_auto_out_a_bits_source),
    .auto_in_a_bits_address  (_broadcast_1_auto_out_a_bits_address),
    .auto_in_a_bits_mask     (_broadcast_1_auto_out_a_bits_mask),
    .auto_in_a_bits_data     (_broadcast_1_auto_out_a_bits_data),
    .auto_in_d_ready         (_broadcast_1_auto_out_d_ready),
    .auto_out_a_ready
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready),
    .auto_out_d_valid
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid),
    .auto_out_d_bits_opcode
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode),
    .auto_out_d_bits_size
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size),
    .auto_out_d_bits_source
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source),
    .auto_out_d_bits_denied
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied),
    .auto_out_d_bits_data
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt),
    .auto_in_a_ready         (_binder_auto_in_a_ready),
    .auto_in_d_valid         (_binder_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_binder_auto_in_d_bits_opcode),
    .auto_in_d_bits_size     (_binder_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_binder_auto_in_d_bits_source),
    .auto_in_d_bits_denied   (_binder_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_binder_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_binder_auto_in_d_bits_corrupt),
    .auto_out_a_valid
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid),
    .auto_out_a_bits_opcode
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode),
    .auto_out_a_bits_size
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size),
    .auto_out_a_bits_source
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source),
    .auto_out_a_bits_address
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address),
    .auto_out_a_bits_mask
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask),
    .auto_out_a_bits_data
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data),
    .auto_out_d_ready
      (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready)
  );
  assign auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock =
    auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock;
  assign auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset =
    auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset;
endmodule

module TLXbar_8(
  input         clock,
                reset,
                auto_in_1_a_valid,
  input  [31:0] auto_in_1_a_bits_address,
  input         auto_in_0_a_valid,
  input  [2:0]  auto_in_0_a_bits_opcode,
                auto_in_0_a_bits_param,
  input  [3:0]  auto_in_0_a_bits_size,
  input         auto_in_0_a_bits_source,
  input  [31:0] auto_in_0_a_bits_address,
  input  [7:0]  auto_in_0_a_bits_mask,
  input  [63:0] auto_in_0_a_bits_data,
  input         auto_in_0_b_ready,
                auto_in_0_c_valid,
  input  [2:0]  auto_in_0_c_bits_opcode,
                auto_in_0_c_bits_param,
  input  [3:0]  auto_in_0_c_bits_size,
  input         auto_in_0_c_bits_source,
  input  [31:0] auto_in_0_c_bits_address,
  input  [63:0] auto_in_0_c_bits_data,
  input         auto_in_0_d_ready,
                auto_in_0_e_valid,
  input  [1:0]  auto_in_0_e_bits_sink,
  input         auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [3:0]  auto_out_b_bits_size,
  input  [1:0]  auto_out_b_bits_source,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [1:0]  auto_out_d_bits_source,
                auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
                auto_out_e_ready,
  output        auto_in_1_a_ready,
                auto_in_1_d_valid,
  output [2:0]  auto_in_1_d_bits_opcode,
  output [3:0]  auto_in_1_d_bits_size,
  output [63:0] auto_in_1_d_bits_data,
  output        auto_in_1_d_bits_corrupt,
                auto_in_0_a_ready,
                auto_in_0_b_valid,
  output [1:0]  auto_in_0_b_bits_param,
  output [3:0]  auto_in_0_b_bits_size,
  output        auto_in_0_b_bits_source,
  output [31:0] auto_in_0_b_bits_address,
  output        auto_in_0_c_ready,
                auto_in_0_d_valid,
  output [2:0]  auto_in_0_d_bits_opcode,
  output [1:0]  auto_in_0_d_bits_param,
  output [3:0]  auto_in_0_d_bits_size,
  output        auto_in_0_d_bits_source,
  output [1:0]  auto_in_0_d_bits_sink,
  output        auto_in_0_d_bits_denied,
  output [63:0] auto_in_0_d_bits_data,
  output        auto_in_0_e_ready,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [1:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output [1:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_d_ready,
                auto_out_e_valid,
  output [1:0]  auto_out_e_bits_sink
);

  wire        requestDOI_0_1 = auto_out_d_bits_source == 2'h2;
  reg  [8:0]  beatsLeft;
  wire        idle = beatsLeft == 9'h0;
  wire [1:0]  readys_valid = {auto_in_1_a_valid, auto_in_0_a_valid};
  reg  [1:0]  readys_mask;
  wire [1:0]  _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0]  readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {|_readys_filter_T_1, auto_in_1_a_valid | _readys_filter_T_1[0]});
  wire        winner_0 = readys_readys[0] & auto_in_0_a_valid;
  wire        winner_1 = readys_readys[1] & auto_in_1_a_valid;
  wire        _out_0_a_valid_T = auto_in_0_a_valid | auto_in_1_a_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_out_0_a_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         state_0;
  reg         state_1;
  wire        muxState_0 = idle ? winner_0 : state_0;
  wire        muxState_1 = idle ? winner_1 : state_1;
  wire        out_0_a_valid =
    idle ? _out_0_a_valid_T : state_0 & auto_in_0_a_valid | state_1 & auto_in_1_a_valid;
  wire [26:0] _beatsAI_decode_T_1 = 27'hFFF << auto_in_0_a_bits_size;
  wire [1:0]  _readys_mask_T = readys_readys & readys_valid;
  wire        latch = idle & auto_out_a_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 9'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      if (latch) begin
        if (winner_0 & ~(auto_in_0_a_bits_opcode[2]))
          beatsLeft <= ~(_beatsAI_decode_T_1[11:3]);
        else
          beatsLeft <= 9'h0;
      end
      else
        beatsLeft <= beatsLeft - {8'h0, auto_out_a_ready & out_0_a_valid};
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (idle) begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  assign auto_in_1_a_ready = auto_out_a_ready & (idle ? readys_readys[1] : state_1);
  assign auto_in_1_d_valid = auto_out_d_valid & requestDOI_0_1;
  assign auto_in_1_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_1_d_bits_size = auto_out_d_bits_size;
  assign auto_in_1_d_bits_data = auto_out_d_bits_data;
  assign auto_in_1_d_bits_corrupt = auto_out_d_bits_corrupt;
  assign auto_in_0_a_ready = auto_out_a_ready & (idle ? readys_readys[0] : state_0);
  assign auto_in_0_b_valid = auto_out_b_valid & ~(auto_out_b_bits_source[1]);
  assign auto_in_0_b_bits_param = auto_out_b_bits_param;
  assign auto_in_0_b_bits_size = auto_out_b_bits_size;
  assign auto_in_0_b_bits_source = auto_out_b_bits_source[0];
  assign auto_in_0_b_bits_address = auto_out_b_bits_address;
  assign auto_in_0_c_ready = auto_out_c_ready;
  assign auto_in_0_d_valid = auto_out_d_valid & ~(auto_out_d_bits_source[1]);
  assign auto_in_0_d_bits_opcode = auto_out_d_bits_opcode;
  assign auto_in_0_d_bits_param = auto_out_d_bits_param;
  assign auto_in_0_d_bits_size = auto_out_d_bits_size;
  assign auto_in_0_d_bits_source = auto_out_d_bits_source[0];
  assign auto_in_0_d_bits_sink = auto_out_d_bits_sink;
  assign auto_in_0_d_bits_denied = auto_out_d_bits_denied;
  assign auto_in_0_d_bits_data = auto_out_d_bits_data;
  assign auto_in_0_e_ready = auto_out_e_ready;
  assign auto_out_a_valid = out_0_a_valid;
  assign auto_out_a_bits_opcode =
    (muxState_0 ? auto_in_0_a_bits_opcode : 3'h0) | {muxState_1, 2'h0};
  assign auto_out_a_bits_param = muxState_0 ? auto_in_0_a_bits_param : 3'h0;
  assign auto_out_a_bits_size =
    (muxState_0 ? auto_in_0_a_bits_size : 4'h0) | (muxState_1 ? 4'h6 : 4'h0);
  assign auto_out_a_bits_source =
    (muxState_0 ? {1'h0, auto_in_0_a_bits_source} : 2'h0) | {muxState_1, 1'h0};
  assign auto_out_a_bits_address =
    (muxState_0 ? auto_in_0_a_bits_address : 32'h0)
    | (muxState_1 ? auto_in_1_a_bits_address : 32'h0);
  assign auto_out_a_bits_mask =
    (muxState_0 ? auto_in_0_a_bits_mask : 8'h0) | {8{muxState_1}};
  assign auto_out_a_bits_data = muxState_0 ? auto_in_0_a_bits_data : 64'h0;
  assign auto_out_b_ready = ~(auto_out_b_bits_source[1]) & auto_in_0_b_ready;
  assign auto_out_c_valid = auto_in_0_c_valid;
  assign auto_out_c_bits_opcode = auto_in_0_c_bits_opcode;
  assign auto_out_c_bits_param = auto_in_0_c_bits_param;
  assign auto_out_c_bits_size = auto_in_0_c_bits_size;
  assign auto_out_c_bits_source = {1'h0, auto_in_0_c_bits_source};
  assign auto_out_c_bits_address = auto_in_0_c_bits_address;
  assign auto_out_c_bits_data = auto_in_0_c_bits_data;
  assign auto_out_d_ready =
    ~(auto_out_d_bits_source[1]) & auto_in_0_d_ready | requestDOI_0_1;
  assign auto_out_e_valid = auto_in_0_e_valid;
  assign auto_out_e_bits_sink = auto_in_0_e_bits_sink;
endmodule

module IntXbar_1(
  input  auto_int_in_3_0,
         auto_int_in_2_0,
         auto_int_in_1_0,
         auto_int_in_1_1,
         auto_int_in_0_0,
  output auto_int_out_0,
         auto_int_out_1,
         auto_int_out_2,
         auto_int_out_3,
         auto_int_out_4
);

  assign auto_int_out_0 = auto_int_in_0_0;
  assign auto_int_out_1 = auto_int_in_1_0;
  assign auto_int_out_2 = auto_int_in_1_1;
  assign auto_int_out_3 = auto_int_in_2_0;
  assign auto_int_out_4 = auto_int_in_3_0;
endmodule

module OptimizationBarrier(
  input  [19:0] io_x_ppn,
  input         io_x_u,
                io_x_ae_ptw,
                io_x_ae_final,
                io_x_pf,
                io_x_gf,
                io_x_sw,
                io_x_sx,
                io_x_sr,
                io_x_pw,
                io_x_px,
                io_x_pr,
                io_x_ppp,
                io_x_pal,
                io_x_paa,
                io_x_eff,
                io_x_c,
  output [19:0] io_y_ppn,
  output        io_y_u,
                io_y_ae_ptw,
                io_y_ae_final,
                io_y_pf,
                io_y_gf,
                io_y_sw,
                io_y_sx,
                io_y_sr,
                io_y_pw,
                io_y_px,
                io_y_pr,
                io_y_ppp,
                io_y_pal,
                io_y_paa,
                io_y_eff,
                io_y_c
);

  assign io_y_ppn = io_x_ppn;
  assign io_y_u = io_x_u;
  assign io_y_ae_ptw = io_x_ae_ptw;
  assign io_y_ae_final = io_x_ae_final;
  assign io_y_pf = io_x_pf;
  assign io_y_gf = io_x_gf;
  assign io_y_sw = io_x_sw;
  assign io_y_sx = io_x_sx;
  assign io_y_sr = io_x_sr;
  assign io_y_pw = io_x_pw;
  assign io_y_px = io_x_px;
  assign io_y_pr = io_x_pr;
  assign io_y_ppp = io_x_ppp;
  assign io_y_pal = io_x_pal;
  assign io_y_paa = io_x_paa;
  assign io_y_eff = io_x_eff;
  assign io_y_c = io_x_c;
endmodule

module PMPChecker(
  input  [1:0]  io_prv,
  input         io_pmp_0_cfg_l,
  input  [1:0]  io_pmp_0_cfg_a,
  input         io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  input  [29:0] io_pmp_0_addr,
  input  [31:0] io_pmp_0_mask,
  input         io_pmp_1_cfg_l,
  input  [1:0]  io_pmp_1_cfg_a,
  input         io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  input  [29:0] io_pmp_1_addr,
  input  [31:0] io_pmp_1_mask,
  input         io_pmp_2_cfg_l,
  input  [1:0]  io_pmp_2_cfg_a,
  input         io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  input  [29:0] io_pmp_2_addr,
  input  [31:0] io_pmp_2_mask,
  input         io_pmp_3_cfg_l,
  input  [1:0]  io_pmp_3_cfg_a,
  input         io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  input  [29:0] io_pmp_3_addr,
  input  [31:0] io_pmp_3_mask,
  input         io_pmp_4_cfg_l,
  input  [1:0]  io_pmp_4_cfg_a,
  input         io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  input  [29:0] io_pmp_4_addr,
  input  [31:0] io_pmp_4_mask,
  input         io_pmp_5_cfg_l,
  input  [1:0]  io_pmp_5_cfg_a,
  input         io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  input  [29:0] io_pmp_5_addr,
  input  [31:0] io_pmp_5_mask,
  input         io_pmp_6_cfg_l,
  input  [1:0]  io_pmp_6_cfg_a,
  input         io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  input  [29:0] io_pmp_6_addr,
  input  [31:0] io_pmp_6_mask,
  input         io_pmp_7_cfg_l,
  input  [1:0]  io_pmp_7_cfg_a,
  input         io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  input  [29:0] io_pmp_7_addr,
  input  [31:0] io_pmp_7_mask,
                io_addr,
  input  [1:0]  io_size,
  output        io_r,
                io_w,
                io_x
);

  wire [5:0] _GEN = {4'h0, io_size};
  wire [5:0] _res_hit_lsbMask_T_1 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_4 = 6'h7 << _GEN;
  wire       res_hit =
    io_pmp_7_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_7_addr[29:1]) & ~(io_pmp_7_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_7_addr[0], 2'h0})
           & ~(io_pmp_7_mask[2:0] | ~(_res_hit_lsbMask_T_1[2:0]))) == 3'h0
      : io_pmp_7_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_6_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_6_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_4[2:0])) < {io_pmp_6_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_7_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_7_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_7_addr[0], 2'h0});
  wire       res_ignore = io_prv[1] & ~io_pmp_7_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_1 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask = ~(_res_aligned_lsbMask_T_1[2:0]);
  wire       res_aligned =
    io_pmp_7_cfg_a[1]
      ? (res_aligned_lsbMask & ~(io_pmp_7_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_6_addr[29:1]) == 29'h0 & io_pmp_6_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_7_addr[29:1]) == 29'h0
          & io_pmp_7_addr[0] & (io_addr[2] | res_aligned_lsbMask[2]));
  wire [5:0] _res_hit_lsbMask_T_5 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_18 = 6'h7 << _GEN;
  wire       res_hit_1 =
    io_pmp_6_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_6_addr[29:1]) & ~(io_pmp_6_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_6_addr[0], 2'h0})
           & ~(io_pmp_6_mask[2:0] | ~(_res_hit_lsbMask_T_5[2:0]))) == 3'h0
      : io_pmp_6_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_5_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_5_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_18[2:0])) < {io_pmp_5_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_6_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_6_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_6_addr[0], 2'h0});
  wire       res_ignore_1 = io_prv[1] & ~io_pmp_6_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_4 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_1 = ~(_res_aligned_lsbMask_T_4[2:0]);
  wire       res_aligned_1 =
    io_pmp_6_cfg_a[1]
      ? (res_aligned_lsbMask_1 & ~(io_pmp_6_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_5_addr[29:1]) == 29'h0 & io_pmp_5_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_6_addr[29:1]) == 29'h0
          & io_pmp_6_addr[0] & (io_addr[2] | res_aligned_lsbMask_1[2]));
  wire [5:0] _res_hit_lsbMask_T_9 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_32 = 6'h7 << _GEN;
  wire       res_hit_2 =
    io_pmp_5_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_5_addr[29:1]) & ~(io_pmp_5_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_5_addr[0], 2'h0})
           & ~(io_pmp_5_mask[2:0] | ~(_res_hit_lsbMask_T_9[2:0]))) == 3'h0
      : io_pmp_5_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_4_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_4_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_32[2:0])) < {io_pmp_4_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_5_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_5_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_5_addr[0], 2'h0});
  wire       res_ignore_2 = io_prv[1] & ~io_pmp_5_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_7 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_2 = ~(_res_aligned_lsbMask_T_7[2:0]);
  wire       res_aligned_2 =
    io_pmp_5_cfg_a[1]
      ? (res_aligned_lsbMask_2 & ~(io_pmp_5_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_4_addr[29:1]) == 29'h0 & io_pmp_4_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_5_addr[29:1]) == 29'h0
          & io_pmp_5_addr[0] & (io_addr[2] | res_aligned_lsbMask_2[2]));
  wire [5:0] _res_hit_lsbMask_T_13 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_46 = 6'h7 << _GEN;
  wire       res_hit_3 =
    io_pmp_4_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_4_addr[29:1]) & ~(io_pmp_4_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_4_addr[0], 2'h0})
           & ~(io_pmp_4_mask[2:0] | ~(_res_hit_lsbMask_T_13[2:0]))) == 3'h0
      : io_pmp_4_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_3_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_3_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_46[2:0])) < {io_pmp_3_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_4_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_4_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_4_addr[0], 2'h0});
  wire       res_ignore_3 = io_prv[1] & ~io_pmp_4_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_10 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_3 = ~(_res_aligned_lsbMask_T_10[2:0]);
  wire       res_aligned_3 =
    io_pmp_4_cfg_a[1]
      ? (res_aligned_lsbMask_3 & ~(io_pmp_4_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_3_addr[29:1]) == 29'h0 & io_pmp_3_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_4_addr[29:1]) == 29'h0
          & io_pmp_4_addr[0] & (io_addr[2] | res_aligned_lsbMask_3[2]));
  wire [5:0] _res_hit_lsbMask_T_17 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_60 = 6'h7 << _GEN;
  wire       res_hit_4 =
    io_pmp_3_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_3_addr[29:1]) & ~(io_pmp_3_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_3_addr[0], 2'h0})
           & ~(io_pmp_3_mask[2:0] | ~(_res_hit_lsbMask_T_17[2:0]))) == 3'h0
      : io_pmp_3_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_2_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_2_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_60[2:0])) < {io_pmp_2_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_3_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_3_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_3_addr[0], 2'h0});
  wire       res_ignore_4 = io_prv[1] & ~io_pmp_3_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_13 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_4 = ~(_res_aligned_lsbMask_T_13[2:0]);
  wire       res_aligned_4 =
    io_pmp_3_cfg_a[1]
      ? (res_aligned_lsbMask_4 & ~(io_pmp_3_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_2_addr[29:1]) == 29'h0 & io_pmp_2_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_3_addr[29:1]) == 29'h0
          & io_pmp_3_addr[0] & (io_addr[2] | res_aligned_lsbMask_4[2]));
  wire [5:0] _res_hit_lsbMask_T_21 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_74 = 6'h7 << _GEN;
  wire       res_hit_5 =
    io_pmp_2_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_2_addr[29:1]) & ~(io_pmp_2_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_2_addr[0], 2'h0})
           & ~(io_pmp_2_mask[2:0] | ~(_res_hit_lsbMask_T_21[2:0]))) == 3'h0
      : io_pmp_2_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_1_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_1_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_74[2:0])) < {io_pmp_1_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_2_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_2_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_2_addr[0], 2'h0});
  wire       res_ignore_5 = io_prv[1] & ~io_pmp_2_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_16 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_5 = ~(_res_aligned_lsbMask_T_16[2:0]);
  wire       res_aligned_5 =
    io_pmp_2_cfg_a[1]
      ? (res_aligned_lsbMask_5 & ~(io_pmp_2_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_1_addr[29:1]) == 29'h0 & io_pmp_1_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_2_addr[29:1]) == 29'h0
          & io_pmp_2_addr[0] & (io_addr[2] | res_aligned_lsbMask_5[2]));
  wire [5:0] _res_hit_lsbMask_T_25 = 6'h7 << _GEN;
  wire [5:0] _res_hit_T_88 = 6'h7 << _GEN;
  wire       res_hit_6 =
    io_pmp_1_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_1_addr[29:1]) & ~(io_pmp_1_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_1_addr[0], 2'h0})
           & ~(io_pmp_1_mask[2:0] | ~(_res_hit_lsbMask_T_25[2:0]))) == 3'h0
      : io_pmp_1_cfg_a[0]
        & ~(io_addr[31:3] < io_pmp_0_addr[29:1]
            | (io_addr[31:3] ^ io_pmp_0_addr[29:1]) == 29'h0
            & (io_addr[2:0] | ~(_res_hit_T_88[2:0])) < {io_pmp_0_addr[0], 2'h0})
        & (io_addr[31:3] < io_pmp_1_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_1_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_1_addr[0], 2'h0});
  wire       res_ignore_6 = io_prv[1] & ~io_pmp_1_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_19 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_6 = ~(_res_aligned_lsbMask_T_19[2:0]);
  wire       res_aligned_6 =
    io_pmp_1_cfg_a[1]
      ? (res_aligned_lsbMask_6 & ~(io_pmp_1_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_0_addr[29:1]) == 29'h0 & io_pmp_0_addr[0]
          & ~(io_addr[2]) | (io_addr[31:3] ^ io_pmp_1_addr[29:1]) == 29'h0
          & io_pmp_1_addr[0] & (io_addr[2] | res_aligned_lsbMask_6[2]));
  wire [5:0] _res_hit_lsbMask_T_29 = 6'h7 << _GEN;
  wire       res_hit_7 =
    io_pmp_0_cfg_a[1]
      ? ((io_addr[31:3] ^ io_pmp_0_addr[29:1]) & ~(io_pmp_0_mask[31:3])) == 29'h0
        & ((io_addr[2:0] ^ {io_pmp_0_addr[0], 2'h0})
           & ~(io_pmp_0_mask[2:0] | ~(_res_hit_lsbMask_T_29[2:0]))) == 3'h0
      : io_pmp_0_cfg_a[0]
        & (io_addr[31:3] < io_pmp_0_addr[29:1]
           | (io_addr[31:3] ^ io_pmp_0_addr[29:1]) == 29'h0
           & io_addr[2:0] < {io_pmp_0_addr[0], 2'h0});
  wire       res_ignore_7 = io_prv[1] & ~io_pmp_0_cfg_l;
  wire [5:0] _res_aligned_lsbMask_T_22 = 6'h7 << _GEN;
  wire [2:0] res_aligned_lsbMask_7 = ~(_res_aligned_lsbMask_T_22[2:0]);
  wire       res_aligned_7 =
    io_pmp_0_cfg_a[1]
      ? (res_aligned_lsbMask_7 & ~(io_pmp_0_mask[2:0])) == 3'h0
      : ~((io_addr[31:3] ^ io_pmp_0_addr[29:1]) == 29'h0 & io_pmp_0_addr[0]
          & (io_addr[2] | res_aligned_lsbMask_7[2]));
  assign io_r =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_r | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_r | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_r | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_r | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_r | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_r | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_r | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_r | res_ignore)
                                  : io_prv[1];
  assign io_w =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_w | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_w | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_w | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_w | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_w | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_w | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_w | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_w | res_ignore)
                                  : io_prv[1];
  assign io_x =
    res_hit_7
      ? res_aligned_7 & (io_pmp_0_cfg_x | res_ignore_7)
      : res_hit_6
          ? res_aligned_6 & (io_pmp_1_cfg_x | res_ignore_6)
          : res_hit_5
              ? res_aligned_5 & (io_pmp_2_cfg_x | res_ignore_5)
              : res_hit_4
                  ? res_aligned_4 & (io_pmp_3_cfg_x | res_ignore_4)
                  : res_hit_3
                      ? res_aligned_3 & (io_pmp_4_cfg_x | res_ignore_3)
                      : res_hit_2
                          ? res_aligned_2 & (io_pmp_5_cfg_x | res_ignore_2)
                          : res_hit_1
                              ? res_aligned_1 & (io_pmp_6_cfg_x | res_ignore_1)
                              : res_hit
                                  ? res_aligned & (io_pmp_7_cfg_x | res_ignore)
                                  : io_prv[1];
endmodule

module DCacheDataArray(
  input         clock,
                io_req_valid,
  input  [11:0] io_req_bits_addr,
  input         io_req_bits_write,
  input  [63:0] io_req_bits_wdata,
  input  [7:0]  io_req_bits_eccMask,
  output [63:0] io_resp_0
);

  wire       readEnable;
  wire       writeEnable;
  wire [7:0] _data_arrays_0_7_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_6_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_5_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_4_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_3_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_2_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_1_ext_RW0_rdata;
  wire [7:0] _data_arrays_0_0_ext_RW0_rdata;
  wire       _GEN = readEnable | writeEnable;
  assign writeEnable = io_req_valid & io_req_bits_write;
  assign readEnable = io_req_valid & ~io_req_bits_write;
  data_arrays_0_0_combMem data_arrays_0_0_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[0]),
    .RW0_wdata (io_req_bits_wdata[7:0]),
    .RW0_rdata (_data_arrays_0_0_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_1_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[1]),
    .RW0_wdata (io_req_bits_wdata[15:8]),
    .RW0_rdata (_data_arrays_0_1_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_2_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[2]),
    .RW0_wdata (io_req_bits_wdata[23:16]),
    .RW0_rdata (_data_arrays_0_2_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_3_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[3]),
    .RW0_wdata (io_req_bits_wdata[31:24]),
    .RW0_rdata (_data_arrays_0_3_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_4_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[4]),
    .RW0_wdata (io_req_bits_wdata[39:32]),
    .RW0_rdata (_data_arrays_0_4_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_5_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[5]),
    .RW0_wdata (io_req_bits_wdata[47:40]),
    .RW0_rdata (_data_arrays_0_5_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_6_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[6]),
    .RW0_wdata (io_req_bits_wdata[55:48]),
    .RW0_rdata (_data_arrays_0_6_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem data_arrays_0_7_ext (
    .RW0_addr  (io_req_bits_addr[11:3]),
    .RW0_en    (_GEN),
    .RW0_clk   (clock),
    .RW0_wmode (io_req_bits_write & io_req_bits_eccMask[7]),
    .RW0_wdata (io_req_bits_wdata[63:56]),
    .RW0_rdata (_data_arrays_0_7_ext_RW0_rdata)
  );
  assign io_resp_0 =
    {_data_arrays_0_7_ext_RW0_rdata,
     _data_arrays_0_6_ext_RW0_rdata,
     _data_arrays_0_5_ext_RW0_rdata,
     _data_arrays_0_4_ext_RW0_rdata,
     _data_arrays_0_3_ext_RW0_rdata,
     _data_arrays_0_2_ext_RW0_rdata,
     _data_arrays_0_1_ext_RW0_rdata,
     _data_arrays_0_0_ext_RW0_rdata};
endmodule

module AMOALU(
  input  [7:0]  io_mask,
  input  [4:0]  io_cmd,
  input  [63:0] io_lhs,
                io_rhs,
  output [63:0] io_out
);

  wire        _logic_xor_T_1 = io_cmd == 5'hA;
  wire        logic_and = _logic_xor_T_1 | io_cmd == 5'hB;
  wire        logic_xor = io_cmd == 5'h9 | _logic_xor_T_1;
  wire [63:0] adder_out_mask = {32'hFFFFFFFF, io_mask[3], 31'h7FFFFFFF};
  wire [63:0] wmask =
    {{8{io_mask[7]}},
     {8{io_mask[6]}},
     {8{io_mask[5]}},
     {8{io_mask[4]}},
     {8{io_mask[3]}},
     {8{io_mask[2]}},
     {8{io_mask[1]}},
     {8{io_mask[0]}}};
  assign io_out =
    wmask
    & (io_cmd == 5'h8
         ? (io_lhs & adder_out_mask) + (io_rhs & adder_out_mask)
         : logic_and | logic_xor
             ? (logic_and ? io_lhs & io_rhs : 64'h0)
               | (logic_xor ? io_lhs ^ io_rhs : 64'h0)
             : ((io_mask[4]
                   ? (io_lhs[63] == io_rhs[63]
                        ? io_lhs[63:32] < io_rhs[63:32] | io_lhs[63:32] == io_rhs[63:32]
                          & io_lhs[31:0] < io_rhs[31:0]
                        : io_cmd[1] ? io_rhs[63] : io_lhs[63])
                   : io_lhs[31] == io_rhs[31]
                       ? io_lhs[31:0] < io_rhs[31:0]
                       : io_cmd[1] ? io_rhs[31] : io_lhs[31])
                  ? io_cmd == 5'hC | io_cmd == 5'hE
                  : io_cmd == 5'hD | io_cmd == 5'hF)
                 ? io_lhs
                 : io_rhs) | ~wmask & io_lhs;
endmodule

module DCache(
  input         clock,
                reset,
                auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [3:0]  auto_out_b_bits_size,
  input         auto_out_b_bits_source,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input         auto_out_d_bits_source,
  input  [1:0]  auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_e_ready,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_addr,
  input  [6:0]  io_cpu_req_bits_tag,
  input  [4:0]  io_cpu_req_bits_cmd,
  input  [1:0]  io_cpu_req_bits_size,
  input         io_cpu_req_bits_signed,
  input  [1:0]  io_cpu_req_bits_dprv,
  input         io_cpu_req_bits_dv,
                io_cpu_req_bits_phys,
                io_cpu_s1_kill,
  input  [63:0] io_cpu_s1_data_data,
  input  [7:0]  io_cpu_s1_data_mask,
  input         io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
                io_ptw_status_mxr,
                io_ptw_status_sum,
                io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output        auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output        auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_d_ready,
                auto_out_e_valid,
  output [1:0]  auto_out_e_bits_sink,
  output        io_cpu_req_ready,
                io_cpu_s2_nack,
                io_cpu_resp_valid,
  output [39:0] io_cpu_resp_bits_addr,
  output [6:0]  io_cpu_resp_bits_tag,
  output [4:0]  io_cpu_resp_bits_cmd,
  output [1:0]  io_cpu_resp_bits_size,
  output        io_cpu_resp_bits_signed,
  output [1:0]  io_cpu_resp_bits_dprv,
  output        io_cpu_resp_bits_dv,
  output [63:0] io_cpu_resp_bits_data,
  output [7:0]  io_cpu_resp_bits_mask,
  output        io_cpu_resp_bits_replay,
                io_cpu_resp_bits_has_data,
  output [63:0] io_cpu_resp_bits_data_word_bypass,
                io_cpu_resp_bits_data_raw,
                io_cpu_resp_bits_store_data,
  output        io_cpu_replay_next,
                io_cpu_s2_xcpt_ma_ld,
                io_cpu_s2_xcpt_ma_st,
                io_cpu_s2_xcpt_pf_ld,
                io_cpu_s2_xcpt_pf_st,
                io_cpu_s2_xcpt_gf_ld,
                io_cpu_s2_xcpt_gf_st,
                io_cpu_s2_xcpt_ae_ld,
                io_cpu_s2_xcpt_ae_st,
                io_cpu_ordered,
                io_cpu_perf_release,
                io_cpu_perf_grant,
                io_ptw_req_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire        _io_cpu_s2_xcpt_ma_st_output;
  wire        _io_cpu_s2_xcpt_ma_ld_output;
  wire        _io_cpu_s2_xcpt_ae_st_output;
  wire        _io_cpu_s2_xcpt_ae_ld_output;
  wire        _io_cpu_s2_xcpt_gf_st_output;
  wire        _io_cpu_s2_xcpt_gf_ld_output;
  wire        _io_cpu_s2_xcpt_pf_st_output;
  wire        _io_cpu_s2_xcpt_pf_ld_output;
  wire [21:0] metaArb_io_in_7_bits_data;
  wire        metaArb_io_in_4_valid;
  wire [11:0] _GEN;
  wire        dataArb_io_in_2_valid;
  wire [3:0]  nodeOut_c_bits_size;
  wire [2:0]  nodeOut_c_bits_opcode;
  wire        nodeOut_c_valid;
  wire [5:0]  metaArb_io_in_6_bits_idx;
  wire        metaArb_io_in_6_valid;
  wire        s1_nack;
  wire        _GEN_0;
  wire        dataArb_io_in_1_valid;
  wire        nodeOut_d_ready;
  wire [21:0] metaArb_io_in_3_bits_data;
  wire        metaArb_io_in_3_valid;
  wire [11:0] dataArb_io_in_1_bits_addr;
  wire [7:0]  dataArb_io_in_0_bits_eccMask;
  wire [63:0] dataArb_io_in_0_bits_wdata;
  wire [11:0] dataArb_io_in_0_bits_addr;
  wire        dataArb_io_in_0_valid;
  wire        dataArb_io_in_0_bits_write;
  wire [21:0] metaArb_io_in_2_bits_data;
  wire [21:0] metaArb_io_in_1_bits_data;
  wire [5:0]  metaArb_io_in_1_bits_idx;
  wire [5:0]  metaArb_io_in_3_bits_idx;
  wire [5:0]  metaArb_io_in_4_bits_idx;
  wire        metaArb_io_in_1_valid;
  wire        metaArb_io_in_2_valid;
  reg  [39:0] s2_req_addr;
  wire        readEnable;
  wire        writeEnable;
  wire [5:0]  metaArb_io_in_7_bits_idx;
  wire [11:0] dataArb_io_in_3_bits_addr;
  wire        dataArb_io_in_3_valid;
  reg  [5:0]  flushCounter;
  reg         resetting;
  reg  [1:0]  s1_tlb_req_prv;
  reg         s1_tlb_req_passthrough;
  reg  [39:0] s1_tlb_req_vaddr;
  reg  [39:0] s1_req_addr;
  wire [63:0] _amoalus_0_io_out;
  wire [63:0] _data_io_resp_0;
  wire [21:0] _tag_array_0_ext_RW0_rdata;
  wire [19:0] _pma_checker_entries_barrier_5_io_y_ppn;
  wire        _pma_checker_entries_barrier_5_io_y_u;
  wire        _pma_checker_entries_barrier_5_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_5_io_y_ae_final;
  wire        _pma_checker_entries_barrier_5_io_y_pf;
  wire        _pma_checker_entries_barrier_5_io_y_gf;
  wire        _pma_checker_entries_barrier_5_io_y_sw;
  wire        _pma_checker_entries_barrier_5_io_y_sx;
  wire        _pma_checker_entries_barrier_5_io_y_sr;
  wire        _pma_checker_entries_barrier_5_io_y_pw;
  wire        _pma_checker_entries_barrier_5_io_y_px;
  wire        _pma_checker_entries_barrier_5_io_y_pr;
  wire        _pma_checker_entries_barrier_5_io_y_ppp;
  wire        _pma_checker_entries_barrier_5_io_y_pal;
  wire        _pma_checker_entries_barrier_5_io_y_paa;
  wire        _pma_checker_entries_barrier_5_io_y_eff;
  wire        _pma_checker_entries_barrier_5_io_y_c;
  wire [19:0] _pma_checker_entries_barrier_4_io_y_ppn;
  wire        _pma_checker_entries_barrier_4_io_y_u;
  wire        _pma_checker_entries_barrier_4_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_4_io_y_ae_final;
  wire        _pma_checker_entries_barrier_4_io_y_pf;
  wire        _pma_checker_entries_barrier_4_io_y_gf;
  wire        _pma_checker_entries_barrier_4_io_y_sw;
  wire        _pma_checker_entries_barrier_4_io_y_sx;
  wire        _pma_checker_entries_barrier_4_io_y_sr;
  wire        _pma_checker_entries_barrier_4_io_y_pw;
  wire        _pma_checker_entries_barrier_4_io_y_px;
  wire        _pma_checker_entries_barrier_4_io_y_pr;
  wire        _pma_checker_entries_barrier_4_io_y_ppp;
  wire        _pma_checker_entries_barrier_4_io_y_pal;
  wire        _pma_checker_entries_barrier_4_io_y_paa;
  wire        _pma_checker_entries_barrier_4_io_y_eff;
  wire        _pma_checker_entries_barrier_4_io_y_c;
  wire [19:0] _pma_checker_entries_barrier_3_io_y_ppn;
  wire        _pma_checker_entries_barrier_3_io_y_u;
  wire        _pma_checker_entries_barrier_3_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_3_io_y_ae_final;
  wire        _pma_checker_entries_barrier_3_io_y_pf;
  wire        _pma_checker_entries_barrier_3_io_y_gf;
  wire        _pma_checker_entries_barrier_3_io_y_sw;
  wire        _pma_checker_entries_barrier_3_io_y_sx;
  wire        _pma_checker_entries_barrier_3_io_y_sr;
  wire        _pma_checker_entries_barrier_3_io_y_pw;
  wire        _pma_checker_entries_barrier_3_io_y_px;
  wire        _pma_checker_entries_barrier_3_io_y_pr;
  wire        _pma_checker_entries_barrier_3_io_y_ppp;
  wire        _pma_checker_entries_barrier_3_io_y_pal;
  wire        _pma_checker_entries_barrier_3_io_y_paa;
  wire        _pma_checker_entries_barrier_3_io_y_eff;
  wire        _pma_checker_entries_barrier_3_io_y_c;
  wire [19:0] _pma_checker_entries_barrier_2_io_y_ppn;
  wire        _pma_checker_entries_barrier_2_io_y_u;
  wire        _pma_checker_entries_barrier_2_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_2_io_y_ae_final;
  wire        _pma_checker_entries_barrier_2_io_y_pf;
  wire        _pma_checker_entries_barrier_2_io_y_gf;
  wire        _pma_checker_entries_barrier_2_io_y_sw;
  wire        _pma_checker_entries_barrier_2_io_y_sx;
  wire        _pma_checker_entries_barrier_2_io_y_sr;
  wire        _pma_checker_entries_barrier_2_io_y_pw;
  wire        _pma_checker_entries_barrier_2_io_y_px;
  wire        _pma_checker_entries_barrier_2_io_y_pr;
  wire        _pma_checker_entries_barrier_2_io_y_ppp;
  wire        _pma_checker_entries_barrier_2_io_y_pal;
  wire        _pma_checker_entries_barrier_2_io_y_paa;
  wire        _pma_checker_entries_barrier_2_io_y_eff;
  wire        _pma_checker_entries_barrier_2_io_y_c;
  wire [19:0] _pma_checker_entries_barrier_1_io_y_ppn;
  wire        _pma_checker_entries_barrier_1_io_y_u;
  wire        _pma_checker_entries_barrier_1_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_1_io_y_ae_final;
  wire        _pma_checker_entries_barrier_1_io_y_pf;
  wire        _pma_checker_entries_barrier_1_io_y_gf;
  wire        _pma_checker_entries_barrier_1_io_y_sw;
  wire        _pma_checker_entries_barrier_1_io_y_sx;
  wire        _pma_checker_entries_barrier_1_io_y_sr;
  wire        _pma_checker_entries_barrier_1_io_y_pw;
  wire        _pma_checker_entries_barrier_1_io_y_px;
  wire        _pma_checker_entries_barrier_1_io_y_pr;
  wire        _pma_checker_entries_barrier_1_io_y_ppp;
  wire        _pma_checker_entries_barrier_1_io_y_pal;
  wire        _pma_checker_entries_barrier_1_io_y_paa;
  wire        _pma_checker_entries_barrier_1_io_y_eff;
  wire        _pma_checker_entries_barrier_1_io_y_c;
  wire [19:0] _pma_checker_entries_barrier_io_y_ppn;
  wire        _pma_checker_entries_barrier_io_y_u;
  wire        _pma_checker_entries_barrier_io_y_ae_ptw;
  wire        _pma_checker_entries_barrier_io_y_ae_final;
  wire        _pma_checker_entries_barrier_io_y_pf;
  wire        _pma_checker_entries_barrier_io_y_gf;
  wire        _pma_checker_entries_barrier_io_y_sw;
  wire        _pma_checker_entries_barrier_io_y_sx;
  wire        _pma_checker_entries_barrier_io_y_sr;
  wire        _pma_checker_entries_barrier_io_y_pw;
  wire        _pma_checker_entries_barrier_io_y_px;
  wire        _pma_checker_entries_barrier_io_y_pr;
  wire        _pma_checker_entries_barrier_io_y_ppp;
  wire        _pma_checker_entries_barrier_io_y_pal;
  wire        _pma_checker_entries_barrier_io_y_paa;
  wire        _pma_checker_entries_barrier_io_y_eff;
  wire        _pma_checker_entries_barrier_io_y_c;
  wire        _pma_checker_pmp_io_r;
  wire        _pma_checker_pmp_io_w;
  wire        _pma_checker_pmp_io_x;
  wire [19:0] _pma_checker_mpu_ppn_barrier_io_y_ppn;
  wire        _pma_checker_mpu_ppn_barrier_io_y_u;
  wire        _pma_checker_mpu_ppn_barrier_io_y_ae_ptw;
  wire        _pma_checker_mpu_ppn_barrier_io_y_ae_final;
  wire        _pma_checker_mpu_ppn_barrier_io_y_pf;
  wire        _pma_checker_mpu_ppn_barrier_io_y_gf;
  wire        _pma_checker_mpu_ppn_barrier_io_y_sw;
  wire        _pma_checker_mpu_ppn_barrier_io_y_sx;
  wire        _pma_checker_mpu_ppn_barrier_io_y_sr;
  wire        _pma_checker_mpu_ppn_barrier_io_y_pw;
  wire        _pma_checker_mpu_ppn_barrier_io_y_px;
  wire        _pma_checker_mpu_ppn_barrier_io_y_pr;
  wire        _pma_checker_mpu_ppn_barrier_io_y_ppp;
  wire        _pma_checker_mpu_ppn_barrier_io_y_pal;
  wire        _pma_checker_mpu_ppn_barrier_io_y_paa;
  wire        _pma_checker_mpu_ppn_barrier_io_y_eff;
  wire        _pma_checker_mpu_ppn_barrier_io_y_c;
  wire [19:0] _tlb_entries_barrier_5_io_y_ppn;
  wire        _tlb_entries_barrier_5_io_y_u;
  wire        _tlb_entries_barrier_5_io_y_ae_ptw;
  wire        _tlb_entries_barrier_5_io_y_ae_final;
  wire        _tlb_entries_barrier_5_io_y_pf;
  wire        _tlb_entries_barrier_5_io_y_gf;
  wire        _tlb_entries_barrier_5_io_y_sw;
  wire        _tlb_entries_barrier_5_io_y_sx;
  wire        _tlb_entries_barrier_5_io_y_sr;
  wire        _tlb_entries_barrier_5_io_y_pw;
  wire        _tlb_entries_barrier_5_io_y_px;
  wire        _tlb_entries_barrier_5_io_y_pr;
  wire        _tlb_entries_barrier_5_io_y_ppp;
  wire        _tlb_entries_barrier_5_io_y_pal;
  wire        _tlb_entries_barrier_5_io_y_paa;
  wire        _tlb_entries_barrier_5_io_y_eff;
  wire        _tlb_entries_barrier_5_io_y_c;
  wire [19:0] _tlb_entries_barrier_4_io_y_ppn;
  wire        _tlb_entries_barrier_4_io_y_u;
  wire        _tlb_entries_barrier_4_io_y_ae_ptw;
  wire        _tlb_entries_barrier_4_io_y_ae_final;
  wire        _tlb_entries_barrier_4_io_y_pf;
  wire        _tlb_entries_barrier_4_io_y_gf;
  wire        _tlb_entries_barrier_4_io_y_sw;
  wire        _tlb_entries_barrier_4_io_y_sx;
  wire        _tlb_entries_barrier_4_io_y_sr;
  wire        _tlb_entries_barrier_4_io_y_pw;
  wire        _tlb_entries_barrier_4_io_y_px;
  wire        _tlb_entries_barrier_4_io_y_pr;
  wire        _tlb_entries_barrier_4_io_y_ppp;
  wire        _tlb_entries_barrier_4_io_y_pal;
  wire        _tlb_entries_barrier_4_io_y_paa;
  wire        _tlb_entries_barrier_4_io_y_eff;
  wire        _tlb_entries_barrier_4_io_y_c;
  wire [19:0] _tlb_entries_barrier_3_io_y_ppn;
  wire        _tlb_entries_barrier_3_io_y_u;
  wire        _tlb_entries_barrier_3_io_y_ae_ptw;
  wire        _tlb_entries_barrier_3_io_y_ae_final;
  wire        _tlb_entries_barrier_3_io_y_pf;
  wire        _tlb_entries_barrier_3_io_y_gf;
  wire        _tlb_entries_barrier_3_io_y_sw;
  wire        _tlb_entries_barrier_3_io_y_sx;
  wire        _tlb_entries_barrier_3_io_y_sr;
  wire        _tlb_entries_barrier_3_io_y_pw;
  wire        _tlb_entries_barrier_3_io_y_px;
  wire        _tlb_entries_barrier_3_io_y_pr;
  wire        _tlb_entries_barrier_3_io_y_ppp;
  wire        _tlb_entries_barrier_3_io_y_pal;
  wire        _tlb_entries_barrier_3_io_y_paa;
  wire        _tlb_entries_barrier_3_io_y_eff;
  wire        _tlb_entries_barrier_3_io_y_c;
  wire [19:0] _tlb_entries_barrier_2_io_y_ppn;
  wire        _tlb_entries_barrier_2_io_y_u;
  wire        _tlb_entries_barrier_2_io_y_ae_ptw;
  wire        _tlb_entries_barrier_2_io_y_ae_final;
  wire        _tlb_entries_barrier_2_io_y_pf;
  wire        _tlb_entries_barrier_2_io_y_gf;
  wire        _tlb_entries_barrier_2_io_y_sw;
  wire        _tlb_entries_barrier_2_io_y_sx;
  wire        _tlb_entries_barrier_2_io_y_sr;
  wire        _tlb_entries_barrier_2_io_y_pw;
  wire        _tlb_entries_barrier_2_io_y_px;
  wire        _tlb_entries_barrier_2_io_y_pr;
  wire        _tlb_entries_barrier_2_io_y_ppp;
  wire        _tlb_entries_barrier_2_io_y_pal;
  wire        _tlb_entries_barrier_2_io_y_paa;
  wire        _tlb_entries_barrier_2_io_y_eff;
  wire        _tlb_entries_barrier_2_io_y_c;
  wire [19:0] _tlb_entries_barrier_1_io_y_ppn;
  wire        _tlb_entries_barrier_1_io_y_u;
  wire        _tlb_entries_barrier_1_io_y_ae_ptw;
  wire        _tlb_entries_barrier_1_io_y_ae_final;
  wire        _tlb_entries_barrier_1_io_y_pf;
  wire        _tlb_entries_barrier_1_io_y_gf;
  wire        _tlb_entries_barrier_1_io_y_sw;
  wire        _tlb_entries_barrier_1_io_y_sx;
  wire        _tlb_entries_barrier_1_io_y_sr;
  wire        _tlb_entries_barrier_1_io_y_pw;
  wire        _tlb_entries_barrier_1_io_y_px;
  wire        _tlb_entries_barrier_1_io_y_pr;
  wire        _tlb_entries_barrier_1_io_y_ppp;
  wire        _tlb_entries_barrier_1_io_y_pal;
  wire        _tlb_entries_barrier_1_io_y_paa;
  wire        _tlb_entries_barrier_1_io_y_eff;
  wire        _tlb_entries_barrier_1_io_y_c;
  wire [19:0] _tlb_entries_barrier_io_y_ppn;
  wire        _tlb_entries_barrier_io_y_u;
  wire        _tlb_entries_barrier_io_y_ae_ptw;
  wire        _tlb_entries_barrier_io_y_ae_final;
  wire        _tlb_entries_barrier_io_y_pf;
  wire        _tlb_entries_barrier_io_y_gf;
  wire        _tlb_entries_barrier_io_y_sw;
  wire        _tlb_entries_barrier_io_y_sx;
  wire        _tlb_entries_barrier_io_y_sr;
  wire        _tlb_entries_barrier_io_y_pw;
  wire        _tlb_entries_barrier_io_y_px;
  wire        _tlb_entries_barrier_io_y_pr;
  wire        _tlb_entries_barrier_io_y_ppp;
  wire        _tlb_entries_barrier_io_y_pal;
  wire        _tlb_entries_barrier_io_y_paa;
  wire        _tlb_entries_barrier_io_y_eff;
  wire        _tlb_entries_barrier_io_y_c;
  wire        _tlb_pmp_io_r;
  wire        _tlb_pmp_io_w;
  wire        _tlb_pmp_io_x;
  wire [19:0] _tlb_mpu_ppn_barrier_io_y_ppn;
  wire        _tlb_mpu_ppn_barrier_io_y_u;
  wire        _tlb_mpu_ppn_barrier_io_y_ae_ptw;
  wire        _tlb_mpu_ppn_barrier_io_y_ae_final;
  wire        _tlb_mpu_ppn_barrier_io_y_pf;
  wire        _tlb_mpu_ppn_barrier_io_y_gf;
  wire        _tlb_mpu_ppn_barrier_io_y_sw;
  wire        _tlb_mpu_ppn_barrier_io_y_sx;
  wire        _tlb_mpu_ppn_barrier_io_y_sr;
  wire        _tlb_mpu_ppn_barrier_io_y_pw;
  wire        _tlb_mpu_ppn_barrier_io_y_px;
  wire        _tlb_mpu_ppn_barrier_io_y_pr;
  wire        _tlb_mpu_ppn_barrier_io_y_ppp;
  wire        _tlb_mpu_ppn_barrier_io_y_pal;
  wire        _tlb_mpu_ppn_barrier_io_y_paa;
  wire        _tlb_mpu_ppn_barrier_io_y_eff;
  wire        _tlb_mpu_ppn_barrier_io_y_c;
  reg         casez_tmp;
  reg  [41:0] casez_tmp_0;
  reg  [1:0]  casez_tmp_1;
  reg  [26:0] tlb_sectored_entries_0_0_tag_vpn;
  reg         tlb_sectored_entries_0_0_tag_v;
  reg  [41:0] tlb_sectored_entries_0_0_data_0;
  reg  [41:0] tlb_sectored_entries_0_0_data_1;
  reg  [41:0] tlb_sectored_entries_0_0_data_2;
  reg  [41:0] tlb_sectored_entries_0_0_data_3;
  reg         tlb_sectored_entries_0_0_valid_0;
  reg         tlb_sectored_entries_0_0_valid_1;
  reg         tlb_sectored_entries_0_0_valid_2;
  reg         tlb_sectored_entries_0_0_valid_3;
  reg  [1:0]  tlb_superpage_entries_0_level;
  reg  [26:0] tlb_superpage_entries_0_tag_vpn;
  reg         tlb_superpage_entries_0_tag_v;
  reg  [41:0] tlb_superpage_entries_0_data_0;
  reg         tlb_superpage_entries_0_valid_0;
  reg  [1:0]  tlb_superpage_entries_1_level;
  reg  [26:0] tlb_superpage_entries_1_tag_vpn;
  reg         tlb_superpage_entries_1_tag_v;
  reg  [41:0] tlb_superpage_entries_1_data_0;
  reg         tlb_superpage_entries_1_valid_0;
  reg  [1:0]  tlb_superpage_entries_2_level;
  reg  [26:0] tlb_superpage_entries_2_tag_vpn;
  reg         tlb_superpage_entries_2_tag_v;
  reg  [41:0] tlb_superpage_entries_2_data_0;
  reg         tlb_superpage_entries_2_valid_0;
  reg  [1:0]  tlb_superpage_entries_3_level;
  reg  [26:0] tlb_superpage_entries_3_tag_vpn;
  reg         tlb_superpage_entries_3_tag_v;
  reg  [41:0] tlb_superpage_entries_3_data_0;
  reg         tlb_superpage_entries_3_valid_0;
  reg  [1:0]  tlb_special_entry_level;
  reg  [26:0] tlb_special_entry_tag_vpn;
  reg         tlb_special_entry_tag_v;
  reg  [41:0] tlb_special_entry_data_0;
  reg         tlb_special_entry_valid_0;
  reg  [1:0]  tlb_state;
  reg  [26:0] tlb_r_refill_tag;
  reg  [1:0]  tlb_r_superpage_repl_addr;
  reg         tlb_r_sectored_hit_valid;
  reg         tlb_r_vstage1_en;
  reg         tlb_r_stage2_en;
  reg         tlb_r_need_gpa;
  wire        tlb_vm_enabled =
    io_ptw_ptbr_mode[3] & ~(s1_tlb_req_prv[1]) & ~s1_tlb_req_passthrough;
  wire        tlb_io_ptw_req_valid = tlb_state == 2'h1;
  wire        tlb__mpu_ppn_ignore_T = tlb_special_entry_level == 2'h0;
  wire [8:0]  _GEN_1 = tlb__mpu_ppn_ignore_T ? s1_tlb_req_vaddr[29:21] : 9'h0;
  wire [8:0]  _GEN_2 = tlb_special_entry_level[1] ? 9'h0 : s1_tlb_req_vaddr[20:12];
  wire [27:0] tlb_mpu_ppn =
    io_ptw_resp_valid
      ? {8'h0, io_ptw_resp_bits_pte_ppn[19:0]}
      : tlb_vm_enabled
          ? {8'h0,
             _tlb_mpu_ppn_barrier_io_y_ppn[19:18],
             _GEN_1 | _tlb_mpu_ppn_barrier_io_y_ppn[17:9],
             _GEN_2 | _tlb_mpu_ppn_barrier_io_y_ppn[8:0]}
          : s1_tlb_req_vaddr[39:12];
  wire [2:0]  tlb_mpu_priv =
    io_ptw_resp_valid | s1_tlb_req_passthrough
      ? 3'h1
      : {io_ptw_status_debug, s1_tlb_req_prv};
  wire [24:0] tlb__sector_hits_T_4 =
    tlb_sectored_entries_0_0_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire [17:0] _GEN_3 = tlb_superpage_entries_0_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire        tlb__superpage_hits_ignore_T_1 = tlb_superpage_entries_0_level == 2'h0;
  wire [17:0] _GEN_4 = tlb_superpage_entries_1_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire        tlb__superpage_hits_ignore_T_4 = tlb_superpage_entries_1_level == 2'h0;
  wire [17:0] _GEN_5 = tlb_superpage_entries_2_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire        tlb__superpage_hits_ignore_T_7 = tlb_superpage_entries_2_level == 2'h0;
  wire [17:0] _GEN_6 = tlb_superpage_entries_3_tag_vpn[26:9] ^ s1_tlb_req_vaddr[38:21];
  wire        tlb__superpage_hits_ignore_T_10 = tlb_superpage_entries_3_level == 2'h0;
  always @(*) begin
    casez (s1_tlb_req_vaddr[13:12])
      2'b00:
        casez_tmp = tlb_sectored_entries_0_0_valid_0;
      2'b01:
        casez_tmp = tlb_sectored_entries_0_0_valid_1;
      2'b10:
        casez_tmp = tlb_sectored_entries_0_0_valid_2;
      default:
        casez_tmp = tlb_sectored_entries_0_0_valid_3;
    endcase
  end // always @(*)
  wire        tlb_hitsVec_0 =
    tlb_vm_enabled & casez_tmp & tlb__sector_hits_T_4 == 25'h0
    & ~tlb_sectored_entries_0_0_tag_v;
  wire        tlb_hitsVec_1 =
    tlb_vm_enabled & tlb_superpage_entries_0_valid_0 & ~tlb_superpage_entries_0_tag_v
    & _GEN_3[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_1 | _GEN_3[8:0] == 9'h0);
  wire        tlb_hitsVec_2 =
    tlb_vm_enabled & tlb_superpage_entries_1_valid_0 & ~tlb_superpage_entries_1_tag_v
    & _GEN_4[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_4 | _GEN_4[8:0] == 9'h0);
  wire        tlb_hitsVec_3 =
    tlb_vm_enabled & tlb_superpage_entries_2_valid_0 & ~tlb_superpage_entries_2_tag_v
    & _GEN_5[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_7 | _GEN_5[8:0] == 9'h0);
  wire        tlb_hitsVec_4 =
    tlb_vm_enabled & tlb_superpage_entries_3_valid_0 & ~tlb_superpage_entries_3_tag_v
    & _GEN_6[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_10 | _GEN_6[8:0] == 9'h0);
  wire [26:0] tlb__hitsVec_T_66 = tlb_special_entry_tag_vpn ^ s1_tlb_req_vaddr[38:12];
  wire        tlb_hitsVec_5 =
    tlb_vm_enabled & tlb_special_entry_valid_0 & ~tlb_special_entry_tag_v
    & tlb__hitsVec_T_66[26:18] == 9'h0
    & (tlb__mpu_ppn_ignore_T | tlb__hitsVec_T_66[17:9] == 9'h0)
    & (~(tlb_special_entry_level[1]) | tlb__hitsVec_T_66[8:0] == 9'h0);
  wire [5:0]  tlb_real_hits =
    {tlb_hitsVec_5,
     tlb_hitsVec_4,
     tlb_hitsVec_3,
     tlb_hitsVec_2,
     tlb_hitsVec_1,
     tlb_hitsVec_0};
  always @(*) begin
    casez (s1_tlb_req_vaddr[13:12])
      2'b00:
        casez_tmp_0 = tlb_sectored_entries_0_0_data_0;
      2'b01:
        casez_tmp_0 = tlb_sectored_entries_0_0_data_1;
      2'b10:
        casez_tmp_0 = tlb_sectored_entries_0_0_data_2;
      default:
        casez_tmp_0 = tlb_sectored_entries_0_0_data_3;
    endcase
  end // always @(*)
  wire        tlb_bad_va =
    tlb_vm_enabled & io_ptw_ptbr_mode[3]
    & ~(s1_tlb_req_vaddr[39:38] == 2'h0 | (&(s1_tlb_req_vaddr[39:38])));
  wire        tlb_tlb_miss = tlb_vm_enabled & ~tlb_bad_va & tlb_real_hits == 6'h0;
  reg  [2:0]  tlb_state_reg_1;
  wire        tlb_multipleHits_rightOne_1 = tlb_hitsVec_1 | tlb_hitsVec_2;
  wire        tlb_multipleHits_rightOne_3 = tlb_hitsVec_4 | tlb_hitsVec_5;
  wire        tlb_multipleHits =
    tlb_hitsVec_1 & tlb_hitsVec_2 | tlb_hitsVec_0 & tlb_multipleHits_rightOne_1
    | tlb_hitsVec_4 & tlb_hitsVec_5 | tlb_hitsVec_3 & tlb_multipleHits_rightOne_3
    | (tlb_hitsVec_0 | tlb_multipleHits_rightOne_1)
    & (tlb_hitsVec_3 | tlb_multipleHits_rightOne_3);
  wire        tlb_io_req_ready = tlb_state == 2'h0;
  wire [41:0] pma_checker__mpu_ppn_WIRE_1 = 42'bz;
  wire [41:0] pma_checker__entries_WIRE_3 = 42'bz;
  wire [41:0] pma_checker__entries_WIRE_5 = 42'bz;
  wire [41:0] pma_checker__entries_WIRE_7 = 42'bz;
  wire [41:0] pma_checker__entries_WIRE_9 = 42'bz;
  wire [41:0] pma_checker__entries_WIRE_11 = 42'bz;
  wire        _GEN_7 = metaArb_io_in_2_valid | metaArb_io_in_3_valid;
  wire        metaArb_io_out_bits_write =
    resetting | metaArb_io_in_1_valid | metaArb_io_in_2_valid | metaArb_io_in_3_valid
    | metaArb_io_in_4_valid;
  wire        metaArb__grant_T_2 =
    resetting | metaArb_io_in_1_valid | metaArb_io_in_2_valid | metaArb_io_in_3_valid;
  wire        metaArb__grant_T_3 = metaArb__grant_T_2 | metaArb_io_in_4_valid;
  wire        metaArb__grant_T_5 = metaArb__grant_T_3 | metaArb_io_in_6_valid;
  wire        metaArb_io_out_valid = metaArb__grant_T_5 | io_cpu_req_valid;
  wire        dataArb__grant_T = dataArb_io_in_0_valid | dataArb_io_in_1_valid;
  wire        dataArb__grant_T_1 = dataArb__grant_T | dataArb_io_in_2_valid;
  wire        dataArb_io_out_valid = dataArb__grant_T_1 | dataArb_io_in_3_valid;
  reg         s1_valid;
  reg         s1_probe;
  reg  [1:0]  probe_bits_param;
  reg  [3:0]  probe_bits_size;
  reg         probe_bits_source;
  reg  [31:0] probe_bits_address;
  wire        s1_valid_masked = s1_valid & ~io_cpu_s1_kill;
  reg  [6:0]  s1_req_tag;
  reg  [4:0]  s1_req_cmd;
  reg  [1:0]  s1_req_size;
  reg         s1_req_signed;
  reg  [1:0]  s1_req_dprv;
  reg         s1_req_dv;
  reg         s1_req_no_alloc;
  reg         s1_req_no_xcpt;
  reg  [7:0]  s1_req_mask;
  reg  [1:0]  s1_tlb_req_size;
  reg  [4:0]  s1_tlb_req_cmd;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_1 = s1_req_cmd == 5'h0;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_2 = s1_req_cmd == 5'h10;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_3 = s1_req_cmd == 5'h6;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_29 = s1_req_cmd == 5'h7;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_31 = s1_req_cmd == 5'h4;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_32 = s1_req_cmd == 5'h9;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_33 = s1_req_cmd == 5'hA;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_34 = s1_req_cmd == 5'hB;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_38 = s1_req_cmd == 5'h8;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_39 = s1_req_cmd == 5'hC;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_40 = s1_req_cmd == 5'hD;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_41 = s1_req_cmd == 5'hE;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_42 = s1_req_cmd == 5'hF;
  wire        s1_read =
    _io_cpu_perf_canAcceptLoadThenLoad_T_1 | _io_cpu_perf_canAcceptLoadThenLoad_T_2
    | _io_cpu_perf_canAcceptLoadThenLoad_T_3 | _io_cpu_perf_canAcceptLoadThenLoad_T_29
    | _io_cpu_perf_canAcceptLoadThenLoad_T_31 | _io_cpu_perf_canAcceptLoadThenLoad_T_32
    | _io_cpu_perf_canAcceptLoadThenLoad_T_33 | _io_cpu_perf_canAcceptLoadThenLoad_T_34
    | _io_cpu_perf_canAcceptLoadThenLoad_T_38 | _io_cpu_perf_canAcceptLoadThenLoad_T_39
    | _io_cpu_perf_canAcceptLoadThenLoad_T_40 | _io_cpu_perf_canAcceptLoadThenLoad_T_41
    | _io_cpu_perf_canAcceptLoadThenLoad_T_42;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_26 = s1_req_cmd == 5'h1;
  wire        _io_cpu_perf_canAcceptLoadThenLoad_T_51 = s1_req_cmd == 5'h11;
  wire        s1_write =
    _io_cpu_perf_canAcceptLoadThenLoad_T_26 | _io_cpu_perf_canAcceptLoadThenLoad_T_51
    | _io_cpu_perf_canAcceptLoadThenLoad_T_29 | _io_cpu_perf_canAcceptLoadThenLoad_T_31
    | _io_cpu_perf_canAcceptLoadThenLoad_T_32 | _io_cpu_perf_canAcceptLoadThenLoad_T_33
    | _io_cpu_perf_canAcceptLoadThenLoad_T_34 | _io_cpu_perf_canAcceptLoadThenLoad_T_38
    | _io_cpu_perf_canAcceptLoadThenLoad_T_39 | _io_cpu_perf_canAcceptLoadThenLoad_T_40
    | _io_cpu_perf_canAcceptLoadThenLoad_T_41 | _io_cpu_perf_canAcceptLoadThenLoad_T_42;
  wire        s1_sfence = s1_req_cmd == 5'h14 | s1_req_cmd == 5'h15 | s1_req_cmd == 5'h16;
  reg         cached_grant_wait;
  reg         release_ack_wait;
  reg  [31:0] release_ack_addr;
  reg  [3:0]  release_state;
  wire        _T_289 = release_state == 4'h1;
  wire        _T_288 = release_state == 4'h2;
  wire        inWriteback = _T_289 | _T_288;
  wire        _io_cpu_req_ready_T_4 =
    release_state == 4'h0 & ~cached_grant_wait & ~s1_nack;
  reg         uncachedInFlight_0;
  reg  [39:0] uncachedReqs_0_addr;
  reg  [6:0]  uncachedReqs_0_tag;
  reg  [1:0]  uncachedReqs_0_size;
  reg         uncachedReqs_0_signed;
  wire        _pstore_drain_opportunistic_T = io_cpu_req_bits_cmd == 5'h0;
  wire        _pstore_drain_opportunistic_T_1 = io_cpu_req_bits_cmd == 5'h10;
  wire        _pstore_drain_opportunistic_T_2 = io_cpu_req_bits_cmd == 5'h6;
  wire        _pstore_drain_opportunistic_T_28 = io_cpu_req_bits_cmd == 5'h7;
  wire        _pstore_drain_opportunistic_T_30 = io_cpu_req_bits_cmd == 5'h4;
  wire        _pstore_drain_opportunistic_T_31 = io_cpu_req_bits_cmd == 5'h9;
  wire        _pstore_drain_opportunistic_T_32 = io_cpu_req_bits_cmd == 5'hA;
  wire        _pstore_drain_opportunistic_T_33 = io_cpu_req_bits_cmd == 5'hB;
  wire        _pstore_drain_opportunistic_T_37 = io_cpu_req_bits_cmd == 5'h8;
  wire        _pstore_drain_opportunistic_T_38 = io_cpu_req_bits_cmd == 5'hC;
  wire        _pstore_drain_opportunistic_T_39 = io_cpu_req_bits_cmd == 5'hD;
  wire        _pstore_drain_opportunistic_T_40 = io_cpu_req_bits_cmd == 5'hE;
  wire        _pstore_drain_opportunistic_T_41 = io_cpu_req_bits_cmd == 5'hF;
  wire        _pstore_drain_opportunistic_T_25 = io_cpu_req_bits_cmd == 5'h1;
  wire        _pstore_drain_opportunistic_res_T_1 = io_cpu_req_bits_cmd == 5'h3;
  wire        _dataArb_io_in_3_valid_res_T_2 =
    _pstore_drain_opportunistic_T_25 | _pstore_drain_opportunistic_res_T_1;
  wire        _pstore_drain_opportunistic_T_50 = io_cpu_req_bits_cmd == 5'h11;
  assign dataArb_io_in_3_valid = io_cpu_req_valid & ~_dataArb_io_in_3_valid_res_T_2;
  assign dataArb_io_in_3_bits_addr = io_cpu_req_bits_addr[11:0];
  reg         s1_did_read;
  reg         s1_read_mask;
  assign metaArb_io_in_7_bits_idx = io_cpu_req_bits_addr[11:6];
  wire        s1_cmd_uses_tlb =
    s1_read | s1_write | s1_req_cmd == 5'h5 & s1_req_size[0] | s1_req_cmd == 5'h17;
  wire        tlb_io_req_valid = s1_valid & ~io_cpu_s1_kill & s1_cmd_uses_tlb;
  wire        _GEN_8 =
    ~tlb_io_req_ready & ~io_ptw_resp_valid & ~io_cpu_req_bits_phys | metaArb__grant_T_5
    | dataArb__grant_T_1
    & (_pstore_drain_opportunistic_T | _pstore_drain_opportunistic_T_1
       | _pstore_drain_opportunistic_T_2 | _pstore_drain_opportunistic_T_28
       | _pstore_drain_opportunistic_T_30 | _pstore_drain_opportunistic_T_31
       | _pstore_drain_opportunistic_T_32 | _pstore_drain_opportunistic_T_33
       | _pstore_drain_opportunistic_T_37 | _pstore_drain_opportunistic_T_38
       | _pstore_drain_opportunistic_T_39 | _pstore_drain_opportunistic_T_40
       | _pstore_drain_opportunistic_T_41);
  wire        _T_14 =
    s1_valid & s1_cmd_uses_tlb & (io_ptw_resp_valid | tlb_tlb_miss | tlb_multipleHits);
  wire        tlb_io_sfence_valid = s1_valid & ~io_cpu_s1_kill & s1_sfence;
  assign writeEnable = metaArb_io_out_valid & metaArb_io_out_bits_write;
  assign readEnable = metaArb_io_out_valid & ~metaArb_io_out_bits_write;
  wire [1:0]  _s1_mask_xwr_T = {s1_req_addr[0] | (|s1_req_size), ~(s1_req_addr[0])};
  wire [3:0]  _s1_mask_xwr_T_1 =
    {(s1_req_addr[1] ? _s1_mask_xwr_T : 2'h0) | {2{s1_req_size[1]}},
     s1_req_addr[1] ? 2'h0 : _s1_mask_xwr_T};
  wire [7:0]  s1_mask_xwr =
    {(s1_req_addr[2] ? _s1_mask_xwr_T_1 : 4'h0) | {4{&s1_req_size}},
     s1_req_addr[2] ? 4'h0 : _s1_mask_xwr_T_1};
  reg         s2_valid;
  wire        s2_valid_no_xcpt =
    s2_valid
    & {_io_cpu_s2_xcpt_ma_ld_output,
       _io_cpu_s2_xcpt_ma_st_output,
       _io_cpu_s2_xcpt_pf_ld_output,
       _io_cpu_s2_xcpt_pf_st_output,
       _io_cpu_s2_xcpt_gf_ld_output,
       _io_cpu_s2_xcpt_gf_st_output,
       _io_cpu_s2_xcpt_ae_ld_output,
       _io_cpu_s2_xcpt_ae_st_output} == 8'h0;
  reg         s2_probe;
  wire        releaseInFlight = s1_probe | s2_probe | (|release_state);
  reg         s2_not_nacked_in_s1;
  wire        s2_valid_masked = s2_valid_no_xcpt & s2_not_nacked_in_s1;
  reg  [6:0]  s2_req_tag;
  reg  [4:0]  s2_req_cmd;
  reg  [1:0]  s2_req_size;
  reg         s2_req_signed;
  reg  [1:0]  s2_req_dprv;
  reg         s2_req_dv;
  reg         s2_req_no_alloc;
  reg         s2_req_no_xcpt;
  reg  [7:0]  s2_req_mask;
  reg         s2_tlb_xcpt_pf_ld;
  reg         s2_tlb_xcpt_pf_st;
  reg         s2_tlb_xcpt_gf_ld;
  reg         s2_tlb_xcpt_gf_st;
  reg         s2_tlb_xcpt_ae_ld;
  reg         s2_tlb_xcpt_ae_st;
  reg         s2_tlb_xcpt_ma_ld;
  reg         s2_tlb_xcpt_ma_st;
  reg         s2_pma_cacheable;
  reg         s2_pma_must_alloc;
  reg  [39:0] s2_uncached_resp_addr;
  reg  [39:0] s2_vaddr_r;
  wire        s2_lr = s2_req_cmd == 5'h6;
  wire        s2_sc = s2_req_cmd == 5'h7;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_28 = s2_req_cmd == 5'h4;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_29 = s2_req_cmd == 5'h9;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_30 = s2_req_cmd == 5'hA;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_31 = s2_req_cmd == 5'hB;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_35 = s2_req_cmd == 5'h8;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_36 = s2_req_cmd == 5'hC;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_37 = s2_req_cmd == 5'hD;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_38 = s2_req_cmd == 5'hE;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_39 = s2_req_cmd == 5'hF;
  wire        s2_read =
    s2_req_cmd == 5'h0 | s2_req_cmd == 5'h10 | s2_lr | s2_sc
    | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
    | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
    | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
    | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
    | _metaArb_io_in_3_bits_data_c_cat_T_39;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_23 = s2_req_cmd == 5'h1;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_24 = s2_req_cmd == 5'h11;
  wire        s2_write =
    _metaArb_io_in_3_bits_data_c_cat_T_23 | _metaArb_io_in_3_bits_data_c_cat_T_24 | s2_sc
    | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
    | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
    | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
    | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
    | _metaArb_io_in_3_bits_data_c_cat_T_39;
  wire        s2_readwrite = s2_read | s2_write;
  reg         s2_meta_correctable_errors;
  reg         s2_meta_uncorrectable_errors;
  reg  [21:0] s2_meta_corrected_r;
  wire        s2_meta_error = s2_meta_uncorrectable_errors | s2_meta_correctable_errors;
  reg  [63:0] s2_data;
  reg  [1:0]  s2_probe_state_state;
  reg  [1:0]  s2_hit_state_state;
  reg         s2_waw_hazard;
  wire        _metaArb_io_in_3_bits_data_c_cat_T_46 = s2_req_cmd == 5'h3;
  wire [3:0]  _T_31 =
    {_metaArb_io_in_3_bits_data_c_cat_T_23 | _metaArb_io_in_3_bits_data_c_cat_T_24 | s2_sc
       | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_39,
     _metaArb_io_in_3_bits_data_c_cat_T_23 | _metaArb_io_in_3_bits_data_c_cat_T_24 | s2_sc
       | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_39 | _metaArb_io_in_3_bits_data_c_cat_T_46
       | s2_lr,
     s2_hit_state_state};
  wire        s2_hit =
    _T_31 == 4'h3 | _T_31 == 4'h2 | _T_31 == 4'h1 | _T_31 == 4'h7 | _T_31 == 4'h6
    | (&_T_31) | _T_31 == 4'hE;
  wire [1:0]  _T_58 = {1'h0, _T_31 == 4'hC};
  always @(*) begin
    casez (_T_31)
      4'b0000:
        casez_tmp_1 = 2'h0;
      4'b0001:
        casez_tmp_1 = 2'h1;
      4'b0010:
        casez_tmp_1 = 2'h2;
      4'b0011:
        casez_tmp_1 = 2'h3;
      4'b0100:
        casez_tmp_1 = 2'h1;
      4'b0101:
        casez_tmp_1 = 2'h2;
      4'b0110:
        casez_tmp_1 = 2'h2;
      4'b0111:
        casez_tmp_1 = 2'h3;
      4'b1000:
        casez_tmp_1 = _T_58;
      4'b1001:
        casez_tmp_1 = _T_58;
      4'b1010:
        casez_tmp_1 = _T_58;
      4'b1011:
        casez_tmp_1 = _T_58;
      4'b1100:
        casez_tmp_1 = _T_58;
      4'b1101:
        casez_tmp_1 = 2'h2;
      4'b1110:
        casez_tmp_1 = 2'h3;
      default:
        casez_tmp_1 = 2'h3;
    endcase
  end // always @(*)
  wire        s2_valid_hit_maybe_flush_pre_data_ecc_and_waw =
    s2_valid_masked & ~s2_meta_error & s2_hit;
  wire        s2_valid_hit_pre_data_ecc_and_waw =
    s2_valid_hit_maybe_flush_pre_data_ecc_and_waw & s2_readwrite;
  wire        s2_valid_flush_line =
    s2_valid_hit_maybe_flush_pre_data_ecc_and_waw & s2_req_cmd == 5'h5 & s2_req_size[0];
  wire        s2_valid_hit_pre_data_ecc =
    s2_valid_hit_pre_data_ecc_and_waw & ~s2_waw_hazard;
  wire        s2_valid_miss = s2_valid_masked & s2_readwrite & ~s2_meta_error & ~s2_hit;
  wire        s2_uncached =
    ~s2_pma_cacheable | s2_req_no_alloc & ~s2_pma_must_alloc & ~(|s2_hit_state_state);
  wire        s2_valid_cached_miss = s2_valid_miss & ~s2_uncached & ~uncachedInFlight_0;
  wire        _s2_want_victimize_T_1 = s2_valid_cached_miss | s2_valid_flush_line;
  wire        s2_valid_uncached_pending =
    s2_valid_miss & s2_uncached & ~uncachedInFlight_0;
  wire [1:0]  s2_victim_state_state =
    (|s2_hit_state_state) ? s2_hit_state_state : s2_meta_corrected_r[21:20];
  wire [3:0]  _T_98 = {probe_bits_param, s2_probe_state_state};
  wire        _T_124 = _T_98 == 4'hB;
  wire        _T_127 = _T_98 == 4'h4;
  wire        _T_131 = _T_98 == 4'h5;
  wire        _T_135 = _T_98 == 4'h6;
  wire        _T_139 = _T_98 == 4'h7;
  wire        _T_143 = _T_98 == 4'h0;
  wire        _T_147 = _T_98 == 4'h1;
  wire        _T_151 = _T_98 == 4'h2;
  wire        _T_155 = _T_98 == 4'h3;
  wire        s2_prb_ack_data =
    _T_155 | ~(_T_151 | _T_147 | _T_143)
    & (_T_139 | ~(_T_135 | _T_131 | _T_127) & _T_124);
  wire        _GEN_9 = _T_155 | _T_151;
  wire        s2_victim_dirty;
  assign s2_victim_dirty = &s2_victim_state_state;
  wire        _io_cpu_s2_nack_output =
    s2_valid_no_xcpt & ~(s2_valid_uncached_pending & auto_out_a_ready)
    & ~(s2_valid_masked & ~s2_meta_error & s2_req_cmd == 5'h17)
    & ~s2_valid_hit_pre_data_ecc;
  assign metaArb_io_in_2_valid =
    s2_valid_hit_pre_data_ecc_and_waw & s2_hit_state_state != casez_tmp_1;
  assign metaArb_io_in_1_valid = s2_meta_error & (s2_valid_masked | s2_probe);
  assign metaArb_io_in_4_bits_idx = probe_bits_address[11:6];
  assign metaArb_io_in_3_bits_idx = s2_req_addr[11:6];
  assign metaArb_io_in_1_bits_idx =
    s2_probe ? metaArb_io_in_4_bits_idx : metaArb_io_in_3_bits_idx;
  assign metaArb_io_in_1_bits_data =
    {s2_meta_uncorrectable_errors ? 2'h0 : s2_meta_corrected_r[21:20],
     s2_meta_corrected_r[19:0]};
  assign metaArb_io_in_2_bits_data = {casez_tmp_1, s2_req_addr[31:12]};
  reg  [6:0]  lrscCount;
  reg  [33:0] lrscAddr;
  wire        s2_sc_fail = s2_sc & ~((|(lrscCount[6:2])) & lrscAddr == s2_req_addr[39:6]);
  reg  [4:0]  pstore1_cmd;
  reg  [39:0] pstore1_addr;
  reg  [63:0] pstore1_data;
  reg  [7:0]  pstore1_mask;
  reg         pstore1_rmw_r;
  wire        _pstore1_held_T = s2_valid_hit_pre_data_ecc & s2_write;
  reg         pstore2_valid;
  wire        _pstore_drain_opportunistic_res_T_2 =
    _pstore_drain_opportunistic_T_25 | _pstore_drain_opportunistic_res_T_1;
  reg         pstore_drain_on_miss_REG;
  reg         pstore1_held;
  wire        pstore1_valid_likely = s2_valid & s2_write | pstore1_held;
  wire        pstore1_valid = _pstore1_held_T & ~s2_sc_fail | pstore1_held;
  wire        pstore_drain_structural =
    pstore1_valid_likely & pstore2_valid & (s1_valid & s1_write | pstore1_rmw_r);
  wire        _dataArb_io_in_0_valid_T_4 = s2_valid_hit_pre_data_ecc & s2_write;
  wire        _dataArb_io_in_0_valid_T_9 =
    ~(io_cpu_req_valid & ~_pstore_drain_opportunistic_res_T_2) | releaseInFlight
    | pstore_drain_on_miss_REG;
  assign dataArb_io_in_0_bits_write =
    pstore_drain_structural
    | ((_dataArb_io_in_0_valid_T_4 | pstore1_held) & ~pstore1_rmw_r | pstore2_valid)
    & _dataArb_io_in_0_valid_T_9;
  reg  [39:0] pstore2_addr;
  reg  [7:0]  pstore2_storegen_data_r;
  reg  [7:0]  pstore2_storegen_data_r_1;
  reg  [7:0]  pstore2_storegen_data_r_2;
  reg  [7:0]  pstore2_storegen_data_r_3;
  reg  [7:0]  pstore2_storegen_data_r_4;
  reg  [7:0]  pstore2_storegen_data_r_5;
  reg  [7:0]  pstore2_storegen_data_r_6;
  reg  [7:0]  pstore2_storegen_data_r_7;
  reg  [7:0]  pstore2_storegen_mask;
  assign dataArb_io_in_0_valid =
    pstore_drain_structural
    | ((_dataArb_io_in_0_valid_T_4 | pstore1_held) & ~pstore1_rmw_r | pstore2_valid)
    & _dataArb_io_in_0_valid_T_9;
  assign dataArb_io_in_0_bits_addr =
    pstore2_valid ? pstore2_addr[11:0] : pstore1_addr[11:0];
  assign dataArb_io_in_0_bits_wdata =
    pstore2_valid
      ? {pstore2_storegen_data_r_7,
         pstore2_storegen_data_r_6,
         pstore2_storegen_data_r_5,
         pstore2_storegen_data_r_4,
         pstore2_storegen_data_r_3,
         pstore2_storegen_data_r_2,
         pstore2_storegen_data_r_1,
         pstore2_storegen_data_r}
      : pstore1_data;
  assign dataArb_io_in_0_bits_eccMask =
    pstore2_valid ? pstore2_storegen_mask : pstore1_mask;
  wire        _GEN_10 =
    s1_valid & s1_read
    & (pstore1_valid_likely & pstore1_addr[11:3] == s1_req_addr[11:3]
       & (s1_write ? (|(pstore1_mask & s1_mask_xwr)) : (|(pstore1_mask & s1_mask_xwr)))
       | pstore2_valid & pstore2_addr[11:3] == s1_req_addr[11:3]
       & (s1_write
            ? (|(pstore2_storegen_mask & s1_mask_xwr))
            : (|(pstore2_storegen_mask & s1_mask_xwr)))) | _io_cpu_s2_nack_output
    | metaArb_io_in_2_valid;
  wire        get_a_mask_size = s2_req_size == 2'h2;
  wire        get_a_mask_acc = (&s2_req_size) | get_a_mask_size & ~(s2_req_addr[2]);
  wire        get_a_mask_acc_1 = (&s2_req_size) | get_a_mask_size & s2_req_addr[2];
  wire        get_a_mask_size_1 = s2_req_size == 2'h1;
  wire        get_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        get_a_mask_acc_2 = get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_2;
  wire        get_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        get_a_mask_acc_3 = get_a_mask_acc | get_a_mask_size_1 & get_a_mask_eq_3;
  wire        get_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        get_a_mask_acc_4 = get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_4;
  wire        get_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire        get_a_mask_acc_5 = get_a_mask_acc_1 | get_a_mask_size_1 & get_a_mask_eq_5;
  wire        put_a_mask_size = s2_req_size == 2'h2;
  wire        put_a_mask_acc = (&s2_req_size) | put_a_mask_size & ~(s2_req_addr[2]);
  wire        put_a_mask_acc_1 = (&s2_req_size) | put_a_mask_size & s2_req_addr[2];
  wire        put_a_mask_size_1 = s2_req_size == 2'h1;
  wire        put_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        put_a_mask_acc_2 = put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_2;
  wire        put_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        put_a_mask_acc_3 = put_a_mask_acc | put_a_mask_size_1 & put_a_mask_eq_3;
  wire        put_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        put_a_mask_acc_4 = put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_4;
  wire        put_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire        put_a_mask_acc_5 = put_a_mask_acc_1 | put_a_mask_size_1 & put_a_mask_eq_5;
  wire        atomics_a_mask_size = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc =
    (&s2_req_size) | atomics_a_mask_size & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_1 =
    (&s2_req_size) | atomics_a_mask_size & s2_req_addr[2];
  wire        atomics_a_mask_size_1 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_2 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_2 =
    atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_2;
  wire        atomics_a_mask_eq_3 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_3 =
    atomics_a_mask_acc | atomics_a_mask_size_1 & atomics_a_mask_eq_3;
  wire        atomics_a_mask_eq_4 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_4 =
    atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_4;
  wire        atomics_a_mask_eq_5 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_5 =
    atomics_a_mask_acc_1 | atomics_a_mask_size_1 & atomics_a_mask_eq_5;
  wire        atomics_a_mask_size_3 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_14 =
    (&s2_req_size) | atomics_a_mask_size_3 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_15 =
    (&s2_req_size) | atomics_a_mask_size_3 & s2_req_addr[2];
  wire        atomics_a_mask_size_4 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_16 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_16 =
    atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_16;
  wire        atomics_a_mask_eq_17 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_17 =
    atomics_a_mask_acc_14 | atomics_a_mask_size_4 & atomics_a_mask_eq_17;
  wire        atomics_a_mask_eq_18 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_18 =
    atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_18;
  wire        atomics_a_mask_eq_19 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_19 =
    atomics_a_mask_acc_15 | atomics_a_mask_size_4 & atomics_a_mask_eq_19;
  wire        atomics_a_mask_size_6 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_28 =
    (&s2_req_size) | atomics_a_mask_size_6 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_29 =
    (&s2_req_size) | atomics_a_mask_size_6 & s2_req_addr[2];
  wire        atomics_a_mask_size_7 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_30 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_30 =
    atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_30;
  wire        atomics_a_mask_eq_31 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_31 =
    atomics_a_mask_acc_28 | atomics_a_mask_size_7 & atomics_a_mask_eq_31;
  wire        atomics_a_mask_eq_32 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_32 =
    atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_32;
  wire        atomics_a_mask_eq_33 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_33 =
    atomics_a_mask_acc_29 | atomics_a_mask_size_7 & atomics_a_mask_eq_33;
  wire        atomics_a_mask_size_9 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_42 =
    (&s2_req_size) | atomics_a_mask_size_9 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_43 =
    (&s2_req_size) | atomics_a_mask_size_9 & s2_req_addr[2];
  wire        atomics_a_mask_size_10 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_44 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_44 =
    atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_44;
  wire        atomics_a_mask_eq_45 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_45 =
    atomics_a_mask_acc_42 | atomics_a_mask_size_10 & atomics_a_mask_eq_45;
  wire        atomics_a_mask_eq_46 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_46 =
    atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_46;
  wire        atomics_a_mask_eq_47 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_47 =
    atomics_a_mask_acc_43 | atomics_a_mask_size_10 & atomics_a_mask_eq_47;
  wire        atomics_a_mask_size_12 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_56 =
    (&s2_req_size) | atomics_a_mask_size_12 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_57 =
    (&s2_req_size) | atomics_a_mask_size_12 & s2_req_addr[2];
  wire        atomics_a_mask_size_13 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_58 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_58 =
    atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_58;
  wire        atomics_a_mask_eq_59 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_59 =
    atomics_a_mask_acc_56 | atomics_a_mask_size_13 & atomics_a_mask_eq_59;
  wire        atomics_a_mask_eq_60 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_60 =
    atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_60;
  wire        atomics_a_mask_eq_61 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_61 =
    atomics_a_mask_acc_57 | atomics_a_mask_size_13 & atomics_a_mask_eq_61;
  wire        atomics_a_mask_size_15 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_70 =
    (&s2_req_size) | atomics_a_mask_size_15 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_71 =
    (&s2_req_size) | atomics_a_mask_size_15 & s2_req_addr[2];
  wire        atomics_a_mask_size_16 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_72 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_72 =
    atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_72;
  wire        atomics_a_mask_eq_73 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_73 =
    atomics_a_mask_acc_70 | atomics_a_mask_size_16 & atomics_a_mask_eq_73;
  wire        atomics_a_mask_eq_74 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_74 =
    atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_74;
  wire        atomics_a_mask_eq_75 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_75 =
    atomics_a_mask_acc_71 | atomics_a_mask_size_16 & atomics_a_mask_eq_75;
  wire        atomics_a_mask_size_18 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_84 =
    (&s2_req_size) | atomics_a_mask_size_18 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_85 =
    (&s2_req_size) | atomics_a_mask_size_18 & s2_req_addr[2];
  wire        atomics_a_mask_size_19 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_86 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_86 =
    atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_86;
  wire        atomics_a_mask_eq_87 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_87 =
    atomics_a_mask_acc_84 | atomics_a_mask_size_19 & atomics_a_mask_eq_87;
  wire        atomics_a_mask_eq_88 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_88 =
    atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_88;
  wire        atomics_a_mask_eq_89 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_89 =
    atomics_a_mask_acc_85 | atomics_a_mask_size_19 & atomics_a_mask_eq_89;
  wire        atomics_a_mask_size_21 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_98 =
    (&s2_req_size) | atomics_a_mask_size_21 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_99 =
    (&s2_req_size) | atomics_a_mask_size_21 & s2_req_addr[2];
  wire        atomics_a_mask_size_22 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_100 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_100 =
    atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_100;
  wire        atomics_a_mask_eq_101 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_101 =
    atomics_a_mask_acc_98 | atomics_a_mask_size_22 & atomics_a_mask_eq_101;
  wire        atomics_a_mask_eq_102 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_102 =
    atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_102;
  wire        atomics_a_mask_eq_103 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_103 =
    atomics_a_mask_acc_99 | atomics_a_mask_size_22 & atomics_a_mask_eq_103;
  wire        atomics_a_mask_size_24 = s2_req_size == 2'h2;
  wire        atomics_a_mask_acc_112 =
    (&s2_req_size) | atomics_a_mask_size_24 & ~(s2_req_addr[2]);
  wire        atomics_a_mask_acc_113 =
    (&s2_req_size) | atomics_a_mask_size_24 & s2_req_addr[2];
  wire        atomics_a_mask_size_25 = s2_req_size == 2'h1;
  wire        atomics_a_mask_eq_114 = ~(s2_req_addr[2]) & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_114 =
    atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_114;
  wire        atomics_a_mask_eq_115 = ~(s2_req_addr[2]) & s2_req_addr[1];
  wire        atomics_a_mask_acc_115 =
    atomics_a_mask_acc_112 | atomics_a_mask_size_25 & atomics_a_mask_eq_115;
  wire        atomics_a_mask_eq_116 = s2_req_addr[2] & ~(s2_req_addr[1]);
  wire        atomics_a_mask_acc_116 =
    atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_116;
  wire        atomics_a_mask_eq_117 = s2_req_addr[2] & s2_req_addr[1];
  wire        atomics_a_mask_acc_117 =
    atomics_a_mask_acc_113 | atomics_a_mask_size_25 & atomics_a_mask_eq_117;
  wire [7:0]  atomics_mask =
    _metaArb_io_in_3_bits_data_c_cat_T_39
      ? {atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & s2_req_addr[0],
         atomics_a_mask_acc_117 | atomics_a_mask_eq_117 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & s2_req_addr[0],
         atomics_a_mask_acc_116 | atomics_a_mask_eq_116 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & s2_req_addr[0],
         atomics_a_mask_acc_115 | atomics_a_mask_eq_115 & ~(s2_req_addr[0]),
         atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & s2_req_addr[0],
         atomics_a_mask_acc_114 | atomics_a_mask_eq_114 & ~(s2_req_addr[0])}
      : _metaArb_io_in_3_bits_data_c_cat_T_38
          ? {atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & s2_req_addr[0],
             atomics_a_mask_acc_103 | atomics_a_mask_eq_103 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & s2_req_addr[0],
             atomics_a_mask_acc_102 | atomics_a_mask_eq_102 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & s2_req_addr[0],
             atomics_a_mask_acc_101 | atomics_a_mask_eq_101 & ~(s2_req_addr[0]),
             atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & s2_req_addr[0],
             atomics_a_mask_acc_100 | atomics_a_mask_eq_100 & ~(s2_req_addr[0])}
          : _metaArb_io_in_3_bits_data_c_cat_T_37
              ? {atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & s2_req_addr[0],
                 atomics_a_mask_acc_89 | atomics_a_mask_eq_89 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & s2_req_addr[0],
                 atomics_a_mask_acc_88 | atomics_a_mask_eq_88 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & s2_req_addr[0],
                 atomics_a_mask_acc_87 | atomics_a_mask_eq_87 & ~(s2_req_addr[0]),
                 atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & s2_req_addr[0],
                 atomics_a_mask_acc_86 | atomics_a_mask_eq_86 & ~(s2_req_addr[0])}
              : _metaArb_io_in_3_bits_data_c_cat_T_36
                  ? {atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & s2_req_addr[0],
                     atomics_a_mask_acc_75 | atomics_a_mask_eq_75 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & s2_req_addr[0],
                     atomics_a_mask_acc_74 | atomics_a_mask_eq_74 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & s2_req_addr[0],
                     atomics_a_mask_acc_73 | atomics_a_mask_eq_73 & ~(s2_req_addr[0]),
                     atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & s2_req_addr[0],
                     atomics_a_mask_acc_72 | atomics_a_mask_eq_72 & ~(s2_req_addr[0])}
                  : _metaArb_io_in_3_bits_data_c_cat_T_35
                      ? {atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & s2_req_addr[0],
                         atomics_a_mask_acc_61 | atomics_a_mask_eq_61 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & s2_req_addr[0],
                         atomics_a_mask_acc_60 | atomics_a_mask_eq_60 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & s2_req_addr[0],
                         atomics_a_mask_acc_59 | atomics_a_mask_eq_59 & ~(s2_req_addr[0]),
                         atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & s2_req_addr[0],
                         atomics_a_mask_acc_58 | atomics_a_mask_eq_58 & ~(s2_req_addr[0])}
                      : _metaArb_io_in_3_bits_data_c_cat_T_31
                          ? {atomics_a_mask_acc_47 | atomics_a_mask_eq_47
                               & s2_req_addr[0],
                             atomics_a_mask_acc_47 | atomics_a_mask_eq_47
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_46 | atomics_a_mask_eq_46
                               & s2_req_addr[0],
                             atomics_a_mask_acc_46 | atomics_a_mask_eq_46
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_45 | atomics_a_mask_eq_45
                               & s2_req_addr[0],
                             atomics_a_mask_acc_45 | atomics_a_mask_eq_45
                               & ~(s2_req_addr[0]),
                             atomics_a_mask_acc_44 | atomics_a_mask_eq_44
                               & s2_req_addr[0],
                             atomics_a_mask_acc_44 | atomics_a_mask_eq_44
                               & ~(s2_req_addr[0])}
                          : _metaArb_io_in_3_bits_data_c_cat_T_30
                              ? {atomics_a_mask_acc_33 | atomics_a_mask_eq_33
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_33 | atomics_a_mask_eq_33
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_32 | atomics_a_mask_eq_32
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_32 | atomics_a_mask_eq_32
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_31 | atomics_a_mask_eq_31
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_31 | atomics_a_mask_eq_31
                                   & ~(s2_req_addr[0]),
                                 atomics_a_mask_acc_30 | atomics_a_mask_eq_30
                                   & s2_req_addr[0],
                                 atomics_a_mask_acc_30 | atomics_a_mask_eq_30
                                   & ~(s2_req_addr[0])}
                              : _metaArb_io_in_3_bits_data_c_cat_T_29
                                  ? {atomics_a_mask_acc_19 | atomics_a_mask_eq_19
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_19 | atomics_a_mask_eq_19
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_18 | atomics_a_mask_eq_18
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_18 | atomics_a_mask_eq_18
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_17 | atomics_a_mask_eq_17
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_17 | atomics_a_mask_eq_17
                                       & ~(s2_req_addr[0]),
                                     atomics_a_mask_acc_16 | atomics_a_mask_eq_16
                                       & s2_req_addr[0],
                                     atomics_a_mask_acc_16 | atomics_a_mask_eq_16
                                       & ~(s2_req_addr[0])}
                                  : _metaArb_io_in_3_bits_data_c_cat_T_28
                                      ? {atomics_a_mask_acc_5 | atomics_a_mask_eq_5
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_5 | atomics_a_mask_eq_5
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_4 | atomics_a_mask_eq_4
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_4 | atomics_a_mask_eq_4
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_3 | atomics_a_mask_eq_3
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_3 | atomics_a_mask_eq_3
                                           & ~(s2_req_addr[0]),
                                         atomics_a_mask_acc_2 | atomics_a_mask_eq_2
                                           & s2_req_addr[0],
                                         atomics_a_mask_acc_2 | atomics_a_mask_eq_2
                                           & ~(s2_req_addr[0])}
                                      : 8'h0;
  wire        nodeOut_a_deq_valid =
    s2_valid_uncached_pending | s2_valid_cached_miss
    & ~(release_ack_wait & (s2_req_addr[20:6] ^ release_ack_addr[20:6]) == 15'h0)
    & ~s2_victim_dirty;
  wire        _GEN_11 =
    ~s2_write | _metaArb_io_in_3_bits_data_c_cat_T_24 | ~s2_read
    | _metaArb_io_in_3_bits_data_c_cat_T_39 | _metaArb_io_in_3_bits_data_c_cat_T_38
    | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_36
    | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_31
    | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_29
    | _metaArb_io_in_3_bits_data_c_cat_T_28;
  wire        _io_errors_bus_valid_T = nodeOut_d_ready & auto_out_d_valid;
  wire [26:0] _beats1_decode_T_1 = 27'hFFF << auto_out_d_bits_size;
  wire [8:0]  beats1 = auto_out_d_bits_opcode[0] ? ~(_beats1_decode_T_1[11:3]) : 9'h0;
  reg  [8:0]  counter;
  wire [8:0]  counter1 = counter - 9'h1;
  wire        d_last = counter == 9'h1 | beats1 == 9'h0;
  wire [8:0]  count = beats1 & ~counter1;
  wire        grantIsUncachedData = auto_out_d_bits_opcode == 3'h1;
  wire        grantIsUncached =
    grantIsUncachedData | auto_out_d_bits_opcode == 3'h0 | auto_out_d_bits_opcode == 3'h2;
  wire        grantIsRefill = auto_out_d_bits_opcode == 3'h5;
  wire        grantIsCached = auto_out_d_bits_opcode == 3'h4 | grantIsRefill;
  wire        grantIsVoluntary = auto_out_d_bits_opcode == 3'h6;
  reg         grantInProgress;
  reg  [2:0]  blockProbeAfterGrantCount;
  wire        _metaArb_io_in_4_valid_T = release_state == 4'h6;
  wire        _T_294 = release_state == 4'h9;
  wire        _canAcceptCachedGrant_T_4 = _T_289 | _metaArb_io_in_4_valid_T | _T_294;
  wire        _GEN_12 = _io_errors_bus_valid_T & grantIsCached;
  wire        _T_257 = auto_out_d_bits_source & d_last;
  wire        _GEN_13 =
    ~_io_errors_bus_valid_T | grantIsCached | ~(grantIsUncached & grantIsUncachedData);
  wire        _T_273 = grantIsRefill & dataArb_io_in_0_valid;
  wire        nodeOut_e_valid =
    ~_T_273 & auto_out_d_valid & ~(|counter) & grantIsCached & ~_canAcceptCachedGrant_T_4;
  assign dataArb_io_in_1_bits_addr = {s2_req_addr[11:6] | count[8:3], count[2:0], 3'h0};
  assign metaArb_io_in_3_valid =
    grantIsCached & d_last & _io_errors_bus_valid_T & ~auto_out_d_bits_denied;
  wire [3:0]  _metaArb_io_in_3_bits_data_T_1 =
    {_metaArb_io_in_3_bits_data_c_cat_T_23 | _metaArb_io_in_3_bits_data_c_cat_T_24 | s2_sc
       | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_39,
     _metaArb_io_in_3_bits_data_c_cat_T_23 | _metaArb_io_in_3_bits_data_c_cat_T_24 | s2_sc
       | _metaArb_io_in_3_bits_data_c_cat_T_28 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_39 | _metaArb_io_in_3_bits_data_c_cat_T_46
       | s2_lr,
     auto_out_d_bits_param};
  assign metaArb_io_in_3_bits_data =
    {_metaArb_io_in_3_bits_data_T_1 == 4'hC
       ? 2'h3
       : _metaArb_io_in_3_bits_data_T_1 == 4'h4 | _metaArb_io_in_3_bits_data_T_1 == 4'h0
           ? 2'h2
           : {1'h0, _metaArb_io_in_3_bits_data_T_1 == 4'h1},
     s2_req_addr[31:12]};
  reg         blockUncachedGrant;
  wire        _T_275 = grantIsUncachedData & (blockUncachedGrant | s1_valid);
  assign nodeOut_d_ready =
    ~(_T_275 | _T_273)
    & (~grantIsCached | ((|counter) | auto_out_e_ready) & ~_canAcceptCachedGrant_T_4);
  wire        _io_cpu_req_ready_output =
    _T_275
      ? ~(auto_out_d_valid | _GEN_8) & _io_cpu_req_ready_T_4
      : ~_GEN_8 & _io_cpu_req_ready_T_4;
  wire        _GEN_14 = _T_275 & auto_out_d_valid;
  assign dataArb_io_in_1_valid =
    _GEN_14 | auto_out_d_valid & grantIsRefill & ~_canAcceptCachedGrant_T_4;
  assign _GEN_0 = ~_GEN_14;
  wire        block_probe_for_core_progress =
    (|blockProbeAfterGrantCount) | (|(lrscCount[6:2]));
  wire        nodeOut_b_ready =
    ~metaArb__grant_T_3
    & ~(block_probe_for_core_progress | releaseInFlight | release_ack_wait
        & (auto_out_b_bits_address[20:6] ^ release_ack_addr[20:6]) == 15'h0
        | grantInProgress | s1_valid | s2_valid);
  wire        _T_309 = auto_out_c_ready & nodeOut_c_valid;
  wire [26:0] _GEN_15 = {23'h0, nodeOut_c_bits_size};
  wire [26:0] _beats1_decode_T_5 = 27'hFFF << _GEN_15;
  wire [8:0]  beats1_1 = nodeOut_c_bits_opcode[0] ? ~(_beats1_decode_T_5[11:3]) : 9'h0;
  reg  [8:0]  counter_1;
  wire [8:0]  counter1_1 = counter_1 - 9'h1;
  wire        c_first = counter_1 == 9'h0;
  wire        releaseDone = (counter_1 == 9'h1 | beats1_1 == 9'h0) & _T_309;
  reg         s1_release_data_valid;
  reg         s2_release_data_valid;
  wire        releaseRejected = s2_release_data_valid & ~_T_309;
  wire [9:0]  releaseDataBeat =
    {1'h0, beats1_1 & ~counter1_1}
    + {8'h0,
       releaseRejected
         ? 2'h0
         : {1'h0, s1_release_data_valid} + {1'h0, s2_release_data_valid}};
  wire        _GEN_16 = s2_meta_error | s2_prb_ack_data;
  assign s1_nack =
    s2_probe
      ? s2_meta_error | s2_prb_ack_data | (|s2_probe_state_state) | ~releaseDone | _GEN_10
        | _T_14
      : _GEN_10 | _T_14;
  wire        _T_285 = release_state == 4'h4;
  assign metaArb_io_in_6_valid =
    _T_285 | auto_out_b_valid
    & (~block_probe_for_core_progress | (|lrscCount) & ~(|(lrscCount[6:2])));
  assign metaArb_io_in_6_bits_idx =
    _T_285 ? metaArb_io_in_4_bits_idx : auto_out_b_bits_address[11:6];
  wire        _T_286 = release_state == 4'h5;
  wire        _T_287 = release_state == 4'h3;
  assign nodeOut_c_valid =
    _T_287 | _T_286 | s2_probe & ~_GEN_16 | s2_release_data_valid
    & ~(c_first & release_ack_wait);
  wire        _T_293 = _T_289 | _metaArb_io_in_4_valid_T | _T_294;
  assign nodeOut_c_bits_opcode = _T_293 ? {2'h3, ~_T_294} : {2'h2, _T_288};
  assign nodeOut_c_bits_size = _T_293 ? 4'h6 : probe_bits_size;
  assign dataArb_io_in_2_valid = inWriteback & releaseDataBeat < 10'h8;
  assign _GEN = {metaArb_io_in_4_bits_idx, releaseDataBeat[2:0], 3'h0};
  assign metaArb_io_in_4_valid = _metaArb_io_in_4_valid_T | release_state == 4'h7;
  assign metaArb_io_in_7_bits_data =
    {_T_293
       ? 2'h0
       : _GEN_9 ? 2'h2 : _T_147 ? 2'h1 : _T_143 ? 2'h0 : {1'h0, _T_139 | _T_135 | _T_131},
     probe_bits_address[31:12]};
  reg         io_cpu_s2_xcpt_REG;
  assign _io_cpu_s2_xcpt_pf_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_pf_ld;
  assign _io_cpu_s2_xcpt_pf_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_pf_st;
  assign _io_cpu_s2_xcpt_gf_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_gf_ld;
  assign _io_cpu_s2_xcpt_gf_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_gf_st;
  assign _io_cpu_s2_xcpt_ae_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ae_ld;
  assign _io_cpu_s2_xcpt_ae_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ae_st;
  assign _io_cpu_s2_xcpt_ma_ld_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ma_ld;
  assign _io_cpu_s2_xcpt_ma_st_output = io_cpu_s2_xcpt_REG & s2_tlb_xcpt_ma_st;
  reg         doUncachedResp;
  wire        _io_cpu_replay_next_output = _io_errors_bus_valid_T & grantIsUncachedData;
  `ifndef SYNTHESIS
    wire _GEN_17 = _io_errors_bus_valid_T & ~grantIsCached;
    always @(posedge clock) begin
      if (tlb_io_sfence_valid & ~reset
          & ~(~(s1_req_size[0]) | s1_req_addr[38:12] == s1_tlb_req_vaddr[38:12])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at TLB.scala:709 assert(!io.sfence.bits.rs1 || (io.sfence.bits.addr >> pgIdxBits) === vpn)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_pstore_drain_opportunistic_T | _pstore_drain_opportunistic_T_1
                | _pstore_drain_opportunistic_T_2 | _pstore_drain_opportunistic_T_28
                | _pstore_drain_opportunistic_T_30 | _pstore_drain_opportunistic_T_31
                | _pstore_drain_opportunistic_T_32 | _pstore_drain_opportunistic_T_33
                | _pstore_drain_opportunistic_T_37 | _pstore_drain_opportunistic_T_38
                | _pstore_drain_opportunistic_T_39 | _pstore_drain_opportunistic_T_40
                | _pstore_drain_opportunistic_T_41
                | (_pstore_drain_opportunistic_T_25 | _pstore_drain_opportunistic_T_50
                   | _pstore_drain_opportunistic_T_28 | _pstore_drain_opportunistic_T_30
                   | _pstore_drain_opportunistic_T_31 | _pstore_drain_opportunistic_T_32
                   | _pstore_drain_opportunistic_T_33 | _pstore_drain_opportunistic_T_37
                   | _pstore_drain_opportunistic_T_38 | _pstore_drain_opportunistic_T_39
                   | _pstore_drain_opportunistic_T_40 | _pstore_drain_opportunistic_T_41)
                & _pstore_drain_opportunistic_T_50)
              | ~_dataArb_io_in_3_valid_res_T_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:1162 assert(!needsRead(req) || res)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(s1_valid_masked & _io_cpu_perf_canAcceptLoadThenLoad_T_51)
              | (&(s1_mask_xwr | ~io_cpu_s1_data_mask)))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:306 assert(!(s1_valid_masked && s1_req.cmd === M_PWR) || (s1_mask_xwr | ~io.cpu.s1_data.mask).andR)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(~(_pstore_drain_opportunistic_T | _pstore_drain_opportunistic_T_1
                | _pstore_drain_opportunistic_T_2 | _pstore_drain_opportunistic_T_28
                | _pstore_drain_opportunistic_T_30 | _pstore_drain_opportunistic_T_31
                | _pstore_drain_opportunistic_T_32 | _pstore_drain_opportunistic_T_33
                | _pstore_drain_opportunistic_T_37 | _pstore_drain_opportunistic_T_38
                | _pstore_drain_opportunistic_T_39 | _pstore_drain_opportunistic_T_40
                | _pstore_drain_opportunistic_T_41
                | (_pstore_drain_opportunistic_T_25 | _pstore_drain_opportunistic_T_50
                   | _pstore_drain_opportunistic_T_28 | _pstore_drain_opportunistic_T_30
                   | _pstore_drain_opportunistic_T_31 | _pstore_drain_opportunistic_T_32
                   | _pstore_drain_opportunistic_T_33 | _pstore_drain_opportunistic_T_37
                   | _pstore_drain_opportunistic_T_38 | _pstore_drain_opportunistic_T_39
                   | _pstore_drain_opportunistic_T_40 | _pstore_drain_opportunistic_T_41)
                & _pstore_drain_opportunistic_T_50)
              | ~_pstore_drain_opportunistic_res_T_2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:1162 assert(!needsRead(req) || res)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & ~(pstore1_rmw_r
              | (_dataArb_io_in_0_valid_T_4 | pstore1_held) == pstore1_valid)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:487 assert(pstore1_rmw || pstore1_valid_not_rmw(io.cpu.s2_kill) === pstore1_valid)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_12 & ~reset & ~cached_grant_wait) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: A GrantData was unexpected by the dcache.\n    at DCache.scala:654 assert(cached_grant_wait, \"A GrantData was unexpected by the dcache.\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & grantIsUncached & _T_257 & ~reset & ~uncachedInFlight_0) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: An AccessAck was unexpected by the dcache.\n    at DCache.scala:664 assert(f, \"An AccessAck was unexpected by the dcache.\") // TODO must handle Ack coming back on same cycle!\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_17 & ~grantIsUncached & grantIsVoluntary & ~reset
          & ~release_ack_wait) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: A ReleaseAck was unexpected by the dcache.\n    at DCache.scala:685 assert(release_ack_wait, \"A ReleaseAck was unexpected by the dcache.\") // TODO should handle Ack coming back on same cycle!\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & (auto_out_e_ready
             & nodeOut_e_valid) != (_io_errors_bus_valid_T & ~(|counter)
                                    & grantIsCached)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:693 assert(tl_out.e.fire === (tl_out.d.fire && d_first && grantIsCached))\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_s2_want_victimize_T_1 & ~reset
          & ~(s2_valid_flush_line | _io_cpu_s2_nack_output)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:794 assert(s2_valid_flush_line || s2_flush_valid || io.cpu.s2_nack)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (doUncachedResp & ~reset & s2_valid_hit_pre_data_ecc) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at DCache.scala:928 assert(!s2_valid_hit)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [31:0] io_cpu_resp_bits_data_shifted =
    s2_req_addr[2] ? s2_data[63:32] : s2_data[31:0];
  wire        _io_cpu_resp_bits_data_word_bypass_T_1 = s2_req_size == 2'h2;
  wire [15:0] io_cpu_resp_bits_data_shifted_1 =
    s2_req_addr[1]
      ? io_cpu_resp_bits_data_shifted[31:16]
      : io_cpu_resp_bits_data_shifted[15:0];
  wire [7:0]  io_cpu_resp_bits_data_zeroed_2 =
    s2_sc
      ? 8'h0
      : s2_req_addr[0]
          ? io_cpu_resp_bits_data_shifted_1[15:8]
          : io_cpu_resp_bits_data_shifted_1[7:0];
  wire [31:0] io_cpu_resp_bits_data_word_bypass_shifted =
    s2_req_addr[2] ? s2_data[63:32] : s2_data[31:0];
  reg         REG;
  wire [26:0] _io_cpu_perf_release_beats1_decode_T_1 = 27'hFFF << _GEN_15;
  reg  [8:0]  io_cpu_perf_release_counter;
  wire [2:0]  _GEN_18 =
    ~{tlb_superpage_entries_2_valid_0,
      tlb_superpage_entries_1_valid_0,
      tlb_superpage_entries_0_valid_0};
  wire [39:0] s0_tlb_req_vaddr =
    {resetting
       ? {io_cpu_req_bits_addr[39:12], flushCounter}
       : metaArb_io_in_1_valid
           ? {io_cpu_req_bits_addr[39:12], metaArb_io_in_1_bits_idx}
           : _GEN_7
               ? {io_cpu_req_bits_addr[39:12], s2_req_addr[11:6]}
               : metaArb_io_in_4_valid
                   ? {io_cpu_req_bits_addr[39:12], probe_bits_address[11:6]}
                   : metaArb_io_in_6_valid
                       ? {io_cpu_req_bits_addr[39:32],
                          _T_285
                            ? probe_bits_address[31:6]
                            : auto_out_b_bits_address[31:6]}
                       : io_cpu_req_bits_addr[39:6],
     io_cpu_req_bits_addr[5:0]};
  wire [6:0]  tlb_hits =
    {~tlb_vm_enabled,
     tlb_hitsVec_5,
     tlb_hitsVec_4,
     tlb_hitsVec_3,
     tlb_hitsVec_2,
     tlb_hitsVec_1,
     tlb_hitsVec_0};
  wire [6:0]  tlb_ptw_pf_array =
    {1'h0,
     _tlb_entries_barrier_5_io_y_pf,
     _tlb_entries_barrier_4_io_y_pf,
     _tlb_entries_barrier_3_io_y_pf,
     _tlb_entries_barrier_2_io_y_pf,
     _tlb_entries_barrier_1_io_y_pf,
     _tlb_entries_barrier_io_y_pf};
  wire [5:0]  tlb_priv_rw_ok =
    (~(s1_tlb_req_prv[0]) | io_ptw_status_sum
       ? {_tlb_entries_barrier_5_io_y_u,
          _tlb_entries_barrier_4_io_y_u,
          _tlb_entries_barrier_3_io_y_u,
          _tlb_entries_barrier_2_io_y_u,
          _tlb_entries_barrier_1_io_y_u,
          _tlb_entries_barrier_io_y_u}
       : 6'h0)
    | (s1_tlb_req_prv[0]
         ? ~{_tlb_entries_barrier_5_io_y_u,
             _tlb_entries_barrier_4_io_y_u,
             _tlb_entries_barrier_3_io_y_u,
             _tlb_entries_barrier_2_io_y_u,
             _tlb_entries_barrier_1_io_y_u,
             _tlb_entries_barrier_io_y_u}
         : 6'h0);
  wire        _GEN_19 =
    _tlb_entries_barrier_5_io_y_ae_ptw | _tlb_entries_barrier_5_io_y_ae_final;
  wire        _GEN_20 =
    _tlb_entries_barrier_4_io_y_ae_ptw | _tlb_entries_barrier_4_io_y_ae_final;
  wire        _GEN_21 =
    _tlb_entries_barrier_3_io_y_ae_ptw | _tlb_entries_barrier_3_io_y_ae_final;
  wire        _GEN_22 =
    _tlb_entries_barrier_2_io_y_ae_ptw | _tlb_entries_barrier_2_io_y_ae_final;
  wire        _GEN_23 =
    _tlb_entries_barrier_1_io_y_ae_ptw | _tlb_entries_barrier_1_io_y_ae_final;
  wire        _GEN_24 =
    _tlb_entries_barrier_io_y_ae_ptw | _tlb_entries_barrier_io_y_ae_final;
  wire [3:0]  _GEN_25 = s1_tlb_req_vaddr[3:0] & (4'h1 << s1_tlb_req_size) - 4'h1;
  wire        tlb__cmd_lrsc_T = s1_tlb_req_cmd == 5'h6;
  wire        tlb__cmd_lrsc_T_1 = s1_tlb_req_cmd == 5'h7;
  wire        tlb__cmd_lrsc_T_2 = tlb__cmd_lrsc_T | tlb__cmd_lrsc_T_1;
  wire        tlb__cmd_amo_logical_T = s1_tlb_req_cmd == 5'h4;
  wire        tlb__cmd_amo_logical_T_1 = s1_tlb_req_cmd == 5'h9;
  wire        tlb__cmd_amo_logical_T_2 = s1_tlb_req_cmd == 5'hA;
  wire        tlb__cmd_amo_logical_T_3 = s1_tlb_req_cmd == 5'hB;
  wire        tlb__cmd_amo_logical_T_6 =
    tlb__cmd_amo_logical_T | tlb__cmd_amo_logical_T_1 | tlb__cmd_amo_logical_T_2
    | tlb__cmd_amo_logical_T_3;
  wire        tlb__cmd_amo_arithmetic_T = s1_tlb_req_cmd == 5'h8;
  wire        tlb__cmd_amo_arithmetic_T_1 = s1_tlb_req_cmd == 5'hC;
  wire        tlb__cmd_amo_arithmetic_T_2 = s1_tlb_req_cmd == 5'hD;
  wire        tlb__cmd_amo_arithmetic_T_3 = s1_tlb_req_cmd == 5'hE;
  wire        tlb__cmd_amo_arithmetic_T_4 = s1_tlb_req_cmd == 5'hF;
  wire        tlb__cmd_amo_arithmetic_T_8 =
    tlb__cmd_amo_arithmetic_T | tlb__cmd_amo_arithmetic_T_1 | tlb__cmd_amo_arithmetic_T_2
    | tlb__cmd_amo_arithmetic_T_3 | tlb__cmd_amo_arithmetic_T_4;
  wire        tlb_cmd_put_partial = s1_tlb_req_cmd == 5'h11;
  wire        tlb_cmd_read =
    s1_tlb_req_cmd == 5'h0 | s1_tlb_req_cmd == 5'h10 | tlb__cmd_lrsc_T | tlb__cmd_lrsc_T_1
    | tlb__cmd_amo_logical_T | tlb__cmd_amo_logical_T_1 | tlb__cmd_amo_logical_T_2
    | tlb__cmd_amo_logical_T_3 | tlb__cmd_amo_arithmetic_T | tlb__cmd_amo_arithmetic_T_1
    | tlb__cmd_amo_arithmetic_T_2 | tlb__cmd_amo_arithmetic_T_3
    | tlb__cmd_amo_arithmetic_T_4;
  wire        tlb_cmd_write =
    s1_tlb_req_cmd == 5'h1 | tlb_cmd_put_partial | tlb__cmd_lrsc_T_1
    | tlb__cmd_amo_logical_T | tlb__cmd_amo_logical_T_1 | tlb__cmd_amo_logical_T_2
    | tlb__cmd_amo_logical_T_3 | tlb__cmd_amo_arithmetic_T | tlb__cmd_amo_arithmetic_T_1
    | tlb__cmd_amo_arithmetic_T_2 | tlb__cmd_amo_arithmetic_T_3
    | tlb__cmd_amo_arithmetic_T_4;
  wire        tlb_cmd_write_perms =
    tlb_cmd_write | s1_tlb_req_cmd == 5'h5 | s1_tlb_req_cmd == 5'h17;
  wire [6:0]  tlb__pf_ld_array_T_2 =
    {1'h1,
     ~_tlb_entries_barrier_5_io_y_ae_ptw,
     ~_tlb_entries_barrier_4_io_y_ae_ptw,
     ~_tlb_entries_barrier_3_io_y_ae_ptw,
     ~_tlb_entries_barrier_2_io_y_ae_ptw,
     ~_tlb_entries_barrier_1_io_y_ae_ptw,
     ~_tlb_entries_barrier_io_y_ae_ptw};
  wire [6:0]  tlb__pf_ld_array_T_5 =
    {1'h1,
     ~_tlb_entries_barrier_5_io_y_gf,
     ~_tlb_entries_barrier_4_io_y_gf,
     ~_tlb_entries_barrier_3_io_y_gf,
     ~_tlb_entries_barrier_2_io_y_gf,
     ~_tlb_entries_barrier_1_io_y_gf,
     ~_tlb_entries_barrier_io_y_gf};
  wire [1:0]  _s2_data_T_1 =
    _io_cpu_replay_next_output | inWriteback | s1_did_read & s1_read_mask
      ? (_GEN_13 ? 2'h1 : 2'h2)
      : 2'h0;
  wire        tlb__superpage_hits_T_23 =
    tlb_superpage_entries_1_valid_0 & ~tlb_superpage_entries_1_tag_v
    & _GEN_4[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_4 | _GEN_4[8:0] == 9'h0);
  wire        tlb__superpage_hits_T_37 =
    tlb_superpage_entries_2_valid_0 & ~tlb_superpage_entries_2_tag_v
    & _GEN_5[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_7 | _GEN_5[8:0] == 9'h0);
  wire        tlb__superpage_hits_T_51 =
    tlb_superpage_entries_3_valid_0 & ~tlb_superpage_entries_3_tag_v
    & _GEN_6[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_10 | _GEN_6[8:0] == 9'h0);
  wire        _GEN_26 = _io_errors_bus_valid_T & grantIsCached & d_last;
  wire        _GEN_27 = _T_285 & ~metaArb__grant_T_3;
  wire [6:0]  flushCounterNext = {1'h0, flushCounter} + 7'h1;
  wire [1:0]  tlb_hi_1 = {tlb__superpage_hits_T_51, tlb__superpage_hits_T_37};
  wire        tlb__T_16 = tlb__superpage_hits_T_51 | tlb__superpage_hits_T_23;
  wire        tlb_invalidate_refill =
    tlb_io_ptw_req_valid | (&tlb_state) | tlb_io_sfence_valid;
  wire [15:0] _GEN_28 = tlb_mpu_ppn[19:4] ^ 16'h1001;
  wire        tlb_legal_address =
    tlb_mpu_ppn == 28'h3 | tlb_mpu_ppn == 28'h10014 | tlb_mpu_ppn == 28'h10012
    | tlb_mpu_ppn == 28'h1001F | tlb_mpu_ppn[27:17] == 11'h1 | tlb_mpu_ppn == 28'h10010
    | tlb_mpu_ppn[27:14] == 14'h3 | tlb_mpu_ppn[27:4] == 24'h200 | tlb_mpu_ppn == 28'h0
    | tlb_mpu_ppn[27:4] == 24'h1 | tlb_mpu_ppn[27:19] == 9'h1
    | tlb_mpu_ppn[27:17] == 11'h3;
  wire        tlb_newEntry_c = tlb_legal_address & tlb_mpu_ppn[19];
  wire        tlb_deny_access_to_debug = ~(tlb_mpu_priv[2]) & tlb_mpu_ppn == 28'h0;
  wire        tlb_newEntry_pr =
    tlb_legal_address & ~tlb_deny_access_to_debug & _tlb_pmp_io_r;
  wire [5:0]  _GEN_29 = {tlb_mpu_ppn[19:15], tlb_mpu_ppn[4]};
  wire [5:0]  _GEN_30 = {_GEN_28[15:11], _GEN_28[0]};
  wire        tlb_newEntry_pw =
    tlb_legal_address
    & (_GEN_29 == 6'h0 | tlb_mpu_ppn[19:15] == 5'h1 | _GEN_30 == 6'h0
       | tlb_mpu_ppn[19:17] == 3'h3 | tlb_mpu_ppn[19]) & ~tlb_deny_access_to_debug
    & _tlb_pmp_io_w;
  wire        tlb_newEntry_ppp =
    tlb_legal_address
    & (_GEN_29 == 6'h0 | tlb_mpu_ppn[19:15] == 5'h1 | _GEN_30 == 6'h0
       | tlb_mpu_ppn[19:17] == 3'h3 | tlb_mpu_ppn[19]);
  wire [4:0]  _GEN_31 = {tlb_mpu_ppn[19], tlb_mpu_ppn[17:15], tlb_mpu_ppn[4]};
  wire [3:0]  _GEN_32 = {tlb_mpu_ppn[19], tlb_mpu_ppn[17:15] ^ 3'h1};
  wire [4:0]  _GEN_33 = {tlb_mpu_ppn[19], _GEN_28[13:11], _GEN_28[0]};
  wire        tlb_newEntry_pal =
    tlb_legal_address & (_GEN_31 == 5'h0 | _GEN_32 == 4'h0 | _GEN_33 == 5'h0);
  wire        tlb_newEntry_paa =
    tlb_legal_address & (_GEN_31 == 5'h0 | _GEN_32 == 4'h0 | _GEN_33 == 5'h0);
  wire        tlb_newEntry_px =
    tlb_legal_address
    & ({tlb_mpu_ppn[19], tlb_mpu_ppn[17:15], tlb_mpu_ppn[13]} == 5'h0
       | {tlb_mpu_ppn[19], ~(tlb_mpu_ppn[17])} == 2'h0 | tlb_mpu_ppn[19])
    & ~tlb_deny_access_to_debug & _tlb_pmp_io_x;
  wire        tlb_newEntry_eff =
    tlb_legal_address
    & ({tlb_mpu_ppn[19:15], tlb_mpu_ppn[13], tlb_mpu_ppn[4], tlb_mpu_ppn[1]} == 8'h0
       | {tlb_mpu_ppn[19:15], ~(tlb_mpu_ppn[13]), tlb_mpu_ppn[4]} == 7'h0
       | tlb_mpu_ppn[19:15] == 5'h1
       | {_GEN_28[15:11], tlb_mpu_ppn[13], _GEN_28[0]} == 7'h0
       | tlb_mpu_ppn[19:17] == 3'h3);
  wire        tlb_refill_v = tlb_r_vstage1_en | tlb_r_stage2_en;
  wire        tlb_newEntry_g = io_ptw_resp_bits_pte_g & io_ptw_resp_bits_pte_v;
  wire        tlb_newEntry_ae_stage2 =
    io_ptw_resp_bits_ae_final & io_ptw_resp_bits_gpa_is_pte & tlb_r_stage2_en;
  wire        tlb_newEntry_sr =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_r;
  wire        tlb_newEntry_sw =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_w & io_ptw_resp_bits_pte_d;
  wire        tlb_newEntry_sx =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_x;
  wire        _GEN_34 = io_ptw_resp_valid & ~io_ptw_resp_bits_homogeneous;
  wire        _GEN_35 = _GEN_34 | tlb_special_entry_valid_0;
  wire        _GEN_36 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & tlb_r_superpage_repl_addr == 2'h0;
  wire        _GEN_37 =
    _GEN_36 ? ~tlb_invalidate_refill : tlb_superpage_entries_0_valid_0;
  wire        _GEN_38 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & tlb_r_superpage_repl_addr == 2'h1;
  wire        _GEN_39 =
    _GEN_38 ? ~tlb_invalidate_refill : tlb_superpage_entries_1_valid_0;
  wire        _GEN_40 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & tlb_r_superpage_repl_addr == 2'h2;
  wire        _GEN_41 =
    _GEN_40 ? ~tlb_invalidate_refill : tlb_superpage_entries_2_valid_0;
  wire        _GEN_42 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & (&tlb_r_superpage_repl_addr);
  wire        _GEN_43 =
    _GEN_42 ? ~tlb_invalidate_refill : tlb_superpage_entries_3_valid_0;
  wire        _GEN_44 = ~io_ptw_resp_bits_homogeneous | ~(io_ptw_resp_bits_level[1]);
  wire        _GEN_45 = ~io_ptw_resp_valid | _GEN_44;
  wire        _GEN_46 = tlb_r_refill_tag[1:0] == 2'h0;
  wire        _GEN_47 = tlb_r_refill_tag[1:0] == 2'h1;
  wire        _GEN_48 = tlb_r_refill_tag[1:0] == 2'h2;
  wire [41:0] tlb__sectored_entries_0_0_data_T =
    {io_ptw_resp_bits_pte_ppn[19:0],
     io_ptw_resp_bits_pte_u,
     tlb_newEntry_g,
     io_ptw_resp_bits_ae_ptw,
     io_ptw_resp_bits_ae_final,
     tlb_newEntry_ae_stage2,
     io_ptw_resp_bits_pf,
     io_ptw_resp_bits_gf,
     tlb_newEntry_sw,
     tlb_newEntry_sx,
     tlb_newEntry_sr,
     io_ptw_resp_bits_hw,
     io_ptw_resp_bits_hx,
     io_ptw_resp_bits_hr,
     tlb_newEntry_pw,
     tlb_newEntry_px,
     tlb_newEntry_pr,
     tlb_newEntry_ppp,
     tlb_newEntry_pal,
     tlb_newEntry_paa,
     tlb_newEntry_eff,
     tlb_newEntry_c,
     1'h0};
  wire        _GEN_49 =
    _GEN_45
      ? tlb_sectored_entries_0_0_valid_0
      : ~tlb_invalidate_refill
        & (_GEN_46 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_0);
  wire        _GEN_50 =
    _GEN_45
      ? tlb_sectored_entries_0_0_valid_1
      : ~tlb_invalidate_refill
        & (_GEN_47 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_1);
  wire        _GEN_51 =
    _GEN_45
      ? tlb_sectored_entries_0_0_valid_2
      : ~tlb_invalidate_refill
        & (_GEN_48 | tlb_r_sectored_hit_valid & tlb_sectored_entries_0_0_valid_2);
  wire        _GEN_52 =
    _GEN_45
      ? tlb_sectored_entries_0_0_valid_3
      : ~tlb_invalidate_refill
        & ((&(tlb_r_refill_tag[1:0])) | tlb_r_sectored_hit_valid
           & tlb_sectored_entries_0_0_valid_3);
  wire [19:0] tlb_ppn =
    (tlb_hitsVec_0 ? _tlb_entries_barrier_io_y_ppn : 20'h0)
    | (tlb_hitsVec_1
         ? {_tlb_entries_barrier_1_io_y_ppn[19:18],
            (tlb__superpage_hits_ignore_T_1 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_1_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_1_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_2
         ? {_tlb_entries_barrier_2_io_y_ppn[19:18],
            (tlb__superpage_hits_ignore_T_4 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_2_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_2_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_3
         ? {_tlb_entries_barrier_3_io_y_ppn[19:18],
            (tlb__superpage_hits_ignore_T_7 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_3_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_3_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_4
         ? {_tlb_entries_barrier_4_io_y_ppn[19:18],
            (tlb__superpage_hits_ignore_T_10 ? s1_tlb_req_vaddr[29:21] : 9'h0)
              | _tlb_entries_barrier_4_io_y_ppn[17:9],
            s1_tlb_req_vaddr[20:12] | _tlb_entries_barrier_4_io_y_ppn[8:0]}
         : 20'h0)
    | (tlb_hitsVec_5
         ? {_tlb_entries_barrier_5_io_y_ppn[19:18],
            _GEN_1 | _tlb_entries_barrier_5_io_y_ppn[17:9],
            _GEN_2 | _tlb_entries_barrier_5_io_y_ppn[8:0]}
         : 20'h0) | (tlb_vm_enabled ? 20'h0 : s1_tlb_req_vaddr[31:12]);
  wire        tlb__T_21 = tlb_io_req_ready & tlb_io_req_valid & tlb_tlb_miss;
  wire [24:0] tlb__T_35 =
    tlb_sectored_entries_0_0_tag_vpn[26:2] ^ s1_tlb_req_vaddr[38:14];
  wire        tlb__T_38 = tlb__T_35 == 25'h0 & ~tlb_sectored_entries_0_0_tag_v;
  wire        _GEN_53 =
    tlb__T_38 & ~tlb_sectored_entries_0_0_tag_v & s1_tlb_req_vaddr[13:12] == 2'h0;
  wire        _GEN_54 =
    tlb__T_38 & ~tlb_sectored_entries_0_0_tag_v & s1_tlb_req_vaddr[13:12] == 2'h1;
  wire        _GEN_55 =
    tlb__T_38 & ~tlb_sectored_entries_0_0_tag_v & s1_tlb_req_vaddr[13:12] == 2'h2;
  wire        _GEN_56 =
    tlb__T_38 & ~tlb_sectored_entries_0_0_tag_v & (&(s1_tlb_req_vaddr[13:12]));
  wire        tlb__T_149 = tlb__T_35[24:16] == 9'h0;
  wire        tlb__T_464 =
    tlb_superpage_entries_0_valid_0 & ~tlb_superpage_entries_0_tag_v
    & _GEN_3[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_1 | _GEN_3[8:0] == 9'h0);
  wire        tlb__T_562 =
    tlb_superpage_entries_1_valid_0 & ~tlb_superpage_entries_1_tag_v
    & _GEN_4[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_4 | _GEN_4[8:0] == 9'h0);
  wire        tlb__T_660 =
    tlb_superpage_entries_2_valid_0 & ~tlb_superpage_entries_2_tag_v
    & _GEN_5[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_7 | _GEN_5[8:0] == 9'h0);
  wire        tlb__T_758 =
    tlb_superpage_entries_3_valid_0 & ~tlb_superpage_entries_3_tag_v
    & _GEN_6[17:9] == 9'h0 & (tlb__superpage_hits_ignore_T_10 | _GEN_6[8:0] == 9'h0);
  wire        tlb__T_861 =
    tlb_special_entry_valid_0 & ~tlb_special_entry_tag_v
    & tlb__hitsVec_T_66[26:18] == 9'h0
    & (tlb__mpu_ppn_ignore_T | tlb__hitsVec_T_66[17:9] == 9'h0)
    & (~(tlb_special_entry_level[1]) | tlb__hitsVec_T_66[8:0] == 9'h0);
  wire        tlb__T_1162 = tlb_multipleHits | reset;
  wire        _probe_bits_T = nodeOut_b_ready & auto_out_b_valid;
  wire        s1_valid_not_nacked = s1_valid & ~s1_nack;
  wire        s0_clk_en = metaArb_io_out_valid & ~metaArb_io_out_bits_write;
  wire        _s1_meta_hit_state_T = _tag_array_0_ext_RW0_rdata[19:0] == tlb_ppn;
  wire        s1_meta_clk_en = s1_valid_not_nacked | s1_probe;
  wire        _T_227 =
    s2_valid_hit_pre_data_ecc & s2_lr & ~cached_grant_wait | s2_valid_cached_miss;
  wire        advance_pstore1 =
    pstore1_valid & pstore2_valid == dataArb_io_in_0_bits_write;
  wire        _io_cpu_perf_acquire_T = auto_out_a_ready & nodeOut_a_deq_valid;
  wire        _GEN_57 = _io_cpu_perf_acquire_T & s2_uncached;
  wire        _GEN_58 = _T_293 & _T_309 & c_first;
  wire [6:0]  tlb_c_array =
    {{2{tlb_newEntry_c}},
     _tlb_entries_barrier_4_io_y_c,
     _tlb_entries_barrier_3_io_y_c,
     _tlb_entries_barrier_2_io_y_c,
     _tlb_entries_barrier_1_io_y_c,
     _tlb_entries_barrier_io_y_c};
  wire [6:0]  tlb_ppp_array =
    {{2{tlb_newEntry_ppp}},
     _tlb_entries_barrier_4_io_y_ppp,
     _tlb_entries_barrier_3_io_y_ppp,
     _tlb_entries_barrier_2_io_y_ppp,
     _tlb_entries_barrier_1_io_y_ppp,
     _tlb_entries_barrier_io_y_ppp};
  wire [6:0]  tlb_paa_array =
    {{2{tlb_newEntry_paa}},
     _tlb_entries_barrier_4_io_y_paa,
     _tlb_entries_barrier_3_io_y_paa,
     _tlb_entries_barrier_2_io_y_paa,
     _tlb_entries_barrier_1_io_y_paa,
     _tlb_entries_barrier_io_y_paa};
  wire [6:0]  tlb_pal_array =
    {{2{tlb_newEntry_pal}},
     _tlb_entries_barrier_4_io_y_pal,
     _tlb_entries_barrier_3_io_y_pal,
     _tlb_entries_barrier_2_io_y_pal,
     _tlb_entries_barrier_1_io_y_pal,
     _tlb_entries_barrier_io_y_pal};
  wire [6:0]  tlb_ae_array =
    ((|_GEN_25)
       ? {{2{tlb_newEntry_eff}},
          _tlb_entries_barrier_4_io_y_eff,
          _tlb_entries_barrier_3_io_y_eff,
          _tlb_entries_barrier_2_io_y_eff,
          _tlb_entries_barrier_1_io_y_eff,
          _tlb_entries_barrier_io_y_eff}
       : 7'h0) | (tlb__cmd_lrsc_T_2 ? ~tlb_c_array : 7'h0);
  always @(posedge clock) begin
    if (_GEN_45) begin
    end
    else begin
      tlb_sectored_entries_0_0_tag_vpn <= tlb_r_refill_tag;
      tlb_sectored_entries_0_0_tag_v <= tlb_refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_44 | ~_GEN_46) begin
    end
    else
      tlb_sectored_entries_0_0_data_0 <= tlb__sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_44 | ~_GEN_47) begin
    end
    else
      tlb_sectored_entries_0_0_data_1 <= tlb__sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_44 | ~_GEN_48) begin
    end
    else
      tlb_sectored_entries_0_0_data_2 <= tlb__sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_44 | ~(&(tlb_r_refill_tag[1:0]))) begin
    end
    else
      tlb_sectored_entries_0_0_data_3 <= tlb__sectored_entries_0_0_data_T;
    tlb_sectored_entries_0_0_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__T_149
                     ? ~(~tlb_sectored_entries_0_0_tag_v
                         & tlb_sectored_entries_0_0_data_0[0] | _GEN_53) & _GEN_49
                     : ~_GEN_53 & _GEN_49)
                : s1_req_size[1]
                    ? ~(~tlb_sectored_entries_0_0_tag_v
                        & ~(tlb_sectored_entries_0_0_data_0[20])) & _GEN_49
                    : tlb_sectored_entries_0_0_tag_v & _GEN_49)
           : _GEN_49);
    tlb_sectored_entries_0_0_valid_1 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__T_149
                     ? ~(~tlb_sectored_entries_0_0_tag_v
                         & tlb_sectored_entries_0_0_data_1[0] | _GEN_54) & _GEN_50
                     : ~_GEN_54 & _GEN_50)
                : s1_req_size[1]
                    ? ~(~tlb_sectored_entries_0_0_tag_v
                        & ~(tlb_sectored_entries_0_0_data_1[20])) & _GEN_50
                    : tlb_sectored_entries_0_0_tag_v & _GEN_50)
           : _GEN_50);
    tlb_sectored_entries_0_0_valid_2 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__T_149
                     ? ~(~tlb_sectored_entries_0_0_tag_v
                         & tlb_sectored_entries_0_0_data_2[0] | _GEN_55) & _GEN_51
                     : ~_GEN_55 & _GEN_51)
                : s1_req_size[1]
                    ? ~(~tlb_sectored_entries_0_0_tag_v
                        & ~(tlb_sectored_entries_0_0_data_2[20])) & _GEN_51
                    : tlb_sectored_entries_0_0_tag_v & _GEN_51)
           : _GEN_51);
    tlb_sectored_entries_0_0_valid_3 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__T_149
                     ? ~(~tlb_sectored_entries_0_0_tag_v
                         & tlb_sectored_entries_0_0_data_3[0] | _GEN_56) & _GEN_52
                     : ~_GEN_56 & _GEN_52)
                : s1_req_size[1]
                    ? ~(~tlb_sectored_entries_0_0_tag_v
                        & ~(tlb_sectored_entries_0_0_data_3[20])) & _GEN_52
                    : tlb_sectored_entries_0_0_tag_v & _GEN_52)
           : _GEN_52);
    if (_GEN_36) begin
      tlb_superpage_entries_0_level <= {1'h0, io_ptw_resp_bits_level[0]};
      tlb_superpage_entries_0_tag_vpn <= tlb_r_refill_tag;
      tlb_superpage_entries_0_tag_v <= tlb_refill_v;
      tlb_superpage_entries_0_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         tlb_newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         tlb_newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         tlb_newEntry_sw,
         tlb_newEntry_sx,
         tlb_newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         tlb_newEntry_pw,
         tlb_newEntry_px,
         tlb_newEntry_pr,
         tlb_newEntry_ppp,
         tlb_newEntry_pal,
         tlb_newEntry_paa,
         tlb_newEntry_eff,
         tlb_newEntry_c,
         1'h0};
    end
    tlb_superpage_entries_0_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (_GEN_3[17:9] == 9'h0
                     ? ~(~tlb_superpage_entries_0_tag_v
                         & tlb_superpage_entries_0_data_0[0] | tlb__T_464) & _GEN_37
                     : ~tlb__T_464 & _GEN_37)
                : s1_req_size[1]
                    ? ~(~tlb_superpage_entries_0_tag_v
                        & ~(tlb_superpage_entries_0_data_0[20])) & _GEN_37
                    : tlb_superpage_entries_0_tag_v & _GEN_37)
           : _GEN_37);
    if (_GEN_38) begin
      tlb_superpage_entries_1_level <= {1'h0, io_ptw_resp_bits_level[0]};
      tlb_superpage_entries_1_tag_vpn <= tlb_r_refill_tag;
      tlb_superpage_entries_1_tag_v <= tlb_refill_v;
      tlb_superpage_entries_1_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         tlb_newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         tlb_newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         tlb_newEntry_sw,
         tlb_newEntry_sx,
         tlb_newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         tlb_newEntry_pw,
         tlb_newEntry_px,
         tlb_newEntry_pr,
         tlb_newEntry_ppp,
         tlb_newEntry_pal,
         tlb_newEntry_paa,
         tlb_newEntry_eff,
         tlb_newEntry_c,
         1'h0};
    end
    tlb_superpage_entries_1_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (_GEN_4[17:9] == 9'h0
                     ? ~(~tlb_superpage_entries_1_tag_v
                         & tlb_superpage_entries_1_data_0[0] | tlb__T_562) & _GEN_39
                     : ~tlb__T_562 & _GEN_39)
                : s1_req_size[1]
                    ? ~(~tlb_superpage_entries_1_tag_v
                        & ~(tlb_superpage_entries_1_data_0[20])) & _GEN_39
                    : tlb_superpage_entries_1_tag_v & _GEN_39)
           : _GEN_39);
    if (_GEN_40) begin
      tlb_superpage_entries_2_level <= {1'h0, io_ptw_resp_bits_level[0]};
      tlb_superpage_entries_2_tag_vpn <= tlb_r_refill_tag;
      tlb_superpage_entries_2_tag_v <= tlb_refill_v;
      tlb_superpage_entries_2_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         tlb_newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         tlb_newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         tlb_newEntry_sw,
         tlb_newEntry_sx,
         tlb_newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         tlb_newEntry_pw,
         tlb_newEntry_px,
         tlb_newEntry_pr,
         tlb_newEntry_ppp,
         tlb_newEntry_pal,
         tlb_newEntry_paa,
         tlb_newEntry_eff,
         tlb_newEntry_c,
         1'h0};
    end
    tlb_superpage_entries_2_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (_GEN_5[17:9] == 9'h0
                     ? ~(~tlb_superpage_entries_2_tag_v
                         & tlb_superpage_entries_2_data_0[0] | tlb__T_660) & _GEN_41
                     : ~tlb__T_660 & _GEN_41)
                : s1_req_size[1]
                    ? ~(~tlb_superpage_entries_2_tag_v
                        & ~(tlb_superpage_entries_2_data_0[20])) & _GEN_41
                    : tlb_superpage_entries_2_tag_v & _GEN_41)
           : _GEN_41);
    if (_GEN_42) begin
      tlb_superpage_entries_3_level <= {1'h0, io_ptw_resp_bits_level[0]};
      tlb_superpage_entries_3_tag_vpn <= tlb_r_refill_tag;
      tlb_superpage_entries_3_tag_v <= tlb_refill_v;
      tlb_superpage_entries_3_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         tlb_newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         tlb_newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         tlb_newEntry_sw,
         tlb_newEntry_sx,
         tlb_newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         tlb_newEntry_pw,
         tlb_newEntry_px,
         tlb_newEntry_pr,
         tlb_newEntry_ppp,
         tlb_newEntry_pal,
         tlb_newEntry_paa,
         tlb_newEntry_eff,
         tlb_newEntry_c,
         1'h0};
    end
    tlb_superpage_entries_3_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (_GEN_6[17:9] == 9'h0
                     ? ~(~tlb_superpage_entries_3_tag_v
                         & tlb_superpage_entries_3_data_0[0] | tlb__T_758) & _GEN_43
                     : ~tlb__T_758 & _GEN_43)
                : s1_req_size[1]
                    ? ~(~tlb_superpage_entries_3_tag_v
                        & ~(tlb_superpage_entries_3_data_0[20])) & _GEN_43
                    : tlb_superpage_entries_3_tag_v & _GEN_43)
           : _GEN_43);
    if (_GEN_34) begin
      tlb_special_entry_level <= io_ptw_resp_bits_level;
      tlb_special_entry_tag_vpn <= tlb_r_refill_tag;
      tlb_special_entry_tag_v <= tlb_refill_v;
      tlb_special_entry_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         tlb_newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         tlb_newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         tlb_newEntry_sw,
         tlb_newEntry_sx,
         tlb_newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         tlb_newEntry_pw,
         tlb_newEntry_px,
         tlb_newEntry_pr,
         tlb_newEntry_ppp,
         tlb_newEntry_pal,
         tlb_newEntry_paa,
         tlb_newEntry_eff,
         tlb_newEntry_c,
         1'h0};
    end
    tlb_special_entry_valid_0 <=
      ~tlb__T_1162
      & (tlb_io_sfence_valid
           ? (s1_req_size[0]
                ? (tlb__hitsVec_T_66[26:18] == 9'h0
                     ? ~(~tlb_special_entry_tag_v & tlb_special_entry_data_0[0]
                         | tlb__T_861) & _GEN_35
                     : ~tlb__T_861 & _GEN_35)
                : s1_req_size[1]
                    ? ~(~tlb_special_entry_tag_v & ~(tlb_special_entry_data_0[20]))
                      & _GEN_35
                    : tlb_special_entry_tag_v & _GEN_35)
           : _GEN_35);
    if (tlb__T_21) begin
      tlb_r_refill_tag <= s1_tlb_req_vaddr[38:12];
      if (&{tlb_superpage_entries_3_valid_0,
            tlb_superpage_entries_2_valid_0,
            tlb_superpage_entries_1_valid_0,
            tlb_superpage_entries_0_valid_0})
        tlb_r_superpage_repl_addr <=
          {tlb_state_reg_1[2],
           tlb_state_reg_1[2] ? tlb_state_reg_1[1] : tlb_state_reg_1[0]};
      else if (_GEN_18[0])
        tlb_r_superpage_repl_addr <= 2'h0;
      else if (_GEN_18[1])
        tlb_r_superpage_repl_addr <= 2'h1;
      else
        tlb_r_superpage_repl_addr <= {1'h1, ~(_GEN_18[2])};
      tlb_r_sectored_hit_valid <=
        (tlb_sectored_entries_0_0_valid_0 | tlb_sectored_entries_0_0_valid_1
         | tlb_sectored_entries_0_0_valid_2 | tlb_sectored_entries_0_0_valid_3)
        & tlb__sector_hits_T_4 == 25'h0 & ~tlb_sectored_entries_0_0_tag_v;
      tlb_r_need_gpa <= |tlb_real_hits;
    end
    tlb_r_vstage1_en <= ~tlb__T_21 & tlb_r_vstage1_en;
    tlb_r_stage2_en <= ~tlb__T_21 & tlb_r_stage2_en;
    if (_s2_want_victimize_T_1) begin
      probe_bits_param <= 2'h0;
      probe_bits_size <= 4'h0;
      probe_bits_address <=
        {s2_valid_flush_line ? s2_req_addr[31:12] : s2_meta_corrected_r[19:0],
         s2_req_addr[11:6],
         6'h0};
    end
    else if (_probe_bits_T) begin
      probe_bits_param <= auto_out_b_bits_param;
      probe_bits_size <= auto_out_b_bits_size;
      probe_bits_address <= auto_out_b_bits_address;
    end
    probe_bits_source <=
      ~_s2_want_victimize_T_1
      & (_probe_bits_T ? auto_out_b_bits_source : probe_bits_source);
    if (s0_clk_en) begin
      s1_req_addr <= s0_tlb_req_vaddr;
      s1_req_tag <= io_cpu_req_bits_tag;
      s1_req_cmd <= io_cpu_req_bits_cmd;
      s1_req_size <= io_cpu_req_bits_size;
      s1_req_signed <= io_cpu_req_bits_signed;
      s1_req_dprv <= io_cpu_req_bits_dprv;
      s1_req_dv <= io_cpu_req_bits_dv;
      s1_req_mask <= 8'h0;
      s1_tlb_req_vaddr <= s0_tlb_req_vaddr;
      s1_tlb_req_passthrough <= metaArb__grant_T_5 | io_cpu_req_bits_phys;
      s1_tlb_req_size <= io_cpu_req_bits_size;
      s1_tlb_req_cmd <= io_cpu_req_bits_cmd;
      s1_tlb_req_prv <= io_cpu_req_bits_dprv;
      s1_did_read <=
        ~dataArb__grant_T_1 & io_cpu_req_valid
        & (_pstore_drain_opportunistic_T | _pstore_drain_opportunistic_T_1
           | _pstore_drain_opportunistic_T_2 | _pstore_drain_opportunistic_T_28
           | _pstore_drain_opportunistic_T_30 | _pstore_drain_opportunistic_T_31
           | _pstore_drain_opportunistic_T_32 | _pstore_drain_opportunistic_T_33
           | _pstore_drain_opportunistic_T_37 | _pstore_drain_opportunistic_T_38
           | _pstore_drain_opportunistic_T_39 | _pstore_drain_opportunistic_T_40
           | _pstore_drain_opportunistic_T_41
           | (_pstore_drain_opportunistic_T_25 | _pstore_drain_opportunistic_T_50
              | _pstore_drain_opportunistic_T_28 | _pstore_drain_opportunistic_T_30
              | _pstore_drain_opportunistic_T_31 | _pstore_drain_opportunistic_T_32
              | _pstore_drain_opportunistic_T_33 | _pstore_drain_opportunistic_T_37
              | _pstore_drain_opportunistic_T_38 | _pstore_drain_opportunistic_T_39
              | _pstore_drain_opportunistic_T_40 | _pstore_drain_opportunistic_T_41)
           & _pstore_drain_opportunistic_T_50);
    end
    s1_req_no_alloc <= ~s0_clk_en & s1_req_no_alloc;
    s1_req_no_xcpt <= ~s0_clk_en & s1_req_no_xcpt;
    if (_GEN_58)
      release_ack_addr <= probe_bits_address;
    if (_GEN_57) begin
      uncachedReqs_0_addr <= s2_req_addr;
      uncachedReqs_0_tag <= s2_req_tag;
      uncachedReqs_0_size <= s2_req_size;
      uncachedReqs_0_signed <= s2_req_signed;
    end
    s1_read_mask <= s0_clk_en | s1_read_mask;
    s2_not_nacked_in_s1 <= ~s1_nack;
    if (_GEN_13) begin
      if (s1_valid_not_nacked) begin
        s2_req_addr <= {8'h0, tlb_ppn, s1_req_addr[11:0]};
        s2_req_tag <= s1_req_tag;
        s2_req_cmd <= s1_req_cmd;
        s2_req_size <= s1_req_size;
        s2_req_signed <= s1_req_signed;
      end
    end
    else begin
      s2_req_addr <= {8'h0, tlb_ppn, s1_req_addr[11:3], uncachedReqs_0_addr[2:0]};
      s2_req_tag <= uncachedReqs_0_tag;
      s2_req_cmd <= 5'h0;
      s2_req_size <= uncachedReqs_0_size;
      s2_req_signed <= uncachedReqs_0_signed;
      s2_uncached_resp_addr <= uncachedReqs_0_addr;
    end
    if (s1_valid_not_nacked) begin
      s2_req_dprv <= s1_req_dprv;
      s2_req_dv <= s1_req_dv;
      s2_req_no_alloc <= s1_req_no_alloc;
      s2_req_no_xcpt <= s1_req_no_xcpt;
      s2_req_mask <= s1_req_mask;
      s2_tlb_xcpt_pf_ld <=
        tlb_bad_va & tlb_cmd_read
        | (|((tlb_cmd_read
                ? ({1'h0,
                    ~(tlb_priv_rw_ok
                      & ({_tlb_entries_barrier_5_io_y_sr,
                          _tlb_entries_barrier_4_io_y_sr,
                          _tlb_entries_barrier_3_io_y_sr,
                          _tlb_entries_barrier_2_io_y_sr,
                          _tlb_entries_barrier_1_io_y_sr,
                          _tlb_entries_barrier_io_y_sr}
                         | (io_ptw_status_mxr
                              ? {_tlb_entries_barrier_5_io_y_sx,
                                 _tlb_entries_barrier_4_io_y_sx,
                                 _tlb_entries_barrier_3_io_y_sx,
                                 _tlb_entries_barrier_2_io_y_sx,
                                 _tlb_entries_barrier_1_io_y_sx,
                                 _tlb_entries_barrier_io_y_sx}
                              : 6'h0)))} & tlb__pf_ld_array_T_2 | tlb_ptw_pf_array)
                  & tlb__pf_ld_array_T_5
                : 7'h0) & tlb_hits));
      s2_tlb_xcpt_pf_st <=
        tlb_bad_va & tlb_cmd_write_perms
        | (|((tlb_cmd_write_perms
                ? ({1'h0,
                    ~(tlb_priv_rw_ok
                      & {_tlb_entries_barrier_5_io_y_sw,
                         _tlb_entries_barrier_4_io_y_sw,
                         _tlb_entries_barrier_3_io_y_sw,
                         _tlb_entries_barrier_2_io_y_sw,
                         _tlb_entries_barrier_1_io_y_sw,
                         _tlb_entries_barrier_io_y_sw})} & tlb__pf_ld_array_T_2
                   | tlb_ptw_pf_array) & tlb__pf_ld_array_T_5
                : 7'h0) & tlb_hits));
      s2_tlb_xcpt_ae_ld <=
        |((tlb_cmd_read
             ? tlb_ae_array
               | ~({{2{tlb_newEntry_pr}},
                    _tlb_entries_barrier_4_io_y_pr,
                    _tlb_entries_barrier_3_io_y_pr,
                    _tlb_entries_barrier_2_io_y_pr,
                    _tlb_entries_barrier_1_io_y_pr,
                    _tlb_entries_barrier_io_y_pr}
                   & {1'h1, ~_GEN_19, ~_GEN_20, ~_GEN_21, ~_GEN_22, ~_GEN_23, ~_GEN_24})
             : 7'h0) & tlb_hits);
      s2_tlb_xcpt_ae_st <=
        |(((tlb_cmd_write_perms
              ? tlb_ae_array
                | ~({{2{tlb_newEntry_pw}},
                     _tlb_entries_barrier_4_io_y_pw,
                     _tlb_entries_barrier_3_io_y_pw,
                     _tlb_entries_barrier_2_io_y_pw,
                     _tlb_entries_barrier_1_io_y_pw,
                     _tlb_entries_barrier_io_y_pw}
                    & {1'h1, ~_GEN_19, ~_GEN_20, ~_GEN_21, ~_GEN_22, ~_GEN_23, ~_GEN_24})
              : 7'h0) | (tlb_cmd_put_partial ? ~(tlb_ppp_array | tlb_c_array) : 7'h0)
           | (tlb__cmd_amo_logical_T_6 ? ~(tlb_pal_array | tlb_c_array) : 7'h0)
           | (tlb__cmd_amo_arithmetic_T_8 ? ~(tlb_paa_array | tlb_c_array) : 7'h0))
          & tlb_hits);
      s2_tlb_xcpt_ma_ld <= (|_GEN_25) & tlb_cmd_read;
      s2_tlb_xcpt_ma_st <= (|_GEN_25) & tlb_cmd_write;
      s2_pma_cacheable <= |(tlb_c_array & tlb_hits);
      s2_pma_must_alloc <=
        |(((tlb_cmd_put_partial ? ~tlb_ppp_array : 7'h0)
           | (tlb__cmd_amo_logical_T_6 ? ~tlb_pal_array : 7'h0)
           | (tlb__cmd_amo_arithmetic_T_8 ? ~tlb_paa_array : 7'h0)
           | {7{tlb__cmd_lrsc_T_2}}) & tlb_hits);
      s2_vaddr_r <= s1_req_addr;
      if (_s1_meta_hit_state_T)
        s2_hit_state_state <= _tag_array_0_ext_RW0_rdata[21:20];
      else
        s2_hit_state_state <= 2'h0;
    end
    s2_tlb_xcpt_gf_ld <= ~s1_valid_not_nacked & s2_tlb_xcpt_gf_ld;
    s2_tlb_xcpt_gf_st <= ~s1_valid_not_nacked & s2_tlb_xcpt_gf_st;
    s2_meta_correctable_errors <= ~s1_meta_clk_en & s2_meta_correctable_errors;
    s2_meta_uncorrectable_errors <= ~s1_meta_clk_en & s2_meta_uncorrectable_errors;
    if (s1_meta_clk_en)
      s2_meta_corrected_r <= _tag_array_0_ext_RW0_rdata;
    if (s1_valid | inWriteback | _io_cpu_replay_next_output)
      s2_data <=
        (_s2_data_T_1[0] ? _data_io_resp_0 : 64'h0)
        | (_s2_data_T_1[1] ? auto_out_d_bits_data : 64'h0);
    if (s1_probe) begin
      if (_s1_meta_hit_state_T)
        s2_probe_state_state <= _tag_array_0_ext_RW0_rdata[21:20];
      else
        s2_probe_state_state <= 2'h0;
    end
    s2_waw_hazard <= ~s1_valid_not_nacked & s2_waw_hazard;
    if (_T_227)
      lrscAddr <= s2_req_addr[39:6];
    if (s1_valid_not_nacked & s1_write) begin
      pstore1_cmd <= s1_req_cmd;
      pstore1_addr <= s1_req_addr;
      pstore1_data <= io_cpu_s1_data_data;
      if (_io_cpu_perf_canAcceptLoadThenLoad_T_51)
        pstore1_mask <= io_cpu_s1_data_mask;
      else
        pstore1_mask <= s1_mask_xwr;
      pstore1_rmw_r <=
        _io_cpu_perf_canAcceptLoadThenLoad_T_1 | _io_cpu_perf_canAcceptLoadThenLoad_T_2
        | _io_cpu_perf_canAcceptLoadThenLoad_T_3 | _io_cpu_perf_canAcceptLoadThenLoad_T_29
        | _io_cpu_perf_canAcceptLoadThenLoad_T_31
        | _io_cpu_perf_canAcceptLoadThenLoad_T_32
        | _io_cpu_perf_canAcceptLoadThenLoad_T_33
        | _io_cpu_perf_canAcceptLoadThenLoad_T_34
        | _io_cpu_perf_canAcceptLoadThenLoad_T_38
        | _io_cpu_perf_canAcceptLoadThenLoad_T_39
        | _io_cpu_perf_canAcceptLoadThenLoad_T_40
        | _io_cpu_perf_canAcceptLoadThenLoad_T_41
        | _io_cpu_perf_canAcceptLoadThenLoad_T_42
        | (_io_cpu_perf_canAcceptLoadThenLoad_T_26
           | _io_cpu_perf_canAcceptLoadThenLoad_T_51
           | _io_cpu_perf_canAcceptLoadThenLoad_T_29
           | _io_cpu_perf_canAcceptLoadThenLoad_T_31
           | _io_cpu_perf_canAcceptLoadThenLoad_T_32
           | _io_cpu_perf_canAcceptLoadThenLoad_T_33
           | _io_cpu_perf_canAcceptLoadThenLoad_T_34
           | _io_cpu_perf_canAcceptLoadThenLoad_T_38
           | _io_cpu_perf_canAcceptLoadThenLoad_T_39
           | _io_cpu_perf_canAcceptLoadThenLoad_T_40
           | _io_cpu_perf_canAcceptLoadThenLoad_T_41
           | _io_cpu_perf_canAcceptLoadThenLoad_T_42)
        & _io_cpu_perf_canAcceptLoadThenLoad_T_51;
    end
    pstore_drain_on_miss_REG <= _io_cpu_s2_nack_output;
    if (advance_pstore1) begin
      pstore2_addr <= pstore1_addr;
      pstore2_storegen_data_r <= _amoalus_0_io_out[7:0];
      pstore2_storegen_data_r_1 <= _amoalus_0_io_out[15:8];
      pstore2_storegen_data_r_2 <= _amoalus_0_io_out[23:16];
      pstore2_storegen_data_r_3 <= _amoalus_0_io_out[31:24];
      pstore2_storegen_data_r_4 <= _amoalus_0_io_out[39:32];
      pstore2_storegen_data_r_5 <= _amoalus_0_io_out[47:40];
      pstore2_storegen_data_r_6 <= _amoalus_0_io_out[55:48];
      pstore2_storegen_data_r_7 <= _amoalus_0_io_out[63:56];
      pstore2_storegen_mask <= pstore1_mask;
    end
    if (_GEN_14)
      blockUncachedGrant <= dataArb_io_in_0_valid;
    else
      blockUncachedGrant <= dataArb_io_out_valid;
    s1_release_data_valid <= ~dataArb__grant_T & dataArb_io_in_2_valid;
    s2_release_data_valid <= s1_release_data_valid & ~releaseRejected;
    io_cpu_s2_xcpt_REG <= tlb_io_req_valid & ~s1_req_no_xcpt & ~s1_nack;
    doUncachedResp <= _io_cpu_replay_next_output;
    REG <= reset;
    if (reset) begin
      tlb_state <= 2'h0;
      tlb_state_reg_1 <= 3'h0;
      s1_valid <= 1'h0;
      s1_probe <= 1'h0;
      cached_grant_wait <= 1'h0;
      resetting <= 1'h0;
      flushCounter <= 6'h0;
      release_ack_wait <= 1'h0;
      release_state <= 4'h0;
      uncachedInFlight_0 <= 1'h0;
      s2_valid <= 1'h0;
      s2_probe <= 1'h0;
      lrscCount <= 7'h0;
      pstore2_valid <= 1'h0;
      pstore1_held <= 1'h0;
      counter <= 9'h0;
      grantInProgress <= 1'h0;
      blockProbeAfterGrantCount <= 3'h0;
      counter_1 <= 9'h0;
      io_cpu_perf_release_counter <= 9'h0;
    end
    else begin
      if (io_ptw_resp_valid)
        tlb_state <= 2'h0;
      else if (tlb_state == 2'h2 & tlb_io_sfence_valid)
        tlb_state <= 2'h3;
      else if (tlb_io_ptw_req_valid) begin
        if (io_ptw_req_ready)
          tlb_state <= {1'h1, tlb_io_sfence_valid};
        else if (tlb_io_sfence_valid)
          tlb_state <= 2'h0;
        else if (tlb__T_21)
          tlb_state <= 2'h1;
      end
      else if (tlb__T_21)
        tlb_state <= 2'h1;
      if (tlb_io_req_valid & tlb_vm_enabled
          & (tlb_superpage_entries_0_valid_0 & ~tlb_superpage_entries_0_tag_v
             & _GEN_3[17:9] == 9'h0
             & (tlb__superpage_hits_ignore_T_1 | _GEN_3[8:0] == 9'h0)
             | tlb__superpage_hits_T_23 | tlb__superpage_hits_T_37
             | tlb__superpage_hits_T_51))
        tlb_state_reg_1 <=
          {~(|tlb_hi_1),
           (|tlb_hi_1) ? ~tlb__T_16 : tlb_state_reg_1[1],
           (|tlb_hi_1) ? tlb_state_reg_1[0] : ~tlb__T_16};
      s1_valid <= _io_cpu_req_ready_output & io_cpu_req_valid;
      s1_probe <= _GEN_27 | _probe_bits_T;
      cached_grant_wait <=
        ~_GEN_26 & (_io_cpu_perf_acquire_T & ~s2_uncached | cached_grant_wait);
      resetting <= ~(resetting & flushCounterNext[6]) & (REG | resetting);
      if (resetting)
        flushCounter <= flushCounterNext[5:0];
      release_ack_wait <=
        _GEN_58
        | (~_io_errors_bus_valid_T | grantIsCached | grantIsUncached | ~grantIsVoluntary)
        & release_ack_wait;
      if (~metaArb__grant_T_2 & metaArb_io_in_4_valid)
        release_state <= 4'h0;
      else if (_T_293 & releaseDone)
        release_state <= 4'h6;
      else if (_T_288 & releaseDone | _T_287 & releaseDone)
        release_state <= 4'h7;
      else if (_T_286 & releaseDone | _GEN_27)
        release_state <= 4'h0;
      else if (s2_probe) begin
        if (s2_meta_error)
          release_state <= 4'h4;
        else if (s2_prb_ack_data)
          release_state <= 4'h2;
        else if (|s2_probe_state_state)
          release_state <= {1'h0, releaseDone, 2'h3};
        else if (releaseDone)
          release_state <= 4'h0;
        else
          release_state <= 4'h5;
      end
      else if (_s2_want_victimize_T_1) begin
        if (s2_victim_dirty & ~(s2_valid_flush_line & s2_req_size[1]))
          release_state <= 4'h1;
        else
          release_state <= 4'h6;
      end
      uncachedInFlight_0 <=
        (~_io_errors_bus_valid_T | grantIsCached | ~(grantIsUncached & _T_257))
        & (_GEN_57 | uncachedInFlight_0);
      s2_valid <= s1_valid_masked & ~s1_sfence;
      s2_probe <= s1_probe;
      if (s1_probe)
        lrscCount <= 7'h0;
      else if (s2_valid_masked & (|(lrscCount[6:2])))
        lrscCount <= 7'h3;
      else if (|lrscCount)
        lrscCount <= lrscCount - 7'h1;
      else if (_T_227) begin
        if (s2_hit)
          lrscCount <= 7'h4F;
        else
          lrscCount <= 7'h0;
      end
      pstore2_valid <= pstore2_valid & ~dataArb_io_in_0_bits_write | advance_pstore1;
      pstore1_held <=
        (_pstore1_held_T & ~s2_sc_fail | pstore1_held) & pstore2_valid
        & ~dataArb_io_in_0_bits_write;
      if (_io_errors_bus_valid_T) begin
        if (|counter)
          counter <= counter1;
        else if (auto_out_d_bits_opcode[0])
          counter <= ~(_beats1_decode_T_1[11:3]);
        else
          counter <= 9'h0;
      end
      if (_GEN_12)
        grantInProgress <= ~d_last;
      if (_GEN_26)
        blockProbeAfterGrantCount <= 3'h7;
      else if (|blockProbeAfterGrantCount)
        blockProbeAfterGrantCount <= blockProbeAfterGrantCount - 3'h1;
      if (_T_309) begin
        if (c_first) begin
          if (nodeOut_c_bits_opcode[0])
            counter_1 <= ~(_beats1_decode_T_5[11:3]);
          else
            counter_1 <= 9'h0;
        end
        else
          counter_1 <= counter1_1;
        if (io_cpu_perf_release_counter == 9'h0) begin
          if (nodeOut_c_bits_opcode[0])
            io_cpu_perf_release_counter <=
              ~(_io_cpu_perf_release_beats1_decode_T_1[11:3]);
          else
            io_cpu_perf_release_counter <= 9'h0;
        end
        else
          io_cpu_perf_release_counter <= io_cpu_perf_release_counter - 9'h1;
      end
    end
  end // always @(posedge)
  OptimizationBarrier tlb_mpu_ppn_barrier (
    .io_x_ppn      (tlb_special_entry_data_0[41:22]),
    .io_x_u        (tlb_special_entry_data_0[21]),
    .io_x_ae_ptw   (tlb_special_entry_data_0[19]),
    .io_x_ae_final (tlb_special_entry_data_0[18]),
    .io_x_pf       (tlb_special_entry_data_0[16]),
    .io_x_gf       (tlb_special_entry_data_0[15]),
    .io_x_sw       (tlb_special_entry_data_0[14]),
    .io_x_sx       (tlb_special_entry_data_0[13]),
    .io_x_sr       (tlb_special_entry_data_0[12]),
    .io_x_pw       (tlb_special_entry_data_0[8]),
    .io_x_px       (tlb_special_entry_data_0[7]),
    .io_x_pr       (tlb_special_entry_data_0[6]),
    .io_x_ppp      (tlb_special_entry_data_0[5]),
    .io_x_pal      (tlb_special_entry_data_0[4]),
    .io_x_paa      (tlb_special_entry_data_0[3]),
    .io_x_eff      (tlb_special_entry_data_0[2]),
    .io_x_c        (tlb_special_entry_data_0[1]),
    .io_y_ppn      (_tlb_mpu_ppn_barrier_io_y_ppn),
    .io_y_u        (_tlb_mpu_ppn_barrier_io_y_u),
    .io_y_ae_ptw   (_tlb_mpu_ppn_barrier_io_y_ae_ptw),
    .io_y_ae_final (_tlb_mpu_ppn_barrier_io_y_ae_final),
    .io_y_pf       (_tlb_mpu_ppn_barrier_io_y_pf),
    .io_y_gf       (_tlb_mpu_ppn_barrier_io_y_gf),
    .io_y_sw       (_tlb_mpu_ppn_barrier_io_y_sw),
    .io_y_sx       (_tlb_mpu_ppn_barrier_io_y_sx),
    .io_y_sr       (_tlb_mpu_ppn_barrier_io_y_sr),
    .io_y_pw       (_tlb_mpu_ppn_barrier_io_y_pw),
    .io_y_px       (_tlb_mpu_ppn_barrier_io_y_px),
    .io_y_pr       (_tlb_mpu_ppn_barrier_io_y_pr),
    .io_y_ppp      (_tlb_mpu_ppn_barrier_io_y_ppp),
    .io_y_pal      (_tlb_mpu_ppn_barrier_io_y_pal),
    .io_y_paa      (_tlb_mpu_ppn_barrier_io_y_paa),
    .io_y_eff      (_tlb_mpu_ppn_barrier_io_y_eff),
    .io_y_c        (_tlb_mpu_ppn_barrier_io_y_c)
  );
  PMPChecker tlb_pmp (
    .io_prv         (tlb_mpu_priv[1:0]),
    .io_pmp_0_cfg_l (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr  (io_ptw_pmp_0_addr),
    .io_pmp_0_mask  (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr  (io_ptw_pmp_1_addr),
    .io_pmp_1_mask  (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr  (io_ptw_pmp_2_addr),
    .io_pmp_2_mask  (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr  (io_ptw_pmp_3_addr),
    .io_pmp_3_mask  (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr  (io_ptw_pmp_4_addr),
    .io_pmp_4_mask  (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr  (io_ptw_pmp_5_addr),
    .io_pmp_5_mask  (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr  (io_ptw_pmp_6_addr),
    .io_pmp_6_mask  (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr  (io_ptw_pmp_7_addr),
    .io_pmp_7_mask  (io_ptw_pmp_7_mask),
    .io_addr        ({tlb_mpu_ppn[19:0], s1_tlb_req_vaddr[11:0]}),
    .io_size        (s1_tlb_req_size),
    .io_r           (_tlb_pmp_io_r),
    .io_w           (_tlb_pmp_io_w),
    .io_x           (_tlb_pmp_io_x)
  );
  OptimizationBarrier tlb_entries_barrier (
    .io_x_ppn      (casez_tmp_0[41:22]),
    .io_x_u        (casez_tmp_0[21]),
    .io_x_ae_ptw   (casez_tmp_0[19]),
    .io_x_ae_final (casez_tmp_0[18]),
    .io_x_pf       (casez_tmp_0[16]),
    .io_x_gf       (casez_tmp_0[15]),
    .io_x_sw       (casez_tmp_0[14]),
    .io_x_sx       (casez_tmp_0[13]),
    .io_x_sr       (casez_tmp_0[12]),
    .io_x_pw       (casez_tmp_0[8]),
    .io_x_px       (casez_tmp_0[7]),
    .io_x_pr       (casez_tmp_0[6]),
    .io_x_ppp      (casez_tmp_0[5]),
    .io_x_pal      (casez_tmp_0[4]),
    .io_x_paa      (casez_tmp_0[3]),
    .io_x_eff      (casez_tmp_0[2]),
    .io_x_c        (casez_tmp_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_io_y_c)
  );
  OptimizationBarrier tlb_entries_barrier_1 (
    .io_x_ppn      (tlb_superpage_entries_0_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_0_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_0_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_0_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_0_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_0_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_0_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_0_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_0_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_0_data_0[8]),
    .io_x_px       (tlb_superpage_entries_0_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_0_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_0_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_0_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_0_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_0_data_0[2]),
    .io_x_c        (tlb_superpage_entries_0_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_1_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_1_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_1_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_1_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_1_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_1_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_1_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_1_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_1_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_1_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_1_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_1_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_1_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_1_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_1_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_1_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_1_io_y_c)
  );
  OptimizationBarrier tlb_entries_barrier_2 (
    .io_x_ppn      (tlb_superpage_entries_1_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_1_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_1_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_1_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_1_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_1_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_1_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_1_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_1_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_1_data_0[8]),
    .io_x_px       (tlb_superpage_entries_1_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_1_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_1_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_1_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_1_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_1_data_0[2]),
    .io_x_c        (tlb_superpage_entries_1_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_2_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_2_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_2_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_2_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_2_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_2_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_2_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_2_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_2_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_2_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_2_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_2_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_2_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_2_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_2_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_2_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_2_io_y_c)
  );
  OptimizationBarrier tlb_entries_barrier_3 (
    .io_x_ppn      (tlb_superpage_entries_2_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_2_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_2_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_2_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_2_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_2_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_2_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_2_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_2_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_2_data_0[8]),
    .io_x_px       (tlb_superpage_entries_2_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_2_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_2_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_2_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_2_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_2_data_0[2]),
    .io_x_c        (tlb_superpage_entries_2_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_3_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_3_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_3_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_3_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_3_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_3_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_3_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_3_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_3_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_3_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_3_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_3_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_3_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_3_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_3_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_3_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_3_io_y_c)
  );
  OptimizationBarrier tlb_entries_barrier_4 (
    .io_x_ppn      (tlb_superpage_entries_3_data_0[41:22]),
    .io_x_u        (tlb_superpage_entries_3_data_0[21]),
    .io_x_ae_ptw   (tlb_superpage_entries_3_data_0[19]),
    .io_x_ae_final (tlb_superpage_entries_3_data_0[18]),
    .io_x_pf       (tlb_superpage_entries_3_data_0[16]),
    .io_x_gf       (tlb_superpage_entries_3_data_0[15]),
    .io_x_sw       (tlb_superpage_entries_3_data_0[14]),
    .io_x_sx       (tlb_superpage_entries_3_data_0[13]),
    .io_x_sr       (tlb_superpage_entries_3_data_0[12]),
    .io_x_pw       (tlb_superpage_entries_3_data_0[8]),
    .io_x_px       (tlb_superpage_entries_3_data_0[7]),
    .io_x_pr       (tlb_superpage_entries_3_data_0[6]),
    .io_x_ppp      (tlb_superpage_entries_3_data_0[5]),
    .io_x_pal      (tlb_superpage_entries_3_data_0[4]),
    .io_x_paa      (tlb_superpage_entries_3_data_0[3]),
    .io_x_eff      (tlb_superpage_entries_3_data_0[2]),
    .io_x_c        (tlb_superpage_entries_3_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_4_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_4_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_4_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_4_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_4_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_4_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_4_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_4_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_4_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_4_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_4_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_4_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_4_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_4_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_4_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_4_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_4_io_y_c)
  );
  OptimizationBarrier tlb_entries_barrier_5 (
    .io_x_ppn      (tlb_special_entry_data_0[41:22]),
    .io_x_u        (tlb_special_entry_data_0[21]),
    .io_x_ae_ptw   (tlb_special_entry_data_0[19]),
    .io_x_ae_final (tlb_special_entry_data_0[18]),
    .io_x_pf       (tlb_special_entry_data_0[16]),
    .io_x_gf       (tlb_special_entry_data_0[15]),
    .io_x_sw       (tlb_special_entry_data_0[14]),
    .io_x_sx       (tlb_special_entry_data_0[13]),
    .io_x_sr       (tlb_special_entry_data_0[12]),
    .io_x_pw       (tlb_special_entry_data_0[8]),
    .io_x_px       (tlb_special_entry_data_0[7]),
    .io_x_pr       (tlb_special_entry_data_0[6]),
    .io_x_ppp      (tlb_special_entry_data_0[5]),
    .io_x_pal      (tlb_special_entry_data_0[4]),
    .io_x_paa      (tlb_special_entry_data_0[3]),
    .io_x_eff      (tlb_special_entry_data_0[2]),
    .io_x_c        (tlb_special_entry_data_0[1]),
    .io_y_ppn      (_tlb_entries_barrier_5_io_y_ppn),
    .io_y_u        (_tlb_entries_barrier_5_io_y_u),
    .io_y_ae_ptw   (_tlb_entries_barrier_5_io_y_ae_ptw),
    .io_y_ae_final (_tlb_entries_barrier_5_io_y_ae_final),
    .io_y_pf       (_tlb_entries_barrier_5_io_y_pf),
    .io_y_gf       (_tlb_entries_barrier_5_io_y_gf),
    .io_y_sw       (_tlb_entries_barrier_5_io_y_sw),
    .io_y_sx       (_tlb_entries_barrier_5_io_y_sx),
    .io_y_sr       (_tlb_entries_barrier_5_io_y_sr),
    .io_y_pw       (_tlb_entries_barrier_5_io_y_pw),
    .io_y_px       (_tlb_entries_barrier_5_io_y_px),
    .io_y_pr       (_tlb_entries_barrier_5_io_y_pr),
    .io_y_ppp      (_tlb_entries_barrier_5_io_y_ppp),
    .io_y_pal      (_tlb_entries_barrier_5_io_y_pal),
    .io_y_paa      (_tlb_entries_barrier_5_io_y_paa),
    .io_y_eff      (_tlb_entries_barrier_5_io_y_eff),
    .io_y_c        (_tlb_entries_barrier_5_io_y_c)
  );
  OptimizationBarrier pma_checker_mpu_ppn_barrier (
    .io_x_ppn      (pma_checker__mpu_ppn_WIRE_1[41:22]),
    .io_x_u        (pma_checker__mpu_ppn_WIRE_1[21]),
    .io_x_ae_ptw   (pma_checker__mpu_ppn_WIRE_1[19]),
    .io_x_ae_final (pma_checker__mpu_ppn_WIRE_1[18]),
    .io_x_pf       (pma_checker__mpu_ppn_WIRE_1[16]),
    .io_x_gf       (pma_checker__mpu_ppn_WIRE_1[15]),
    .io_x_sw       (pma_checker__mpu_ppn_WIRE_1[14]),
    .io_x_sx       (pma_checker__mpu_ppn_WIRE_1[13]),
    .io_x_sr       (pma_checker__mpu_ppn_WIRE_1[12]),
    .io_x_pw       (pma_checker__mpu_ppn_WIRE_1[8]),
    .io_x_px       (pma_checker__mpu_ppn_WIRE_1[7]),
    .io_x_pr       (pma_checker__mpu_ppn_WIRE_1[6]),
    .io_x_ppp      (pma_checker__mpu_ppn_WIRE_1[5]),
    .io_x_pal      (pma_checker__mpu_ppn_WIRE_1[4]),
    .io_x_paa      (pma_checker__mpu_ppn_WIRE_1[3]),
    .io_x_eff      (pma_checker__mpu_ppn_WIRE_1[2]),
    .io_x_c        (pma_checker__mpu_ppn_WIRE_1[1]),
    .io_y_ppn      (_pma_checker_mpu_ppn_barrier_io_y_ppn),
    .io_y_u        (_pma_checker_mpu_ppn_barrier_io_y_u),
    .io_y_ae_ptw   (_pma_checker_mpu_ppn_barrier_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_mpu_ppn_barrier_io_y_ae_final),
    .io_y_pf       (_pma_checker_mpu_ppn_barrier_io_y_pf),
    .io_y_gf       (_pma_checker_mpu_ppn_barrier_io_y_gf),
    .io_y_sw       (_pma_checker_mpu_ppn_barrier_io_y_sw),
    .io_y_sx       (_pma_checker_mpu_ppn_barrier_io_y_sx),
    .io_y_sr       (_pma_checker_mpu_ppn_barrier_io_y_sr),
    .io_y_pw       (_pma_checker_mpu_ppn_barrier_io_y_pw),
    .io_y_px       (_pma_checker_mpu_ppn_barrier_io_y_px),
    .io_y_pr       (_pma_checker_mpu_ppn_barrier_io_y_pr),
    .io_y_ppp      (_pma_checker_mpu_ppn_barrier_io_y_ppp),
    .io_y_pal      (_pma_checker_mpu_ppn_barrier_io_y_pal),
    .io_y_paa      (_pma_checker_mpu_ppn_barrier_io_y_paa),
    .io_y_eff      (_pma_checker_mpu_ppn_barrier_io_y_eff),
    .io_y_c        (_pma_checker_mpu_ppn_barrier_io_y_c)
  );
  PMPChecker pma_checker_pmp (
    .io_prv         (2'h1),
    .io_pmp_0_cfg_l (1'h0),
    .io_pmp_0_cfg_a (2'h0),
    .io_pmp_0_cfg_x (1'h0),
    .io_pmp_0_cfg_w (1'h0),
    .io_pmp_0_cfg_r (1'h0),
    .io_pmp_0_addr  (30'h0),
    .io_pmp_0_mask  (32'h0),
    .io_pmp_1_cfg_l (1'h0),
    .io_pmp_1_cfg_a (2'h0),
    .io_pmp_1_cfg_x (1'h0),
    .io_pmp_1_cfg_w (1'h0),
    .io_pmp_1_cfg_r (1'h0),
    .io_pmp_1_addr  (30'h0),
    .io_pmp_1_mask  (32'h0),
    .io_pmp_2_cfg_l (1'h0),
    .io_pmp_2_cfg_a (2'h0),
    .io_pmp_2_cfg_x (1'h0),
    .io_pmp_2_cfg_w (1'h0),
    .io_pmp_2_cfg_r (1'h0),
    .io_pmp_2_addr  (30'h0),
    .io_pmp_2_mask  (32'h0),
    .io_pmp_3_cfg_l (1'h0),
    .io_pmp_3_cfg_a (2'h0),
    .io_pmp_3_cfg_x (1'h0),
    .io_pmp_3_cfg_w (1'h0),
    .io_pmp_3_cfg_r (1'h0),
    .io_pmp_3_addr  (30'h0),
    .io_pmp_3_mask  (32'h0),
    .io_pmp_4_cfg_l (1'h0),
    .io_pmp_4_cfg_a (2'h0),
    .io_pmp_4_cfg_x (1'h0),
    .io_pmp_4_cfg_w (1'h0),
    .io_pmp_4_cfg_r (1'h0),
    .io_pmp_4_addr  (30'h0),
    .io_pmp_4_mask  (32'h0),
    .io_pmp_5_cfg_l (1'h0),
    .io_pmp_5_cfg_a (2'h0),
    .io_pmp_5_cfg_x (1'h0),
    .io_pmp_5_cfg_w (1'h0),
    .io_pmp_5_cfg_r (1'h0),
    .io_pmp_5_addr  (30'h0),
    .io_pmp_5_mask  (32'h0),
    .io_pmp_6_cfg_l (1'h0),
    .io_pmp_6_cfg_a (2'h0),
    .io_pmp_6_cfg_x (1'h0),
    .io_pmp_6_cfg_w (1'h0),
    .io_pmp_6_cfg_r (1'h0),
    .io_pmp_6_addr  (30'h0),
    .io_pmp_6_mask  (32'h0),
    .io_pmp_7_cfg_l (1'h0),
    .io_pmp_7_cfg_a (2'h0),
    .io_pmp_7_cfg_x (1'h0),
    .io_pmp_7_cfg_w (1'h0),
    .io_pmp_7_cfg_r (1'h0),
    .io_pmp_7_addr  (30'h0),
    .io_pmp_7_mask  (32'h0),
    .io_addr        (s1_req_addr[31:0]),
    .io_size        (s1_req_size),
    .io_r           (_pma_checker_pmp_io_r),
    .io_w           (_pma_checker_pmp_io_w),
    .io_x           (_pma_checker_pmp_io_x)
  );
  OptimizationBarrier pma_checker_entries_barrier (
    .io_x_ppn      (20'h0),
    .io_x_u        (1'h0),
    .io_x_ae_ptw   (1'h0),
    .io_x_ae_final (1'h0),
    .io_x_pf       (1'h0),
    .io_x_gf       (1'h0),
    .io_x_sw       (1'h0),
    .io_x_sx       (1'h0),
    .io_x_sr       (1'h0),
    .io_x_pw       (1'h0),
    .io_x_px       (1'h0),
    .io_x_pr       (1'h0),
    .io_x_ppp      (1'h0),
    .io_x_pal      (1'h0),
    .io_x_paa      (1'h0),
    .io_x_eff      (1'h0),
    .io_x_c        (1'h0),
    .io_y_ppn      (_pma_checker_entries_barrier_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_io_y_c)
  );
  OptimizationBarrier pma_checker_entries_barrier_1 (
    .io_x_ppn      (pma_checker__entries_WIRE_3[41:22]),
    .io_x_u        (pma_checker__entries_WIRE_3[21]),
    .io_x_ae_ptw   (pma_checker__entries_WIRE_3[19]),
    .io_x_ae_final (pma_checker__entries_WIRE_3[18]),
    .io_x_pf       (pma_checker__entries_WIRE_3[16]),
    .io_x_gf       (pma_checker__entries_WIRE_3[15]),
    .io_x_sw       (pma_checker__entries_WIRE_3[14]),
    .io_x_sx       (pma_checker__entries_WIRE_3[13]),
    .io_x_sr       (pma_checker__entries_WIRE_3[12]),
    .io_x_pw       (pma_checker__entries_WIRE_3[8]),
    .io_x_px       (pma_checker__entries_WIRE_3[7]),
    .io_x_pr       (pma_checker__entries_WIRE_3[6]),
    .io_x_ppp      (pma_checker__entries_WIRE_3[5]),
    .io_x_pal      (pma_checker__entries_WIRE_3[4]),
    .io_x_paa      (pma_checker__entries_WIRE_3[3]),
    .io_x_eff      (pma_checker__entries_WIRE_3[2]),
    .io_x_c        (pma_checker__entries_WIRE_3[1]),
    .io_y_ppn      (_pma_checker_entries_barrier_1_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_1_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_1_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_1_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_1_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_1_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_1_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_1_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_1_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_1_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_1_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_1_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_1_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_1_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_1_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_1_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_1_io_y_c)
  );
  OptimizationBarrier pma_checker_entries_barrier_2 (
    .io_x_ppn      (pma_checker__entries_WIRE_5[41:22]),
    .io_x_u        (pma_checker__entries_WIRE_5[21]),
    .io_x_ae_ptw   (pma_checker__entries_WIRE_5[19]),
    .io_x_ae_final (pma_checker__entries_WIRE_5[18]),
    .io_x_pf       (pma_checker__entries_WIRE_5[16]),
    .io_x_gf       (pma_checker__entries_WIRE_5[15]),
    .io_x_sw       (pma_checker__entries_WIRE_5[14]),
    .io_x_sx       (pma_checker__entries_WIRE_5[13]),
    .io_x_sr       (pma_checker__entries_WIRE_5[12]),
    .io_x_pw       (pma_checker__entries_WIRE_5[8]),
    .io_x_px       (pma_checker__entries_WIRE_5[7]),
    .io_x_pr       (pma_checker__entries_WIRE_5[6]),
    .io_x_ppp      (pma_checker__entries_WIRE_5[5]),
    .io_x_pal      (pma_checker__entries_WIRE_5[4]),
    .io_x_paa      (pma_checker__entries_WIRE_5[3]),
    .io_x_eff      (pma_checker__entries_WIRE_5[2]),
    .io_x_c        (pma_checker__entries_WIRE_5[1]),
    .io_y_ppn      (_pma_checker_entries_barrier_2_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_2_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_2_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_2_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_2_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_2_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_2_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_2_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_2_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_2_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_2_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_2_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_2_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_2_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_2_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_2_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_2_io_y_c)
  );
  OptimizationBarrier pma_checker_entries_barrier_3 (
    .io_x_ppn      (pma_checker__entries_WIRE_7[41:22]),
    .io_x_u        (pma_checker__entries_WIRE_7[21]),
    .io_x_ae_ptw   (pma_checker__entries_WIRE_7[19]),
    .io_x_ae_final (pma_checker__entries_WIRE_7[18]),
    .io_x_pf       (pma_checker__entries_WIRE_7[16]),
    .io_x_gf       (pma_checker__entries_WIRE_7[15]),
    .io_x_sw       (pma_checker__entries_WIRE_7[14]),
    .io_x_sx       (pma_checker__entries_WIRE_7[13]),
    .io_x_sr       (pma_checker__entries_WIRE_7[12]),
    .io_x_pw       (pma_checker__entries_WIRE_7[8]),
    .io_x_px       (pma_checker__entries_WIRE_7[7]),
    .io_x_pr       (pma_checker__entries_WIRE_7[6]),
    .io_x_ppp      (pma_checker__entries_WIRE_7[5]),
    .io_x_pal      (pma_checker__entries_WIRE_7[4]),
    .io_x_paa      (pma_checker__entries_WIRE_7[3]),
    .io_x_eff      (pma_checker__entries_WIRE_7[2]),
    .io_x_c        (pma_checker__entries_WIRE_7[1]),
    .io_y_ppn      (_pma_checker_entries_barrier_3_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_3_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_3_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_3_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_3_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_3_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_3_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_3_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_3_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_3_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_3_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_3_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_3_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_3_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_3_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_3_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_3_io_y_c)
  );
  OptimizationBarrier pma_checker_entries_barrier_4 (
    .io_x_ppn      (pma_checker__entries_WIRE_9[41:22]),
    .io_x_u        (pma_checker__entries_WIRE_9[21]),
    .io_x_ae_ptw   (pma_checker__entries_WIRE_9[19]),
    .io_x_ae_final (pma_checker__entries_WIRE_9[18]),
    .io_x_pf       (pma_checker__entries_WIRE_9[16]),
    .io_x_gf       (pma_checker__entries_WIRE_9[15]),
    .io_x_sw       (pma_checker__entries_WIRE_9[14]),
    .io_x_sx       (pma_checker__entries_WIRE_9[13]),
    .io_x_sr       (pma_checker__entries_WIRE_9[12]),
    .io_x_pw       (pma_checker__entries_WIRE_9[8]),
    .io_x_px       (pma_checker__entries_WIRE_9[7]),
    .io_x_pr       (pma_checker__entries_WIRE_9[6]),
    .io_x_ppp      (pma_checker__entries_WIRE_9[5]),
    .io_x_pal      (pma_checker__entries_WIRE_9[4]),
    .io_x_paa      (pma_checker__entries_WIRE_9[3]),
    .io_x_eff      (pma_checker__entries_WIRE_9[2]),
    .io_x_c        (pma_checker__entries_WIRE_9[1]),
    .io_y_ppn      (_pma_checker_entries_barrier_4_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_4_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_4_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_4_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_4_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_4_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_4_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_4_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_4_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_4_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_4_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_4_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_4_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_4_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_4_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_4_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_4_io_y_c)
  );
  OptimizationBarrier pma_checker_entries_barrier_5 (
    .io_x_ppn      (pma_checker__entries_WIRE_11[41:22]),
    .io_x_u        (pma_checker__entries_WIRE_11[21]),
    .io_x_ae_ptw   (pma_checker__entries_WIRE_11[19]),
    .io_x_ae_final (pma_checker__entries_WIRE_11[18]),
    .io_x_pf       (pma_checker__entries_WIRE_11[16]),
    .io_x_gf       (pma_checker__entries_WIRE_11[15]),
    .io_x_sw       (pma_checker__entries_WIRE_11[14]),
    .io_x_sx       (pma_checker__entries_WIRE_11[13]),
    .io_x_sr       (pma_checker__entries_WIRE_11[12]),
    .io_x_pw       (pma_checker__entries_WIRE_11[8]),
    .io_x_px       (pma_checker__entries_WIRE_11[7]),
    .io_x_pr       (pma_checker__entries_WIRE_11[6]),
    .io_x_ppp      (pma_checker__entries_WIRE_11[5]),
    .io_x_pal      (pma_checker__entries_WIRE_11[4]),
    .io_x_paa      (pma_checker__entries_WIRE_11[3]),
    .io_x_eff      (pma_checker__entries_WIRE_11[2]),
    .io_x_c        (pma_checker__entries_WIRE_11[1]),
    .io_y_ppn      (_pma_checker_entries_barrier_5_io_y_ppn),
    .io_y_u        (_pma_checker_entries_barrier_5_io_y_u),
    .io_y_ae_ptw   (_pma_checker_entries_barrier_5_io_y_ae_ptw),
    .io_y_ae_final (_pma_checker_entries_barrier_5_io_y_ae_final),
    .io_y_pf       (_pma_checker_entries_barrier_5_io_y_pf),
    .io_y_gf       (_pma_checker_entries_barrier_5_io_y_gf),
    .io_y_sw       (_pma_checker_entries_barrier_5_io_y_sw),
    .io_y_sx       (_pma_checker_entries_barrier_5_io_y_sx),
    .io_y_sr       (_pma_checker_entries_barrier_5_io_y_sr),
    .io_y_pw       (_pma_checker_entries_barrier_5_io_y_pw),
    .io_y_px       (_pma_checker_entries_barrier_5_io_y_px),
    .io_y_pr       (_pma_checker_entries_barrier_5_io_y_pr),
    .io_y_ppp      (_pma_checker_entries_barrier_5_io_y_ppp),
    .io_y_pal      (_pma_checker_entries_barrier_5_io_y_pal),
    .io_y_paa      (_pma_checker_entries_barrier_5_io_y_paa),
    .io_y_eff      (_pma_checker_entries_barrier_5_io_y_eff),
    .io_y_c        (_pma_checker_entries_barrier_5_io_y_c)
  );
  tag_array_0_combMem_0 tag_array_0_ext (
    .RW0_addr
      (resetting
         ? flushCounter
         : metaArb_io_in_1_valid
             ? metaArb_io_in_1_bits_idx
             : _GEN_7
                 ? metaArb_io_in_3_bits_idx
                 : metaArb_io_in_4_valid
                     ? metaArb_io_in_4_bits_idx
                     : metaArb_io_in_6_valid
                         ? metaArb_io_in_6_bits_idx
                         : metaArb_io_in_7_bits_idx),
    .RW0_en    (readEnable | writeEnable),
    .RW0_clk   (clock),
    .RW0_wmode (metaArb_io_out_bits_write),
    .RW0_wdata
      (resetting
         ? 22'h0
         : metaArb_io_in_1_valid
             ? metaArb_io_in_1_bits_data
             : metaArb_io_in_2_valid
                 ? metaArb_io_in_2_bits_data
                 : metaArb_io_in_3_valid
                     ? metaArb_io_in_3_bits_data
                     : metaArb_io_in_7_bits_data),
    .RW0_rdata (_tag_array_0_ext_RW0_rdata)
  );
  DCacheDataArray data (
    .clock               (clock),
    .io_req_valid        (dataArb_io_out_valid),
    .io_req_bits_addr
      (dataArb_io_in_0_valid
         ? dataArb_io_in_0_bits_addr
         : dataArb_io_in_1_valid
             ? dataArb_io_in_1_bits_addr
             : dataArb_io_in_2_valid ? _GEN : dataArb_io_in_3_bits_addr),
    .io_req_bits_write
      (dataArb_io_in_0_valid
         ? dataArb_io_in_0_bits_write
         : dataArb_io_in_1_valid & _GEN_0),
    .io_req_bits_wdata
      (dataArb_io_in_0_valid ? dataArb_io_in_0_bits_wdata : auto_out_d_bits_data),
    .io_req_bits_eccMask (dataArb_io_in_0_valid ? dataArb_io_in_0_bits_eccMask : 8'hFF),
    .io_resp_0           (_data_io_resp_0)
  );
  AMOALU amoalus_0 (
    .io_mask (pstore1_mask),
    .io_cmd  (pstore1_cmd),
    .io_lhs  (s2_data),
    .io_rhs  (pstore1_data),
    .io_out  (_amoalus_0_io_out)
  );
  assign auto_out_a_valid = nodeOut_a_deq_valid;
  assign auto_out_a_bits_opcode =
    s2_uncached
      ? (s2_write
           ? (_metaArb_io_in_3_bits_data_c_cat_T_24
                ? 3'h1
                : s2_read
                    ? (_metaArb_io_in_3_bits_data_c_cat_T_39
                       | _metaArb_io_in_3_bits_data_c_cat_T_38
                       | _metaArb_io_in_3_bits_data_c_cat_T_37
                       | _metaArb_io_in_3_bits_data_c_cat_T_36
                       | _metaArb_io_in_3_bits_data_c_cat_T_35
                         ? 3'h2
                         : _metaArb_io_in_3_bits_data_c_cat_T_31
                           | _metaArb_io_in_3_bits_data_c_cat_T_30
                           | _metaArb_io_in_3_bits_data_c_cat_T_29
                           | _metaArb_io_in_3_bits_data_c_cat_T_28
                             ? 3'h3
                             : 3'h0)
                    : 3'h0)
           : 3'h4)
      : 3'h6;
  assign auto_out_a_bits_param =
    s2_uncached
      ? (~s2_write | _metaArb_io_in_3_bits_data_c_cat_T_24 | ~s2_read
           ? 3'h0
           : _metaArb_io_in_3_bits_data_c_cat_T_39
               ? 3'h3
               : _metaArb_io_in_3_bits_data_c_cat_T_38
                   ? 3'h2
                   : _metaArb_io_in_3_bits_data_c_cat_T_37
                       ? 3'h1
                       : _metaArb_io_in_3_bits_data_c_cat_T_36
                           ? 3'h0
                           : _metaArb_io_in_3_bits_data_c_cat_T_35
                               ? 3'h4
                               : _metaArb_io_in_3_bits_data_c_cat_T_31
                                   ? 3'h2
                                   : _metaArb_io_in_3_bits_data_c_cat_T_30
                                       ? 3'h1
                                       : _metaArb_io_in_3_bits_data_c_cat_T_29
                                         | ~_metaArb_io_in_3_bits_data_c_cat_T_28
                                           ? 3'h0
                                           : 3'h3)
      : {1'h0, casez_tmp_1};
  assign auto_out_a_bits_size =
    s2_uncached ? (_GEN_11 ? {2'h0, s2_req_size} : 4'h0) : 4'h6;
  assign auto_out_a_bits_source =
    s2_uncached
    & (~s2_write | _metaArb_io_in_3_bits_data_c_cat_T_24 | ~s2_read
       | _metaArb_io_in_3_bits_data_c_cat_T_39 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_28);
  assign auto_out_a_bits_address =
    s2_uncached ? (_GEN_11 ? s2_req_addr[31:0] : 32'h0) : {s2_req_addr[31:6], 6'h0};
  assign auto_out_a_bits_mask =
    s2_uncached
      ? (s2_write
           ? (_metaArb_io_in_3_bits_data_c_cat_T_24
                ? pstore1_mask
                : s2_read
                    ? atomics_mask
                    : {put_a_mask_acc_5 | put_a_mask_eq_5 & s2_req_addr[0],
                       put_a_mask_acc_5 | put_a_mask_eq_5 & ~(s2_req_addr[0]),
                       put_a_mask_acc_4 | put_a_mask_eq_4 & s2_req_addr[0],
                       put_a_mask_acc_4 | put_a_mask_eq_4 & ~(s2_req_addr[0]),
                       put_a_mask_acc_3 | put_a_mask_eq_3 & s2_req_addr[0],
                       put_a_mask_acc_3 | put_a_mask_eq_3 & ~(s2_req_addr[0]),
                       put_a_mask_acc_2 | put_a_mask_eq_2 & s2_req_addr[0],
                       put_a_mask_acc_2 | put_a_mask_eq_2 & ~(s2_req_addr[0])})
           : {get_a_mask_acc_5 | get_a_mask_eq_5 & s2_req_addr[0],
              get_a_mask_acc_5 | get_a_mask_eq_5 & ~(s2_req_addr[0]),
              get_a_mask_acc_4 | get_a_mask_eq_4 & s2_req_addr[0],
              get_a_mask_acc_4 | get_a_mask_eq_4 & ~(s2_req_addr[0]),
              get_a_mask_acc_3 | get_a_mask_eq_3 & s2_req_addr[0],
              get_a_mask_acc_3 | get_a_mask_eq_3 & ~(s2_req_addr[0]),
              get_a_mask_acc_2 | get_a_mask_eq_2 & s2_req_addr[0],
              get_a_mask_acc_2 | get_a_mask_eq_2 & ~(s2_req_addr[0])})
      : 8'hFF;
  assign auto_out_a_bits_data =
    s2_uncached & s2_write
    & (_metaArb_io_in_3_bits_data_c_cat_T_24 | ~s2_read
       | _metaArb_io_in_3_bits_data_c_cat_T_39 | _metaArb_io_in_3_bits_data_c_cat_T_38
       | _metaArb_io_in_3_bits_data_c_cat_T_37 | _metaArb_io_in_3_bits_data_c_cat_T_36
       | _metaArb_io_in_3_bits_data_c_cat_T_35 | _metaArb_io_in_3_bits_data_c_cat_T_31
       | _metaArb_io_in_3_bits_data_c_cat_T_30 | _metaArb_io_in_3_bits_data_c_cat_T_29
       | _metaArb_io_in_3_bits_data_c_cat_T_28)
      ? pstore1_data
      : 64'h0;
  assign auto_out_b_ready = nodeOut_b_ready;
  assign auto_out_c_valid = nodeOut_c_valid;
  assign auto_out_c_bits_opcode = nodeOut_c_bits_opcode;
  assign auto_out_c_bits_param =
    _T_293
      ? ((&s2_victim_state_state) | s2_victim_state_state == 2'h2
           ? 3'h1
           : s2_victim_state_state == 2'h1
               ? 3'h2
               : s2_victim_state_state == 2'h0 ? 3'h5 : 3'h0)
      : _T_288 | _T_287 | ~(~s2_probe | _GEN_16 | ~(|s2_probe_state_state))
          ? (_GEN_9
               ? 3'h3
               : _T_147
                   ? 3'h4
                   : _T_143
                       ? 3'h5
                       : _T_139 | _T_135
                           ? 3'h0
                           : _T_131
                               ? 3'h4
                               : _T_127
                                   ? 3'h5
                                   : _T_124 | _T_98 == 4'hA
                                       ? 3'h1
                                       : _T_98 == 4'h9
                                           ? 3'h2
                                           : _T_98 == 4'h8 ? 3'h5 : 3'h0)
          : 3'h5;
  assign auto_out_c_bits_size = nodeOut_c_bits_size;
  assign auto_out_c_bits_source = probe_bits_source;
  assign auto_out_c_bits_address = probe_bits_address;
  assign auto_out_c_bits_data = s2_data;
  assign auto_out_d_ready = nodeOut_d_ready;
  assign auto_out_e_valid = nodeOut_e_valid;
  assign auto_out_e_bits_sink = auto_out_d_bits_sink;
  assign io_cpu_req_ready = _io_cpu_req_ready_output;
  assign io_cpu_s2_nack = _io_cpu_s2_nack_output;
  assign io_cpu_resp_valid = s2_valid_hit_pre_data_ecc | doUncachedResp;
  assign io_cpu_resp_bits_addr = doUncachedResp ? s2_uncached_resp_addr : s2_req_addr;
  assign io_cpu_resp_bits_tag = s2_req_tag;
  assign io_cpu_resp_bits_cmd = s2_req_cmd;
  assign io_cpu_resp_bits_size = s2_req_size;
  assign io_cpu_resp_bits_signed = s2_req_signed;
  assign io_cpu_resp_bits_dprv = s2_req_dprv;
  assign io_cpu_resp_bits_dv = s2_req_dv;
  assign io_cpu_resp_bits_data =
    {s2_req_size == 2'h0 | s2_sc
       ? {56{s2_req_signed & io_cpu_resp_bits_data_zeroed_2[7]}}
       : {s2_req_size == 2'h1
            ? {48{s2_req_signed & io_cpu_resp_bits_data_shifted_1[15]}}
            : {_io_cpu_resp_bits_data_word_bypass_T_1
                 ? {32{s2_req_signed & io_cpu_resp_bits_data_shifted[31]}}
                 : s2_data[63:32],
               io_cpu_resp_bits_data_shifted[31:16]},
          io_cpu_resp_bits_data_shifted_1[15:8]},
     io_cpu_resp_bits_data_zeroed_2[7:1],
     io_cpu_resp_bits_data_zeroed_2[0] | s2_sc_fail};
  assign io_cpu_resp_bits_mask = s2_req_mask;
  assign io_cpu_resp_bits_replay = doUncachedResp;
  assign io_cpu_resp_bits_has_data = s2_read;
  assign io_cpu_resp_bits_data_word_bypass =
    {_io_cpu_resp_bits_data_word_bypass_T_1
       ? {32{s2_req_signed & io_cpu_resp_bits_data_word_bypass_shifted[31]}}
       : s2_data[63:32],
     io_cpu_resp_bits_data_word_bypass_shifted};
  assign io_cpu_resp_bits_data_raw = s2_data;
  assign io_cpu_resp_bits_store_data = pstore1_data;
  assign io_cpu_replay_next = _io_cpu_replay_next_output;
  assign io_cpu_s2_xcpt_ma_ld = _io_cpu_s2_xcpt_ma_ld_output;
  assign io_cpu_s2_xcpt_ma_st = _io_cpu_s2_xcpt_ma_st_output;
  assign io_cpu_s2_xcpt_pf_ld = _io_cpu_s2_xcpt_pf_ld_output;
  assign io_cpu_s2_xcpt_pf_st = _io_cpu_s2_xcpt_pf_st_output;
  assign io_cpu_s2_xcpt_gf_ld = _io_cpu_s2_xcpt_gf_ld_output;
  assign io_cpu_s2_xcpt_gf_st = _io_cpu_s2_xcpt_gf_st_output;
  assign io_cpu_s2_xcpt_ae_ld = _io_cpu_s2_xcpt_ae_ld_output;
  assign io_cpu_s2_xcpt_ae_st = _io_cpu_s2_xcpt_ae_st_output;
  assign io_cpu_ordered =
    ~(s1_valid & ~s1_req_no_xcpt | s2_valid & ~s2_req_no_xcpt | cached_grant_wait
      | uncachedInFlight_0);
  assign io_cpu_perf_release =
    (io_cpu_perf_release_counter == 9'h1
     | (nodeOut_c_bits_opcode[0]
          ? ~(_io_cpu_perf_release_beats1_decode_T_1[11:3])
          : 9'h0) == 9'h0) & _T_309;
  assign io_cpu_perf_grant = auto_out_d_valid & d_last;
  assign io_ptw_req_valid = tlb_io_ptw_req_valid;
  assign io_ptw_req_bits_bits_addr = tlb_r_refill_tag;
  assign io_ptw_req_bits_bits_need_gpa = tlb_r_need_gpa;
  assign io_ptw_req_bits_bits_vstage1 = tlb_r_vstage1_en;
  assign io_ptw_req_bits_bits_stage2 = tlb_r_stage2_en;
endmodule

module ICache(
  input         clock,
                reset,
                auto_master_out_a_ready,
                auto_master_out_d_valid,
  input  [2:0]  auto_master_out_d_bits_opcode,
  input  [3:0]  auto_master_out_d_bits_size,
  input  [63:0] auto_master_out_d_bits_data,
  input         auto_master_out_d_bits_corrupt,
                io_req_valid,
  input  [38:0] io_req_bits_addr,
  input  [31:0] io_s1_paddr,
  input         io_s1_kill,
                io_s2_kill,
                io_invalidate,
  output        auto_master_out_a_valid,
  output [31:0] auto_master_out_a_bits_address,
  output        io_resp_valid,
  output [31:0] io_resp_bits_data,
  output        io_resp_bits_replay,
                io_resp_bits_ae
);

  wire         readEnable;
  wire         writeEnable;
  wire         readEnable_0;
  wire         writeEnable_0;
  wire         s1_tag_hit_0;
  wire         readEnable_1;
  wire [5:0]   _tag_rdata_T_4;
  wire         _io_req_ready_T_2;
  wire [31:0]  _data_arrays_1_0_ext_RW0_rdata;
  wire [31:0]  _data_arrays_0_0_ext_RW0_rdata;
  wire [20:0]  _tag_array_0_ext_RW0_rdata;
  wire         s0_valid = _io_req_ready_T_2 & io_req_valid;
  reg          s1_valid;
  wire         s1_hit;
  assign s1_hit = s1_tag_hit_0;
  reg          s2_valid;
  reg          s2_hit;
  reg          invalidated;
  reg          refill_valid;
  wire         s2_miss = s2_valid & ~s2_hit & ~io_s2_kill;
  reg          s2_request_refill_REG;
  wire         masterNodeOut_a_valid = s2_miss & s2_request_refill_REG;
  reg  [31:0]  refill_paddr;
  wire         refill_one_beat =
    auto_master_out_d_valid & auto_master_out_d_bits_opcode[0];
  assign _io_req_ready_T_2 = ~refill_one_beat;
  wire [26:0]  _beats1_decode_T_1 = 27'hFFF << auto_master_out_d_bits_size;
  wire [8:0]   beats1 =
    auto_master_out_d_bits_opcode[0] ? ~(_beats1_decode_T_1[11:3]) : 9'h0;
  reg  [8:0]   counter;
  wire [8:0]   counter1 = counter - 9'h1;
  wire [8:0]   refill_cnt = beats1 & ~counter1;
  wire         writeEnable_1 =
    refill_one_beat & (counter == 9'h1 | beats1 == 9'h0) & auto_master_out_d_valid;
  assign _tag_rdata_T_4 = io_req_bits_addr[11:6];
  assign readEnable_1 = ~writeEnable_1 & s0_valid;
  reg          accruedRefillError;
  wire         refillError =
    auto_master_out_d_bits_corrupt | (|refill_cnt) & accruedRefillError;
  reg  [63:0]  vb_array;
  wire [63:0]  _s1_vb_T_1 = vb_array >> io_s1_paddr[11:6];
  assign s1_tag_hit_0 =
    _s1_vb_T_1[0] & _tag_array_0_ext_RW0_rdata[19:0] == io_s1_paddr[31:12];
  assign writeEnable_0 = refill_one_beat & ~invalidated;
  wire [8:0]   _mem_idx_T_6 = {refill_paddr[11:6], 3'h0};
  assign readEnable_0 = ~writeEnable_0 & s0_valid & ~(io_req_bits_addr[2]);
  assign writeEnable = refill_one_beat & ~invalidated;
  assign readEnable = ~writeEnable_0 & s0_valid & io_req_bits_addr[2];
  reg  [31:0]  s2_dout_0;
  reg          s2_tag_disparity_r_0;
  reg          s2_tl_error;
  wire         invalidate = s2_valid & s2_tag_disparity_r_0 | io_invalidate;
  wire [127:0] _vb_array_T_3 = 128'h1 << refill_paddr[11:6];
  wire         _s1_can_request_refill_T = s2_miss | refill_valid;
  always @(posedge clock) begin
    if (reset) begin
      s1_valid <= 1'h0;
      s2_valid <= 1'h0;
      refill_valid <= 1'h0;
      counter <= 9'h0;
      vb_array <= 64'h0;
    end
    else begin
      s1_valid <= s0_valid;
      s2_valid <= s1_valid & ~io_s1_kill;
      refill_valid <=
        ~writeEnable_1 & (auto_master_out_a_ready & masterNodeOut_a_valid | refill_valid);
      if (auto_master_out_d_valid) begin
        if (counter == 9'h0) begin
          if (auto_master_out_d_bits_opcode[0])
            counter <= ~(_beats1_decode_T_1[11:3]);
          else
            counter <= 9'h0;
        end
        else
          counter <= counter1;
      end
      if (invalidate)
        vb_array <= 64'h0;
      else if (refill_one_beat)
        vb_array <=
          writeEnable_1 & ~invalidated
            ? vb_array | _vb_array_T_3[63:0]
            : ~(~vb_array | _vb_array_T_3[63:0]);
    end
    s2_hit <= s1_hit;
    invalidated <= refill_valid & (invalidate | invalidated);
    s2_request_refill_REG <= ~_s1_can_request_refill_T;
    if (s1_valid & ~_s1_can_request_refill_T)
      refill_paddr <= io_s1_paddr;
    if (refill_one_beat)
      accruedRefillError <= refillError;
    if (s1_valid) begin
      if (io_s1_paddr[2])
        s2_dout_0 <= _data_arrays_1_0_ext_RW0_rdata;
      else
        s2_dout_0 <= _data_arrays_0_0_ext_RW0_rdata;
      s2_tl_error <= s1_hit & _tag_array_0_ext_RW0_rdata[20];
    end
    s2_tag_disparity_r_0 <= ~s1_valid & s2_tag_disparity_r_0;
  end // always @(posedge)
  tag_array_0_combMem tag_array_0_ext (
    .RW0_addr  (writeEnable_1 ? refill_paddr[11:6] : _tag_rdata_T_4),
    .RW0_en    (readEnable_1 | writeEnable_1),
    .RW0_clk   (clock),
    .RW0_wmode (writeEnable_1),
    .RW0_wdata ({refillError, refill_paddr[31:12]}),
    .RW0_rdata (_tag_array_0_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem_0 data_arrays_0_0_ext (
    .RW0_addr  (refill_one_beat ? _mem_idx_T_6 | refill_cnt : io_req_bits_addr[11:3]),
    .RW0_en    (readEnable_0 | writeEnable_0),
    .RW0_clk   (clock),
    .RW0_wmode (writeEnable_0),
    .RW0_wdata (auto_master_out_d_bits_data[31:0]),
    .RW0_rdata (_data_arrays_0_0_ext_RW0_rdata)
  );
  data_arrays_0_0_combMem_0 data_arrays_1_0_ext (
    .RW0_addr  (refill_one_beat ? _mem_idx_T_6 | refill_cnt : io_req_bits_addr[11:3]),
    .RW0_en    (readEnable | writeEnable),
    .RW0_clk   (clock),
    .RW0_wmode (writeEnable_0),
    .RW0_wdata (auto_master_out_d_bits_data[63:32]),
    .RW0_rdata (_data_arrays_1_0_ext_RW0_rdata)
  );
  assign auto_master_out_a_valid = masterNodeOut_a_valid;
  assign auto_master_out_a_bits_address = {refill_paddr[31:6], 6'h0};
  assign io_resp_valid = s2_valid & s2_hit;
  assign io_resp_bits_data = s2_dout_0;
  assign io_resp_bits_replay = s2_tag_disparity_r_0;
  assign io_resp_bits_ae = s2_tl_error;
endmodule

module ShiftQueue(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_btb_bridx,
  input  [39:0] io_enq_bits_pc,
  input  [31:0] io_enq_bits_data,
  input         io_enq_bits_xcpt_pf_inst,
                io_enq_bits_xcpt_gf_inst,
                io_enq_bits_xcpt_ae_inst,
                io_enq_bits_replay,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_btb_taken,
                io_deq_bits_btb_bridx,
  output [39:0] io_deq_bits_pc,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_xcpt_pf_inst,
                io_deq_bits_xcpt_gf_inst,
                io_deq_bits_xcpt_ae_inst,
                io_deq_bits_replay,
  output [4:0]  io_mask
);

  reg         valid_0;
  reg         valid_1;
  reg         valid_2;
  reg         valid_3;
  reg         valid_4;
  reg         elts_0_btb_taken;
  reg         elts_0_btb_bridx;
  reg  [39:0] elts_0_pc;
  reg  [31:0] elts_0_data;
  reg         elts_0_xcpt_pf_inst;
  reg         elts_0_xcpt_gf_inst;
  reg         elts_0_xcpt_ae_inst;
  reg         elts_0_replay;
  reg         elts_1_btb_taken;
  reg         elts_1_btb_bridx;
  reg  [39:0] elts_1_pc;
  reg  [31:0] elts_1_data;
  reg         elts_1_xcpt_pf_inst;
  reg         elts_1_xcpt_gf_inst;
  reg         elts_1_xcpt_ae_inst;
  reg         elts_1_replay;
  reg         elts_2_btb_taken;
  reg         elts_2_btb_bridx;
  reg  [39:0] elts_2_pc;
  reg  [31:0] elts_2_data;
  reg         elts_2_xcpt_pf_inst;
  reg         elts_2_xcpt_gf_inst;
  reg         elts_2_xcpt_ae_inst;
  reg         elts_2_replay;
  reg         elts_3_btb_taken;
  reg         elts_3_btb_bridx;
  reg  [39:0] elts_3_pc;
  reg  [31:0] elts_3_data;
  reg         elts_3_xcpt_pf_inst;
  reg         elts_3_xcpt_gf_inst;
  reg         elts_3_xcpt_ae_inst;
  reg         elts_3_replay;
  reg         elts_4_btb_taken;
  reg         elts_4_btb_bridx;
  reg  [39:0] elts_4_pc;
  reg  [31:0] elts_4_data;
  reg         elts_4_xcpt_pf_inst;
  reg         elts_4_xcpt_gf_inst;
  reg         elts_4_xcpt_ae_inst;
  reg         elts_4_replay;
  wire        _valid_4_T_4 = ~valid_4 & io_enq_valid;
  wire        wen_4 =
    io_deq_ready ? _valid_4_T_4 & valid_4 : _valid_4_T_4 & valid_3 & ~valid_4;
  always @(posedge clock) begin
    if (reset) begin
      valid_0 <= 1'h0;
      valid_1 <= 1'h0;
      valid_2 <= 1'h0;
      valid_3 <= 1'h0;
      valid_4 <= 1'h0;
    end
    else if (io_deq_ready) begin
      valid_0 <= valid_1 | _valid_4_T_4 & valid_0;
      valid_1 <= valid_2 | _valid_4_T_4 & valid_1;
      valid_2 <= valid_3 | _valid_4_T_4 & valid_2;
      valid_3 <= valid_4 | _valid_4_T_4 & valid_3;
      valid_4 <= _valid_4_T_4 & valid_4;
    end
    else begin
      valid_0 <= _valid_4_T_4 | valid_0;
      valid_1 <= _valid_4_T_4 & valid_0 | valid_1;
      valid_2 <= _valid_4_T_4 & valid_1 | valid_2;
      valid_3 <= _valid_4_T_4 & valid_2 | valid_3;
      valid_4 <= _valid_4_T_4 & valid_3 | valid_4;
    end
    if (io_deq_ready ? valid_1 | _valid_4_T_4 & valid_0 : _valid_4_T_4 & ~valid_0) begin
      elts_0_btb_taken <= valid_1 & elts_1_btb_taken;
      if (valid_1) begin
        elts_0_btb_bridx <= elts_1_btb_bridx;
        elts_0_pc <= elts_1_pc;
        elts_0_data <= elts_1_data;
        elts_0_xcpt_pf_inst <= elts_1_xcpt_pf_inst;
        elts_0_xcpt_gf_inst <= elts_1_xcpt_gf_inst;
        elts_0_xcpt_ae_inst <= elts_1_xcpt_ae_inst;
        elts_0_replay <= elts_1_replay;
      end
      else begin
        elts_0_btb_bridx <= io_enq_bits_btb_bridx;
        elts_0_pc <= io_enq_bits_pc;
        elts_0_data <= io_enq_bits_data;
        elts_0_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_0_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_0_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_0_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready
          ? valid_2 | _valid_4_T_4 & valid_1
          : _valid_4_T_4 & valid_0 & ~valid_1) begin
      elts_1_btb_taken <= valid_2 & elts_2_btb_taken;
      if (valid_2) begin
        elts_1_btb_bridx <= elts_2_btb_bridx;
        elts_1_pc <= elts_2_pc;
        elts_1_data <= elts_2_data;
        elts_1_xcpt_pf_inst <= elts_2_xcpt_pf_inst;
        elts_1_xcpt_gf_inst <= elts_2_xcpt_gf_inst;
        elts_1_xcpt_ae_inst <= elts_2_xcpt_ae_inst;
        elts_1_replay <= elts_2_replay;
      end
      else begin
        elts_1_btb_bridx <= io_enq_bits_btb_bridx;
        elts_1_pc <= io_enq_bits_pc;
        elts_1_data <= io_enq_bits_data;
        elts_1_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_1_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_1_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_1_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready
          ? valid_3 | _valid_4_T_4 & valid_2
          : _valid_4_T_4 & valid_1 & ~valid_2) begin
      elts_2_btb_taken <= valid_3 & elts_3_btb_taken;
      if (valid_3) begin
        elts_2_btb_bridx <= elts_3_btb_bridx;
        elts_2_pc <= elts_3_pc;
        elts_2_data <= elts_3_data;
        elts_2_xcpt_pf_inst <= elts_3_xcpt_pf_inst;
        elts_2_xcpt_gf_inst <= elts_3_xcpt_gf_inst;
        elts_2_xcpt_ae_inst <= elts_3_xcpt_ae_inst;
        elts_2_replay <= elts_3_replay;
      end
      else begin
        elts_2_btb_bridx <= io_enq_bits_btb_bridx;
        elts_2_pc <= io_enq_bits_pc;
        elts_2_data <= io_enq_bits_data;
        elts_2_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_2_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_2_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_2_replay <= io_enq_bits_replay;
      end
    end
    if (io_deq_ready
          ? valid_4 | _valid_4_T_4 & valid_3
          : _valid_4_T_4 & valid_2 & ~valid_3) begin
      elts_3_btb_taken <= valid_4 & elts_4_btb_taken;
      if (valid_4) begin
        elts_3_btb_bridx <= elts_4_btb_bridx;
        elts_3_pc <= elts_4_pc;
        elts_3_data <= elts_4_data;
        elts_3_xcpt_pf_inst <= elts_4_xcpt_pf_inst;
        elts_3_xcpt_gf_inst <= elts_4_xcpt_gf_inst;
        elts_3_xcpt_ae_inst <= elts_4_xcpt_ae_inst;
        elts_3_replay <= elts_4_replay;
      end
      else begin
        elts_3_btb_bridx <= io_enq_bits_btb_bridx;
        elts_3_pc <= io_enq_bits_pc;
        elts_3_data <= io_enq_bits_data;
        elts_3_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
        elts_3_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
        elts_3_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
        elts_3_replay <= io_enq_bits_replay;
      end
    end
    elts_4_btb_taken <= ~wen_4 & elts_4_btb_taken;
    if (wen_4) begin
      elts_4_btb_bridx <= io_enq_bits_btb_bridx;
      elts_4_pc <= io_enq_bits_pc;
      elts_4_data <= io_enq_bits_data;
      elts_4_xcpt_pf_inst <= io_enq_bits_xcpt_pf_inst;
      elts_4_xcpt_gf_inst <= io_enq_bits_xcpt_gf_inst;
      elts_4_xcpt_ae_inst <= io_enq_bits_xcpt_ae_inst;
      elts_4_replay <= io_enq_bits_replay;
    end
  end // always @(posedge)
  assign io_enq_ready = ~valid_4;
  assign io_deq_valid = io_enq_valid | valid_0;
  assign io_deq_bits_btb_taken = valid_0 & elts_0_btb_taken;
  assign io_deq_bits_btb_bridx = valid_0 ? elts_0_btb_bridx : io_enq_bits_btb_bridx;
  assign io_deq_bits_pc = valid_0 ? elts_0_pc : io_enq_bits_pc;
  assign io_deq_bits_data = valid_0 ? elts_0_data : io_enq_bits_data;
  assign io_deq_bits_xcpt_pf_inst =
    valid_0 ? elts_0_xcpt_pf_inst : io_enq_bits_xcpt_pf_inst;
  assign io_deq_bits_xcpt_gf_inst =
    valid_0 ? elts_0_xcpt_gf_inst : io_enq_bits_xcpt_gf_inst;
  assign io_deq_bits_xcpt_ae_inst =
    valid_0 ? elts_0_xcpt_ae_inst : io_enq_bits_xcpt_ae_inst;
  assign io_deq_bits_replay = valid_0 ? elts_0_replay : io_enq_bits_replay;
  assign io_mask = {valid_4, valid_3, valid_2, valid_1, valid_0};
endmodule

module PMPChecker_2(
  input  [1:0]  io_prv,
  input         io_pmp_0_cfg_l,
  input  [1:0]  io_pmp_0_cfg_a,
  input         io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  input  [29:0] io_pmp_0_addr,
  input  [31:0] io_pmp_0_mask,
  input         io_pmp_1_cfg_l,
  input  [1:0]  io_pmp_1_cfg_a,
  input         io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  input  [29:0] io_pmp_1_addr,
  input  [31:0] io_pmp_1_mask,
  input         io_pmp_2_cfg_l,
  input  [1:0]  io_pmp_2_cfg_a,
  input         io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  input  [29:0] io_pmp_2_addr,
  input  [31:0] io_pmp_2_mask,
  input         io_pmp_3_cfg_l,
  input  [1:0]  io_pmp_3_cfg_a,
  input         io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  input  [29:0] io_pmp_3_addr,
  input  [31:0] io_pmp_3_mask,
  input         io_pmp_4_cfg_l,
  input  [1:0]  io_pmp_4_cfg_a,
  input         io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  input  [29:0] io_pmp_4_addr,
  input  [31:0] io_pmp_4_mask,
  input         io_pmp_5_cfg_l,
  input  [1:0]  io_pmp_5_cfg_a,
  input         io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  input  [29:0] io_pmp_5_addr,
  input  [31:0] io_pmp_5_mask,
  input         io_pmp_6_cfg_l,
  input  [1:0]  io_pmp_6_cfg_a,
  input         io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  input  [29:0] io_pmp_6_addr,
  input  [31:0] io_pmp_6_mask,
  input         io_pmp_7_cfg_l,
  input  [1:0]  io_pmp_7_cfg_a,
  input         io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  input  [29:0] io_pmp_7_addr,
  input  [31:0] io_pmp_7_mask,
                io_addr,
  output        io_r,
                io_w,
                io_x
);

  wire res_hit =
    io_pmp_7_cfg_a[1]
      ? ((io_addr ^ {io_pmp_7_addr, 2'h0}) & ~io_pmp_7_mask) == 32'h0
      : io_pmp_7_cfg_a[0] & io_addr >= {io_pmp_6_addr, 2'h0}
        & io_addr < {io_pmp_7_addr, 2'h0};
  wire res_ignore = io_prv[1] & ~io_pmp_7_cfg_l;
  wire res_hit_1 =
    io_pmp_6_cfg_a[1]
      ? ((io_addr ^ {io_pmp_6_addr, 2'h0}) & ~io_pmp_6_mask) == 32'h0
      : io_pmp_6_cfg_a[0] & io_addr >= {io_pmp_5_addr, 2'h0}
        & io_addr < {io_pmp_6_addr, 2'h0};
  wire res_ignore_1 = io_prv[1] & ~io_pmp_6_cfg_l;
  wire res_hit_2 =
    io_pmp_5_cfg_a[1]
      ? ((io_addr ^ {io_pmp_5_addr, 2'h0}) & ~io_pmp_5_mask) == 32'h0
      : io_pmp_5_cfg_a[0] & io_addr >= {io_pmp_4_addr, 2'h0}
        & io_addr < {io_pmp_5_addr, 2'h0};
  wire res_ignore_2 = io_prv[1] & ~io_pmp_5_cfg_l;
  wire res_hit_3 =
    io_pmp_4_cfg_a[1]
      ? ((io_addr ^ {io_pmp_4_addr, 2'h0}) & ~io_pmp_4_mask) == 32'h0
      : io_pmp_4_cfg_a[0] & io_addr >= {io_pmp_3_addr, 2'h0}
        & io_addr < {io_pmp_4_addr, 2'h0};
  wire res_ignore_3 = io_prv[1] & ~io_pmp_4_cfg_l;
  wire res_hit_4 =
    io_pmp_3_cfg_a[1]
      ? ((io_addr ^ {io_pmp_3_addr, 2'h0}) & ~io_pmp_3_mask) == 32'h0
      : io_pmp_3_cfg_a[0] & io_addr >= {io_pmp_2_addr, 2'h0}
        & io_addr < {io_pmp_3_addr, 2'h0};
  wire res_ignore_4 = io_prv[1] & ~io_pmp_3_cfg_l;
  wire res_hit_5 =
    io_pmp_2_cfg_a[1]
      ? ((io_addr ^ {io_pmp_2_addr, 2'h0}) & ~io_pmp_2_mask) == 32'h0
      : io_pmp_2_cfg_a[0] & io_addr >= {io_pmp_1_addr, 2'h0}
        & io_addr < {io_pmp_2_addr, 2'h0};
  wire res_ignore_5 = io_prv[1] & ~io_pmp_2_cfg_l;
  wire res_hit_6 =
    io_pmp_1_cfg_a[1]
      ? ((io_addr ^ {io_pmp_1_addr, 2'h0}) & ~io_pmp_1_mask) == 32'h0
      : io_pmp_1_cfg_a[0] & io_addr >= {io_pmp_0_addr, 2'h0}
        & io_addr < {io_pmp_1_addr, 2'h0};
  wire res_ignore_6 = io_prv[1] & ~io_pmp_1_cfg_l;
  wire res_hit_7 =
    io_pmp_0_cfg_a[1]
      ? ((io_addr ^ {io_pmp_0_addr, 2'h0}) & ~io_pmp_0_mask) == 32'h0
      : io_pmp_0_cfg_a[0] & io_addr < {io_pmp_0_addr, 2'h0};
  wire res_ignore_7 = io_prv[1] & ~io_pmp_0_cfg_l;
  assign io_r =
    res_hit_7
      ? io_pmp_0_cfg_r | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_r | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_r | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_r | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_r | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_r | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_r | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_r | res_ignore : io_prv[1];
  assign io_w =
    res_hit_7
      ? io_pmp_0_cfg_w | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_w | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_w | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_w | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_w | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_w | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_w | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_w | res_ignore : io_prv[1];
  assign io_x =
    res_hit_7
      ? io_pmp_0_cfg_x | res_ignore_7
      : res_hit_6
          ? io_pmp_1_cfg_x | res_ignore_6
          : res_hit_5
              ? io_pmp_2_cfg_x | res_ignore_5
              : res_hit_4
                  ? io_pmp_3_cfg_x | res_ignore_4
                  : res_hit_3
                      ? io_pmp_4_cfg_x | res_ignore_3
                      : res_hit_2
                          ? io_pmp_5_cfg_x | res_ignore_2
                          : res_hit_1
                              ? io_pmp_6_cfg_x | res_ignore_1
                              : res_hit ? io_pmp_7_cfg_x | res_ignore : io_prv[1];
endmodule

module TLB_1(
  input         clock,
                reset,
                io_req_valid,
  input  [39:0] io_req_bits_vaddr,
  input  [1:0]  io_req_bits_prv,
  input         io_sfence_valid,
                io_sfence_bits_rs1,
                io_sfence_bits_rs2,
  input  [38:0] io_sfence_bits_addr,
  input         io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
                io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  input         io_kill,
  output        io_resp_miss,
  output [31:0] io_resp_paddr,
  output        io_resp_pf_inst,
                io_resp_ae_inst,
                io_resp_cacheable,
                io_ptw_req_valid,
                io_ptw_req_bits_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire [19:0] _entries_barrier_5_io_y_ppn;
  wire        _entries_barrier_5_io_y_u;
  wire        _entries_barrier_5_io_y_ae_ptw;
  wire        _entries_barrier_5_io_y_ae_final;
  wire        _entries_barrier_5_io_y_pf;
  wire        _entries_barrier_5_io_y_gf;
  wire        _entries_barrier_5_io_y_sw;
  wire        _entries_barrier_5_io_y_sx;
  wire        _entries_barrier_5_io_y_sr;
  wire        _entries_barrier_5_io_y_pw;
  wire        _entries_barrier_5_io_y_px;
  wire        _entries_barrier_5_io_y_pr;
  wire        _entries_barrier_5_io_y_ppp;
  wire        _entries_barrier_5_io_y_pal;
  wire        _entries_barrier_5_io_y_paa;
  wire        _entries_barrier_5_io_y_eff;
  wire        _entries_barrier_5_io_y_c;
  wire [19:0] _entries_barrier_4_io_y_ppn;
  wire        _entries_barrier_4_io_y_u;
  wire        _entries_barrier_4_io_y_ae_ptw;
  wire        _entries_barrier_4_io_y_ae_final;
  wire        _entries_barrier_4_io_y_pf;
  wire        _entries_barrier_4_io_y_gf;
  wire        _entries_barrier_4_io_y_sw;
  wire        _entries_barrier_4_io_y_sx;
  wire        _entries_barrier_4_io_y_sr;
  wire        _entries_barrier_4_io_y_pw;
  wire        _entries_barrier_4_io_y_px;
  wire        _entries_barrier_4_io_y_pr;
  wire        _entries_barrier_4_io_y_ppp;
  wire        _entries_barrier_4_io_y_pal;
  wire        _entries_barrier_4_io_y_paa;
  wire        _entries_barrier_4_io_y_eff;
  wire        _entries_barrier_4_io_y_c;
  wire [19:0] _entries_barrier_3_io_y_ppn;
  wire        _entries_barrier_3_io_y_u;
  wire        _entries_barrier_3_io_y_ae_ptw;
  wire        _entries_barrier_3_io_y_ae_final;
  wire        _entries_barrier_3_io_y_pf;
  wire        _entries_barrier_3_io_y_gf;
  wire        _entries_barrier_3_io_y_sw;
  wire        _entries_barrier_3_io_y_sx;
  wire        _entries_barrier_3_io_y_sr;
  wire        _entries_barrier_3_io_y_pw;
  wire        _entries_barrier_3_io_y_px;
  wire        _entries_barrier_3_io_y_pr;
  wire        _entries_barrier_3_io_y_ppp;
  wire        _entries_barrier_3_io_y_pal;
  wire        _entries_barrier_3_io_y_paa;
  wire        _entries_barrier_3_io_y_eff;
  wire        _entries_barrier_3_io_y_c;
  wire [19:0] _entries_barrier_2_io_y_ppn;
  wire        _entries_barrier_2_io_y_u;
  wire        _entries_barrier_2_io_y_ae_ptw;
  wire        _entries_barrier_2_io_y_ae_final;
  wire        _entries_barrier_2_io_y_pf;
  wire        _entries_barrier_2_io_y_gf;
  wire        _entries_barrier_2_io_y_sw;
  wire        _entries_barrier_2_io_y_sx;
  wire        _entries_barrier_2_io_y_sr;
  wire        _entries_barrier_2_io_y_pw;
  wire        _entries_barrier_2_io_y_px;
  wire        _entries_barrier_2_io_y_pr;
  wire        _entries_barrier_2_io_y_ppp;
  wire        _entries_barrier_2_io_y_pal;
  wire        _entries_barrier_2_io_y_paa;
  wire        _entries_barrier_2_io_y_eff;
  wire        _entries_barrier_2_io_y_c;
  wire [19:0] _entries_barrier_1_io_y_ppn;
  wire        _entries_barrier_1_io_y_u;
  wire        _entries_barrier_1_io_y_ae_ptw;
  wire        _entries_barrier_1_io_y_ae_final;
  wire        _entries_barrier_1_io_y_pf;
  wire        _entries_barrier_1_io_y_gf;
  wire        _entries_barrier_1_io_y_sw;
  wire        _entries_barrier_1_io_y_sx;
  wire        _entries_barrier_1_io_y_sr;
  wire        _entries_barrier_1_io_y_pw;
  wire        _entries_barrier_1_io_y_px;
  wire        _entries_barrier_1_io_y_pr;
  wire        _entries_barrier_1_io_y_ppp;
  wire        _entries_barrier_1_io_y_pal;
  wire        _entries_barrier_1_io_y_paa;
  wire        _entries_barrier_1_io_y_eff;
  wire        _entries_barrier_1_io_y_c;
  wire [19:0] _entries_barrier_io_y_ppn;
  wire        _entries_barrier_io_y_u;
  wire        _entries_barrier_io_y_ae_ptw;
  wire        _entries_barrier_io_y_ae_final;
  wire        _entries_barrier_io_y_pf;
  wire        _entries_barrier_io_y_gf;
  wire        _entries_barrier_io_y_sw;
  wire        _entries_barrier_io_y_sx;
  wire        _entries_barrier_io_y_sr;
  wire        _entries_barrier_io_y_pw;
  wire        _entries_barrier_io_y_px;
  wire        _entries_barrier_io_y_pr;
  wire        _entries_barrier_io_y_ppp;
  wire        _entries_barrier_io_y_pal;
  wire        _entries_barrier_io_y_paa;
  wire        _entries_barrier_io_y_eff;
  wire        _entries_barrier_io_y_c;
  wire        _pmp_io_r;
  wire        _pmp_io_w;
  wire        _pmp_io_x;
  wire [19:0] _mpu_ppn_barrier_io_y_ppn;
  wire        _mpu_ppn_barrier_io_y_u;
  wire        _mpu_ppn_barrier_io_y_ae_ptw;
  wire        _mpu_ppn_barrier_io_y_ae_final;
  wire        _mpu_ppn_barrier_io_y_pf;
  wire        _mpu_ppn_barrier_io_y_gf;
  wire        _mpu_ppn_barrier_io_y_sw;
  wire        _mpu_ppn_barrier_io_y_sx;
  wire        _mpu_ppn_barrier_io_y_sr;
  wire        _mpu_ppn_barrier_io_y_pw;
  wire        _mpu_ppn_barrier_io_y_px;
  wire        _mpu_ppn_barrier_io_y_pr;
  wire        _mpu_ppn_barrier_io_y_ppp;
  wire        _mpu_ppn_barrier_io_y_pal;
  wire        _mpu_ppn_barrier_io_y_paa;
  wire        _mpu_ppn_barrier_io_y_eff;
  wire        _mpu_ppn_barrier_io_y_c;
  reg         casez_tmp;
  reg  [41:0] casez_tmp_0;
  reg  [26:0] sectored_entries_0_0_tag_vpn;
  reg         sectored_entries_0_0_tag_v;
  reg  [41:0] sectored_entries_0_0_data_0;
  reg  [41:0] sectored_entries_0_0_data_1;
  reg  [41:0] sectored_entries_0_0_data_2;
  reg  [41:0] sectored_entries_0_0_data_3;
  reg         sectored_entries_0_0_valid_0;
  reg         sectored_entries_0_0_valid_1;
  reg         sectored_entries_0_0_valid_2;
  reg         sectored_entries_0_0_valid_3;
  reg  [1:0]  superpage_entries_0_level;
  reg  [26:0] superpage_entries_0_tag_vpn;
  reg         superpage_entries_0_tag_v;
  reg  [41:0] superpage_entries_0_data_0;
  reg         superpage_entries_0_valid_0;
  reg  [1:0]  superpage_entries_1_level;
  reg  [26:0] superpage_entries_1_tag_vpn;
  reg         superpage_entries_1_tag_v;
  reg  [41:0] superpage_entries_1_data_0;
  reg         superpage_entries_1_valid_0;
  reg  [1:0]  superpage_entries_2_level;
  reg  [26:0] superpage_entries_2_tag_vpn;
  reg         superpage_entries_2_tag_v;
  reg  [41:0] superpage_entries_2_data_0;
  reg         superpage_entries_2_valid_0;
  reg  [1:0]  superpage_entries_3_level;
  reg  [26:0] superpage_entries_3_tag_vpn;
  reg         superpage_entries_3_tag_v;
  reg  [41:0] superpage_entries_3_data_0;
  reg         superpage_entries_3_valid_0;
  reg  [1:0]  special_entry_level;
  reg  [26:0] special_entry_tag_vpn;
  reg         special_entry_tag_v;
  reg  [41:0] special_entry_data_0;
  reg         special_entry_valid_0;
  reg  [1:0]  state;
  reg  [26:0] r_refill_tag;
  reg  [1:0]  r_superpage_repl_addr;
  reg         r_sectored_hit_valid;
  reg         r_vstage1_en;
  reg         r_stage2_en;
  reg         r_need_gpa;
  wire        _vm_enabled_T_1 = io_ptw_ptbr_mode[3] & ~(io_req_bits_prv[1]);
  wire        _T_22 = state == 2'h1;
  wire        mpu_ppn_ignore = special_entry_level == 2'h0;
  wire [8:0]  _GEN = mpu_ppn_ignore ? io_req_bits_vaddr[29:21] : 9'h0;
  wire [8:0]  _GEN_0 = special_entry_level[1] ? 9'h0 : io_req_bits_vaddr[20:12];
  wire [27:0] mpu_ppn =
    io_ptw_resp_valid
      ? {8'h0, io_ptw_resp_bits_pte_ppn[19:0]}
      : _vm_enabled_T_1
          ? {8'h0,
             _mpu_ppn_barrier_io_y_ppn[19:18],
             _GEN | _mpu_ppn_barrier_io_y_ppn[17:9],
             _GEN_0 | _mpu_ppn_barrier_io_y_ppn[8:0]}
          : io_req_bits_vaddr[39:12];
  wire [2:0]  mpu_priv =
    io_ptw_resp_valid ? 3'h1 : {io_ptw_status_debug, io_req_bits_prv};
  wire        legal_address =
    mpu_ppn == 28'h3 | mpu_ppn == 28'h10014 | mpu_ppn == 28'h10012 | mpu_ppn == 28'h1001F
    | mpu_ppn[27:17] == 11'h1 | mpu_ppn == 28'h10010 | mpu_ppn[27:14] == 14'h3
    | mpu_ppn[27:4] == 24'h200 | mpu_ppn == 28'h0 | mpu_ppn[27:4] == 24'h1
    | mpu_ppn[27:19] == 9'h1 | mpu_ppn[27:17] == 11'h3;
  wire        newEntry_c = legal_address & mpu_ppn[19];
  wire        deny_access_to_debug = ~(mpu_priv[2]) & mpu_ppn == 28'h0;
  wire        newEntry_px =
    legal_address
    & ({mpu_ppn[19], mpu_ppn[17:15], mpu_ppn[13]} == 5'h0
       | {mpu_ppn[19], ~(mpu_ppn[17])} == 2'h0 | mpu_ppn[19]) & ~deny_access_to_debug
    & _pmp_io_x;
  wire [24:0] _sector_hits_T_4 =
    sectored_entries_0_0_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire [17:0] _GEN_1 = superpage_entries_0_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire        superpage_hits_ignore_1 = superpage_entries_0_level == 2'h0;
  wire [17:0] _GEN_2 = superpage_entries_1_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire        superpage_hits_ignore_4 = superpage_entries_1_level == 2'h0;
  wire [17:0] _GEN_3 = superpage_entries_2_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire        superpage_hits_ignore_7 = superpage_entries_2_level == 2'h0;
  wire [17:0] _GEN_4 = superpage_entries_3_tag_vpn[26:9] ^ io_req_bits_vaddr[38:21];
  wire        superpage_hits_ignore_10 = superpage_entries_3_level == 2'h0;
  always @(*) begin
    casez (io_req_bits_vaddr[13:12])
      2'b00:
        casez_tmp = sectored_entries_0_0_valid_0;
      2'b01:
        casez_tmp = sectored_entries_0_0_valid_1;
      2'b10:
        casez_tmp = sectored_entries_0_0_valid_2;
      default:
        casez_tmp = sectored_entries_0_0_valid_3;
    endcase
  end // always @(*)
  wire        hitsVec_0 =
    _vm_enabled_T_1 & casez_tmp & _sector_hits_T_4 == 25'h0 & ~sectored_entries_0_0_tag_v;
  wire        hitsVec_1 =
    _vm_enabled_T_1 & superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v
    & _GEN_1[17:9] == 9'h0 & (superpage_hits_ignore_1 | _GEN_1[8:0] == 9'h0);
  wire        hitsVec_2 =
    _vm_enabled_T_1 & superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v
    & _GEN_2[17:9] == 9'h0 & (superpage_hits_ignore_4 | _GEN_2[8:0] == 9'h0);
  wire        hitsVec_3 =
    _vm_enabled_T_1 & superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v
    & _GEN_3[17:9] == 9'h0 & (superpage_hits_ignore_7 | _GEN_3[8:0] == 9'h0);
  wire        hitsVec_4 =
    _vm_enabled_T_1 & superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v
    & _GEN_4[17:9] == 9'h0 & (superpage_hits_ignore_10 | _GEN_4[8:0] == 9'h0);
  wire [26:0] _T_862 = special_entry_tag_vpn ^ io_req_bits_vaddr[38:12];
  wire        hitsVec_5 =
    _vm_enabled_T_1 & special_entry_valid_0 & ~special_entry_tag_v & _T_862[26:18] == 9'h0
    & (mpu_ppn_ignore | _T_862[17:9] == 9'h0)
    & (~(special_entry_level[1]) | _T_862[8:0] == 9'h0);
  wire [5:0]  real_hits =
    {hitsVec_5, hitsVec_4, hitsVec_3, hitsVec_2, hitsVec_1, hitsVec_0};
  wire [6:0]  hits =
    {~_vm_enabled_T_1, hitsVec_5, hitsVec_4, hitsVec_3, hitsVec_2, hitsVec_1, hitsVec_0};
  always @(*) begin
    casez (io_req_bits_vaddr[13:12])
      2'b00:
        casez_tmp_0 = sectored_entries_0_0_data_0;
      2'b01:
        casez_tmp_0 = sectored_entries_0_0_data_1;
      2'b10:
        casez_tmp_0 = sectored_entries_0_0_data_2;
      default:
        casez_tmp_0 = sectored_entries_0_0_data_3;
    endcase
  end // always @(*)
  wire        bad_va =
    _vm_enabled_T_1 & io_ptw_ptbr_mode[3]
    & ~(io_req_bits_vaddr[39:38] == 2'h0 | (&(io_req_bits_vaddr[39:38])));
  wire        tlb_miss = _vm_enabled_T_1 & ~bad_va & real_hits == 6'h0;
  reg  [2:0]  state_reg_1;
  wire        multipleHits_rightOne_1 = hitsVec_1 | hitsVec_2;
  wire        multipleHits_rightOne_3 = hitsVec_4 | hitsVec_5;
  wire        multipleHits =
    hitsVec_1 & hitsVec_2 | hitsVec_0 & multipleHits_rightOne_1 | hitsVec_4 & hitsVec_5
    | hitsVec_3 & multipleHits_rightOne_3 | (hitsVec_0 | multipleHits_rightOne_1)
    & (hitsVec_3 | multipleHits_rightOne_3);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (io_sfence_valid & ~reset
          & ~(~io_sfence_bits_rs1
              | io_sfence_bits_addr[38:12] == io_req_bits_vaddr[38:12])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at TLB.scala:709 assert(!io.sfence.bits.rs1 || (io.sfence.bits.addr >> pgIdxBits) === vpn)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [2:0]  _GEN_5 =
    ~{superpage_entries_2_valid_0,
      superpage_entries_1_valid_0,
      superpage_entries_0_valid_0};
  wire        superpage_hits_1 =
    superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v & _GEN_2[17:9] == 9'h0
    & (superpage_hits_ignore_4 | _GEN_2[8:0] == 9'h0);
  wire        superpage_hits_2 =
    superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v & _GEN_3[17:9] == 9'h0
    & (superpage_hits_ignore_7 | _GEN_3[8:0] == 9'h0);
  wire        superpage_hits_3 =
    superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v & _GEN_4[17:9] == 9'h0
    & (superpage_hits_ignore_10 | _GEN_4[8:0] == 9'h0);
  wire [1:0]  hi_1 = {superpage_hits_3, superpage_hits_2};
  wire        _T_16 = superpage_hits_3 | superpage_hits_1;
  wire        invalidate_refill = _T_22 | (&state) | io_sfence_valid;
  wire [15:0] _GEN_6 = mpu_ppn[19:4] ^ 16'h1001;
  wire        newEntry_pr = legal_address & ~deny_access_to_debug & _pmp_io_r;
  wire [5:0]  _GEN_7 = {mpu_ppn[19:15], mpu_ppn[4]};
  wire [5:0]  _GEN_8 = {_GEN_6[15:11], _GEN_6[0]};
  wire        newEntry_pw =
    legal_address
    & (_GEN_7 == 6'h0 | mpu_ppn[19:15] == 5'h1 | _GEN_8 == 6'h0 | mpu_ppn[19:17] == 3'h3
       | mpu_ppn[19]) & ~deny_access_to_debug & _pmp_io_w;
  wire        newEntry_ppp =
    legal_address
    & (_GEN_7 == 6'h0 | mpu_ppn[19:15] == 5'h1 | _GEN_8 == 6'h0 | mpu_ppn[19:17] == 3'h3
       | mpu_ppn[19]);
  wire [4:0]  _GEN_9 = {mpu_ppn[19], mpu_ppn[17:15], mpu_ppn[4]};
  wire [3:0]  _GEN_10 = {mpu_ppn[19], mpu_ppn[17:15] ^ 3'h1};
  wire [4:0]  _GEN_11 = {mpu_ppn[19], _GEN_6[13:11], _GEN_6[0]};
  wire        newEntry_pal =
    legal_address & (_GEN_9 == 5'h0 | _GEN_10 == 4'h0 | _GEN_11 == 5'h0);
  wire        newEntry_paa =
    legal_address & (_GEN_9 == 5'h0 | _GEN_10 == 4'h0 | _GEN_11 == 5'h0);
  wire        newEntry_eff =
    legal_address
    & ({mpu_ppn[19:15], mpu_ppn[13], mpu_ppn[4], mpu_ppn[1]} == 8'h0
       | {mpu_ppn[19:15], ~(mpu_ppn[13]), mpu_ppn[4]} == 7'h0 | mpu_ppn[19:15] == 5'h1
       | {_GEN_6[15:11], mpu_ppn[13], _GEN_6[0]} == 7'h0 | mpu_ppn[19:17] == 3'h3);
  wire        refill_v = r_vstage1_en | r_stage2_en;
  wire        newEntry_g = io_ptw_resp_bits_pte_g & io_ptw_resp_bits_pte_v;
  wire        newEntry_ae_stage2 =
    io_ptw_resp_bits_ae_final & io_ptw_resp_bits_gpa_is_pte & r_stage2_en;
  wire        newEntry_sr =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_r;
  wire        newEntry_sw =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_w & io_ptw_resp_bits_pte_d;
  wire        newEntry_sx =
    io_ptw_resp_bits_pte_v
    & (io_ptw_resp_bits_pte_r | io_ptw_resp_bits_pte_x & ~io_ptw_resp_bits_pte_w)
    & io_ptw_resp_bits_pte_a & io_ptw_resp_bits_pte_x;
  wire        _GEN_12 = io_ptw_resp_valid & ~io_ptw_resp_bits_homogeneous;
  wire        _GEN_13 = _GEN_12 | special_entry_valid_0;
  wire        _GEN_14 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & r_superpage_repl_addr == 2'h0;
  wire        _GEN_15 = _GEN_14 ? ~invalidate_refill : superpage_entries_0_valid_0;
  wire        _GEN_16 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & r_superpage_repl_addr == 2'h1;
  wire        _GEN_17 = _GEN_16 ? ~invalidate_refill : superpage_entries_1_valid_0;
  wire        _GEN_18 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & r_superpage_repl_addr == 2'h2;
  wire        _GEN_19 = _GEN_18 ? ~invalidate_refill : superpage_entries_2_valid_0;
  wire        _GEN_20 =
    io_ptw_resp_valid & io_ptw_resp_bits_homogeneous & ~(io_ptw_resp_bits_level[1])
    & (&r_superpage_repl_addr);
  wire        _GEN_21 = _GEN_20 ? ~invalidate_refill : superpage_entries_3_valid_0;
  wire        _GEN_22 = ~io_ptw_resp_bits_homogeneous | ~(io_ptw_resp_bits_level[1]);
  wire        _GEN_23 = ~io_ptw_resp_valid | _GEN_22;
  wire        _GEN_24 = r_refill_tag[1:0] == 2'h0;
  wire        _GEN_25 = r_refill_tag[1:0] == 2'h1;
  wire        _GEN_26 = r_refill_tag[1:0] == 2'h2;
  wire [41:0] _sectored_entries_0_0_data_T =
    {io_ptw_resp_bits_pte_ppn[19:0],
     io_ptw_resp_bits_pte_u,
     newEntry_g,
     io_ptw_resp_bits_ae_ptw,
     io_ptw_resp_bits_ae_final,
     newEntry_ae_stage2,
     io_ptw_resp_bits_pf,
     io_ptw_resp_bits_gf,
     newEntry_sw,
     newEntry_sx,
     newEntry_sr,
     io_ptw_resp_bits_hw,
     io_ptw_resp_bits_hx,
     io_ptw_resp_bits_hr,
     newEntry_pw,
     newEntry_px,
     newEntry_pr,
     newEntry_ppp,
     newEntry_pal,
     newEntry_paa,
     newEntry_eff,
     newEntry_c,
     1'h0};
  wire        _GEN_27 =
    _GEN_23
      ? sectored_entries_0_0_valid_0
      : ~invalidate_refill
        & (_GEN_24 | r_sectored_hit_valid & sectored_entries_0_0_valid_0);
  wire        _GEN_28 =
    _GEN_23
      ? sectored_entries_0_0_valid_1
      : ~invalidate_refill
        & (_GEN_25 | r_sectored_hit_valid & sectored_entries_0_0_valid_1);
  wire        _GEN_29 =
    _GEN_23
      ? sectored_entries_0_0_valid_2
      : ~invalidate_refill
        & (_GEN_26 | r_sectored_hit_valid & sectored_entries_0_0_valid_2);
  wire        _GEN_30 =
    _GEN_23
      ? sectored_entries_0_0_valid_3
      : ~invalidate_refill
        & ((&(r_refill_tag[1:0])) | r_sectored_hit_valid & sectored_entries_0_0_valid_3);
  wire        _T_21 = state == 2'h0 & io_req_valid & tlb_miss;
  wire [24:0] _T_35 = sectored_entries_0_0_tag_vpn[26:2] ^ io_req_bits_vaddr[38:14];
  wire        _T_38 = _T_35 == 25'h0 & ~sectored_entries_0_0_tag_v;
  wire        _GEN_31 =
    _T_38 & ~sectored_entries_0_0_tag_v & io_req_bits_vaddr[13:12] == 2'h0;
  wire        _GEN_32 =
    _T_38 & ~sectored_entries_0_0_tag_v & io_req_bits_vaddr[13:12] == 2'h1;
  wire        _GEN_33 =
    _T_38 & ~sectored_entries_0_0_tag_v & io_req_bits_vaddr[13:12] == 2'h2;
  wire        _GEN_34 =
    _T_38 & ~sectored_entries_0_0_tag_v & (&(io_req_bits_vaddr[13:12]));
  wire        _T_149 = _T_35[24:16] == 9'h0;
  wire        _T_469 =
    superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v & _GEN_1[17:9] == 9'h0
    & (superpage_hits_ignore_1 | _GEN_1[8:0] == 9'h0);
  wire        _T_567 =
    superpage_entries_1_valid_0 & ~superpage_entries_1_tag_v & _GEN_2[17:9] == 9'h0
    & (superpage_hits_ignore_4 | _GEN_2[8:0] == 9'h0);
  wire        _T_665 =
    superpage_entries_2_valid_0 & ~superpage_entries_2_tag_v & _GEN_3[17:9] == 9'h0
    & (superpage_hits_ignore_7 | _GEN_3[8:0] == 9'h0);
  wire        _T_763 =
    superpage_entries_3_valid_0 & ~superpage_entries_3_tag_v & _GEN_4[17:9] == 9'h0
    & (superpage_hits_ignore_10 | _GEN_4[8:0] == 9'h0);
  wire        _T_861 =
    special_entry_valid_0 & ~special_entry_tag_v & _T_862[26:18] == 9'h0
    & (mpu_ppn_ignore | _T_862[17:9] == 9'h0)
    & (~(special_entry_level[1]) | _T_862[8:0] == 9'h0);
  wire        _T_1162 = multipleHits | reset;
  always @(posedge clock) begin
    if (_GEN_23) begin
    end
    else begin
      sectored_entries_0_0_tag_vpn <= r_refill_tag;
      sectored_entries_0_0_tag_v <= refill_v;
    end
    if (~io_ptw_resp_valid | _GEN_22 | ~_GEN_24) begin
    end
    else
      sectored_entries_0_0_data_0 <= _sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_22 | ~_GEN_25) begin
    end
    else
      sectored_entries_0_0_data_1 <= _sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_22 | ~_GEN_26) begin
    end
    else
      sectored_entries_0_0_data_2 <= _sectored_entries_0_0_data_T;
    if (~io_ptw_resp_valid | _GEN_22 | ~(&(r_refill_tag[1:0]))) begin
    end
    else
      sectored_entries_0_0_data_3 <= _sectored_entries_0_0_data_T;
    sectored_entries_0_0_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_T_149
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_0[0]
                         | _GEN_31) & _GEN_27
                     : ~_GEN_31 & _GEN_27)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_0[20]))
                      & _GEN_27
                    : sectored_entries_0_0_tag_v & _GEN_27)
           : _GEN_27);
    sectored_entries_0_0_valid_1 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_T_149
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_1[0]
                         | _GEN_32) & _GEN_28
                     : ~_GEN_32 & _GEN_28)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_1[20]))
                      & _GEN_28
                    : sectored_entries_0_0_tag_v & _GEN_28)
           : _GEN_28);
    sectored_entries_0_0_valid_2 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_T_149
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_2[0]
                         | _GEN_33) & _GEN_29
                     : ~_GEN_33 & _GEN_29)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_2[20]))
                      & _GEN_29
                    : sectored_entries_0_0_tag_v & _GEN_29)
           : _GEN_29);
    sectored_entries_0_0_valid_3 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_T_149
                     ? ~(~sectored_entries_0_0_tag_v & sectored_entries_0_0_data_3[0]
                         | _GEN_34) & _GEN_30
                     : ~_GEN_34 & _GEN_30)
                : io_sfence_bits_rs2
                    ? ~(~sectored_entries_0_0_tag_v & ~(sectored_entries_0_0_data_3[20]))
                      & _GEN_30
                    : sectored_entries_0_0_tag_v & _GEN_30)
           : _GEN_30);
    if (_GEN_14) begin
      superpage_entries_0_level <= {1'h0, io_ptw_resp_bits_level[0]};
      superpage_entries_0_tag_vpn <= r_refill_tag;
      superpage_entries_0_tag_v <= refill_v;
      superpage_entries_0_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         newEntry_sw,
         newEntry_sx,
         newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         newEntry_pw,
         newEntry_px,
         newEntry_pr,
         newEntry_ppp,
         newEntry_pal,
         newEntry_paa,
         newEntry_eff,
         newEntry_c,
         1'h0};
    end
    superpage_entries_0_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_1[17:9] == 9'h0
                     ? ~(~superpage_entries_0_tag_v & superpage_entries_0_data_0[0]
                         | _T_469) & _GEN_15
                     : ~_T_469 & _GEN_15)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_0_tag_v & ~(superpage_entries_0_data_0[20]))
                      & _GEN_15
                    : superpage_entries_0_tag_v & _GEN_15)
           : _GEN_15);
    if (_GEN_16) begin
      superpage_entries_1_level <= {1'h0, io_ptw_resp_bits_level[0]};
      superpage_entries_1_tag_vpn <= r_refill_tag;
      superpage_entries_1_tag_v <= refill_v;
      superpage_entries_1_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         newEntry_sw,
         newEntry_sx,
         newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         newEntry_pw,
         newEntry_px,
         newEntry_pr,
         newEntry_ppp,
         newEntry_pal,
         newEntry_paa,
         newEntry_eff,
         newEntry_c,
         1'h0};
    end
    superpage_entries_1_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_2[17:9] == 9'h0
                     ? ~(~superpage_entries_1_tag_v & superpage_entries_1_data_0[0]
                         | _T_567) & _GEN_17
                     : ~_T_567 & _GEN_17)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_1_tag_v & ~(superpage_entries_1_data_0[20]))
                      & _GEN_17
                    : superpage_entries_1_tag_v & _GEN_17)
           : _GEN_17);
    if (_GEN_18) begin
      superpage_entries_2_level <= {1'h0, io_ptw_resp_bits_level[0]};
      superpage_entries_2_tag_vpn <= r_refill_tag;
      superpage_entries_2_tag_v <= refill_v;
      superpage_entries_2_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         newEntry_sw,
         newEntry_sx,
         newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         newEntry_pw,
         newEntry_px,
         newEntry_pr,
         newEntry_ppp,
         newEntry_pal,
         newEntry_paa,
         newEntry_eff,
         newEntry_c,
         1'h0};
    end
    superpage_entries_2_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_3[17:9] == 9'h0
                     ? ~(~superpage_entries_2_tag_v & superpage_entries_2_data_0[0]
                         | _T_665) & _GEN_19
                     : ~_T_665 & _GEN_19)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_2_tag_v & ~(superpage_entries_2_data_0[20]))
                      & _GEN_19
                    : superpage_entries_2_tag_v & _GEN_19)
           : _GEN_19);
    if (_GEN_20) begin
      superpage_entries_3_level <= {1'h0, io_ptw_resp_bits_level[0]};
      superpage_entries_3_tag_vpn <= r_refill_tag;
      superpage_entries_3_tag_v <= refill_v;
      superpage_entries_3_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         newEntry_sw,
         newEntry_sx,
         newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         newEntry_pw,
         newEntry_px,
         newEntry_pr,
         newEntry_ppp,
         newEntry_pal,
         newEntry_paa,
         newEntry_eff,
         newEntry_c,
         1'h0};
    end
    superpage_entries_3_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_GEN_4[17:9] == 9'h0
                     ? ~(~superpage_entries_3_tag_v & superpage_entries_3_data_0[0]
                         | _T_763) & _GEN_21
                     : ~_T_763 & _GEN_21)
                : io_sfence_bits_rs2
                    ? ~(~superpage_entries_3_tag_v & ~(superpage_entries_3_data_0[20]))
                      & _GEN_21
                    : superpage_entries_3_tag_v & _GEN_21)
           : _GEN_21);
    if (_GEN_12) begin
      special_entry_level <= io_ptw_resp_bits_level;
      special_entry_tag_vpn <= r_refill_tag;
      special_entry_tag_v <= refill_v;
      special_entry_data_0 <=
        {io_ptw_resp_bits_pte_ppn[19:0],
         io_ptw_resp_bits_pte_u,
         newEntry_g,
         io_ptw_resp_bits_ae_ptw,
         io_ptw_resp_bits_ae_final,
         newEntry_ae_stage2,
         io_ptw_resp_bits_pf,
         io_ptw_resp_bits_gf,
         newEntry_sw,
         newEntry_sx,
         newEntry_sr,
         io_ptw_resp_bits_hw,
         io_ptw_resp_bits_hx,
         io_ptw_resp_bits_hr,
         newEntry_pw,
         newEntry_px,
         newEntry_pr,
         newEntry_ppp,
         newEntry_pal,
         newEntry_paa,
         newEntry_eff,
         newEntry_c,
         1'h0};
    end
    special_entry_valid_0 <=
      ~_T_1162
      & (io_sfence_valid
           ? (io_sfence_bits_rs1
                ? (_T_862[26:18] == 9'h0
                     ? ~(~special_entry_tag_v & special_entry_data_0[0] | _T_861)
                       & _GEN_13
                     : ~_T_861 & _GEN_13)
                : io_sfence_bits_rs2
                    ? ~(~special_entry_tag_v & ~(special_entry_data_0[20])) & _GEN_13
                    : special_entry_tag_v & _GEN_13)
           : _GEN_13);
    if (_T_21) begin
      r_refill_tag <= io_req_bits_vaddr[38:12];
      if (&{superpage_entries_3_valid_0,
            superpage_entries_2_valid_0,
            superpage_entries_1_valid_0,
            superpage_entries_0_valid_0})
        r_superpage_repl_addr <=
          {state_reg_1[2], state_reg_1[2] ? state_reg_1[1] : state_reg_1[0]};
      else if (_GEN_5[0])
        r_superpage_repl_addr <= 2'h0;
      else if (_GEN_5[1])
        r_superpage_repl_addr <= 2'h1;
      else
        r_superpage_repl_addr <= {1'h1, ~(_GEN_5[2])};
      r_sectored_hit_valid <=
        (sectored_entries_0_0_valid_0 | sectored_entries_0_0_valid_1
         | sectored_entries_0_0_valid_2 | sectored_entries_0_0_valid_3)
        & _sector_hits_T_4 == 25'h0 & ~sectored_entries_0_0_tag_v;
      r_need_gpa <= |real_hits;
    end
    r_vstage1_en <= ~_T_21 & r_vstage1_en;
    r_stage2_en <= ~_T_21 & r_stage2_en;
    if (reset) begin
      state <= 2'h0;
      state_reg_1 <= 3'h0;
    end
    else begin
      if (io_ptw_resp_valid)
        state <= 2'h0;
      else if (state == 2'h2 & io_sfence_valid)
        state <= 2'h3;
      else if (_T_22) begin
        if (io_kill)
          state <= 2'h0;
        else if (io_ptw_req_ready)
          state <= {1'h1, io_sfence_valid};
        else if (io_sfence_valid)
          state <= 2'h0;
        else if (_T_21)
          state <= 2'h1;
      end
      else if (_T_21)
        state <= 2'h1;
      if (io_req_valid & _vm_enabled_T_1
          & (superpage_entries_0_valid_0 & ~superpage_entries_0_tag_v
             & _GEN_1[17:9] == 9'h0 & (superpage_hits_ignore_1 | _GEN_1[8:0] == 9'h0)
             | superpage_hits_1 | superpage_hits_2 | superpage_hits_3))
        state_reg_1 <=
          {~(|hi_1),
           (|hi_1) ? ~_T_16 : state_reg_1[1],
           (|hi_1) ? state_reg_1[0] : ~_T_16};
    end
  end // always @(posedge)
  OptimizationBarrier mpu_ppn_barrier (
    .io_x_ppn      (special_entry_data_0[41:22]),
    .io_x_u        (special_entry_data_0[21]),
    .io_x_ae_ptw   (special_entry_data_0[19]),
    .io_x_ae_final (special_entry_data_0[18]),
    .io_x_pf       (special_entry_data_0[16]),
    .io_x_gf       (special_entry_data_0[15]),
    .io_x_sw       (special_entry_data_0[14]),
    .io_x_sx       (special_entry_data_0[13]),
    .io_x_sr       (special_entry_data_0[12]),
    .io_x_pw       (special_entry_data_0[8]),
    .io_x_px       (special_entry_data_0[7]),
    .io_x_pr       (special_entry_data_0[6]),
    .io_x_ppp      (special_entry_data_0[5]),
    .io_x_pal      (special_entry_data_0[4]),
    .io_x_paa      (special_entry_data_0[3]),
    .io_x_eff      (special_entry_data_0[2]),
    .io_x_c        (special_entry_data_0[1]),
    .io_y_ppn      (_mpu_ppn_barrier_io_y_ppn),
    .io_y_u        (_mpu_ppn_barrier_io_y_u),
    .io_y_ae_ptw   (_mpu_ppn_barrier_io_y_ae_ptw),
    .io_y_ae_final (_mpu_ppn_barrier_io_y_ae_final),
    .io_y_pf       (_mpu_ppn_barrier_io_y_pf),
    .io_y_gf       (_mpu_ppn_barrier_io_y_gf),
    .io_y_sw       (_mpu_ppn_barrier_io_y_sw),
    .io_y_sx       (_mpu_ppn_barrier_io_y_sx),
    .io_y_sr       (_mpu_ppn_barrier_io_y_sr),
    .io_y_pw       (_mpu_ppn_barrier_io_y_pw),
    .io_y_px       (_mpu_ppn_barrier_io_y_px),
    .io_y_pr       (_mpu_ppn_barrier_io_y_pr),
    .io_y_ppp      (_mpu_ppn_barrier_io_y_ppp),
    .io_y_pal      (_mpu_ppn_barrier_io_y_pal),
    .io_y_paa      (_mpu_ppn_barrier_io_y_paa),
    .io_y_eff      (_mpu_ppn_barrier_io_y_eff),
    .io_y_c        (_mpu_ppn_barrier_io_y_c)
  );
  PMPChecker_2 pmp (
    .io_prv         (mpu_priv[1:0]),
    .io_pmp_0_cfg_l (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr  (io_ptw_pmp_0_addr),
    .io_pmp_0_mask  (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr  (io_ptw_pmp_1_addr),
    .io_pmp_1_mask  (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr  (io_ptw_pmp_2_addr),
    .io_pmp_2_mask  (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr  (io_ptw_pmp_3_addr),
    .io_pmp_3_mask  (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr  (io_ptw_pmp_4_addr),
    .io_pmp_4_mask  (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr  (io_ptw_pmp_5_addr),
    .io_pmp_5_mask  (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr  (io_ptw_pmp_6_addr),
    .io_pmp_6_mask  (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr  (io_ptw_pmp_7_addr),
    .io_pmp_7_mask  (io_ptw_pmp_7_mask),
    .io_addr        ({mpu_ppn[19:0], io_req_bits_vaddr[11:0]}),
    .io_r           (_pmp_io_r),
    .io_w           (_pmp_io_w),
    .io_x           (_pmp_io_x)
  );
  OptimizationBarrier entries_barrier (
    .io_x_ppn      (casez_tmp_0[41:22]),
    .io_x_u        (casez_tmp_0[21]),
    .io_x_ae_ptw   (casez_tmp_0[19]),
    .io_x_ae_final (casez_tmp_0[18]),
    .io_x_pf       (casez_tmp_0[16]),
    .io_x_gf       (casez_tmp_0[15]),
    .io_x_sw       (casez_tmp_0[14]),
    .io_x_sx       (casez_tmp_0[13]),
    .io_x_sr       (casez_tmp_0[12]),
    .io_x_pw       (casez_tmp_0[8]),
    .io_x_px       (casez_tmp_0[7]),
    .io_x_pr       (casez_tmp_0[6]),
    .io_x_ppp      (casez_tmp_0[5]),
    .io_x_pal      (casez_tmp_0[4]),
    .io_x_paa      (casez_tmp_0[3]),
    .io_x_eff      (casez_tmp_0[2]),
    .io_x_c        (casez_tmp_0[1]),
    .io_y_ppn      (_entries_barrier_io_y_ppn),
    .io_y_u        (_entries_barrier_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_io_y_ae_final),
    .io_y_pf       (_entries_barrier_io_y_pf),
    .io_y_gf       (_entries_barrier_io_y_gf),
    .io_y_sw       (_entries_barrier_io_y_sw),
    .io_y_sx       (_entries_barrier_io_y_sx),
    .io_y_sr       (_entries_barrier_io_y_sr),
    .io_y_pw       (_entries_barrier_io_y_pw),
    .io_y_px       (_entries_barrier_io_y_px),
    .io_y_pr       (_entries_barrier_io_y_pr),
    .io_y_ppp      (_entries_barrier_io_y_ppp),
    .io_y_pal      (_entries_barrier_io_y_pal),
    .io_y_paa      (_entries_barrier_io_y_paa),
    .io_y_eff      (_entries_barrier_io_y_eff),
    .io_y_c        (_entries_barrier_io_y_c)
  );
  OptimizationBarrier entries_barrier_1 (
    .io_x_ppn      (superpage_entries_0_data_0[41:22]),
    .io_x_u        (superpage_entries_0_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_0_data_0[19]),
    .io_x_ae_final (superpage_entries_0_data_0[18]),
    .io_x_pf       (superpage_entries_0_data_0[16]),
    .io_x_gf       (superpage_entries_0_data_0[15]),
    .io_x_sw       (superpage_entries_0_data_0[14]),
    .io_x_sx       (superpage_entries_0_data_0[13]),
    .io_x_sr       (superpage_entries_0_data_0[12]),
    .io_x_pw       (superpage_entries_0_data_0[8]),
    .io_x_px       (superpage_entries_0_data_0[7]),
    .io_x_pr       (superpage_entries_0_data_0[6]),
    .io_x_ppp      (superpage_entries_0_data_0[5]),
    .io_x_pal      (superpage_entries_0_data_0[4]),
    .io_x_paa      (superpage_entries_0_data_0[3]),
    .io_x_eff      (superpage_entries_0_data_0[2]),
    .io_x_c        (superpage_entries_0_data_0[1]),
    .io_y_ppn      (_entries_barrier_1_io_y_ppn),
    .io_y_u        (_entries_barrier_1_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_1_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_1_io_y_ae_final),
    .io_y_pf       (_entries_barrier_1_io_y_pf),
    .io_y_gf       (_entries_barrier_1_io_y_gf),
    .io_y_sw       (_entries_barrier_1_io_y_sw),
    .io_y_sx       (_entries_barrier_1_io_y_sx),
    .io_y_sr       (_entries_barrier_1_io_y_sr),
    .io_y_pw       (_entries_barrier_1_io_y_pw),
    .io_y_px       (_entries_barrier_1_io_y_px),
    .io_y_pr       (_entries_barrier_1_io_y_pr),
    .io_y_ppp      (_entries_barrier_1_io_y_ppp),
    .io_y_pal      (_entries_barrier_1_io_y_pal),
    .io_y_paa      (_entries_barrier_1_io_y_paa),
    .io_y_eff      (_entries_barrier_1_io_y_eff),
    .io_y_c        (_entries_barrier_1_io_y_c)
  );
  OptimizationBarrier entries_barrier_2 (
    .io_x_ppn      (superpage_entries_1_data_0[41:22]),
    .io_x_u        (superpage_entries_1_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_1_data_0[19]),
    .io_x_ae_final (superpage_entries_1_data_0[18]),
    .io_x_pf       (superpage_entries_1_data_0[16]),
    .io_x_gf       (superpage_entries_1_data_0[15]),
    .io_x_sw       (superpage_entries_1_data_0[14]),
    .io_x_sx       (superpage_entries_1_data_0[13]),
    .io_x_sr       (superpage_entries_1_data_0[12]),
    .io_x_pw       (superpage_entries_1_data_0[8]),
    .io_x_px       (superpage_entries_1_data_0[7]),
    .io_x_pr       (superpage_entries_1_data_0[6]),
    .io_x_ppp      (superpage_entries_1_data_0[5]),
    .io_x_pal      (superpage_entries_1_data_0[4]),
    .io_x_paa      (superpage_entries_1_data_0[3]),
    .io_x_eff      (superpage_entries_1_data_0[2]),
    .io_x_c        (superpage_entries_1_data_0[1]),
    .io_y_ppn      (_entries_barrier_2_io_y_ppn),
    .io_y_u        (_entries_barrier_2_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_2_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_2_io_y_ae_final),
    .io_y_pf       (_entries_barrier_2_io_y_pf),
    .io_y_gf       (_entries_barrier_2_io_y_gf),
    .io_y_sw       (_entries_barrier_2_io_y_sw),
    .io_y_sx       (_entries_barrier_2_io_y_sx),
    .io_y_sr       (_entries_barrier_2_io_y_sr),
    .io_y_pw       (_entries_barrier_2_io_y_pw),
    .io_y_px       (_entries_barrier_2_io_y_px),
    .io_y_pr       (_entries_barrier_2_io_y_pr),
    .io_y_ppp      (_entries_barrier_2_io_y_ppp),
    .io_y_pal      (_entries_barrier_2_io_y_pal),
    .io_y_paa      (_entries_barrier_2_io_y_paa),
    .io_y_eff      (_entries_barrier_2_io_y_eff),
    .io_y_c        (_entries_barrier_2_io_y_c)
  );
  OptimizationBarrier entries_barrier_3 (
    .io_x_ppn      (superpage_entries_2_data_0[41:22]),
    .io_x_u        (superpage_entries_2_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_2_data_0[19]),
    .io_x_ae_final (superpage_entries_2_data_0[18]),
    .io_x_pf       (superpage_entries_2_data_0[16]),
    .io_x_gf       (superpage_entries_2_data_0[15]),
    .io_x_sw       (superpage_entries_2_data_0[14]),
    .io_x_sx       (superpage_entries_2_data_0[13]),
    .io_x_sr       (superpage_entries_2_data_0[12]),
    .io_x_pw       (superpage_entries_2_data_0[8]),
    .io_x_px       (superpage_entries_2_data_0[7]),
    .io_x_pr       (superpage_entries_2_data_0[6]),
    .io_x_ppp      (superpage_entries_2_data_0[5]),
    .io_x_pal      (superpage_entries_2_data_0[4]),
    .io_x_paa      (superpage_entries_2_data_0[3]),
    .io_x_eff      (superpage_entries_2_data_0[2]),
    .io_x_c        (superpage_entries_2_data_0[1]),
    .io_y_ppn      (_entries_barrier_3_io_y_ppn),
    .io_y_u        (_entries_barrier_3_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_3_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_3_io_y_ae_final),
    .io_y_pf       (_entries_barrier_3_io_y_pf),
    .io_y_gf       (_entries_barrier_3_io_y_gf),
    .io_y_sw       (_entries_barrier_3_io_y_sw),
    .io_y_sx       (_entries_barrier_3_io_y_sx),
    .io_y_sr       (_entries_barrier_3_io_y_sr),
    .io_y_pw       (_entries_barrier_3_io_y_pw),
    .io_y_px       (_entries_barrier_3_io_y_px),
    .io_y_pr       (_entries_barrier_3_io_y_pr),
    .io_y_ppp      (_entries_barrier_3_io_y_ppp),
    .io_y_pal      (_entries_barrier_3_io_y_pal),
    .io_y_paa      (_entries_barrier_3_io_y_paa),
    .io_y_eff      (_entries_barrier_3_io_y_eff),
    .io_y_c        (_entries_barrier_3_io_y_c)
  );
  OptimizationBarrier entries_barrier_4 (
    .io_x_ppn      (superpage_entries_3_data_0[41:22]),
    .io_x_u        (superpage_entries_3_data_0[21]),
    .io_x_ae_ptw   (superpage_entries_3_data_0[19]),
    .io_x_ae_final (superpage_entries_3_data_0[18]),
    .io_x_pf       (superpage_entries_3_data_0[16]),
    .io_x_gf       (superpage_entries_3_data_0[15]),
    .io_x_sw       (superpage_entries_3_data_0[14]),
    .io_x_sx       (superpage_entries_3_data_0[13]),
    .io_x_sr       (superpage_entries_3_data_0[12]),
    .io_x_pw       (superpage_entries_3_data_0[8]),
    .io_x_px       (superpage_entries_3_data_0[7]),
    .io_x_pr       (superpage_entries_3_data_0[6]),
    .io_x_ppp      (superpage_entries_3_data_0[5]),
    .io_x_pal      (superpage_entries_3_data_0[4]),
    .io_x_paa      (superpage_entries_3_data_0[3]),
    .io_x_eff      (superpage_entries_3_data_0[2]),
    .io_x_c        (superpage_entries_3_data_0[1]),
    .io_y_ppn      (_entries_barrier_4_io_y_ppn),
    .io_y_u        (_entries_barrier_4_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_4_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_4_io_y_ae_final),
    .io_y_pf       (_entries_barrier_4_io_y_pf),
    .io_y_gf       (_entries_barrier_4_io_y_gf),
    .io_y_sw       (_entries_barrier_4_io_y_sw),
    .io_y_sx       (_entries_barrier_4_io_y_sx),
    .io_y_sr       (_entries_barrier_4_io_y_sr),
    .io_y_pw       (_entries_barrier_4_io_y_pw),
    .io_y_px       (_entries_barrier_4_io_y_px),
    .io_y_pr       (_entries_barrier_4_io_y_pr),
    .io_y_ppp      (_entries_barrier_4_io_y_ppp),
    .io_y_pal      (_entries_barrier_4_io_y_pal),
    .io_y_paa      (_entries_barrier_4_io_y_paa),
    .io_y_eff      (_entries_barrier_4_io_y_eff),
    .io_y_c        (_entries_barrier_4_io_y_c)
  );
  OptimizationBarrier entries_barrier_5 (
    .io_x_ppn      (special_entry_data_0[41:22]),
    .io_x_u        (special_entry_data_0[21]),
    .io_x_ae_ptw   (special_entry_data_0[19]),
    .io_x_ae_final (special_entry_data_0[18]),
    .io_x_pf       (special_entry_data_0[16]),
    .io_x_gf       (special_entry_data_0[15]),
    .io_x_sw       (special_entry_data_0[14]),
    .io_x_sx       (special_entry_data_0[13]),
    .io_x_sr       (special_entry_data_0[12]),
    .io_x_pw       (special_entry_data_0[8]),
    .io_x_px       (special_entry_data_0[7]),
    .io_x_pr       (special_entry_data_0[6]),
    .io_x_ppp      (special_entry_data_0[5]),
    .io_x_pal      (special_entry_data_0[4]),
    .io_x_paa      (special_entry_data_0[3]),
    .io_x_eff      (special_entry_data_0[2]),
    .io_x_c        (special_entry_data_0[1]),
    .io_y_ppn      (_entries_barrier_5_io_y_ppn),
    .io_y_u        (_entries_barrier_5_io_y_u),
    .io_y_ae_ptw   (_entries_barrier_5_io_y_ae_ptw),
    .io_y_ae_final (_entries_barrier_5_io_y_ae_final),
    .io_y_pf       (_entries_barrier_5_io_y_pf),
    .io_y_gf       (_entries_barrier_5_io_y_gf),
    .io_y_sw       (_entries_barrier_5_io_y_sw),
    .io_y_sx       (_entries_barrier_5_io_y_sx),
    .io_y_sr       (_entries_barrier_5_io_y_sr),
    .io_y_pw       (_entries_barrier_5_io_y_pw),
    .io_y_px       (_entries_barrier_5_io_y_px),
    .io_y_pr       (_entries_barrier_5_io_y_pr),
    .io_y_ppp      (_entries_barrier_5_io_y_ppp),
    .io_y_pal      (_entries_barrier_5_io_y_pal),
    .io_y_paa      (_entries_barrier_5_io_y_paa),
    .io_y_eff      (_entries_barrier_5_io_y_eff),
    .io_y_c        (_entries_barrier_5_io_y_c)
  );
  assign io_resp_miss = io_ptw_resp_valid | tlb_miss | multipleHits;
  assign io_resp_paddr =
    {(hitsVec_0 ? _entries_barrier_io_y_ppn : 20'h0)
       | (hitsVec_1
            ? {_entries_barrier_1_io_y_ppn[19:18],
               (superpage_hits_ignore_1 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_1_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_1_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_2
            ? {_entries_barrier_2_io_y_ppn[19:18],
               (superpage_hits_ignore_4 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_2_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_2_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_3
            ? {_entries_barrier_3_io_y_ppn[19:18],
               (superpage_hits_ignore_7 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_3_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_3_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_4
            ? {_entries_barrier_4_io_y_ppn[19:18],
               (superpage_hits_ignore_10 ? io_req_bits_vaddr[29:21] : 9'h0)
                 | _entries_barrier_4_io_y_ppn[17:9],
               io_req_bits_vaddr[20:12] | _entries_barrier_4_io_y_ppn[8:0]}
            : 20'h0)
       | (hitsVec_5
            ? {_entries_barrier_5_io_y_ppn[19:18],
               _GEN | _entries_barrier_5_io_y_ppn[17:9],
               _GEN_0 | _entries_barrier_5_io_y_ppn[8:0]}
            : 20'h0) | (_vm_enabled_T_1 ? 20'h0 : io_req_bits_vaddr[31:12]),
     io_req_bits_vaddr[11:0]};
  assign io_resp_pf_inst =
    bad_va
    | (|((~((io_req_bits_prv[0]
               ? ~{_entries_barrier_5_io_y_u,
                   _entries_barrier_4_io_y_u,
                   _entries_barrier_3_io_y_u,
                   _entries_barrier_2_io_y_u,
                   _entries_barrier_1_io_y_u,
                   _entries_barrier_io_y_u}
               : {_entries_barrier_5_io_y_u,
                  _entries_barrier_4_io_y_u,
                  _entries_barrier_3_io_y_u,
                  _entries_barrier_2_io_y_u,
                  _entries_barrier_1_io_y_u,
                  _entries_barrier_io_y_u})
            & {_entries_barrier_5_io_y_sx,
               _entries_barrier_4_io_y_sx,
               _entries_barrier_3_io_y_sx,
               _entries_barrier_2_io_y_sx,
               _entries_barrier_1_io_y_sx,
               _entries_barrier_io_y_sx})
          & {~_entries_barrier_5_io_y_ae_ptw,
             ~_entries_barrier_4_io_y_ae_ptw,
             ~_entries_barrier_3_io_y_ae_ptw,
             ~_entries_barrier_2_io_y_ae_ptw,
             ~_entries_barrier_1_io_y_ae_ptw,
             ~_entries_barrier_io_y_ae_ptw}
          | {_entries_barrier_5_io_y_pf,
             _entries_barrier_4_io_y_pf,
             _entries_barrier_3_io_y_pf,
             _entries_barrier_2_io_y_pf,
             _entries_barrier_1_io_y_pf,
             _entries_barrier_io_y_pf})
         & {~_entries_barrier_5_io_y_gf,
            ~_entries_barrier_4_io_y_gf,
            ~_entries_barrier_3_io_y_gf,
            ~_entries_barrier_2_io_y_gf,
            ~_entries_barrier_1_io_y_gf,
            ~_entries_barrier_io_y_gf}
         & {hitsVec_5, hitsVec_4, hitsVec_3, hitsVec_2, hitsVec_1, hitsVec_0}));
  assign io_resp_ae_inst =
    |(~({{2{newEntry_px}},
         _entries_barrier_4_io_y_px,
         _entries_barrier_3_io_y_px,
         _entries_barrier_2_io_y_px,
         _entries_barrier_1_io_y_px,
         _entries_barrier_io_y_px}
        & {1'h1,
           ~(_entries_barrier_5_io_y_ae_ptw | _entries_barrier_5_io_y_ae_final),
           ~(_entries_barrier_4_io_y_ae_ptw | _entries_barrier_4_io_y_ae_final),
           ~(_entries_barrier_3_io_y_ae_ptw | _entries_barrier_3_io_y_ae_final),
           ~(_entries_barrier_2_io_y_ae_ptw | _entries_barrier_2_io_y_ae_final),
           ~(_entries_barrier_1_io_y_ae_ptw | _entries_barrier_1_io_y_ae_final),
           ~(_entries_barrier_io_y_ae_ptw | _entries_barrier_io_y_ae_final)}) & hits);
  assign io_resp_cacheable =
    |({{2{newEntry_c}},
       _entries_barrier_4_io_y_c,
       _entries_barrier_3_io_y_c,
       _entries_barrier_2_io_y_c,
       _entries_barrier_1_io_y_c,
       _entries_barrier_io_y_c} & hits);
  assign io_ptw_req_valid = _T_22;
  assign io_ptw_req_bits_valid = ~io_kill;
  assign io_ptw_req_bits_bits_addr = r_refill_tag;
  assign io_ptw_req_bits_bits_need_gpa = r_need_gpa;
  assign io_ptw_req_bits_bits_vstage1 = r_vstage1_en;
  assign io_ptw_req_bits_bits_stage2 = r_stage2_en;
endmodule

module Frontend(
  input         clock,
                reset,
                auto_icache_master_out_a_ready,
                auto_icache_master_out_d_valid,
  input  [2:0]  auto_icache_master_out_d_bits_opcode,
  input  [3:0]  auto_icache_master_out_d_bits_size,
  input  [63:0] auto_icache_master_out_d_bits_data,
  input         auto_icache_master_out_d_bits_corrupt,
                io_cpu_might_request,
                io_cpu_req_valid,
  input  [39:0] io_cpu_req_bits_pc,
  input         io_cpu_req_bits_speculative,
                io_cpu_sfence_valid,
                io_cpu_sfence_bits_rs1,
                io_cpu_sfence_bits_rs2,
  input  [38:0] io_cpu_sfence_bits_addr,
  input         io_cpu_resp_ready,
                io_cpu_btb_update_valid,
                io_cpu_bht_update_valid,
                io_cpu_flush_icache,
                io_cpu_progress,
                io_ptw_req_ready,
                io_ptw_resp_valid,
                io_ptw_resp_bits_ae_ptw,
                io_ptw_resp_bits_ae_final,
                io_ptw_resp_bits_pf,
                io_ptw_resp_bits_gf,
                io_ptw_resp_bits_hr,
                io_ptw_resp_bits_hw,
                io_ptw_resp_bits_hx,
  input  [43:0] io_ptw_resp_bits_pte_ppn,
  input         io_ptw_resp_bits_pte_d,
                io_ptw_resp_bits_pte_a,
                io_ptw_resp_bits_pte_g,
                io_ptw_resp_bits_pte_u,
                io_ptw_resp_bits_pte_x,
                io_ptw_resp_bits_pte_w,
                io_ptw_resp_bits_pte_r,
                io_ptw_resp_bits_pte_v,
  input  [1:0]  io_ptw_resp_bits_level,
  input         io_ptw_resp_bits_homogeneous,
                io_ptw_resp_bits_gpa_is_pte,
  input  [3:0]  io_ptw_ptbr_mode,
  input         io_ptw_status_debug,
  input  [1:0]  io_ptw_status_prv,
  input         io_ptw_pmp_0_cfg_l,
  input  [1:0]  io_ptw_pmp_0_cfg_a,
  input         io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  input  [29:0] io_ptw_pmp_0_addr,
  input  [31:0] io_ptw_pmp_0_mask,
  input         io_ptw_pmp_1_cfg_l,
  input  [1:0]  io_ptw_pmp_1_cfg_a,
  input         io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  input  [29:0] io_ptw_pmp_1_addr,
  input  [31:0] io_ptw_pmp_1_mask,
  input         io_ptw_pmp_2_cfg_l,
  input  [1:0]  io_ptw_pmp_2_cfg_a,
  input         io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  input  [29:0] io_ptw_pmp_2_addr,
  input  [31:0] io_ptw_pmp_2_mask,
  input         io_ptw_pmp_3_cfg_l,
  input  [1:0]  io_ptw_pmp_3_cfg_a,
  input         io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  input  [29:0] io_ptw_pmp_3_addr,
  input  [31:0] io_ptw_pmp_3_mask,
  input         io_ptw_pmp_4_cfg_l,
  input  [1:0]  io_ptw_pmp_4_cfg_a,
  input         io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  input  [29:0] io_ptw_pmp_4_addr,
  input  [31:0] io_ptw_pmp_4_mask,
  input         io_ptw_pmp_5_cfg_l,
  input  [1:0]  io_ptw_pmp_5_cfg_a,
  input         io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  input  [29:0] io_ptw_pmp_5_addr,
  input  [31:0] io_ptw_pmp_5_mask,
  input         io_ptw_pmp_6_cfg_l,
  input  [1:0]  io_ptw_pmp_6_cfg_a,
  input         io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  input  [29:0] io_ptw_pmp_6_addr,
  input  [31:0] io_ptw_pmp_6_mask,
  input         io_ptw_pmp_7_cfg_l,
  input  [1:0]  io_ptw_pmp_7_cfg_a,
  input         io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  input  [29:0] io_ptw_pmp_7_addr,
  input  [31:0] io_ptw_pmp_7_mask,
  input  [63:0] io_ptw_customCSRs_csrs_0_value,
  output        auto_icache_master_out_a_valid,
  output [31:0] auto_icache_master_out_a_bits_address,
  output        io_cpu_resp_valid,
                io_cpu_resp_bits_btb_taken,
                io_cpu_resp_bits_btb_bridx,
  output [39:0] io_cpu_resp_bits_pc,
  output [31:0] io_cpu_resp_bits_data,
  output        io_cpu_resp_bits_xcpt_pf_inst,
                io_cpu_resp_bits_xcpt_gf_inst,
                io_cpu_resp_bits_xcpt_ae_inst,
                io_cpu_resp_bits_replay,
                io_cpu_gpa_valid,
                io_ptw_req_valid,
                io_ptw_req_bits_valid,
  output [26:0] io_ptw_req_bits_bits_addr,
  output        io_ptw_req_bits_bits_need_gpa,
                io_ptw_req_bits_bits_vstage1,
                io_ptw_req_bits_bits_stage2
);

  wire [39:0] _io_cpu_npc_T_3;
  wire        _fq_io_enq_valid_T_6;
  wire        _tlb_io_resp_miss;
  wire [31:0] _tlb_io_resp_paddr;
  wire        _tlb_io_resp_pf_inst;
  wire        _tlb_io_resp_ae_inst;
  wire        _tlb_io_resp_cacheable;
  wire        _tlb_io_ptw_req_valid;
  wire        _fq_io_enq_ready;
  wire [4:0]  _fq_io_mask;
  wire        _icache_io_resp_valid;
  wire [31:0] _icache_io_resp_bits_data;
  wire        _icache_io_resp_bits_replay;
  wire        _icache_io_resp_bits_ae;
  reg         s1_valid;
  reg         s2_valid;
  wire        s0_valid =
    io_cpu_req_valid | ~(_fq_io_mask[2]) | ~(_fq_io_mask[3]) & (~s1_valid | ~s2_valid)
    | ~(_fq_io_mask[4]) & ~s1_valid & ~s2_valid;
  reg  [39:0] s1_pc;
  reg         s1_speculative;
  reg  [39:0] s2_pc;
  reg         s2_tlb_resp_miss;
  reg         s2_tlb_resp_pf_inst;
  reg         s2_tlb_resp_gf_inst;
  reg         s2_tlb_resp_ae_inst;
  reg         s2_tlb_resp_cacheable;
  wire        s2_xcpt = s2_tlb_resp_ae_inst | s2_tlb_resp_pf_inst | s2_tlb_resp_gf_inst;
  reg         s2_speculative;
  wire        _T_23 = _fq_io_enq_ready & _fq_io_enq_valid_T_6;
  reg         s2_replay_REG;
  wire        s2_replay = s2_valid & ~_T_23 | s2_replay_REG;
  reg  [1:0]  recent_progress_counter;
  wire        s2_kill_speculative_tlb_refill =
    s2_speculative & ~(|recent_progress_counter);
  wire        _icache_io_s2_kill_T_2 =
    s2_speculative & ~(s2_tlb_resp_cacheable & ~(io_ptw_customCSRs_csrs_0_value[3]))
    | s2_xcpt;
  reg         fq_io_enq_valid_REG;
  wire        _fq_io_enq_bits_replay_T_5 =
    s2_kill_speculative_tlb_refill & s2_tlb_resp_miss;
  assign _fq_io_enq_valid_T_6 =
    fq_io_enq_valid_REG & s2_valid
    & (_icache_io_resp_valid | _fq_io_enq_bits_replay_T_5 | ~s2_tlb_resp_miss
       & _icache_io_s2_kill_T_2);
  assign _io_cpu_npc_T_3 =
    ~(~(io_cpu_req_valid
          ? io_cpu_req_bits_pc
          : s2_replay ? s2_pc : ~(~s1_pc | 40'h3) + 40'h4) | 40'h1);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~(io_cpu_req_valid | io_cpu_sfence_valid | io_cpu_flush_icache
                | io_cpu_bht_update_valid | io_cpu_btb_update_valid)
              | io_cpu_might_request)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Frontend.scala:92 assert(!(io.cpu.req.valid || io.cpu.sfence.valid || io.cpu.flush_icache || io.cpu.bht_update.valid || io.cpu.btb_update.valid) || io.cpu.might_request)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & s2_speculative & io_ptw_customCSRs_csrs_0_value[3]
          & ~_icache_io_s2_kill_T_2) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Frontend.scala:190 assert(!(s2_speculative && io.ptw.customCSRs.asInstanceOf[RocketCustomCSRs].disableSpeculativeICacheRefill && !icache.io.s2_kill))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg         gpa_valid;
  always @(posedge clock) begin
    s1_valid <= s0_valid;
    s1_pc <= _io_cpu_npc_T_3;
    if (io_cpu_req_valid)
      s1_speculative <= io_cpu_req_bits_speculative;
    else if (s2_replay)
      s1_speculative <= s2_speculative;
    else
      s1_speculative <= s1_speculative | s2_valid & ~s2_speculative;
    if (~s2_replay) begin
      s2_tlb_resp_miss <= _tlb_io_resp_miss;
      s2_tlb_resp_pf_inst <= _tlb_io_resp_pf_inst;
      s2_tlb_resp_ae_inst <= _tlb_io_resp_ae_inst;
      s2_tlb_resp_cacheable <= _tlb_io_resp_cacheable;
    end
    s2_tlb_resp_gf_inst <= s2_replay & s2_tlb_resp_gf_inst;
    fq_io_enq_valid_REG <= s1_valid;
    if (reset) begin
      s2_valid <= 1'h0;
      s2_pc <= 40'h10000;
      s2_speculative <= 1'h0;
      s2_replay_REG <= 1'h1;
      recent_progress_counter <= 2'h3;
    end
    else begin
      s2_valid <= ~s2_replay & ~io_cpu_req_valid;
      if (~s2_replay) begin
        s2_pc <= s1_pc;
        s2_speculative <= s1_speculative;
      end
      s2_replay_REG <= s2_replay & ~s0_valid;
      if (io_cpu_progress)
        recent_progress_counter <= 2'h3;
      else if (io_ptw_req_ready & _tlb_io_ptw_req_valid & (|recent_progress_counter))
        recent_progress_counter <= recent_progress_counter - 2'h1;
    end
    if (io_cpu_req_valid)
      gpa_valid <= 1'h0;
    else
      gpa_valid <= _T_23 & s2_tlb_resp_gf_inst | gpa_valid;
  end // always @(posedge)
  ICache icache (
    .clock                          (clock),
    .reset                          (reset),
    .auto_master_out_a_ready        (auto_icache_master_out_a_ready),
    .auto_master_out_d_valid        (auto_icache_master_out_d_valid),
    .auto_master_out_d_bits_opcode  (auto_icache_master_out_d_bits_opcode),
    .auto_master_out_d_bits_size    (auto_icache_master_out_d_bits_size),
    .auto_master_out_d_bits_data    (auto_icache_master_out_d_bits_data),
    .auto_master_out_d_bits_corrupt (auto_icache_master_out_d_bits_corrupt),
    .io_req_valid                   (s0_valid),
    .io_req_bits_addr               (_io_cpu_npc_T_3[38:0]),
    .io_s1_paddr                    (_tlb_io_resp_paddr),
    .io_s1_kill                     (io_cpu_req_valid | _tlb_io_resp_miss | s2_replay),
    .io_s2_kill                     (_icache_io_s2_kill_T_2),
    .io_invalidate                  (io_cpu_flush_icache),
    .auto_master_out_a_valid        (auto_icache_master_out_a_valid),
    .auto_master_out_a_bits_address (auto_icache_master_out_a_bits_address),
    .io_resp_valid                  (_icache_io_resp_valid),
    .io_resp_bits_data              (_icache_io_resp_bits_data),
    .io_resp_bits_replay            (_icache_io_resp_bits_replay),
    .io_resp_bits_ae                (_icache_io_resp_bits_ae)
  );
  ShiftQueue fq (
    .clock                    (clock),
    .reset                    (reset | io_cpu_req_valid),
    .io_enq_valid             (_fq_io_enq_valid_T_6),
    .io_enq_bits_btb_bridx    (1'h0),
    .io_enq_bits_pc           (s2_pc),
    .io_enq_bits_data         (_icache_io_resp_bits_data),
    .io_enq_bits_xcpt_pf_inst (s2_tlb_resp_pf_inst),
    .io_enq_bits_xcpt_gf_inst (s2_tlb_resp_gf_inst),
    .io_enq_bits_xcpt_ae_inst
      (_icache_io_resp_valid & _icache_io_resp_bits_ae | s2_tlb_resp_ae_inst),
    .io_enq_bits_replay
      (_icache_io_resp_bits_replay | _icache_io_s2_kill_T_2 & ~_icache_io_resp_valid
       & ~s2_xcpt | _fq_io_enq_bits_replay_T_5),
    .io_deq_ready             (io_cpu_resp_ready),
    .io_enq_ready             (_fq_io_enq_ready),
    .io_deq_valid             (io_cpu_resp_valid),
    .io_deq_bits_btb_taken    (io_cpu_resp_bits_btb_taken),
    .io_deq_bits_btb_bridx    (io_cpu_resp_bits_btb_bridx),
    .io_deq_bits_pc           (io_cpu_resp_bits_pc),
    .io_deq_bits_data         (io_cpu_resp_bits_data),
    .io_deq_bits_xcpt_pf_inst (io_cpu_resp_bits_xcpt_pf_inst),
    .io_deq_bits_xcpt_gf_inst (io_cpu_resp_bits_xcpt_gf_inst),
    .io_deq_bits_xcpt_ae_inst (io_cpu_resp_bits_xcpt_ae_inst),
    .io_deq_bits_replay       (io_cpu_resp_bits_replay),
    .io_mask                  (_fq_io_mask)
  );
  TLB_1 tlb (
    .clock                         (clock),
    .reset                         (reset),
    .io_req_valid                  (s1_valid & ~s2_replay),
    .io_req_bits_vaddr             (s1_pc),
    .io_req_bits_prv               (io_ptw_status_prv),
    .io_sfence_valid               (io_cpu_sfence_valid),
    .io_sfence_bits_rs1            (io_cpu_sfence_bits_rs1),
    .io_sfence_bits_rs2            (io_cpu_sfence_bits_rs2),
    .io_sfence_bits_addr           (io_cpu_sfence_bits_addr),
    .io_ptw_req_ready              (io_ptw_req_ready),
    .io_ptw_resp_valid             (io_ptw_resp_valid),
    .io_ptw_resp_bits_ae_ptw       (io_ptw_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final     (io_ptw_resp_bits_ae_final),
    .io_ptw_resp_bits_pf           (io_ptw_resp_bits_pf),
    .io_ptw_resp_bits_gf           (io_ptw_resp_bits_gf),
    .io_ptw_resp_bits_hr           (io_ptw_resp_bits_hr),
    .io_ptw_resp_bits_hw           (io_ptw_resp_bits_hw),
    .io_ptw_resp_bits_hx           (io_ptw_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn      (io_ptw_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d        (io_ptw_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a        (io_ptw_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g        (io_ptw_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u        (io_ptw_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x        (io_ptw_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w        (io_ptw_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r        (io_ptw_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v        (io_ptw_resp_bits_pte_v),
    .io_ptw_resp_bits_level        (io_ptw_resp_bits_level),
    .io_ptw_resp_bits_homogeneous  (io_ptw_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte   (io_ptw_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode              (io_ptw_ptbr_mode),
    .io_ptw_status_debug           (io_ptw_status_debug),
    .io_ptw_pmp_0_cfg_l            (io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a            (io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x            (io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w            (io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r            (io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr             (io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask             (io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l            (io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a            (io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x            (io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w            (io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r            (io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr             (io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask             (io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l            (io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a            (io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x            (io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w            (io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r            (io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr             (io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask             (io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l            (io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a            (io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x            (io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w            (io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r            (io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr             (io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask             (io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l            (io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a            (io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x            (io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w            (io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r            (io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr             (io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask             (io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l            (io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a            (io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x            (io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w            (io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r            (io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr             (io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask             (io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l            (io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a            (io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x            (io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w            (io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r            (io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr             (io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask             (io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l            (io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a            (io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x            (io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w            (io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r            (io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr             (io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask             (io_ptw_pmp_7_mask),
    .io_kill                       (~s2_valid | s2_kill_speculative_tlb_refill),
    .io_resp_miss                  (_tlb_io_resp_miss),
    .io_resp_paddr                 (_tlb_io_resp_paddr),
    .io_resp_pf_inst               (_tlb_io_resp_pf_inst),
    .io_resp_ae_inst               (_tlb_io_resp_ae_inst),
    .io_resp_cacheable             (_tlb_io_resp_cacheable),
    .io_ptw_req_valid              (_tlb_io_ptw_req_valid),
    .io_ptw_req_bits_valid         (io_ptw_req_bits_valid),
    .io_ptw_req_bits_bits_addr     (io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa (io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1  (io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2   (io_ptw_req_bits_bits_stage2)
  );
  assign io_cpu_gpa_valid = gpa_valid;
  assign io_ptw_req_valid = _tlb_io_ptw_req_valid;
endmodule

module HellaCacheArbiter(
  input         clock,
                io_requestor_0_req_valid,
  input  [39:0] io_requestor_0_req_bits_addr,
  input         io_requestor_0_req_bits_dv,
                io_requestor_0_s1_kill,
                io_requestor_1_req_valid,
  input  [39:0] io_requestor_1_req_bits_addr,
  input  [6:0]  io_requestor_1_req_bits_tag,
  input  [4:0]  io_requestor_1_req_bits_cmd,
  input  [1:0]  io_requestor_1_req_bits_size,
  input         io_requestor_1_req_bits_signed,
  input  [1:0]  io_requestor_1_req_bits_dprv,
  input         io_requestor_1_req_bits_dv,
                io_requestor_1_s1_kill,
  input  [63:0] io_requestor_1_s1_data_data,
  input         io_mem_req_ready,
                io_mem_s2_nack,
                io_mem_resp_valid,
  input  [6:0]  io_mem_resp_bits_tag,
  input  [63:0] io_mem_resp_bits_data,
  input         io_mem_resp_bits_replay,
                io_mem_resp_bits_has_data,
  input  [63:0] io_mem_resp_bits_data_word_bypass,
  input         io_mem_replay_next,
                io_mem_s2_xcpt_ma_ld,
                io_mem_s2_xcpt_ma_st,
                io_mem_s2_xcpt_pf_ld,
                io_mem_s2_xcpt_pf_st,
                io_mem_s2_xcpt_gf_ld,
                io_mem_s2_xcpt_gf_st,
                io_mem_s2_xcpt_ae_ld,
                io_mem_s2_xcpt_ae_st,
                io_mem_ordered,
                io_mem_perf_release,
                io_mem_perf_grant,
  output        io_requestor_0_req_ready,
                io_requestor_0_s2_nack,
                io_requestor_0_resp_valid,
  output [63:0] io_requestor_0_resp_bits_data,
  output        io_requestor_0_s2_xcpt_ae_ld,
                io_requestor_1_req_ready,
                io_requestor_1_s2_nack,
                io_requestor_1_resp_valid,
  output [6:0]  io_requestor_1_resp_bits_tag,
  output [63:0] io_requestor_1_resp_bits_data,
  output        io_requestor_1_resp_bits_replay,
                io_requestor_1_resp_bits_has_data,
  output [63:0] io_requestor_1_resp_bits_data_word_bypass,
  output        io_requestor_1_replay_next,
                io_requestor_1_s2_xcpt_ma_ld,
                io_requestor_1_s2_xcpt_ma_st,
                io_requestor_1_s2_xcpt_pf_ld,
                io_requestor_1_s2_xcpt_pf_st,
                io_requestor_1_s2_xcpt_gf_ld,
                io_requestor_1_s2_xcpt_gf_st,
                io_requestor_1_s2_xcpt_ae_ld,
                io_requestor_1_s2_xcpt_ae_st,
                io_requestor_1_ordered,
                io_requestor_1_perf_release,
                io_requestor_1_perf_grant,
                io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output [6:0]  io_mem_req_bits_tag,
  output [4:0]  io_mem_req_bits_cmd,
  output [1:0]  io_mem_req_bits_size,
  output        io_mem_req_bits_signed,
  output [1:0]  io_mem_req_bits_dprv,
  output        io_mem_req_bits_dv,
                io_mem_req_bits_phys,
                io_mem_s1_kill,
  output [63:0] io_mem_s1_data_data
);

  reg s1_id;
  reg s2_id;
  always @(posedge clock) begin
    if (io_requestor_0_req_valid)
      s1_id <= 1'h0;
    else
      s1_id <= 1'h1;
    s2_id <= s1_id;
  end // always @(posedge)
  assign io_requestor_0_req_ready = io_mem_req_ready;
  assign io_requestor_0_s2_nack = io_mem_s2_nack & ~s2_id;
  assign io_requestor_0_resp_valid = io_mem_resp_valid & ~(io_mem_resp_bits_tag[0]);
  assign io_requestor_0_resp_bits_data = io_mem_resp_bits_data;
  assign io_requestor_0_s2_xcpt_ae_ld = io_mem_s2_xcpt_ae_ld;
  assign io_requestor_1_req_ready = io_mem_req_ready & ~io_requestor_0_req_valid;
  assign io_requestor_1_s2_nack = io_mem_s2_nack & s2_id;
  assign io_requestor_1_resp_valid = io_mem_resp_valid & io_mem_resp_bits_tag[0];
  assign io_requestor_1_resp_bits_tag = {1'h0, io_mem_resp_bits_tag[6:1]};
  assign io_requestor_1_resp_bits_data = io_mem_resp_bits_data;
  assign io_requestor_1_resp_bits_replay = io_mem_resp_bits_replay;
  assign io_requestor_1_resp_bits_has_data = io_mem_resp_bits_has_data;
  assign io_requestor_1_resp_bits_data_word_bypass = io_mem_resp_bits_data_word_bypass;
  assign io_requestor_1_replay_next = io_mem_replay_next;
  assign io_requestor_1_s2_xcpt_ma_ld = io_mem_s2_xcpt_ma_ld;
  assign io_requestor_1_s2_xcpt_ma_st = io_mem_s2_xcpt_ma_st;
  assign io_requestor_1_s2_xcpt_pf_ld = io_mem_s2_xcpt_pf_ld;
  assign io_requestor_1_s2_xcpt_pf_st = io_mem_s2_xcpt_pf_st;
  assign io_requestor_1_s2_xcpt_gf_ld = io_mem_s2_xcpt_gf_ld;
  assign io_requestor_1_s2_xcpt_gf_st = io_mem_s2_xcpt_gf_st;
  assign io_requestor_1_s2_xcpt_ae_ld = io_mem_s2_xcpt_ae_ld;
  assign io_requestor_1_s2_xcpt_ae_st = io_mem_s2_xcpt_ae_st;
  assign io_requestor_1_ordered = io_mem_ordered;
  assign io_requestor_1_perf_release = io_mem_perf_release;
  assign io_requestor_1_perf_grant = io_mem_perf_grant;
  assign io_mem_req_valid = io_requestor_0_req_valid | io_requestor_1_req_valid;
  assign io_mem_req_bits_addr =
    io_requestor_0_req_valid
      ? io_requestor_0_req_bits_addr
      : io_requestor_1_req_bits_addr;
  assign io_mem_req_bits_tag =
    io_requestor_0_req_valid ? 7'h0 : {io_requestor_1_req_bits_tag[5:0], 1'h1};
  assign io_mem_req_bits_cmd =
    io_requestor_0_req_valid ? 5'h0 : io_requestor_1_req_bits_cmd;
  assign io_mem_req_bits_size =
    io_requestor_0_req_valid ? 2'h3 : io_requestor_1_req_bits_size;
  assign io_mem_req_bits_signed =
    ~io_requestor_0_req_valid & io_requestor_1_req_bits_signed;
  assign io_mem_req_bits_dprv =
    io_requestor_0_req_valid ? 2'h1 : io_requestor_1_req_bits_dprv;
  assign io_mem_req_bits_dv =
    io_requestor_0_req_valid ? io_requestor_0_req_bits_dv : io_requestor_1_req_bits_dv;
  assign io_mem_req_bits_phys = io_requestor_0_req_valid;
  assign io_mem_s1_kill = s1_id ? io_requestor_1_s1_kill : io_requestor_0_s1_kill;
  assign io_mem_s1_data_data = s1_id ? io_requestor_1_s1_data_data : 64'h0;
endmodule

module Arbiter(
  input         io_in_0_valid,
                io_in_0_bits_valid,
  input  [26:0] io_in_0_bits_bits_addr,
  input         io_in_0_bits_bits_need_gpa,
                io_in_0_bits_bits_vstage1,
                io_in_0_bits_bits_stage2,
                io_in_1_valid,
                io_in_1_bits_valid,
  input  [26:0] io_in_1_bits_bits_addr,
  input         io_in_1_bits_bits_need_gpa,
                io_in_1_bits_bits_vstage1,
                io_in_1_bits_bits_stage2,
                io_out_ready,
  output        io_in_0_ready,
                io_in_1_ready,
                io_out_valid,
                io_out_bits_valid,
  output [26:0] io_out_bits_bits_addr,
  output        io_out_bits_bits_need_gpa,
                io_out_bits_bits_vstage1,
                io_out_bits_bits_stage2,
                io_chosen
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_valid = io_in_0_valid ? io_in_0_bits_valid : io_in_1_bits_valid;
  assign io_out_bits_bits_addr =
    io_in_0_valid ? io_in_0_bits_bits_addr : io_in_1_bits_bits_addr;
  assign io_out_bits_bits_need_gpa =
    io_in_0_valid ? io_in_0_bits_bits_need_gpa : io_in_1_bits_bits_need_gpa;
  assign io_out_bits_bits_vstage1 =
    io_in_0_valid ? io_in_0_bits_bits_vstage1 : io_in_1_bits_bits_vstage1;
  assign io_out_bits_bits_stage2 =
    io_in_0_valid ? io_in_0_bits_bits_stage2 : io_in_1_bits_bits_stage2;
  assign io_chosen = ~io_in_0_valid;
endmodule

module OptimizationBarrier_21(
  input  [2:0] io_x,
  output [2:0] io_y
);

  assign io_y = io_x;
endmodule

module OptimizationBarrier_22(
  input  [43:0] io_x_ppn,
  input         io_x_d,
                io_x_a,
                io_x_g,
                io_x_u,
                io_x_x,
                io_x_w,
                io_x_r,
                io_x_v,
  output [43:0] io_y_ppn,
  output        io_y_d,
                io_y_a,
                io_y_g,
                io_y_u,
                io_y_x,
                io_y_w,
                io_y_r,
                io_y_v
);

  assign io_y_ppn = io_x_ppn;
  assign io_y_d = io_x_d;
  assign io_y_a = io_x_a;
  assign io_y_g = io_x_g;
  assign io_y_u = io_x_u;
  assign io_y_x = io_x_x;
  assign io_y_w = io_x_w;
  assign io_y_r = io_x_r;
  assign io_y_v = io_x_v;
endmodule

module PTW(
  input         clock,
                reset,
                io_requestor_0_req_valid,
                io_requestor_0_req_bits_valid,
  input  [26:0] io_requestor_0_req_bits_bits_addr,
  input         io_requestor_0_req_bits_bits_need_gpa,
                io_requestor_0_req_bits_bits_vstage1,
                io_requestor_0_req_bits_bits_stage2,
                io_requestor_1_req_valid,
                io_requestor_1_req_bits_valid,
  input  [26:0] io_requestor_1_req_bits_bits_addr,
  input         io_requestor_1_req_bits_bits_need_gpa,
                io_requestor_1_req_bits_bits_vstage1,
                io_requestor_1_req_bits_bits_stage2,
                io_mem_req_ready,
                io_mem_s2_nack,
                io_mem_resp_valid,
  input  [63:0] io_mem_resp_bits_data,
  input         io_mem_s2_xcpt_ae_ld,
  input  [3:0]  io_dpath_ptbr_mode,
  input  [43:0] io_dpath_ptbr_ppn,
  input         io_dpath_sfence_valid,
                io_dpath_sfence_bits_rs1,
                io_dpath_status_debug,
  input  [1:0]  io_dpath_status_prv,
  input         io_dpath_status_mxr,
                io_dpath_status_sum,
                io_dpath_pmp_0_cfg_l,
  input  [1:0]  io_dpath_pmp_0_cfg_a,
  input         io_dpath_pmp_0_cfg_x,
                io_dpath_pmp_0_cfg_w,
                io_dpath_pmp_0_cfg_r,
  input  [29:0] io_dpath_pmp_0_addr,
  input  [31:0] io_dpath_pmp_0_mask,
  input         io_dpath_pmp_1_cfg_l,
  input  [1:0]  io_dpath_pmp_1_cfg_a,
  input         io_dpath_pmp_1_cfg_x,
                io_dpath_pmp_1_cfg_w,
                io_dpath_pmp_1_cfg_r,
  input  [29:0] io_dpath_pmp_1_addr,
  input  [31:0] io_dpath_pmp_1_mask,
  input         io_dpath_pmp_2_cfg_l,
  input  [1:0]  io_dpath_pmp_2_cfg_a,
  input         io_dpath_pmp_2_cfg_x,
                io_dpath_pmp_2_cfg_w,
                io_dpath_pmp_2_cfg_r,
  input  [29:0] io_dpath_pmp_2_addr,
  input  [31:0] io_dpath_pmp_2_mask,
  input         io_dpath_pmp_3_cfg_l,
  input  [1:0]  io_dpath_pmp_3_cfg_a,
  input         io_dpath_pmp_3_cfg_x,
                io_dpath_pmp_3_cfg_w,
                io_dpath_pmp_3_cfg_r,
  input  [29:0] io_dpath_pmp_3_addr,
  input  [31:0] io_dpath_pmp_3_mask,
  input         io_dpath_pmp_4_cfg_l,
  input  [1:0]  io_dpath_pmp_4_cfg_a,
  input         io_dpath_pmp_4_cfg_x,
                io_dpath_pmp_4_cfg_w,
                io_dpath_pmp_4_cfg_r,
  input  [29:0] io_dpath_pmp_4_addr,
  input  [31:0] io_dpath_pmp_4_mask,
  input         io_dpath_pmp_5_cfg_l,
  input  [1:0]  io_dpath_pmp_5_cfg_a,
  input         io_dpath_pmp_5_cfg_x,
                io_dpath_pmp_5_cfg_w,
                io_dpath_pmp_5_cfg_r,
  input  [29:0] io_dpath_pmp_5_addr,
  input  [31:0] io_dpath_pmp_5_mask,
  input         io_dpath_pmp_6_cfg_l,
  input  [1:0]  io_dpath_pmp_6_cfg_a,
  input         io_dpath_pmp_6_cfg_x,
                io_dpath_pmp_6_cfg_w,
                io_dpath_pmp_6_cfg_r,
  input  [29:0] io_dpath_pmp_6_addr,
  input  [31:0] io_dpath_pmp_6_mask,
  input         io_dpath_pmp_7_cfg_l,
  input  [1:0]  io_dpath_pmp_7_cfg_a,
  input         io_dpath_pmp_7_cfg_x,
                io_dpath_pmp_7_cfg_w,
                io_dpath_pmp_7_cfg_r,
  input  [29:0] io_dpath_pmp_7_addr,
  input  [31:0] io_dpath_pmp_7_mask,
  input  [63:0] io_dpath_customCSRs_csrs_0_value,
  output        io_requestor_0_req_ready,
                io_requestor_0_resp_valid,
                io_requestor_0_resp_bits_ae_ptw,
                io_requestor_0_resp_bits_ae_final,
                io_requestor_0_resp_bits_pf,
                io_requestor_0_resp_bits_gf,
                io_requestor_0_resp_bits_hr,
                io_requestor_0_resp_bits_hw,
                io_requestor_0_resp_bits_hx,
  output [43:0] io_requestor_0_resp_bits_pte_ppn,
  output        io_requestor_0_resp_bits_pte_d,
                io_requestor_0_resp_bits_pte_a,
                io_requestor_0_resp_bits_pte_g,
                io_requestor_0_resp_bits_pte_u,
                io_requestor_0_resp_bits_pte_x,
                io_requestor_0_resp_bits_pte_w,
                io_requestor_0_resp_bits_pte_r,
                io_requestor_0_resp_bits_pte_v,
  output [1:0]  io_requestor_0_resp_bits_level,
  output        io_requestor_0_resp_bits_homogeneous,
                io_requestor_0_resp_bits_gpa_is_pte,
  output [3:0]  io_requestor_0_ptbr_mode,
  output        io_requestor_0_status_debug,
                io_requestor_0_status_mxr,
                io_requestor_0_status_sum,
                io_requestor_0_pmp_0_cfg_l,
  output [1:0]  io_requestor_0_pmp_0_cfg_a,
  output        io_requestor_0_pmp_0_cfg_x,
                io_requestor_0_pmp_0_cfg_w,
                io_requestor_0_pmp_0_cfg_r,
  output [29:0] io_requestor_0_pmp_0_addr,
  output [31:0] io_requestor_0_pmp_0_mask,
  output        io_requestor_0_pmp_1_cfg_l,
  output [1:0]  io_requestor_0_pmp_1_cfg_a,
  output        io_requestor_0_pmp_1_cfg_x,
                io_requestor_0_pmp_1_cfg_w,
                io_requestor_0_pmp_1_cfg_r,
  output [29:0] io_requestor_0_pmp_1_addr,
  output [31:0] io_requestor_0_pmp_1_mask,
  output        io_requestor_0_pmp_2_cfg_l,
  output [1:0]  io_requestor_0_pmp_2_cfg_a,
  output        io_requestor_0_pmp_2_cfg_x,
                io_requestor_0_pmp_2_cfg_w,
                io_requestor_0_pmp_2_cfg_r,
  output [29:0] io_requestor_0_pmp_2_addr,
  output [31:0] io_requestor_0_pmp_2_mask,
  output        io_requestor_0_pmp_3_cfg_l,
  output [1:0]  io_requestor_0_pmp_3_cfg_a,
  output        io_requestor_0_pmp_3_cfg_x,
                io_requestor_0_pmp_3_cfg_w,
                io_requestor_0_pmp_3_cfg_r,
  output [29:0] io_requestor_0_pmp_3_addr,
  output [31:0] io_requestor_0_pmp_3_mask,
  output        io_requestor_0_pmp_4_cfg_l,
  output [1:0]  io_requestor_0_pmp_4_cfg_a,
  output        io_requestor_0_pmp_4_cfg_x,
                io_requestor_0_pmp_4_cfg_w,
                io_requestor_0_pmp_4_cfg_r,
  output [29:0] io_requestor_0_pmp_4_addr,
  output [31:0] io_requestor_0_pmp_4_mask,
  output        io_requestor_0_pmp_5_cfg_l,
  output [1:0]  io_requestor_0_pmp_5_cfg_a,
  output        io_requestor_0_pmp_5_cfg_x,
                io_requestor_0_pmp_5_cfg_w,
                io_requestor_0_pmp_5_cfg_r,
  output [29:0] io_requestor_0_pmp_5_addr,
  output [31:0] io_requestor_0_pmp_5_mask,
  output        io_requestor_0_pmp_6_cfg_l,
  output [1:0]  io_requestor_0_pmp_6_cfg_a,
  output        io_requestor_0_pmp_6_cfg_x,
                io_requestor_0_pmp_6_cfg_w,
                io_requestor_0_pmp_6_cfg_r,
  output [29:0] io_requestor_0_pmp_6_addr,
  output [31:0] io_requestor_0_pmp_6_mask,
  output        io_requestor_0_pmp_7_cfg_l,
  output [1:0]  io_requestor_0_pmp_7_cfg_a,
  output        io_requestor_0_pmp_7_cfg_x,
                io_requestor_0_pmp_7_cfg_w,
                io_requestor_0_pmp_7_cfg_r,
  output [29:0] io_requestor_0_pmp_7_addr,
  output [31:0] io_requestor_0_pmp_7_mask,
  output        io_requestor_1_req_ready,
                io_requestor_1_resp_valid,
                io_requestor_1_resp_bits_ae_ptw,
                io_requestor_1_resp_bits_ae_final,
                io_requestor_1_resp_bits_pf,
                io_requestor_1_resp_bits_gf,
                io_requestor_1_resp_bits_hr,
                io_requestor_1_resp_bits_hw,
                io_requestor_1_resp_bits_hx,
  output [43:0] io_requestor_1_resp_bits_pte_ppn,
  output        io_requestor_1_resp_bits_pte_d,
                io_requestor_1_resp_bits_pte_a,
                io_requestor_1_resp_bits_pte_g,
                io_requestor_1_resp_bits_pte_u,
                io_requestor_1_resp_bits_pte_x,
                io_requestor_1_resp_bits_pte_w,
                io_requestor_1_resp_bits_pte_r,
                io_requestor_1_resp_bits_pte_v,
  output [1:0]  io_requestor_1_resp_bits_level,
  output        io_requestor_1_resp_bits_homogeneous,
                io_requestor_1_resp_bits_gpa_is_pte,
  output [3:0]  io_requestor_1_ptbr_mode,
  output        io_requestor_1_status_debug,
  output [1:0]  io_requestor_1_status_prv,
  output        io_requestor_1_pmp_0_cfg_l,
  output [1:0]  io_requestor_1_pmp_0_cfg_a,
  output        io_requestor_1_pmp_0_cfg_x,
                io_requestor_1_pmp_0_cfg_w,
                io_requestor_1_pmp_0_cfg_r,
  output [29:0] io_requestor_1_pmp_0_addr,
  output [31:0] io_requestor_1_pmp_0_mask,
  output        io_requestor_1_pmp_1_cfg_l,
  output [1:0]  io_requestor_1_pmp_1_cfg_a,
  output        io_requestor_1_pmp_1_cfg_x,
                io_requestor_1_pmp_1_cfg_w,
                io_requestor_1_pmp_1_cfg_r,
  output [29:0] io_requestor_1_pmp_1_addr,
  output [31:0] io_requestor_1_pmp_1_mask,
  output        io_requestor_1_pmp_2_cfg_l,
  output [1:0]  io_requestor_1_pmp_2_cfg_a,
  output        io_requestor_1_pmp_2_cfg_x,
                io_requestor_1_pmp_2_cfg_w,
                io_requestor_1_pmp_2_cfg_r,
  output [29:0] io_requestor_1_pmp_2_addr,
  output [31:0] io_requestor_1_pmp_2_mask,
  output        io_requestor_1_pmp_3_cfg_l,
  output [1:0]  io_requestor_1_pmp_3_cfg_a,
  output        io_requestor_1_pmp_3_cfg_x,
                io_requestor_1_pmp_3_cfg_w,
                io_requestor_1_pmp_3_cfg_r,
  output [29:0] io_requestor_1_pmp_3_addr,
  output [31:0] io_requestor_1_pmp_3_mask,
  output        io_requestor_1_pmp_4_cfg_l,
  output [1:0]  io_requestor_1_pmp_4_cfg_a,
  output        io_requestor_1_pmp_4_cfg_x,
                io_requestor_1_pmp_4_cfg_w,
                io_requestor_1_pmp_4_cfg_r,
  output [29:0] io_requestor_1_pmp_4_addr,
  output [31:0] io_requestor_1_pmp_4_mask,
  output        io_requestor_1_pmp_5_cfg_l,
  output [1:0]  io_requestor_1_pmp_5_cfg_a,
  output        io_requestor_1_pmp_5_cfg_x,
                io_requestor_1_pmp_5_cfg_w,
                io_requestor_1_pmp_5_cfg_r,
  output [29:0] io_requestor_1_pmp_5_addr,
  output [31:0] io_requestor_1_pmp_5_mask,
  output        io_requestor_1_pmp_6_cfg_l,
  output [1:0]  io_requestor_1_pmp_6_cfg_a,
  output        io_requestor_1_pmp_6_cfg_x,
                io_requestor_1_pmp_6_cfg_w,
                io_requestor_1_pmp_6_cfg_r,
  output [29:0] io_requestor_1_pmp_6_addr,
  output [31:0] io_requestor_1_pmp_6_mask,
  output        io_requestor_1_pmp_7_cfg_l,
  output [1:0]  io_requestor_1_pmp_7_cfg_a,
  output        io_requestor_1_pmp_7_cfg_x,
                io_requestor_1_pmp_7_cfg_w,
                io_requestor_1_pmp_7_cfg_r,
  output [29:0] io_requestor_1_pmp_7_addr,
  output [31:0] io_requestor_1_pmp_7_mask,
  output [63:0] io_requestor_1_customCSRs_csrs_0_value,
  output        io_mem_req_valid,
  output [39:0] io_mem_req_bits_addr,
  output        io_mem_req_bits_dv,
                io_mem_s1_kill
);

  wire        do_switch;
  reg         l2_refill;
  wire [43:0] _r_pte_barrier_io_y_ppn;
  wire        _r_pte_barrier_io_y_d;
  wire        _r_pte_barrier_io_y_a;
  wire        _r_pte_barrier_io_y_g;
  wire        _r_pte_barrier_io_y_u;
  wire        _r_pte_barrier_io_y_x;
  wire        _r_pte_barrier_io_y_w;
  wire        _r_pte_barrier_io_y_r;
  wire        _r_pte_barrier_io_y_v;
  wire [2:0]  _state_barrier_io_y;
  wire        _arb_io_out_valid;
  wire        _arb_io_out_bits_valid;
  wire [26:0] _arb_io_out_bits_bits_addr;
  wire        _arb_io_out_bits_bits_need_gpa;
  wire        _arb_io_out_bits_bits_vstage1;
  wire        _arb_io_out_bits_bits_stage2;
  wire        _arb_io_chosen;
  reg  [2:0]  casez_tmp;
  reg  [2:0]  state;
  wire        _T_124 = state == 3'h0;
  wire        _arb_io_out_ready_T_2 = _T_124 & ~l2_refill;
  reg         resp_valid_0;
  reg         resp_valid_1;
  reg         invalidated;
  reg  [1:0]  count;
  reg         resp_ae_ptw;
  reg         resp_ae_final;
  reg         resp_pf;
  reg         resp_gf;
  reg         resp_hr;
  reg         resp_hw;
  reg         resp_hx;
  reg  [26:0] r_req_addr;
  reg         r_req_need_gpa;
  reg         r_req_vstage1;
  reg         r_req_stage2;
  reg         r_req_dest;
  reg  [43:0] r_pte_ppn;
  reg         r_pte_d;
  reg         r_pte_a;
  reg         r_pte_g;
  reg         r_pte_u;
  reg         r_pte_x;
  reg         r_pte_w;
  reg         r_pte_r;
  reg         r_pte_v;
  reg  [43:0] r_hgatp_ppn;
  reg  [1:0]  aux_count;
  reg  [43:0] aux_pte_ppn;
  reg         aux_pte_d;
  reg         aux_pte_a;
  reg         aux_pte_g;
  reg         aux_pte_u;
  reg         aux_pte_x;
  reg         aux_pte_w;
  reg         aux_pte_r;
  reg         aux_pte_v;
  reg         stage2;
  reg         stage2_final;
  wire        do_both_stages = r_req_vstage1 & r_req_stage2;
  wire        _max_count_T = count < aux_count;
  wire [1:0]  max_count = _max_count_T ? aux_count : count;
  wire [26:0] _GEN = r_req_vstage1 & stage2 ? aux_pte_ppn[26:0] : r_req_addr;
  reg         mem_resp_valid;
  reg  [63:0] mem_resp_data;
  wire [26:0] _res_ppn_T_4 =
    do_both_stages & ~stage2 ? mem_resp_data[36:10] : {7'h0, mem_resp_data[29:10]};
  wire        aux_pte_pte_v =
    ~((mem_resp_data[1] | mem_resp_data[2] | mem_resp_data[3])
      & (~(count[1]) & (|(mem_resp_data[18:10])) | count == 2'h0
         & (|(mem_resp_data[27:19])))) & mem_resp_data[0];
  wire        invalid_paddr =
    do_both_stages & ~stage2 ? (|(mem_resp_data[53:37])) : (|(mem_resp_data[53:30]));
  wire        _T_235 = mem_resp_data[63:54] == 10'h0;
  wire        traverse =
    aux_pte_pte_v & ~(mem_resp_data[1]) & ~(mem_resp_data[2]) & ~(mem_resp_data[3])
    & ~(mem_resp_data[7]) & ~(mem_resp_data[6]) & ~(mem_resp_data[4]) & _T_235
    & ~invalid_paddr & ~(count[1]);
  wire        _leaf_T_5 = count == 2'h1;
  wire        _T_221 = count == 2'h2;
  wire        _GEN_0 = (&count) | _T_221;
  wire [8:0]  pte_addr_vpn_idx =
    _GEN_0 ? _GEN[8:0] : _leaf_T_5 ? _GEN[17:9] : _GEN[26:18];
  reg  [6:0]  state_reg;
  reg  [7:0]  valid;
  reg  [31:0] tags_0;
  reg  [31:0] tags_1;
  reg  [31:0] tags_2;
  reg  [31:0] tags_3;
  reg  [31:0] tags_4;
  reg  [31:0] tags_5;
  reg  [31:0] tags_6;
  reg  [31:0] tags_7;
  reg  [19:0] data_0;
  reg  [19:0] data_1;
  reg  [19:0] data_2;
  reg  [19:0] data_3;
  reg  [19:0] data_4;
  reg  [19:0] data_5;
  reg  [19:0] data_6;
  reg  [19:0] data_7;
  wire        can_hit = ~(count[1]) & (r_req_vstage1 ? stage2 : ~r_req_stage2);
  wire [32:0] tag = {r_req_vstage1, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
  wire [7:0]  hits =
    {{1'h0, tags_7} == tag,
     {1'h0, tags_6} == tag,
     {1'h0, tags_5} == tag,
     {1'h0, tags_4} == tag,
     {1'h0, tags_3} == tag,
     {1'h0, tags_2} == tag,
     {1'h0, tags_1} == tag,
     {1'h0, tags_0} == tag} & valid;
  wire        pte_cache_hit = (|hits) & can_hit;
  wire        _T_144 = state == 3'h1;
  reg  [6:0]  state_reg_1;
  reg  [7:0]  valid_1;
  reg  [31:0] tags_1_0;
  reg  [31:0] tags_1_1;
  reg  [31:0] tags_1_2;
  reg  [31:0] tags_1_3;
  reg  [31:0] tags_1_4;
  reg  [31:0] tags_1_5;
  reg  [31:0] tags_1_6;
  reg  [31:0] tags_1_7;
  reg  [19:0] data_1_0;
  reg  [19:0] data_1_1;
  reg  [19:0] data_1_2;
  reg  [19:0] data_1_3;
  reg  [19:0] data_1_4;
  reg  [19:0] data_1_5;
  reg  [19:0] data_1_6;
  reg  [19:0] data_1_7;
  wire [55:0] _pmpHomogeneous_T = {r_pte_ppn, 12'h0};
  wire [25:0] _GEN_1 = {r_pte_ppn[43:19], ~(r_pte_ppn[17])};
  wire [55:0] _GEN_2 = {24'h0, io_dpath_pmp_0_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _GEN_3 = {24'h0, io_dpath_pmp_1_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_1 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_6 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_1};
  wire [55:0] _GEN_4 = {24'h0, io_dpath_pmp_2_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_2 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_12 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_2};
  wire [55:0] _GEN_5 = {24'h0, io_dpath_pmp_3_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_3 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_18 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_3};
  wire [55:0] _GEN_6 = {24'h0, io_dpath_pmp_4_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_4 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_24 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_4};
  wire [55:0] _GEN_7 = {24'h0, io_dpath_pmp_5_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_5 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_30 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_5};
  wire [55:0] _GEN_8 = {24'h0, io_dpath_pmp_6_addr, 2'h0};
  wire [31:0] pmpHomogeneous_pgMask_6 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_36 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_6};
  wire [31:0] pmpHomogeneous_pgMask_7 =
    _GEN_0 ? 32'hFFFFF000 : _leaf_T_5 ? 32'hFFE00000 : 32'hC0000000;
  wire [55:0] _pmpHomogeneous_endsBeforeUpper_T_42 =
    _pmpHomogeneous_T & {24'h0, pmpHomogeneous_pgMask_7};
  wire        homogeneous =
    (_GEN_0
       ? r_pte_ppn == 44'h0 | r_pte_ppn == 44'h3 | r_pte_ppn[43:4] == 40'h1
         | r_pte_ppn[43:4] == 40'h200 | r_pte_ppn[43:14] == 30'h3
         | {r_pte_ppn[43:2] ^ 42'h4004, r_pte_ppn[0]} == 43'h0 | r_pte_ppn == 44'h10014
         | r_pte_ppn == 44'h1001F | _GEN_1 == 26'h0 | r_pte_ppn[43:19] == 25'h1
       : _leaf_T_5
           ? r_pte_ppn[43:14] == 30'h3 | _GEN_1 == 26'h0 | r_pte_ppn[43:19] == 25'h1
           : r_pte_ppn[43:19] == 25'h1)
    & (io_dpath_pmp_0_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_0_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_0_mask[20] : io_dpath_pmp_0_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_0_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_0_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_0_addr[29:28]})))
         : ~(io_dpath_pmp_0_cfg_a[0]) | _pmpHomogeneous_T >= _GEN_2
           | (_pmpHomogeneous_T
              & {24'h0,
                 pmpHomogeneous_pgMask}) < {24'h0,
                                            {io_dpath_pmp_0_addr, 2'h0}
                                              & pmpHomogeneous_pgMask})
    & (io_dpath_pmp_1_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_1_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_1_mask[20] : io_dpath_pmp_1_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_1_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_1_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_1_addr[29:28]})))
         : ~(io_dpath_pmp_1_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_6 < {24'h0,
                                                    {io_dpath_pmp_0_addr, 2'h0}
                                                      & pmpHomogeneous_pgMask_1}
           | _pmpHomogeneous_T >= _GEN_3 | _pmpHomogeneous_T >= _GEN_2
           & _pmpHomogeneous_endsBeforeUpper_T_6 < {24'h0,
                                                    {io_dpath_pmp_1_addr, 2'h0}
                                                      & pmpHomogeneous_pgMask_1})
    & (io_dpath_pmp_2_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_2_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_2_mask[20] : io_dpath_pmp_2_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_2_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_2_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_2_addr[29:28]})))
         : ~(io_dpath_pmp_2_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_12 < {24'h0,
                                                     {io_dpath_pmp_1_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_2}
           | _pmpHomogeneous_T >= _GEN_4 | _pmpHomogeneous_T >= _GEN_3
           & _pmpHomogeneous_endsBeforeUpper_T_12 < {24'h0,
                                                     {io_dpath_pmp_2_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_2})
    & (io_dpath_pmp_3_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_3_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_3_mask[20] : io_dpath_pmp_3_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_3_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_3_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_3_addr[29:28]})))
         : ~(io_dpath_pmp_3_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_18 < {24'h0,
                                                     {io_dpath_pmp_2_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_3}
           | _pmpHomogeneous_T >= _GEN_5 | _pmpHomogeneous_T >= _GEN_4
           & _pmpHomogeneous_endsBeforeUpper_T_18 < {24'h0,
                                                     {io_dpath_pmp_3_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_3})
    & (io_dpath_pmp_4_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_4_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_4_mask[20] : io_dpath_pmp_4_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_4_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_4_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_4_addr[29:28]})))
         : ~(io_dpath_pmp_4_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_24 < {24'h0,
                                                     {io_dpath_pmp_3_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_4}
           | _pmpHomogeneous_T >= _GEN_6 | _pmpHomogeneous_T >= _GEN_5
           & _pmpHomogeneous_endsBeforeUpper_T_24 < {24'h0,
                                                     {io_dpath_pmp_4_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_4})
    & (io_dpath_pmp_5_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_5_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_5_mask[20] : io_dpath_pmp_5_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_5_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_5_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_5_addr[29:28]})))
         : ~(io_dpath_pmp_5_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_30 < {24'h0,
                                                     {io_dpath_pmp_4_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_5}
           | _pmpHomogeneous_T >= _GEN_7 | _pmpHomogeneous_T >= _GEN_6
           & _pmpHomogeneous_endsBeforeUpper_T_30 < {24'h0,
                                                     {io_dpath_pmp_5_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_5})
    & (io_dpath_pmp_6_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_6_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_6_mask[20] : io_dpath_pmp_6_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_6_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_6_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_6_addr[29:28]})))
         : ~(io_dpath_pmp_6_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_36 < {24'h0,
                                                     {io_dpath_pmp_5_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_6}
           | _pmpHomogeneous_T >= _GEN_8 | _pmpHomogeneous_T >= _GEN_7
           & _pmpHomogeneous_endsBeforeUpper_T_36 < {24'h0,
                                                     {io_dpath_pmp_6_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_6})
    & (io_dpath_pmp_7_cfg_a[1]
         ? (_GEN_0
              ? io_dpath_pmp_7_mask[11]
              : _leaf_T_5 ? io_dpath_pmp_7_mask[20] : io_dpath_pmp_7_mask[29])
           | (_GEN_0
                ? (|(r_pte_ppn ^ {24'h0, io_dpath_pmp_7_addr[29:10]}))
                : _leaf_T_5
                    ? (|(r_pte_ppn[43:9] ^ {24'h0, io_dpath_pmp_7_addr[29:19]}))
                    : (|(r_pte_ppn[43:18] ^ {24'h0, io_dpath_pmp_7_addr[29:28]})))
         : ~(io_dpath_pmp_7_cfg_a[0])
           | _pmpHomogeneous_endsBeforeUpper_T_42 < {24'h0,
                                                     {io_dpath_pmp_6_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_7}
           | _pmpHomogeneous_T >= {24'h0, io_dpath_pmp_7_addr, 2'h0}
           | _pmpHomogeneous_T >= _GEN_8
           & _pmpHomogeneous_endsBeforeUpper_T_42 < {24'h0,
                                                     {io_dpath_pmp_7_addr, 2'h0}
                                                       & pmpHomogeneous_pgMask_7});
  wire        _T_125 = _arb_io_out_ready_T_2 & _arb_io_out_valid;
  wire        _GEN_9 = _T_124 & _T_125;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp = _T_125 ? {2'h0, _arb_io_out_bits_valid} : state;
      3'b001:
        casez_tmp = pte_cache_hit ? state : io_mem_req_ready ? 3'h2 : 3'h1;
      3'b010:
        casez_tmp = 3'h4;
      3'b011:
        casez_tmp = state;
      3'b100:
        casez_tmp = io_mem_s2_xcpt_ae_ld ? 3'h0 : 3'h5;
      3'b101:
        casez_tmp = state;
      3'b110:
        casez_tmp = state;
      default:
        casez_tmp = 3'h0;
    endcase
  end // always @(*)
  wire [1:0]  _merged_pte_superpage_mask_T = stage2_final ? max_count : 2'h2;
  wire        _r_pte_T_5 = _T_144 & pte_cache_hit;
  wire        _r_pte_T_8 = ~traverse & r_req_vstage1 & stage2;
  wire        _GEN_10 = do_switch | ~mem_resp_valid;
  wire        gf =
    stage2 & ~stage2_final
    & ~(aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2]))
        & mem_resp_data[6] & mem_resp_data[1] & mem_resp_data[4]);
  wire        ae = aux_pte_pte_v & invalid_paddr;
  wire        pf = aux_pte_pte_v & (|(mem_resp_data[63:54]));
  wire        success = aux_pte_pte_v & ~ae & ~pf & ~gf;
  wire        _T_160 = do_both_stages & ~stage2_final & success;
  assign do_switch =
    mem_resp_valid & (traverse ? do_both_stages & ~stage2 : _T_160 & ~stage2);
  wire        _GEN_11 = traverse | _T_160;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (_GEN_9 & ~reset
          & ~(~_arb_io_out_bits_bits_need_gpa | _arb_io_out_bits_bits_stage2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:622 assert(!arb.io.out.bits.bits.need_gpa || arb.io.out.bits.bits.stage2)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (mem_resp_valid & ~reset & state != 3'h5) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:701 assert(state === s_wait3)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (io_mem_s2_nack & ~reset & state != 3'h4) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at PTW.scala:745 assert(state === s_wait2)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [2:0]  _GEN_12 = hits[7:5] | hits[3:1];
  wire        _T_29 = _GEN_12[2] | _GEN_12[0];
  wire [1:0]  _count_T_2 = count + 2'h1;
  wire        _T_67 = mem_resp_valid & traverse;
  wire        _T_22 = _T_67 & can_hit & ~(|hits) & ~invalidated;
  wire [6:0]  _GEN_13 = ~(valid[6:0]);
  wire [2:0]  r =
    (&valid)
      ? {state_reg[6],
         state_reg[6]
           ? {state_reg[5], state_reg[5] ? state_reg[4] : state_reg[3]}
           : {state_reg[2], state_reg[2] ? state_reg[1] : state_reg[0]}}
      : _GEN_13[0]
          ? 3'h0
          : _GEN_13[1]
              ? 3'h1
              : _GEN_13[2]
                  ? 3'h2
                  : _GEN_13[3]
                      ? 3'h3
                      : _GEN_13[4] ? 3'h4 : _GEN_13[5] ? 3'h5 : {2'h3, ~(_GEN_13[6])};
  wire [31:0] _GEN_14 = {r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
  wire        _T_73 = _T_67 & do_both_stages & ~stage2 & ~stage2_final & ~invalidated;
  wire [6:0]  _GEN_15 = ~(valid_1[6:0]);
  wire [2:0]  r_1 =
    (&valid_1)
      ? {state_reg_1[6],
         state_reg_1[6]
           ? {state_reg_1[5], state_reg_1[5] ? state_reg_1[4] : state_reg_1[3]}
           : {state_reg_1[2], state_reg_1[2] ? state_reg_1[1] : state_reg_1[0]}}
      : _GEN_15[0]
          ? 3'h0
          : _GEN_15[1]
              ? 3'h1
              : _GEN_15[2]
                  ? 3'h2
                  : _GEN_15[3]
                      ? 3'h3
                      : _GEN_15[4] ? 3'h4 : _GEN_15[5] ? 3'h5 : {2'h3, ~(_GEN_15[6])};
  wire        _T_134 = state == 3'h2;
  wire        _T_135 = state == 3'h4;
  wire        _GEN_16 = _T_144 | _T_134;
  wire        _GEN_17 = _T_124 | _GEN_16;
  wire        _GEN_18 = _T_134 | _T_135 | ~((&state) & ~homogeneous);
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;
      state_reg <= 7'h0;
      valid <= 8'h0;
      state_reg_1 <= 7'h0;
      valid_1 <= 8'h0;
    end
    else begin
      state <= _state_barrier_io_y;
      if (pte_cache_hit & _T_144)
        state_reg <=
          {~(|(hits[7:4])),
           (|(hits[7:4]))
             ? {~(|(_GEN_12[2:1])),
                (|(_GEN_12[2:1])) ? ~_T_29 : state_reg[4],
                (|(_GEN_12[2:1])) ? state_reg[3] : ~_T_29}
             : state_reg[5:3],
           (|(hits[7:4]))
             ? state_reg[2:0]
             : {~(|(_GEN_12[2:1])),
                (|(_GEN_12[2:1])) ? ~_T_29 : state_reg[1],
                (|(_GEN_12[2:1])) ? state_reg[0] : ~_T_29}};
      else if (_T_22)
        state_reg <=
          {~(r[2]),
           r[2]
             ? {~(r[1]), r[1] ? ~(r[0]) : state_reg[4], r[1] ? state_reg[3] : ~(r[0])}
             : state_reg[5:3],
           r[2]
             ? state_reg[2:0]
             : {~(r[1]), r[1] ? ~(r[0]) : state_reg[1], r[1] ? state_reg[0] : ~(r[0])}};
      if (io_dpath_sfence_valid & ~io_dpath_sfence_bits_rs1)
        valid <= 8'h0;
      else
        valid <= {8{_T_22}} & 8'h1 << r | valid;
      if (_T_73)
        state_reg_1 <=
          {~(r_1[2]),
           r_1[2]
             ? {~(r_1[1]),
                r_1[1] ? ~(r_1[0]) : state_reg_1[4],
                r_1[1] ? state_reg_1[3] : ~(r_1[0])}
             : state_reg_1[5:3],
           r_1[2]
             ? state_reg_1[2:0]
             : {~(r_1[1]),
                r_1[1] ? ~(r_1[0]) : state_reg_1[1],
                r_1[1] ? state_reg_1[0] : ~(r_1[0])}};
      if (io_dpath_sfence_valid & ~io_dpath_sfence_bits_rs1)
        valid_1 <= 8'h0;
      else
        valid_1 <= {8{_T_73}} & 8'h1 << r_1 | valid_1;
    end
    resp_valid_0 <=
      mem_resp_valid & ~_GEN_11 & ~r_req_dest | ~_GEN_17
      & (_T_135 ? io_mem_s2_xcpt_ae_ld & ~r_req_dest : (&state) & ~r_req_dest);
    resp_valid_1 <=
      mem_resp_valid & ~_GEN_11 & r_req_dest | ~_GEN_17
      & (_T_135 ? io_mem_s2_xcpt_ae_ld & r_req_dest : (&state) & r_req_dest);
    invalidated <= io_dpath_sfence_valid | invalidated & (|state);
    if (do_switch) begin
      count <= 2'h0;
      if (traverse)
        aux_count <= count + 2'h1;
      else
        aux_count <= count;
      aux_pte_ppn <=
        {17'h0,
         traverse | _GEN_0
           ? _res_ppn_T_4
           : _leaf_T_5
               ? {_res_ppn_T_4[26:9], r_req_addr[8:0]}
               : {_res_ppn_T_4[26:18], r_req_addr[17:0]}};
      aux_pte_d <= mem_resp_data[7];
      aux_pte_a <= mem_resp_data[6];
      aux_pte_g <= mem_resp_data[5];
      aux_pte_u <= mem_resp_data[4];
      aux_pte_x <= mem_resp_data[3];
      aux_pte_w <= mem_resp_data[2];
      aux_pte_r <= mem_resp_data[1];
      aux_pte_v <= aux_pte_pte_v;
    end
    else begin
      if (mem_resp_valid) begin
        if (traverse)
          count <= count + 2'h1;
        else if (_T_160) begin
          if (stage2)
            count <= aux_count;
          else if (_T_124) begin
            if (_T_125)
              count <= 2'h0;
          end
          else if (_T_144) begin
            if (pte_cache_hit)
              count <= _count_T_2;
          end
          else if (_GEN_18) begin
          end
          else
            count <= 2'h2;
        end
        else if (_max_count_T)
          count <= aux_count;
      end
      else if (_T_124) begin
        if (_T_125)
          count <= 2'h0;
      end
      else if (_T_144) begin
        if (pte_cache_hit)
          count <= _count_T_2;
      end
      else if (_GEN_18) begin
      end
      else
        count <= 2'h2;
      if (_T_124 & _T_125) begin
        aux_count <= 2'h0;
        if (_arb_io_out_bits_bits_vstage1)
          aux_pte_ppn <= 44'h0;
        else
          aux_pte_ppn <= {17'h0, _arb_io_out_bits_bits_addr};
      end
    end
    if (~mem_resp_valid | _GEN_11) begin
      if (_T_124)
        resp_ae_ptw <= ~_T_125 & resp_ae_ptw;
      else
        resp_ae_ptw <= ~_GEN_16 & _T_135 & io_mem_s2_xcpt_ae_ld | resp_ae_ptw;
      resp_ae_final <= ~_GEN_9 & resp_ae_final;
      resp_pf <= ~_GEN_9 & resp_pf;
      resp_gf <= ~_GEN_9 & resp_gf;
      resp_hr <= _GEN_9 | resp_hr;
      resp_hw <= _GEN_9 | resp_hw;
      resp_hx <= _GEN_9 | resp_hx;
    end
    else begin
      resp_ae_ptw <=
        ae & ~(count[1]) & aux_pte_pte_v & ~(mem_resp_data[1]) & ~(mem_resp_data[2])
        & ~(mem_resp_data[3]) & ~(mem_resp_data[7]) & ~(mem_resp_data[6])
        & ~(mem_resp_data[4]) & _T_235;
      resp_ae_final <= ae;
      resp_pf <= pf & ~stage2;
      resp_gf <= gf | pf & stage2;
      resp_hr <=
        ~stage2 | ~pf & ~gf & aux_pte_pte_v
        & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6]
        & mem_resp_data[1] & mem_resp_data[4];
      resp_hw <=
        ~stage2 | ~pf & ~gf & aux_pte_pte_v
        & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6]
        & mem_resp_data[2] & mem_resp_data[7] & mem_resp_data[4];
      resp_hx <=
        ~stage2 | ~pf & ~gf & aux_pte_pte_v
        & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2])) & mem_resp_data[6]
        & mem_resp_data[3] & mem_resp_data[4];
    end
    if (_GEN_9) begin
      r_req_addr <= _arb_io_out_bits_bits_addr;
      r_req_need_gpa <= _arb_io_out_bits_bits_need_gpa;
      r_req_vstage1 <= _arb_io_out_bits_bits_vstage1;
      r_req_stage2 <= _arb_io_out_bits_bits_stage2;
      r_req_dest <= _arb_io_chosen;
      r_hgatp_ppn <= 44'h0;
    end
    r_pte_ppn <= _r_pte_barrier_io_y_ppn;
    r_pte_d <= _r_pte_barrier_io_y_d;
    r_pte_a <= _r_pte_barrier_io_y_a;
    r_pte_g <= _r_pte_barrier_io_y_g;
    r_pte_u <= _r_pte_barrier_io_y_u;
    r_pte_x <= _r_pte_barrier_io_y_x;
    r_pte_w <= _r_pte_barrier_io_y_w;
    r_pte_r <= _r_pte_barrier_io_y_r;
    r_pte_v <= _r_pte_barrier_io_y_v;
    stage2 <=
      do_switch | (~mem_resp_valid | traverse | ~(_T_160 & stage2))
      & (_GEN_9 ? _arb_io_out_bits_bits_stage2 : stage2);
    stage2_final <=
      mem_resp_valid & ~traverse & _T_160 & ~stage2
      | (_GEN_9
           ? _arb_io_out_bits_bits_stage2 & ~_arb_io_out_bits_bits_vstage1
           : stage2_final);
    mem_resp_valid <= io_mem_resp_valid;
    mem_resp_data <= io_mem_resp_bits_data;
    if (_T_22 & r == 3'h0) begin
      tags_0 <= _GEN_14;
      data_0 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h1) begin
      tags_1 <= _GEN_14;
      data_1 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h2) begin
      tags_2 <= _GEN_14;
      data_2 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h3) begin
      tags_3 <= _GEN_14;
      data_3 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h4) begin
      tags_4 <= _GEN_14;
      data_4 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h5) begin
      tags_5 <= _GEN_14;
      data_5 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & r == 3'h6) begin
      tags_6 <= _GEN_14;
      data_6 <= _res_ppn_T_4[19:0];
    end
    if (_T_22 & (&r)) begin
      tags_7 <= _GEN_14;
      data_7 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h0) begin
      tags_1_0 <= 32'h0;
      data_1_0 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h1) begin
      tags_1_1 <= 32'h0;
      data_1_1 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h2) begin
      tags_1_2 <= 32'h0;
      data_1_2 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h3) begin
      tags_1_3 <= 32'h0;
      data_1_3 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h4) begin
      tags_1_4 <= 32'h0;
      data_1_4 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h5) begin
      tags_1_5 <= 32'h0;
      data_1_5 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & r_1 == 3'h6) begin
      tags_1_6 <= 32'h0;
      data_1_6 <= _res_ppn_T_4[19:0];
    end
    if (_T_73 & (&r_1)) begin
      tags_1_7 <= 32'h0;
      data_1_7 <= _res_ppn_T_4[19:0];
    end
    l2_refill <=
      mem_resp_valid & ~_GEN_11 & success & _T_221 & ~r_req_need_gpa
      & (~r_req_vstage1 & ~r_req_stage2 | do_both_stages & aux_count == 2'h2
         & aux_pte_pte_v & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2]))
         & mem_resp_data[6] & mem_resp_data[2] & mem_resp_data[7] & mem_resp_data[4]
         & (mem_resp_data[1] | mem_resp_data[3] & ~(mem_resp_data[2]))
         & mem_resp_data[3]);
  end // always @(posedge)
  Arbiter arb (
    .io_in_0_valid              (io_requestor_0_req_valid),
    .io_in_0_bits_valid         (io_requestor_0_req_bits_valid),
    .io_in_0_bits_bits_addr     (io_requestor_0_req_bits_bits_addr),
    .io_in_0_bits_bits_need_gpa (io_requestor_0_req_bits_bits_need_gpa),
    .io_in_0_bits_bits_vstage1  (io_requestor_0_req_bits_bits_vstage1),
    .io_in_0_bits_bits_stage2   (io_requestor_0_req_bits_bits_stage2),
    .io_in_1_valid              (io_requestor_1_req_valid),
    .io_in_1_bits_valid         (io_requestor_1_req_bits_valid),
    .io_in_1_bits_bits_addr     (io_requestor_1_req_bits_bits_addr),
    .io_in_1_bits_bits_need_gpa (io_requestor_1_req_bits_bits_need_gpa),
    .io_in_1_bits_bits_vstage1  (io_requestor_1_req_bits_bits_vstage1),
    .io_in_1_bits_bits_stage2   (io_requestor_1_req_bits_bits_stage2),
    .io_out_ready               (_arb_io_out_ready_T_2),
    .io_in_0_ready              (io_requestor_0_req_ready),
    .io_in_1_ready              (io_requestor_1_req_ready),
    .io_out_valid               (_arb_io_out_valid),
    .io_out_bits_valid          (_arb_io_out_bits_valid),
    .io_out_bits_bits_addr      (_arb_io_out_bits_bits_addr),
    .io_out_bits_bits_need_gpa  (_arb_io_out_bits_bits_need_gpa),
    .io_out_bits_bits_vstage1   (_arb_io_out_bits_bits_vstage1),
    .io_out_bits_bits_stage2    (_arb_io_out_bits_bits_stage2),
    .io_chosen                  (_arb_io_chosen)
  );
  OptimizationBarrier_21 state_barrier (
    .io_x (io_mem_s2_nack ? 3'h1 : mem_resp_valid ? {2'h0, _GEN_11} : casez_tmp),
    .io_y (_state_barrier_io_y)
  );
  OptimizationBarrier_22 r_pte_barrier (
    .io_x_ppn
      (_r_pte_T_5
         ? {24'h0,
            (hits[0] ? data_0 : 20'h0) | (hits[1] ? data_1 : 20'h0)
              | (hits[2] ? data_2 : 20'h0) | (hits[3] ? data_3 : 20'h0)
              | (hits[4] ? data_4 : 20'h0) | (hits[5] ? data_5 : 20'h0)
              | (hits[6] ? data_6 : 20'h0) | (hits[7] ? data_7 : 20'h0)}
         : do_switch
             ? {r_hgatp_ppn[43:2], 2'h0}
             : mem_resp_valid
                 ? (_r_pte_T_8
                      ? {17'h0,
                         _GEN_0
                           ? _res_ppn_T_4
                           : _leaf_T_5
                               ? {_res_ppn_T_4[26:9], aux_pte_ppn[8:0]}
                               : {_res_ppn_T_4[26:18], aux_pte_ppn[17:0]}}
                        & ((&_merged_pte_superpage_mask_T)
                           | _merged_pte_superpage_mask_T == 2'h2
                             ? 44'hFFFFFFFFFFF
                             : _merged_pte_superpage_mask_T == 2'h1
                                 ? 44'hFFFFFFFFE00
                                 : 44'hFFFFFFC0000)
                      : {17'h0, _res_ppn_T_4})
                 : (&state) & ~homogeneous & count != 2'h2
                     ? (count[0]
                          ? {r_pte_ppn[43:9], r_req_addr[8:0]}
                          : {r_pte_ppn[43:18], r_req_addr[17:0]})
                     : _arb_io_out_ready_T_2 & _arb_io_out_valid
                         ? (_arb_io_out_bits_bits_stage2 | _arb_io_out_bits_bits_vstage1
                              ? 44'h0
                              : io_dpath_ptbr_ppn)
                         : r_pte_ppn),
    .io_x_d
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_d : _r_pte_T_8 ? aux_pte_d : mem_resp_data[7])),
    .io_x_a
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_a : _r_pte_T_8 ? aux_pte_a : mem_resp_data[6])),
    .io_x_g
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_g : _r_pte_T_8 ? aux_pte_g : mem_resp_data[5])),
    .io_x_u
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_u : _r_pte_T_8 ? aux_pte_u : mem_resp_data[4])),
    .io_x_x
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_x : _r_pte_T_8 ? aux_pte_x : mem_resp_data[3])),
    .io_x_w
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_w : _r_pte_T_8 ? aux_pte_w : mem_resp_data[2])),
    .io_x_r
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_r : _r_pte_T_8 ? aux_pte_r : mem_resp_data[1])),
    .io_x_v
      (~_r_pte_T_5 & (_GEN_10 ? r_pte_v : _r_pte_T_8 ? aux_pte_v : aux_pte_pte_v)),
    .io_y_ppn (_r_pte_barrier_io_y_ppn),
    .io_y_d   (_r_pte_barrier_io_y_d),
    .io_y_a   (_r_pte_barrier_io_y_a),
    .io_y_g   (_r_pte_barrier_io_y_g),
    .io_y_u   (_r_pte_barrier_io_y_u),
    .io_y_x   (_r_pte_barrier_io_y_x),
    .io_y_w   (_r_pte_barrier_io_y_w),
    .io_y_r   (_r_pte_barrier_io_y_r),
    .io_y_v   (_r_pte_barrier_io_y_v)
  );
  assign io_requestor_0_resp_valid = resp_valid_0;
  assign io_requestor_0_resp_bits_ae_ptw = resp_ae_ptw;
  assign io_requestor_0_resp_bits_ae_final = resp_ae_final;
  assign io_requestor_0_resp_bits_pf = resp_pf;
  assign io_requestor_0_resp_bits_gf = resp_gf;
  assign io_requestor_0_resp_bits_hr = resp_hr;
  assign io_requestor_0_resp_bits_hw = resp_hw;
  assign io_requestor_0_resp_bits_hx = resp_hx;
  assign io_requestor_0_resp_bits_pte_ppn = r_pte_ppn;
  assign io_requestor_0_resp_bits_pte_d = r_pte_d;
  assign io_requestor_0_resp_bits_pte_a = r_pte_a;
  assign io_requestor_0_resp_bits_pte_g = r_pte_g;
  assign io_requestor_0_resp_bits_pte_u = r_pte_u;
  assign io_requestor_0_resp_bits_pte_x = r_pte_x;
  assign io_requestor_0_resp_bits_pte_w = r_pte_w;
  assign io_requestor_0_resp_bits_pte_r = r_pte_r;
  assign io_requestor_0_resp_bits_pte_v = r_pte_v;
  assign io_requestor_0_resp_bits_level = max_count;
  assign io_requestor_0_resp_bits_homogeneous = homogeneous;
  assign io_requestor_0_resp_bits_gpa_is_pte = ~stage2_final;
  assign io_requestor_0_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_0_status_debug = io_dpath_status_debug;
  assign io_requestor_0_status_mxr = io_dpath_status_mxr;
  assign io_requestor_0_status_sum = io_dpath_status_sum;
  assign io_requestor_0_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_0_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_0_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_0_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_0_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_0_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_0_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_0_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_0_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_0_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_0_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_0_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_0_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_0_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_0_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_0_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_0_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_0_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_0_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_0_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_0_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_0_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_0_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_0_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_0_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_0_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_0_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_0_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_0_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_0_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_0_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_0_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_0_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_0_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_0_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_0_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_0_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_0_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_0_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_0_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_0_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_0_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_0_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_0_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_0_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_0_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_0_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_0_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_0_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_0_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_0_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_0_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_0_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_0_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_0_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_0_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_resp_valid = resp_valid_1;
  assign io_requestor_1_resp_bits_ae_ptw = resp_ae_ptw;
  assign io_requestor_1_resp_bits_ae_final = resp_ae_final;
  assign io_requestor_1_resp_bits_pf = resp_pf;
  assign io_requestor_1_resp_bits_gf = resp_gf;
  assign io_requestor_1_resp_bits_hr = resp_hr;
  assign io_requestor_1_resp_bits_hw = resp_hw;
  assign io_requestor_1_resp_bits_hx = resp_hx;
  assign io_requestor_1_resp_bits_pte_ppn = r_pte_ppn;
  assign io_requestor_1_resp_bits_pte_d = r_pte_d;
  assign io_requestor_1_resp_bits_pte_a = r_pte_a;
  assign io_requestor_1_resp_bits_pte_g = r_pte_g;
  assign io_requestor_1_resp_bits_pte_u = r_pte_u;
  assign io_requestor_1_resp_bits_pte_x = r_pte_x;
  assign io_requestor_1_resp_bits_pte_w = r_pte_w;
  assign io_requestor_1_resp_bits_pte_r = r_pte_r;
  assign io_requestor_1_resp_bits_pte_v = r_pte_v;
  assign io_requestor_1_resp_bits_level = max_count;
  assign io_requestor_1_resp_bits_homogeneous = homogeneous;
  assign io_requestor_1_resp_bits_gpa_is_pte = ~stage2_final;
  assign io_requestor_1_ptbr_mode = io_dpath_ptbr_mode;
  assign io_requestor_1_status_debug = io_dpath_status_debug;
  assign io_requestor_1_status_prv = io_dpath_status_prv;
  assign io_requestor_1_pmp_0_cfg_l = io_dpath_pmp_0_cfg_l;
  assign io_requestor_1_pmp_0_cfg_a = io_dpath_pmp_0_cfg_a;
  assign io_requestor_1_pmp_0_cfg_x = io_dpath_pmp_0_cfg_x;
  assign io_requestor_1_pmp_0_cfg_w = io_dpath_pmp_0_cfg_w;
  assign io_requestor_1_pmp_0_cfg_r = io_dpath_pmp_0_cfg_r;
  assign io_requestor_1_pmp_0_addr = io_dpath_pmp_0_addr;
  assign io_requestor_1_pmp_0_mask = io_dpath_pmp_0_mask;
  assign io_requestor_1_pmp_1_cfg_l = io_dpath_pmp_1_cfg_l;
  assign io_requestor_1_pmp_1_cfg_a = io_dpath_pmp_1_cfg_a;
  assign io_requestor_1_pmp_1_cfg_x = io_dpath_pmp_1_cfg_x;
  assign io_requestor_1_pmp_1_cfg_w = io_dpath_pmp_1_cfg_w;
  assign io_requestor_1_pmp_1_cfg_r = io_dpath_pmp_1_cfg_r;
  assign io_requestor_1_pmp_1_addr = io_dpath_pmp_1_addr;
  assign io_requestor_1_pmp_1_mask = io_dpath_pmp_1_mask;
  assign io_requestor_1_pmp_2_cfg_l = io_dpath_pmp_2_cfg_l;
  assign io_requestor_1_pmp_2_cfg_a = io_dpath_pmp_2_cfg_a;
  assign io_requestor_1_pmp_2_cfg_x = io_dpath_pmp_2_cfg_x;
  assign io_requestor_1_pmp_2_cfg_w = io_dpath_pmp_2_cfg_w;
  assign io_requestor_1_pmp_2_cfg_r = io_dpath_pmp_2_cfg_r;
  assign io_requestor_1_pmp_2_addr = io_dpath_pmp_2_addr;
  assign io_requestor_1_pmp_2_mask = io_dpath_pmp_2_mask;
  assign io_requestor_1_pmp_3_cfg_l = io_dpath_pmp_3_cfg_l;
  assign io_requestor_1_pmp_3_cfg_a = io_dpath_pmp_3_cfg_a;
  assign io_requestor_1_pmp_3_cfg_x = io_dpath_pmp_3_cfg_x;
  assign io_requestor_1_pmp_3_cfg_w = io_dpath_pmp_3_cfg_w;
  assign io_requestor_1_pmp_3_cfg_r = io_dpath_pmp_3_cfg_r;
  assign io_requestor_1_pmp_3_addr = io_dpath_pmp_3_addr;
  assign io_requestor_1_pmp_3_mask = io_dpath_pmp_3_mask;
  assign io_requestor_1_pmp_4_cfg_l = io_dpath_pmp_4_cfg_l;
  assign io_requestor_1_pmp_4_cfg_a = io_dpath_pmp_4_cfg_a;
  assign io_requestor_1_pmp_4_cfg_x = io_dpath_pmp_4_cfg_x;
  assign io_requestor_1_pmp_4_cfg_w = io_dpath_pmp_4_cfg_w;
  assign io_requestor_1_pmp_4_cfg_r = io_dpath_pmp_4_cfg_r;
  assign io_requestor_1_pmp_4_addr = io_dpath_pmp_4_addr;
  assign io_requestor_1_pmp_4_mask = io_dpath_pmp_4_mask;
  assign io_requestor_1_pmp_5_cfg_l = io_dpath_pmp_5_cfg_l;
  assign io_requestor_1_pmp_5_cfg_a = io_dpath_pmp_5_cfg_a;
  assign io_requestor_1_pmp_5_cfg_x = io_dpath_pmp_5_cfg_x;
  assign io_requestor_1_pmp_5_cfg_w = io_dpath_pmp_5_cfg_w;
  assign io_requestor_1_pmp_5_cfg_r = io_dpath_pmp_5_cfg_r;
  assign io_requestor_1_pmp_5_addr = io_dpath_pmp_5_addr;
  assign io_requestor_1_pmp_5_mask = io_dpath_pmp_5_mask;
  assign io_requestor_1_pmp_6_cfg_l = io_dpath_pmp_6_cfg_l;
  assign io_requestor_1_pmp_6_cfg_a = io_dpath_pmp_6_cfg_a;
  assign io_requestor_1_pmp_6_cfg_x = io_dpath_pmp_6_cfg_x;
  assign io_requestor_1_pmp_6_cfg_w = io_dpath_pmp_6_cfg_w;
  assign io_requestor_1_pmp_6_cfg_r = io_dpath_pmp_6_cfg_r;
  assign io_requestor_1_pmp_6_addr = io_dpath_pmp_6_addr;
  assign io_requestor_1_pmp_6_mask = io_dpath_pmp_6_mask;
  assign io_requestor_1_pmp_7_cfg_l = io_dpath_pmp_7_cfg_l;
  assign io_requestor_1_pmp_7_cfg_a = io_dpath_pmp_7_cfg_a;
  assign io_requestor_1_pmp_7_cfg_x = io_dpath_pmp_7_cfg_x;
  assign io_requestor_1_pmp_7_cfg_w = io_dpath_pmp_7_cfg_w;
  assign io_requestor_1_pmp_7_cfg_r = io_dpath_pmp_7_cfg_r;
  assign io_requestor_1_pmp_7_addr = io_dpath_pmp_7_addr;
  assign io_requestor_1_pmp_7_mask = io_dpath_pmp_7_mask;
  assign io_requestor_1_customCSRs_csrs_0_value = io_dpath_customCSRs_csrs_0_value;
  assign io_mem_req_valid = _T_144 | state == 3'h3;
  assign io_mem_req_bits_addr = {8'h0, r_pte_ppn[19:0], pte_addr_vpn_idx, 3'h0};
  assign io_mem_req_bits_dv = do_both_stages & ~stage2;
  assign io_mem_s1_kill = state != 3'h2;
endmodule

module RVCExpander(
  input  [31:0] io_in,
  output [31:0] io_out_bits,
  output [4:0]  io_out_rd,
                io_out_rs1,
                io_out_rs2,
  output        io_rvc
);

  reg  [2:0]  casez_tmp;
  reg  [4:0]  casez_tmp_0;
  reg  [4:0]  casez_tmp_1;
  wire [2:0]  _io_out_s_funct_T_2 = {io_in[12], io_in[6:5]};
  wire [2:0]  _io_out_s_funct_T_4 = {_io_out_s_funct_T_2 == 3'h1, 2'h0};
  always @(*) begin
    casez (_io_out_s_funct_T_2)
      3'b000:
        casez_tmp = _io_out_s_funct_T_4;
      3'b001:
        casez_tmp = _io_out_s_funct_T_4;
      3'b010:
        casez_tmp = 3'h6;
      3'b011:
        casez_tmp = 3'h7;
      3'b100:
        casez_tmp = 3'h0;
      3'b101:
        casez_tmp = 3'h0;
      3'b110:
        casez_tmp = 3'h2;
      default:
        casez_tmp = 3'h3;
    endcase
  end // always @(*)
  wire [3:0]  _GEN = {4{io_in[12]}};
  wire [6:0]  io_out_s_load_opc = (|(io_in[11:7])) ? 7'h3 : 7'h1F;
  wire [4:0]  _io_out_T_2 = {io_in[1:0], io_in[15:13]};
  wire        _io_out_T_29 = _io_out_T_2 == 5'hE;
  wire        _io_out_T_31 = _io_out_T_2 == 5'hF;
  wire        _io_out_T_33 = _io_out_T_2 == 5'h10;
  wire        _io_out_T_35 = _io_out_T_2 == 5'h11;
  wire        _io_out_T_37 = _io_out_T_2 == 5'h12;
  wire        _io_out_T_39 = _io_out_T_2 == 5'h13;
  wire        _io_out_T_41 = _io_out_T_2 == 5'h14;
  wire [31:0] _io_out_T_42_bits =
    _io_out_T_41
      ? {7'h0,
         io_in[12]
           ? ((|(io_in[6:2]))
                ? {io_in[6:2], io_in[11:7], 3'h0, io_in[11:7], 7'h33}
                : (|(io_in[11:7]))
                    ? {io_in[6:2], io_in[11:7], 15'hE7}
                    : {io_in[6:2] | 5'h1, io_in[11:7], 15'h73})
           : {io_in[6:2],
              (|(io_in[6:2]))
                ? {8'h0, io_in[11:7], 7'h33}
                : {io_in[11:7], (|(io_in[11:7])) ? 15'h67 : 15'h1F}}}
      : _io_out_T_39
          ? {3'h0,
             io_in[4:2],
             io_in[12],
             io_in[6:5],
             11'h13,
             io_in[11:7],
             io_out_s_load_opc}
          : _io_out_T_37
              ? {4'h0,
                 io_in[3:2],
                 io_in[12],
                 io_in[6:4],
                 10'h12,
                 io_in[11:7],
                 io_out_s_load_opc}
              : _io_out_T_35
                  ? {3'h0, io_in[4:2], io_in[12], io_in[6:5], 11'h13, io_in[11:7], 7'h7}
                  : _io_out_T_33
                      ? {6'h0,
                         io_in[12],
                         io_in[6:2],
                         io_in[11:7],
                         3'h1,
                         io_in[11:7],
                         7'h13}
                      : _io_out_T_31
                          ? {_GEN,
                             io_in[6:5],
                             io_in[2],
                             7'h1,
                             io_in[9:7],
                             3'h1,
                             io_in[11:10],
                             io_in[4:3],
                             io_in[12],
                             7'h63}
                          : _io_out_T_29
                              ? {_GEN,
                                 io_in[6:5],
                                 io_in[2],
                                 7'h1,
                                 io_in[9:7],
                                 3'h0,
                                 io_in[11:10],
                                 io_in[4:3],
                                 io_in[12],
                                 7'h63}
                              : _io_out_T_2 == 5'hD
                                  ? {io_in[12],
                                     io_in[8],
                                     io_in[10:9],
                                     io_in[6],
                                     io_in[7],
                                     io_in[2],
                                     io_in[11],
                                     io_in[5:3],
                                     {9{io_in[12]}},
                                     12'h6F}
                                  : _io_out_T_2 == 5'hC
                                      ? ((&(io_in[11:10]))
                                           ? {1'h0,
                                              io_in[6:5] == 2'h0,
                                              7'h1,
                                              io_in[4:2],
                                              2'h1,
                                              io_in[9:7],
                                              casez_tmp,
                                              2'h1,
                                              io_in[9:7],
                                              3'h3,
                                              io_in[12],
                                              3'h3}
                                           : {io_in[11:10] == 2'h2
                                                ? {{7{io_in[12]}},
                                                   io_in[6:2],
                                                   2'h1,
                                                   io_in[9:7],
                                                   5'h1D}
                                                : {1'h0,
                                                   io_in[11:10] == 2'h1,
                                                   4'h0,
                                                   io_in[12],
                                                   io_in[6:2],
                                                   2'h1,
                                                   io_in[9:7],
                                                   5'h15},
                                              io_in[9:7],
                                              7'h13})
                                      : _io_out_T_2 == 5'hB
                                          ? {{3{io_in[12]}},
                                             io_in[11:7] == 5'h0 | io_in[11:7] == 5'h2
                                               ? {io_in[4:3],
                                                  io_in[5],
                                                  io_in[2],
                                                  io_in[6],
                                                  4'h0,
                                                  io_in[11:7],
                                                  3'h0,
                                                  io_in[11:7],
                                                  (|{{7{io_in[12]}}, io_in[6:2]})
                                                    ? 7'h13
                                                    : 7'h1F}
                                               : {{12{io_in[12]}},
                                                  io_in[6:2],
                                                  io_in[11:7],
                                                  3'h3,
                                                  {{7{io_in[12]}}, io_in[6:2]} == 12'h0,
                                                  3'h7}}
                                          : _io_out_T_2 == 5'hA
                                              ? {{7{io_in[12]}},
                                                 io_in[6:2],
                                                 8'h0,
                                                 io_in[11:7],
                                                 7'h13}
                                              : _io_out_T_2 == 5'h9
                                                  ? {{7{io_in[12]}},
                                                     io_in[6:2],
                                                     io_in[11:7],
                                                     3'h0,
                                                     io_in[11:7],
                                                     4'h3,
                                                     io_in[11:7] == 5'h0,
                                                     2'h3}
                                                  : _io_out_T_2 == 5'h8
                                                      ? {{7{io_in[12]}},
                                                         io_in[6:2],
                                                         io_in[11:7],
                                                         3'h0,
                                                         io_in[11:7],
                                                         7'h13}
                                                      : _io_out_T_2 == 5'h7
                                                          ? {4'h0,
                                                             io_in[6:5],
                                                             io_in[12],
                                                             2'h1,
                                                             io_in[4:2],
                                                             2'h1,
                                                             io_in[9:7],
                                                             3'h3,
                                                             io_in[11:10],
                                                             10'h23}
                                                          : _io_out_T_2 == 5'h6
                                                              ? {5'h0,
                                                                 io_in[5],
                                                                 io_in[12],
                                                                 2'h1,
                                                                 io_in[4:2],
                                                                 2'h1,
                                                                 io_in[9:7],
                                                                 3'h2,
                                                                 io_in[11:10],
                                                                 io_in[6],
                                                                 9'h23}
                                                              : _io_out_T_2 == 5'h5
                                                                  ? {4'h0,
                                                                     io_in[6:5],
                                                                     io_in[12],
                                                                     2'h1,
                                                                     io_in[4:2],
                                                                     2'h1,
                                                                     io_in[9:7],
                                                                     3'h3,
                                                                     io_in[11:10],
                                                                     10'h27}
                                                                  : _io_out_T_2 == 5'h4
                                                                      ? {5'h0,
                                                                         io_in[5],
                                                                         io_in[12],
                                                                         2'h1,
                                                                         io_in[4:2],
                                                                         2'h1,
                                                                         io_in[9:7],
                                                                         3'h2,
                                                                         io_in[11:10],
                                                                         io_in[6],
                                                                         9'h3F}
                                                                      : _io_out_T_2 == 5'h3
                                                                          ? {4'h0,
                                                                             io_in[6:5],
                                                                             io_in[12:10],
                                                                             5'h1,
                                                                             io_in[9:7],
                                                                             5'hD,
                                                                             io_in[4:2],
                                                                             7'h3}
                                                                          : _io_out_T_2 == 5'h2
                                                                              ? {5'h0,
                                                                                 io_in[5],
                                                                                 io_in[12:10],
                                                                                 io_in[6],
                                                                                 4'h1,
                                                                                 io_in[9:7],
                                                                                 5'h9,
                                                                                 io_in[4:2],
                                                                                 7'h3}
                                                                              : _io_out_T_2 == 5'h1
                                                                                  ? {4'h0,
                                                                                     io_in[6:5],
                                                                                     io_in[12:10],
                                                                                     5'h1,
                                                                                     io_in[9:7],
                                                                                     5'hD,
                                                                                     io_in[4:2],
                                                                                     7'h7}
                                                                                  : {2'h0,
                                                                                     io_in[10:7],
                                                                                     io_in[12:11],
                                                                                     io_in[5],
                                                                                     io_in[6],
                                                                                     12'h41,
                                                                                     io_in[4:2],
                                                                                     (|(io_in[12:5]))
                                                                                       ? 7'h13
                                                                                       : 7'h1F};
  wire        _io_out_T_43 = _io_out_T_2 == 5'h15;
  wire        _io_out_T_45 = _io_out_T_2 == 5'h16;
  wire        _io_out_T_47 = _io_out_T_2 == 5'h17;
  wire        _GEN_0 =
    (&_io_out_T_2) | _io_out_T_2 == 5'h1E | _io_out_T_2 == 5'h1D | _io_out_T_2 == 5'h1C
    | _io_out_T_2 == 5'h1B | _io_out_T_2 == 5'h1A | _io_out_T_2 == 5'h19
    | _io_out_T_2 == 5'h18;
  wire [4:0]  io_out_s_7_rd = {2'h1, io_in[4:2]};
  always @(*) begin
    casez (_io_out_T_2)
      5'b00000:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00001:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00010:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00011:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00100:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00101:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00110:
        casez_tmp_0 = io_out_s_7_rd;
      5'b00111:
        casez_tmp_0 = io_out_s_7_rd;
      5'b01000:
        casez_tmp_0 = io_in[11:7];
      5'b01001:
        casez_tmp_0 = io_in[11:7];
      5'b01010:
        casez_tmp_0 = io_in[11:7];
      5'b01011:
        casez_tmp_0 = io_in[11:7];
      5'b01100:
        casez_tmp_0 = {2'h1, io_in[9:7]};
      5'b01101:
        casez_tmp_0 = 5'h0;
      5'b01110:
        casez_tmp_0 = {2'h1, io_in[9:7]};
      5'b01111:
        casez_tmp_0 = 5'h0;
      5'b10000:
        casez_tmp_0 = io_in[11:7];
      5'b10001:
        casez_tmp_0 = io_in[11:7];
      5'b10010:
        casez_tmp_0 = io_in[11:7];
      5'b10011:
        casez_tmp_0 = io_in[11:7];
      5'b10100:
        casez_tmp_0 =
          io_in[12]
            ? ((|(io_in[6:2])) ? io_in[11:7] : 5'h1)
            : (|(io_in[6:2])) ? io_in[11:7] : 5'h0;
      5'b10101:
        casez_tmp_0 = io_in[11:7];
      5'b10110:
        casez_tmp_0 = io_in[11:7];
      5'b10111:
        casez_tmp_0 = io_in[11:7];
      5'b11000:
        casez_tmp_0 = io_in[11:7];
      5'b11001:
        casez_tmp_0 = io_in[11:7];
      5'b11010:
        casez_tmp_0 = io_in[11:7];
      5'b11011:
        casez_tmp_0 = io_in[11:7];
      5'b11100:
        casez_tmp_0 = io_in[11:7];
      5'b11101:
        casez_tmp_0 = io_in[11:7];
      5'b11110:
        casez_tmp_0 = io_in[11:7];
      default:
        casez_tmp_0 = io_in[11:7];
    endcase
  end // always @(*)
  always @(*) begin
    casez (_io_out_T_2)
      5'b00000:
        casez_tmp_1 = 5'h2;
      5'b00001:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00010:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00011:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00100:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00101:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00110:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b00111:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b01000:
        casez_tmp_1 = io_in[11:7];
      5'b01001:
        casez_tmp_1 = io_in[11:7];
      5'b01010:
        casez_tmp_1 = 5'h0;
      5'b01011:
        casez_tmp_1 = io_in[11:7];
      5'b01100:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b01101:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b01110:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b01111:
        casez_tmp_1 = {2'h1, io_in[9:7]};
      5'b10000:
        casez_tmp_1 = io_in[11:7];
      5'b10001:
        casez_tmp_1 = 5'h2;
      5'b10010:
        casez_tmp_1 = 5'h2;
      5'b10011:
        casez_tmp_1 = 5'h2;
      5'b10100:
        casez_tmp_1 = io_in[12] | ~(|(io_in[6:2])) ? io_in[11:7] : 5'h0;
      5'b10101:
        casez_tmp_1 = 5'h2;
      5'b10110:
        casez_tmp_1 = 5'h2;
      5'b10111:
        casez_tmp_1 = 5'h2;
      5'b11000:
        casez_tmp_1 = io_in[19:15];
      5'b11001:
        casez_tmp_1 = io_in[19:15];
      5'b11010:
        casez_tmp_1 = io_in[19:15];
      5'b11011:
        casez_tmp_1 = io_in[19:15];
      5'b11100:
        casez_tmp_1 = io_in[19:15];
      5'b11101:
        casez_tmp_1 = io_in[19:15];
      5'b11110:
        casez_tmp_1 = io_in[19:15];
      default:
        casez_tmp_1 = io_in[19:15];
    endcase
  end // always @(*)
  assign io_out_bits =
    _GEN_0
      ? io_in
      : _io_out_T_47
          ? {3'h0, io_in[9:7], io_in[12], io_in[6:2], 8'h13, io_in[11:10], 10'h23}
          : _io_out_T_45
              ? {4'h0, io_in[8:7], io_in[12], io_in[6:2], 8'h12, io_in[11:9], 9'h23}
              : _io_out_T_43
                  ? {3'h0, io_in[9:7], io_in[12], io_in[6:2], 8'h13, io_in[11:10], 10'h27}
                  : _io_out_T_42_bits;
  assign io_out_rd = casez_tmp_0;
  assign io_out_rs1 = casez_tmp_1;
  assign io_out_rs2 =
    _GEN_0
      ? io_in[24:20]
      : _io_out_T_47 | _io_out_T_45 | _io_out_T_43 | _io_out_T_41 | _io_out_T_39
        | _io_out_T_37 | _io_out_T_35 | _io_out_T_33
          ? io_in[6:2]
          : _io_out_T_31 | _io_out_T_29 ? 5'h0 : {2'h1, io_in[4:2]};
  assign io_rvc = io_in[1:0] != 2'h3;
endmodule

module IBuf(
  input         clock,
                reset,
                io_imem_valid,
                io_imem_bits_btb_taken,
                io_imem_bits_btb_bridx,
  input  [39:0] io_imem_bits_pc,
  input  [31:0] io_imem_bits_data,
  input         io_imem_bits_xcpt_pf_inst,
                io_imem_bits_xcpt_gf_inst,
                io_imem_bits_xcpt_ae_inst,
                io_imem_bits_replay,
                io_kill,
                io_inst_0_ready,
  output        io_imem_ready,
  output [39:0] io_pc,
  output        io_inst_0_valid,
                io_inst_0_bits_xcpt0_pf_inst,
                io_inst_0_bits_xcpt0_gf_inst,
                io_inst_0_bits_xcpt0_ae_inst,
                io_inst_0_bits_xcpt1_pf_inst,
                io_inst_0_bits_xcpt1_gf_inst,
                io_inst_0_bits_xcpt1_ae_inst,
                io_inst_0_bits_replay,
                io_inst_0_bits_rvc,
  output [31:0] io_inst_0_bits_inst_bits,
  output [4:0]  io_inst_0_bits_inst_rd,
                io_inst_0_bits_inst_rs1,
                io_inst_0_bits_inst_rs2,
  output [31:0] io_inst_0_bits_raw
);

  wire [1:0]   nReady;
  wire         _exp_io_rvc;
  reg          nBufValid;
  reg  [39:0]  buf_pc;
  reg  [31:0]  buf_data;
  reg          buf_xcpt_pf_inst;
  reg          buf_xcpt_gf_inst;
  reg          buf_xcpt_ae_inst;
  reg          buf_replay;
  wire [1:0]   _GEN = {1'h0, io_imem_bits_pc[1]};
  wire [1:0]   nIC =
    (io_imem_bits_btb_taken ? {1'h0, io_imem_bits_btb_bridx} + 2'h1 : 2'h2) - _GEN;
  wire [1:0]   _GEN_0 = {1'h0, nBufValid};
  wire [1:0]   nICReady = nReady - _GEN_0;
  wire         _T = nReady >= _GEN_0;
  wire [1:0]   _io_imem_ready_T_4 = nIC - nICReady;
  wire [190:0] _icData_T_4 =
    {63'h0,
     {2{{2{io_imem_bits_data[31:16]}}}},
     io_imem_bits_data,
     {2{io_imem_bits_data[15:0]}}} << {185'h0, _GEN_0 - 2'h2 - _GEN, 4'h0};
  wire [62:0]  _icMask_T_2 = 63'hFFFFFFFF << {58'h0, nBufValid, 4'h0};
  wire [31:0]  inst =
    _icData_T_4[95:64] & _icMask_T_2[31:0] | buf_data & ~(_icMask_T_2[31:0]);
  wire [3:0]   _valid_T = 4'h1 << (io_imem_valid ? nIC : 2'h0) + _GEN_0;
  wire [1:0]   valid = _valid_T[1:0] - 2'h1;
  wire [1:0]   bufMask = (2'h1 << _GEN_0) - 2'h1;
  wire [1:0]   buf_replay_0 = buf_replay ? bufMask : 2'h0;
  wire [1:0]   ic_replay = buf_replay_0 | (io_imem_bits_replay ? valid & ~bufMask : 2'h0);
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(~io_imem_valid | ~io_imem_bits_btb_taken
              | io_imem_bits_btb_bridx >= io_imem_bits_pc[1])) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at IBuf.scala:79 assert(!io.imem.valid || !io.imem.bits.btb.taken || io.imem.bits.btb.bridx >= pcWordBits)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire         full_insn = _exp_io_rvc | valid[1] | buf_replay_0[0];
  wire [2:0]   _io_inst_0_bits_xcpt1_WIRE_1 =
    _exp_io_rvc
      ? 3'h0
      : {bufMask[1] ? buf_xcpt_pf_inst : io_imem_bits_xcpt_pf_inst,
         bufMask[1] ? buf_xcpt_gf_inst : io_imem_bits_xcpt_gf_inst,
         bufMask[1] ? buf_xcpt_ae_inst : io_imem_bits_xcpt_ae_inst};
  assign nReady = full_insn ? (_exp_io_rvc ? 2'h1 : 2'h2) : 2'h0;
  wire [63:0]  _buf_data_T_1 =
    {{2{io_imem_bits_data[31:16]}}, io_imem_bits_data} >> {58'h0, _GEN + nICReady, 4'h0};
  wire         _T_7 = io_imem_valid & _T & nICReady < nIC & ~(_io_imem_ready_T_4[1]);
  always @(posedge clock) begin
    if (reset)
      nBufValid <= 1'h0;
    else
      nBufValid <=
        ~io_kill
        & (io_inst_0_ready
             ? (_T_7 ? _io_imem_ready_T_4[0] : ~(_T | ~nBufValid) & nBufValid - nReady[0])
             : nBufValid);
    if (io_inst_0_ready & _T_7) begin
      buf_pc <=
        io_imem_bits_pc & 40'hFFFFFFFFFC | io_imem_bits_pc + {37'h0, nICReady, 1'h0}
        & 40'h3;
      buf_data <= {16'h0, _buf_data_T_1[15:0]};
      buf_xcpt_pf_inst <= io_imem_bits_xcpt_pf_inst;
      buf_xcpt_gf_inst <= io_imem_bits_xcpt_gf_inst;
      buf_xcpt_ae_inst <= io_imem_bits_xcpt_ae_inst;
      buf_replay <= io_imem_bits_replay;
    end
  end // always @(posedge)
  RVCExpander exp (
    .io_in       (inst),
    .io_out_bits (io_inst_0_bits_inst_bits),
    .io_out_rd   (io_inst_0_bits_inst_rd),
    .io_out_rs1  (io_inst_0_bits_inst_rs1),
    .io_out_rs2  (io_inst_0_bits_inst_rs2),
    .io_rvc      (_exp_io_rvc)
  );
  assign io_imem_ready =
    io_inst_0_ready & _T & (nICReady >= nIC | ~(_io_imem_ready_T_4[1]));
  assign io_pc = nBufValid ? buf_pc : io_imem_bits_pc;
  assign io_inst_0_valid = valid[0] & full_insn;
  assign io_inst_0_bits_xcpt0_pf_inst =
    bufMask[0] ? buf_xcpt_pf_inst : io_imem_bits_xcpt_pf_inst;
  assign io_inst_0_bits_xcpt0_gf_inst =
    bufMask[0] ? buf_xcpt_gf_inst : io_imem_bits_xcpt_gf_inst;
  assign io_inst_0_bits_xcpt0_ae_inst =
    bufMask[0] ? buf_xcpt_ae_inst : io_imem_bits_xcpt_ae_inst;
  assign io_inst_0_bits_xcpt1_pf_inst = _io_inst_0_bits_xcpt1_WIRE_1[2];
  assign io_inst_0_bits_xcpt1_gf_inst = _io_inst_0_bits_xcpt1_WIRE_1[1];
  assign io_inst_0_bits_xcpt1_ae_inst = _io_inst_0_bits_xcpt1_WIRE_1[0];
  assign io_inst_0_bits_replay = ic_replay[0] | ~_exp_io_rvc & ic_replay[1];
  assign io_inst_0_bits_rvc = _exp_io_rvc;
  assign io_inst_0_bits_raw = inst;
endmodule

module CSRFile(
  input         clock,
                reset,
                io_ungated_clock,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
                io_hartid,
  input  [11:0] io_rw_addr,
  input  [2:0]  io_rw_cmd,
  input  [63:0] io_rw_wdata,
  input  [31:0] io_decode_0_inst,
  input         io_exception,
                io_retire,
  input  [63:0] io_cause,
  input  [39:0] io_pc,
                io_tval,
  input         io_gva,
  input  [31:0] io_inst_0,
  output [63:0] io_rw_rdata,
  output        io_decode_0_fp_illegal,
                io_decode_0_read_illegal,
                io_decode_0_write_illegal,
                io_decode_0_write_flush,
                io_decode_0_system_illegal,
                io_csr_stall,
                io_eret,
                io_singleStep,
                io_status_debug,
                io_status_wfi,
  output [31:0] io_status_isa,
  output [1:0]  io_status_dprv,
                io_status_prv,
  output        io_status_mxr,
                io_status_sum,
  output [3:0]  io_ptbr_mode,
  output [43:0] io_ptbr_ppn,
  output [39:0] io_evec,
  output [63:0] io_time,
  output        io_interrupt,
  output [63:0] io_interrupt_cause,
  output        io_bp_0_control_action,
                io_bp_0_control_chain,
  output [1:0]  io_bp_0_control_tmatch,
  output        io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  output [38:0] io_bp_0_address,
  output        io_pmp_0_cfg_l,
  output [1:0]  io_pmp_0_cfg_a,
  output        io_pmp_0_cfg_x,
                io_pmp_0_cfg_w,
                io_pmp_0_cfg_r,
  output [29:0] io_pmp_0_addr,
  output [31:0] io_pmp_0_mask,
  output        io_pmp_1_cfg_l,
  output [1:0]  io_pmp_1_cfg_a,
  output        io_pmp_1_cfg_x,
                io_pmp_1_cfg_w,
                io_pmp_1_cfg_r,
  output [29:0] io_pmp_1_addr,
  output [31:0] io_pmp_1_mask,
  output        io_pmp_2_cfg_l,
  output [1:0]  io_pmp_2_cfg_a,
  output        io_pmp_2_cfg_x,
                io_pmp_2_cfg_w,
                io_pmp_2_cfg_r,
  output [29:0] io_pmp_2_addr,
  output [31:0] io_pmp_2_mask,
  output        io_pmp_3_cfg_l,
  output [1:0]  io_pmp_3_cfg_a,
  output        io_pmp_3_cfg_x,
                io_pmp_3_cfg_w,
                io_pmp_3_cfg_r,
  output [29:0] io_pmp_3_addr,
  output [31:0] io_pmp_3_mask,
  output        io_pmp_4_cfg_l,
  output [1:0]  io_pmp_4_cfg_a,
  output        io_pmp_4_cfg_x,
                io_pmp_4_cfg_w,
                io_pmp_4_cfg_r,
  output [29:0] io_pmp_4_addr,
  output [31:0] io_pmp_4_mask,
  output        io_pmp_5_cfg_l,
  output [1:0]  io_pmp_5_cfg_a,
  output        io_pmp_5_cfg_x,
                io_pmp_5_cfg_w,
                io_pmp_5_cfg_r,
  output [29:0] io_pmp_5_addr,
  output [31:0] io_pmp_5_mask,
  output        io_pmp_6_cfg_l,
  output [1:0]  io_pmp_6_cfg_a,
  output        io_pmp_6_cfg_x,
                io_pmp_6_cfg_w,
                io_pmp_6_cfg_r,
  output [29:0] io_pmp_6_addr,
  output [31:0] io_pmp_6_mask,
  output        io_pmp_7_cfg_l,
  output [1:0]  io_pmp_7_cfg_a,
  output        io_pmp_7_cfg_x,
                io_pmp_7_cfg_w,
                io_pmp_7_cfg_r,
  output [29:0] io_pmp_7_addr,
  output [31:0] io_pmp_7_mask,
  output        io_inhibit_cycle,
                io_trace_0_valid,
  output [39:0] io_trace_0_iaddr,
  output [31:0] io_trace_0_insn,
  output        io_trace_0_exception,
  output [63:0] io_customCSRs_0_value
);

  wire [63:0] _io_rw_rdata_WIRE;
  reg         io_status_cease_r;
  wire        _io_singleStep_output;
  reg  [1:0]  reg_mstatus_prv;
  reg         reg_mstatus_gva;
  reg         reg_mstatus_tsr;
  reg         reg_mstatus_tw;
  reg         reg_mstatus_tvm;
  reg         reg_mstatus_mxr;
  reg         reg_mstatus_sum;
  reg         reg_mstatus_mprv;
  reg  [1:0]  reg_mstatus_fs;
  reg  [1:0]  reg_mstatus_mpp;
  reg         reg_mstatus_spp;
  reg         reg_mstatus_mpie;
  reg         reg_mstatus_spie;
  reg         reg_mstatus_mie;
  reg         reg_mstatus_sie;
  reg         reg_dcsr_ebreakm;
  reg         reg_dcsr_ebreaks;
  reg         reg_dcsr_ebreaku;
  reg  [2:0]  reg_dcsr_cause;
  reg         reg_dcsr_step;
  reg  [1:0]  reg_dcsr_prv;
  reg         reg_debug;
  reg  [39:0] reg_dpc;
  reg  [63:0] reg_dscratch0;
  reg         reg_singleStepped;
  reg         reg_bp_0_control_dmode;
  reg         reg_bp_0_control_action;
  reg         reg_bp_0_control_chain;
  reg  [1:0]  reg_bp_0_control_tmatch;
  reg         reg_bp_0_control_m;
  reg         reg_bp_0_control_s;
  reg         reg_bp_0_control_u;
  reg         reg_bp_0_control_x;
  reg         reg_bp_0_control_w;
  reg         reg_bp_0_control_r;
  reg  [38:0] reg_bp_0_address;
  reg         reg_pmp_0_cfg_l;
  reg  [1:0]  reg_pmp_0_cfg_a;
  reg         reg_pmp_0_cfg_x;
  reg         reg_pmp_0_cfg_w;
  reg         reg_pmp_0_cfg_r;
  reg  [29:0] reg_pmp_0_addr;
  reg         reg_pmp_1_cfg_l;
  reg  [1:0]  reg_pmp_1_cfg_a;
  reg         reg_pmp_1_cfg_x;
  reg         reg_pmp_1_cfg_w;
  reg         reg_pmp_1_cfg_r;
  reg  [29:0] reg_pmp_1_addr;
  reg         reg_pmp_2_cfg_l;
  reg  [1:0]  reg_pmp_2_cfg_a;
  reg         reg_pmp_2_cfg_x;
  reg         reg_pmp_2_cfg_w;
  reg         reg_pmp_2_cfg_r;
  reg  [29:0] reg_pmp_2_addr;
  reg         reg_pmp_3_cfg_l;
  reg  [1:0]  reg_pmp_3_cfg_a;
  reg         reg_pmp_3_cfg_x;
  reg         reg_pmp_3_cfg_w;
  reg         reg_pmp_3_cfg_r;
  reg  [29:0] reg_pmp_3_addr;
  reg         reg_pmp_4_cfg_l;
  reg  [1:0]  reg_pmp_4_cfg_a;
  reg         reg_pmp_4_cfg_x;
  reg         reg_pmp_4_cfg_w;
  reg         reg_pmp_4_cfg_r;
  reg  [29:0] reg_pmp_4_addr;
  reg         reg_pmp_5_cfg_l;
  reg  [1:0]  reg_pmp_5_cfg_a;
  reg         reg_pmp_5_cfg_x;
  reg         reg_pmp_5_cfg_w;
  reg         reg_pmp_5_cfg_r;
  reg  [29:0] reg_pmp_5_addr;
  reg         reg_pmp_6_cfg_l;
  reg  [1:0]  reg_pmp_6_cfg_a;
  reg         reg_pmp_6_cfg_x;
  reg         reg_pmp_6_cfg_w;
  reg         reg_pmp_6_cfg_r;
  reg  [29:0] reg_pmp_6_addr;
  reg         reg_pmp_7_cfg_l;
  reg  [1:0]  reg_pmp_7_cfg_a;
  reg         reg_pmp_7_cfg_x;
  reg         reg_pmp_7_cfg_w;
  reg         reg_pmp_7_cfg_r;
  reg  [29:0] reg_pmp_7_addr;
  reg  [63:0] reg_mie;
  reg  [63:0] reg_mideleg;
  wire [63:0] read_mideleg = reg_mideleg & 64'h222;
  reg  [63:0] reg_medeleg;
  wire [63:0] read_medeleg = reg_medeleg & 64'hB15D;
  reg         reg_mip_seip;
  reg         reg_mip_stip;
  reg         reg_mip_ssip;
  reg  [39:0] reg_mepc;
  reg  [63:0] reg_mcause;
  reg  [39:0] reg_mtval;
  reg  [63:0] reg_mscratch;
  reg  [31:0] reg_mtvec;
  reg         reg_menvcfg_fiom;
  reg         reg_senvcfg_fiom;
  reg  [31:0] reg_mcounteren;
  reg  [31:0] reg_scounteren;
  reg  [39:0] reg_sepc;
  reg  [63:0] reg_scause;
  reg  [39:0] reg_stval;
  reg  [63:0] reg_sscratch;
  reg  [38:0] reg_stvec;
  reg  [3:0]  reg_satp_mode;
  reg  [43:0] reg_satp_ppn;
  reg         reg_wfi;
  reg  [2:0]  reg_mcountinhibit;
  reg  [5:0]  small_0;
  reg  [57:0] large_0;
  wire [63:0] value = {large_0, small_0};
  reg  [5:0]  small_1;
  reg  [57:0] large_1;
  wire [63:0] value_1 = {large_1, small_1};
  wire        mip_seip = reg_mip_seip | io_interrupts_seip;
  wire [15:0] _GEN =
    {4'h0,
     io_interrupts_meip,
     1'h0,
     mip_seip,
     1'h0,
     io_interrupts_mtip,
     1'h0,
     reg_mip_stip,
     1'h0,
     io_interrupts_msip,
     1'h0,
     reg_mip_ssip,
     1'h0} & reg_mie[15:0];
  wire [15:0] _GEN_0 =
    ~(reg_mstatus_prv[1]) | reg_mstatus_mie ? ~(~_GEN | read_mideleg[15:0]) : 16'h0;
  wire [10:0] _GEN_1 =
    reg_mstatus_prv == 2'h0 | reg_mstatus_prv == 2'h1 & reg_mstatus_sie
      ? _GEN[11:1] & read_mideleg[11:1]
      : 11'h0;
  wire [29:0] _GEN_2 = {reg_pmp_0_addr[28:0], reg_pmp_0_cfg_a[0]};
  wire [29:0] _GEN_3 = {reg_pmp_1_addr[28:0], reg_pmp_1_cfg_a[0]};
  wire [29:0] _GEN_4 = {reg_pmp_2_addr[28:0], reg_pmp_2_cfg_a[0]};
  wire [29:0] _GEN_5 = {reg_pmp_3_addr[28:0], reg_pmp_3_cfg_a[0]};
  wire [29:0] _GEN_6 = {reg_pmp_4_addr[28:0], reg_pmp_4_cfg_a[0]};
  wire [29:0] _GEN_7 = {reg_pmp_5_addr[28:0], reg_pmp_5_cfg_a[0]};
  wire [29:0] _GEN_8 = {reg_pmp_6_addr[28:0], reg_pmp_6_cfg_a[0]};
  wire [29:0] _GEN_9 = {reg_pmp_7_addr[28:0], reg_pmp_7_cfg_a[0]};
  reg  [63:0] reg_misa;
  wire [31:0] _read_mtvec_T_5 = reg_mtvec & {24'hFFFFFF, ~(reg_mtvec[0] ? 8'hFE : 8'h2)};
  wire [38:0] _read_stvec_T_5 =
    reg_stvec & {31'h7FFFFFFF, ~(reg_stvec[0] ? 8'hFE : 8'h2)};
  wire [39:0] _GEN_10 = {38'h0, ~(reg_misa[2]), 1'h1};
  wire [39:0] _T_30 = ~(~reg_mepc | _GEN_10);
  wire [39:0] _T_44 = ~(~reg_dpc | _GEN_10);
  wire [63:0] sie_mask = reg_mideleg & 64'h222;
  wire [39:0] _T_61 = ~(~reg_sepc | _GEN_10);
  reg  [63:0] reg_custom_0;
  wire [11:0] decoded_decoded_invInputs = ~io_rw_addr;
  wire [9:0]  _decoded_decoded_T =
    {decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_2 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_4 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_6 =
    {io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [8:0]  _decoded_decoded_T_8 =
    {io_rw_addr[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_10 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_12 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_14 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_16 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [9:0]  _decoded_decoded_T_18 =
    {io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [4:0]  _decoded_decoded_T_20 =
    {io_rw_addr[7],
     io_rw_addr[8],
     decoded_decoded_invInputs[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_22 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_24 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_26 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_28 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_30 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_32 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_34 =
    {io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [8:0]  _decoded_decoded_T_36 =
    {io_rw_addr[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_38 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_98 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_100 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_102 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_104 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [9:0]  _decoded_decoded_T_106 =
    {io_rw_addr[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     io_rw_addr[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_108 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_112 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_114 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_116 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_118 =
    {io_rw_addr[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_120 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_122 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_124 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_126 =
    {io_rw_addr[0],
     io_rw_addr[1],
     io_rw_addr[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_146 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_148 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_152 =
    {decoded_decoded_invInputs[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [11:0] _decoded_decoded_T_154 =
    {io_rw_addr[0],
     decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_156 =
    {io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     io_rw_addr[4],
     io_rw_addr[5],
     decoded_decoded_invInputs[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [5:0]  _decoded_decoded_T_158 =
    {io_rw_addr[6],
     io_rw_addr[7],
     io_rw_addr[8],
     io_rw_addr[9],
     io_rw_addr[10],
     decoded_decoded_invInputs[11]};
  wire [10:0] _decoded_decoded_T_160 =
    {decoded_decoded_invInputs[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     io_rw_addr[11]};
  wire [11:0] _decoded_decoded_T_162 =
    {decoded_decoded_invInputs[0],
     io_rw_addr[1],
     decoded_decoded_invInputs[2],
     decoded_decoded_invInputs[3],
     decoded_decoded_invInputs[4],
     decoded_decoded_invInputs[5],
     decoded_decoded_invInputs[6],
     decoded_decoded_invInputs[7],
     io_rw_addr[8],
     io_rw_addr[9],
     decoded_decoded_invInputs[10],
     io_rw_addr[11]};
  wire [63:0] _reg_bp_0_control_WIRE_1 =
    ((io_rw_cmd[1] ? _io_rw_rdata_WIRE : 64'h0) | io_rw_wdata)
    & ~((&(io_rw_cmd[1:0])) ? io_rw_wdata : 64'h0);
  wire        system_insn = io_rw_cmd == 3'h4;
  wire [11:0] _GEN_11 = ~io_rw_addr;
  wire        insn_call =
    system_insn
    & (&{_GEN_11[0],
         _GEN_11[1],
         _GEN_11[2],
         _GEN_11[3],
         _GEN_11[4],
         _GEN_11[5],
         _GEN_11[6],
         _GEN_11[7],
         _GEN_11[8],
         _GEN_11[9],
         _GEN_11[10],
         _GEN_11[11]});
  wire        insn_break =
    system_insn
    & (&{io_rw_addr[0],
         _GEN_11[1],
         _GEN_11[2],
         _GEN_11[3],
         _GEN_11[4],
         _GEN_11[5],
         _GEN_11[6],
         _GEN_11[7],
         _GEN_11[8],
         _GEN_11[9],
         _GEN_11[10],
         _GEN_11[11]});
  wire        insn_ret =
    system_insn
    & (|{&{_GEN_11[2],
           _GEN_11[3],
           _GEN_11[4],
           _GEN_11[5],
           _GEN_11[6],
           _GEN_11[7],
           io_rw_addr[8],
           _GEN_11[10],
           _GEN_11[11]},
         &{io_rw_addr[10], _GEN_11[11]}});
  wire [29:0] _GEN_12 = ~(io_decode_0_inst[31:2]);
  wire [1:0]  _decoded_orMatrixOutputs_T_10 =
    {&{io_decode_0_inst[0],
       _GEN_12[20],
       _GEN_12[21],
       _GEN_12[22],
       _GEN_12[23],
       _GEN_12[24],
       _GEN_12[25],
       io_decode_0_inst[28],
       _GEN_12[28],
       _GEN_12[29]},
     &{io_decode_0_inst[30], _GEN_12[29]}};
  wire        allow_sfence_vma = reg_mstatus_prv[1] | ~reg_mstatus_tvm;
  wire [31:0] _GEN_13 = {27'h0, io_decode_0_inst[24:20]};
  wire [31:0] _io_decode_0_virtual_access_illegal_T_3 =
    (reg_mcounteren & 32'h7) >> _GEN_13;
  wire [31:0] _io_decode_0_virtual_access_illegal_T_11 =
    (reg_scounteren & 32'h7) >> _GEN_13;
  wire        _io_decode_0_virtual_access_illegal_T_24 =
    io_decode_0_inst[31:20] == 12'h180;
  wire        csr_exists =
    io_decode_0_inst[31:20] == 12'h7A0 | io_decode_0_inst[31:20] == 12'h7A1
    | io_decode_0_inst[31:20] == 12'h7A2 | io_decode_0_inst[31:20] == 12'h7A3
    | io_decode_0_inst[31:20] == 12'h301 | io_decode_0_inst[31:20] == 12'h300
    | io_decode_0_inst[31:20] == 12'h305 | io_decode_0_inst[31:20] == 12'h344
    | io_decode_0_inst[31:20] == 12'h304 | io_decode_0_inst[31:20] == 12'h340
    | io_decode_0_inst[31:20] == 12'h341 | io_decode_0_inst[31:20] == 12'h343
    | io_decode_0_inst[31:20] == 12'h342 | io_decode_0_inst[31:20] == 12'hF14
    | io_decode_0_inst[31:20] == 12'h7B0 | io_decode_0_inst[31:20] == 12'h7B1
    | io_decode_0_inst[31:20] == 12'h7B2 | io_decode_0_inst[31:20] == 12'h320
    | io_decode_0_inst[31:20] == 12'hB00 | io_decode_0_inst[31:20] == 12'hB02
    | io_decode_0_inst[31:20] == 12'h323 | io_decode_0_inst[31:20] == 12'hB03
    | io_decode_0_inst[31:20] == 12'hC03 | io_decode_0_inst[31:20] == 12'h324
    | io_decode_0_inst[31:20] == 12'hB04 | io_decode_0_inst[31:20] == 12'hC04
    | io_decode_0_inst[31:20] == 12'h325 | io_decode_0_inst[31:20] == 12'hB05
    | io_decode_0_inst[31:20] == 12'hC05 | io_decode_0_inst[31:20] == 12'h326
    | io_decode_0_inst[31:20] == 12'hB06 | io_decode_0_inst[31:20] == 12'hC06
    | io_decode_0_inst[31:20] == 12'h327 | io_decode_0_inst[31:20] == 12'hB07
    | io_decode_0_inst[31:20] == 12'hC07 | io_decode_0_inst[31:20] == 12'h328
    | io_decode_0_inst[31:20] == 12'hB08 | io_decode_0_inst[31:20] == 12'hC08
    | io_decode_0_inst[31:20] == 12'h329 | io_decode_0_inst[31:20] == 12'hB09
    | io_decode_0_inst[31:20] == 12'hC09 | io_decode_0_inst[31:20] == 12'h32A
    | io_decode_0_inst[31:20] == 12'hB0A | io_decode_0_inst[31:20] == 12'hC0A
    | io_decode_0_inst[31:20] == 12'h32B | io_decode_0_inst[31:20] == 12'hB0B
    | io_decode_0_inst[31:20] == 12'hC0B | io_decode_0_inst[31:20] == 12'h32C
    | io_decode_0_inst[31:20] == 12'hB0C | io_decode_0_inst[31:20] == 12'hC0C
    | io_decode_0_inst[31:20] == 12'h32D | io_decode_0_inst[31:20] == 12'hB0D
    | io_decode_0_inst[31:20] == 12'hC0D | io_decode_0_inst[31:20] == 12'h32E
    | io_decode_0_inst[31:20] == 12'hB0E | io_decode_0_inst[31:20] == 12'hC0E
    | io_decode_0_inst[31:20] == 12'h32F | io_decode_0_inst[31:20] == 12'hB0F
    | io_decode_0_inst[31:20] == 12'hC0F | io_decode_0_inst[31:20] == 12'h330
    | io_decode_0_inst[31:20] == 12'hB10 | io_decode_0_inst[31:20] == 12'hC10
    | io_decode_0_inst[31:20] == 12'h331 | io_decode_0_inst[31:20] == 12'hB11
    | io_decode_0_inst[31:20] == 12'hC11 | io_decode_0_inst[31:20] == 12'h332
    | io_decode_0_inst[31:20] == 12'hB12 | io_decode_0_inst[31:20] == 12'hC12
    | io_decode_0_inst[31:20] == 12'h333 | io_decode_0_inst[31:20] == 12'hB13
    | io_decode_0_inst[31:20] == 12'hC13 | io_decode_0_inst[31:20] == 12'h334
    | io_decode_0_inst[31:20] == 12'hB14 | io_decode_0_inst[31:20] == 12'hC14
    | io_decode_0_inst[31:20] == 12'h335 | io_decode_0_inst[31:20] == 12'hB15
    | io_decode_0_inst[31:20] == 12'hC15 | io_decode_0_inst[31:20] == 12'h336
    | io_decode_0_inst[31:20] == 12'hB16 | io_decode_0_inst[31:20] == 12'hC16
    | io_decode_0_inst[31:20] == 12'h337 | io_decode_0_inst[31:20] == 12'hB17
    | io_decode_0_inst[31:20] == 12'hC17 | io_decode_0_inst[31:20] == 12'h338
    | io_decode_0_inst[31:20] == 12'hB18 | io_decode_0_inst[31:20] == 12'hC18
    | io_decode_0_inst[31:20] == 12'h339 | io_decode_0_inst[31:20] == 12'hB19
    | io_decode_0_inst[31:20] == 12'hC19 | io_decode_0_inst[31:20] == 12'h33A
    | io_decode_0_inst[31:20] == 12'hB1A | io_decode_0_inst[31:20] == 12'hC1A
    | io_decode_0_inst[31:20] == 12'h33B | io_decode_0_inst[31:20] == 12'hB1B
    | io_decode_0_inst[31:20] == 12'hC1B | io_decode_0_inst[31:20] == 12'h33C
    | io_decode_0_inst[31:20] == 12'hB1C | io_decode_0_inst[31:20] == 12'hC1C
    | io_decode_0_inst[31:20] == 12'h33D | io_decode_0_inst[31:20] == 12'hB1D
    | io_decode_0_inst[31:20] == 12'hC1D | io_decode_0_inst[31:20] == 12'h33E
    | io_decode_0_inst[31:20] == 12'hB1E | io_decode_0_inst[31:20] == 12'hC1E
    | io_decode_0_inst[31:20] == 12'h33F | io_decode_0_inst[31:20] == 12'hB1F
    | io_decode_0_inst[31:20] == 12'hC1F | io_decode_0_inst[31:20] == 12'h306
    | io_decode_0_inst[31:20] == 12'hC00 | io_decode_0_inst[31:20] == 12'hC02
    | io_decode_0_inst[31:20] == 12'h30A | io_decode_0_inst[31:20] == 12'h100
    | io_decode_0_inst[31:20] == 12'h144 | io_decode_0_inst[31:20] == 12'h104
    | io_decode_0_inst[31:20] == 12'h140 | io_decode_0_inst[31:20] == 12'h142
    | io_decode_0_inst[31:20] == 12'h143 | _io_decode_0_virtual_access_illegal_T_24
    | io_decode_0_inst[31:20] == 12'h141 | io_decode_0_inst[31:20] == 12'h105
    | io_decode_0_inst[31:20] == 12'h106 | io_decode_0_inst[31:20] == 12'h303
    | io_decode_0_inst[31:20] == 12'h302 | io_decode_0_inst[31:20] == 12'h10A
    | io_decode_0_inst[31:20] == 12'h3A0 | io_decode_0_inst[31:20] == 12'h3A2
    | io_decode_0_inst[31:20] == 12'h3B0 | io_decode_0_inst[31:20] == 12'h3B1
    | io_decode_0_inst[31:20] == 12'h3B2 | io_decode_0_inst[31:20] == 12'h3B3
    | io_decode_0_inst[31:20] == 12'h3B4 | io_decode_0_inst[31:20] == 12'h3B5
    | io_decode_0_inst[31:20] == 12'h3B6 | io_decode_0_inst[31:20] == 12'h3B7
    | io_decode_0_inst[31:20] == 12'h3B8 | io_decode_0_inst[31:20] == 12'h3B9
    | io_decode_0_inst[31:20] == 12'h3BA | io_decode_0_inst[31:20] == 12'h3BB
    | io_decode_0_inst[31:20] == 12'h3BC | io_decode_0_inst[31:20] == 12'h3BD
    | io_decode_0_inst[31:20] == 12'h3BE | io_decode_0_inst[31:20] == 12'h3BF
    | io_decode_0_inst[31:20] == 12'h7C1 | io_decode_0_inst[31:20] == 12'hF12
    | io_decode_0_inst[31:20] == 12'hF11 | io_decode_0_inst[31:20] == 12'hF13
    | io_decode_0_inst[31:20] == 12'hF15;
  wire        _io_decode_0_system_illegal_T = reg_mstatus_prv < io_decode_0_inst[29:28];
  wire [5:0]  _GEN_14 = ~(io_decode_0_inst[31:26]);
  wire [11:0] io_decode_0_write_flush_addr_m = io_decode_0_inst[31:20] | 12'h300;
  wire [3:0]  _GEN_15 = {2'h0, reg_mstatus_prv};
  wire [63:0] _GEN_16 = {60'h0, _GEN_15 - 4'h8};
  wire [63:0] cause = insn_call ? _GEN_16 : insn_break ? 64'h3 : io_cause;
  wire        _causeIsDebugTrigger_T_2 = cause[7:0] == 8'hE;
  wire        causeIsDebugInt = cause[63] & _causeIsDebugTrigger_T_2;
  wire        causeIsDebugTrigger = ~(cause[63]) & _causeIsDebugTrigger_T_2;
  wire [3:0]  _causeIsDebugBreak_T_4 =
    {reg_dcsr_ebreakm, 1'h0, reg_dcsr_ebreaks, reg_dcsr_ebreaku} >> _GEN_15;
  wire        trapToDebug =
    reg_singleStepped | causeIsDebugInt | causeIsDebugTrigger | ~(cause[63]) & insn_break
    & _causeIsDebugBreak_T_4[0] | reg_debug;
  wire [63:0] _GEN_17 = {56'h0, cause[7:0]};
  wire [63:0] _delegate_T_3 = read_mideleg >> _GEN_17;
  wire [63:0] _delegate_T_5 = read_medeleg >> _GEN_17;
  wire        delegate =
    ~(reg_mstatus_prv[1]) & (cause[63] ? _delegate_T_3[0] : _delegate_T_5[0]);
  wire [39:0] _GEN_18 =
    delegate ? {_read_stvec_T_5[38], _read_stvec_T_5} : {8'h0, _read_mtvec_T_5};
  wire        _exception_T = insn_call | insn_break;
  assign _io_singleStep_output = reg_dcsr_step & ~reg_debug;
  wire        _io_trace_0_exception_output = _exception_T | io_exception;
  `ifndef SYNTHESIS
    wire [2:0] _T_270 =
      {1'h0, {1'h0, insn_ret} + {1'h0, insn_call}}
      + {1'h0, {1'h0, insn_break} + {1'h0, io_exception}};
    always @(posedge clock) begin
      if (~reset & (|(_T_270[2:1]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: these conditions must be mutually exclusive\n    at CSR.scala:1003 assert(PopCount(insn_ret :: insn_call :: insn_break :: io.exception :: Nil) <= 1.U, \"these conditions must be mutually exclusive\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~reg_singleStepped | ~io_retire)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at CSR.scala:1012 assert(!reg_singleStepped || io.retire === 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [1:0]  _GEN_19 = {~delegate, 1'h1};
  wire        _T_427 = io_rw_addr[10] & io_rw_addr[7];
  wire [1:0]  _GEN_20 = {1'h0, reg_mstatus_spp};
  wire [1:0]  ret_prv =
    io_rw_addr[9] ? (_T_427 ? reg_dcsr_prv : reg_mstatus_mpp) : _GEN_20;
  wire        _io_csr_stall_output = reg_wfi | io_status_cease_r;
  wire [31:0] _io_rw_rdata_T_14 =
    (&_decoded_decoded_T_152)
      ? {16'h4000,
         reg_dcsr_ebreakm,
         1'h0,
         reg_dcsr_ebreaks,
         reg_dcsr_ebreaku,
         3'h0,
         reg_dcsr_cause,
         3'h0,
         reg_dcsr_step,
         reg_dcsr_prv}
      : 32'h0;
  wire [2:0]  _io_rw_rdata_T_17 = (&_decoded_decoded_T_38) ? reg_mcountinhibit : 3'h0;
  wire [2:0]  _GEN_21 = (&_decoded_decoded_T_34) ? reg_mcounteren[2:0] : 3'h0;
  wire [2:0]  _GEN_22 = (&_decoded_decoded_T_6) ? reg_scounteren[2:0] : 3'h0;
  wire [29:0] _io_rw_rdata_T_126 = (&_decoded_decoded_T_112) ? reg_pmp_0_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_127 = (&_decoded_decoded_T_114) ? reg_pmp_1_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_128 = (&_decoded_decoded_T_116) ? reg_pmp_2_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_129 = (&_decoded_decoded_T_118) ? reg_pmp_3_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_130 = (&_decoded_decoded_T_120) ? reg_pmp_4_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_131 = (&_decoded_decoded_T_122) ? reg_pmp_5_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_132 = (&_decoded_decoded_T_124) ? reg_pmp_6_addr : 30'h0;
  wire [29:0] _io_rw_rdata_T_133 = (&_decoded_decoded_T_126) ? reg_pmp_7_addr : 30'h0;
  wire [14:0] _GEN_23 =
    ((&_decoded_decoded_T_106)
       ? {4'h0,
          io_interrupts_meip,
          1'h0,
          mip_seip,
          1'h0,
          io_interrupts_mtip,
          1'h0,
          reg_mip_stip,
          1'h0,
          io_interrupts_msip,
          1'h0,
          reg_mip_ssip}
       : 15'h0) | _io_rw_rdata_T_14[15:1];
  assign _io_rw_rdata_WIRE =
    ((&_decoded_decoded_T_146)
       ? {4'h2,
          reg_bp_0_control_dmode,
          46'h40000000000,
          reg_bp_0_control_action,
          reg_bp_0_control_chain,
          2'h0,
          reg_bp_0_control_tmatch,
          reg_bp_0_control_m,
          1'h0,
          reg_bp_0_control_s,
          reg_bp_0_control_u,
          reg_bp_0_control_x,
          reg_bp_0_control_w,
          reg_bp_0_control_r}
       : 64'h0)
    | ((&_decoded_decoded_T_148) ? {{25{reg_bp_0_address[38]}}, reg_bp_0_address} : 64'h0)
    | ((&_decoded_decoded_T_24) ? reg_misa : 64'h0)
    | ((&_decoded_decoded_T_22)
         ? {&reg_mstatus_fs,
            24'h0,
            reg_mstatus_gva,
            15'h1400,
            reg_mstatus_tsr,
            reg_mstatus_tw,
            reg_mstatus_tvm,
            reg_mstatus_mxr,
            reg_mstatus_sum,
            reg_mstatus_mprv,
            2'h0,
            reg_mstatus_fs,
            reg_mstatus_mpp,
            2'h0,
            reg_mstatus_spp,
            reg_mstatus_mpie,
            1'h0,
            reg_mstatus_spie,
            1'h0,
            reg_mstatus_mie,
            1'h0,
            reg_mstatus_sie,
            1'h0}
         : 64'h0) | ((&_decoded_decoded_T_32) ? {32'h0, _read_mtvec_T_5} : 64'h0)
    | ((&_decoded_decoded_T_30) ? reg_mie : 64'h0)
    | ((&_decoded_decoded_T_98) ? reg_mscratch : 64'h0)
    | ((&_decoded_decoded_T_100) ? {{24{_T_30[39]}}, _T_30} : 64'h0)
    | ((&_decoded_decoded_T_104) ? {{24{reg_mtval[39]}}, reg_mtval} : 64'h0)
    | ((&_decoded_decoded_T_102) ? reg_mcause : 64'h0)
    | ((&_decoded_decoded_T_154) ? {{24{_T_44[39]}}, _T_44} : 64'h0)
    | ((&_decoded_decoded_T_156) ? reg_dscratch0 : 64'h0)
    | ((&_decoded_decoded_T_160) ? value_1 : 64'h0)
    | ((&_decoded_decoded_T_162) ? value : 64'h0)
    | ((&{decoded_decoded_invInputs[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          decoded_decoded_invInputs[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          decoded_decoded_invInputs[8],
          decoded_decoded_invInputs[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? value_1
         : 64'h0)
    | ((&{decoded_decoded_invInputs[0],
          io_rw_addr[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          decoded_decoded_invInputs[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          decoded_decoded_invInputs[8],
          decoded_decoded_invInputs[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? value
         : 64'h0) | ((&_decoded_decoded_T_36) ? {63'h0, reg_menvcfg_fiom} : 64'h0)
    | ((&_decoded_decoded_T)
         ? {&reg_mstatus_fs,
            43'h2000,
            reg_mstatus_mxr,
            reg_mstatus_sum,
            3'h0,
            reg_mstatus_fs,
            4'h0,
            reg_mstatus_spp,
            2'h0,
            reg_mstatus_spie,
            3'h0,
            reg_mstatus_sie,
            1'h0}
         : 64'h0)
    | ((&_decoded_decoded_T_18)
         ? {52'h0,
            io_interrupts_meip,
            1'h0,
            mip_seip,
            1'h0,
            io_interrupts_mtip,
            1'h0,
            reg_mip_stip,
            1'h0,
            io_interrupts_msip,
            1'h0,
            reg_mip_ssip,
            1'h0} & sie_mask
         : 64'h0) | ((&_decoded_decoded_T_2) ? reg_mie & sie_mask : 64'h0)
    | ((&_decoded_decoded_T_10) ? reg_sscratch : 64'h0)
    | ((&_decoded_decoded_T_14) ? reg_scause : 64'h0)
    | ((&_decoded_decoded_T_16) ? {{24{reg_stval[39]}}, reg_stval} : 64'h0)
    | ((&_decoded_decoded_T_20) ? {reg_satp_mode, 16'h0, reg_satp_ppn} : 64'h0)
    | ((&_decoded_decoded_T_12) ? {{24{_T_61[39]}}, _T_61} : 64'h0)
    | ((&_decoded_decoded_T_4) ? {{25{_read_stvec_T_5[38]}}, _read_stvec_T_5} : 64'h0)
    | ((&_decoded_decoded_T_28) ? read_mideleg : 64'h0)
    | ((&_decoded_decoded_T_26) ? read_medeleg : 64'h0)
    | ((&_decoded_decoded_T_8) ? {63'h0, reg_senvcfg_fiom} : 64'h0)
    | ((&_decoded_decoded_T_108)
         ? {reg_pmp_7_cfg_l,
            2'h0,
            reg_pmp_7_cfg_a,
            reg_pmp_7_cfg_x,
            reg_pmp_7_cfg_w,
            reg_pmp_7_cfg_r,
            reg_pmp_6_cfg_l,
            2'h0,
            reg_pmp_6_cfg_a,
            reg_pmp_6_cfg_x,
            reg_pmp_6_cfg_w,
            reg_pmp_6_cfg_r,
            reg_pmp_5_cfg_l,
            2'h0,
            reg_pmp_5_cfg_a,
            reg_pmp_5_cfg_x,
            reg_pmp_5_cfg_w,
            reg_pmp_5_cfg_r,
            reg_pmp_4_cfg_l,
            2'h0,
            reg_pmp_4_cfg_a,
            reg_pmp_4_cfg_x,
            reg_pmp_4_cfg_w,
            reg_pmp_4_cfg_r,
            reg_pmp_3_cfg_l,
            2'h0,
            reg_pmp_3_cfg_a,
            reg_pmp_3_cfg_x,
            reg_pmp_3_cfg_w,
            reg_pmp_3_cfg_r,
            reg_pmp_2_cfg_l,
            2'h0,
            reg_pmp_2_cfg_a,
            reg_pmp_2_cfg_x,
            reg_pmp_2_cfg_w,
            reg_pmp_2_cfg_r,
            reg_pmp_1_cfg_l,
            2'h0,
            reg_pmp_1_cfg_a,
            reg_pmp_1_cfg_x,
            reg_pmp_1_cfg_w,
            reg_pmp_1_cfg_r,
            reg_pmp_0_cfg_l,
            2'h0,
            reg_pmp_0_cfg_a,
            reg_pmp_0_cfg_x,
            reg_pmp_0_cfg_w,
            reg_pmp_0_cfg_r}
         : 64'h0) | ((&_decoded_decoded_T_158) ? reg_custom_0 : 64'h0)
    | {32'h0,
       _io_rw_rdata_T_14[31:30],
       _io_rw_rdata_T_126[29:16] | _io_rw_rdata_T_127[29:16] | _io_rw_rdata_T_128[29:16]
         | _io_rw_rdata_T_129[29:16] | _io_rw_rdata_T_130[29:16]
         | _io_rw_rdata_T_131[29:16] | _io_rw_rdata_T_132[29:16]
         | _io_rw_rdata_T_133[29:16],
       _GEN_23[14:2] | _io_rw_rdata_T_126[15:3] | _io_rw_rdata_T_127[15:3]
         | _io_rw_rdata_T_128[15:3] | _io_rw_rdata_T_129[15:3] | _io_rw_rdata_T_130[15:3]
         | _io_rw_rdata_T_131[15:3] | _io_rw_rdata_T_132[15:3] | _io_rw_rdata_T_133[15:3],
       _GEN_23[1:0] | _io_rw_rdata_T_17[2:1] | _GEN_21[2:1] | _GEN_22[2:1]
         | _io_rw_rdata_T_126[2:1] | _io_rw_rdata_T_127[2:1] | _io_rw_rdata_T_128[2:1]
         | _io_rw_rdata_T_129[2:1] | _io_rw_rdata_T_130[2:1] | _io_rw_rdata_T_131[2:1]
         | _io_rw_rdata_T_132[2:1] | _io_rw_rdata_T_133[2:1],
       (&{decoded_decoded_invInputs[0],
          decoded_decoded_invInputs[1],
          io_rw_addr[2],
          decoded_decoded_invInputs[3],
          io_rw_addr[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          io_rw_addr[8],
          io_rw_addr[9],
          io_rw_addr[10],
          io_rw_addr[11]}) & io_hartid | _io_rw_rdata_T_14[0] | _io_rw_rdata_T_17[0]
         | _GEN_21[0] | _GEN_22[0] | _io_rw_rdata_T_126[0] | _io_rw_rdata_T_127[0]
         | _io_rw_rdata_T_128[0] | _io_rw_rdata_T_129[0] | _io_rw_rdata_T_130[0]
         | _io_rw_rdata_T_131[0] | _io_rw_rdata_T_132[0] | _io_rw_rdata_T_133[0]
         | (&{decoded_decoded_invInputs[0],
              io_rw_addr[1],
              decoded_decoded_invInputs[2],
              decoded_decoded_invInputs[3],
              io_rw_addr[4],
              decoded_decoded_invInputs[5],
              decoded_decoded_invInputs[6],
              decoded_decoded_invInputs[7],
              io_rw_addr[8],
              io_rw_addr[9],
              io_rw_addr[10],
              io_rw_addr[11]})}
    | ((&{io_rw_addr[0],
          io_rw_addr[1],
          decoded_decoded_invInputs[2],
          decoded_decoded_invInputs[3],
          io_rw_addr[4],
          decoded_decoded_invInputs[5],
          decoded_decoded_invInputs[6],
          decoded_decoded_invInputs[7],
          io_rw_addr[8],
          io_rw_addr[9],
          io_rw_addr[10],
          io_rw_addr[11]})
         ? 64'h20181004
         : 64'h0);
  wire        _csr_wen_T_4 = io_rw_cmd == 3'h6 | (&io_rw_cmd) | io_rw_cmd == 3'h5;
  wire        _GEN_24 = ~(io_rw_addr[9]) | _T_427;
  wire [47:0] _GEN_25 =
    ((io_rw_cmd[1]
        ? {reg_bp_0_control_dmode, 46'h40000000000, reg_bp_0_control_action}
        : 48'h0) | io_rw_wdata[59:12])
    & ~((&(io_rw_cmd[1:0])) ? io_rw_wdata[59:12] : 48'h0);
  wire        dMode = _GEN_25[47] & reg_debug;
  wire [6:0]  nextSmall = {1'h0, small_0} + {6'h0, io_retire};
  wire        _GEN_26 = insn_ret & ~(io_rw_addr[9]);
  wire [39:0] _epc_T_1 = ~io_pc | 40'h1;
  wire        _GEN_27 = _io_trace_0_exception_output & trapToDebug & ~reg_debug;
  wire        _GEN_28 = ~_io_trace_0_exception_output | trapToDebug | ~delegate;
  wire        _GEN_29 = ~_io_trace_0_exception_output | trapToDebug | delegate;
  wire [8:0]  _GEN_30 =
    ((io_rw_cmd[1] ? {reg_mip_seip, 3'h0, reg_mip_stip, 3'h0, reg_mip_ssip} : 9'h0)
     | io_rw_wdata[9:1]) & ~((&(io_rw_cmd[1:0])) ? io_rw_wdata[9:1] : 9'h0);
  wire [39:0] _GEN_31 = ~(_reg_bp_0_control_WIRE_1[39:0]) | 40'h1;
  wire        _GEN_32 =
    _csr_wen_T_4 & (&_decoded_decoded_T_20)
    & (_reg_bp_0_control_WIRE_1[63:60] == 4'h0 | _reg_bp_0_control_WIRE_1[63:60] == 4'h8);
  wire        _T_1864 = ~reg_bp_0_control_dmode | reg_debug;
  wire        _GEN_33 = _csr_wen_T_4 & _T_1864 & (&_decoded_decoded_T_146);
  wire        _GEN_34 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_0_cfg_l;
  wire        _GEN_35 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_1_cfg_l;
  wire        _GEN_36 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_2_cfg_l;
  wire        _GEN_37 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_3_cfg_l;
  wire        _GEN_38 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_4_cfg_l;
  wire        _GEN_39 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_5_cfg_l;
  wire        _GEN_40 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_6_cfg_l;
  wire        _GEN_41 = _csr_wen_T_4 & (&_decoded_decoded_T_108) & ~reg_pmp_7_cfg_l;
  wire        _GEN_42 = _GEN_28 & reg_mstatus_sie;
  wire        _GEN_43 = _GEN_26 | (_GEN_28 ? reg_mstatus_spie : reg_mstatus_sie);
  wire        _GEN_44 = ~_GEN_26 & (_GEN_28 ? reg_mstatus_spp : reg_mstatus_prv[0]);
  always @(posedge clock) begin
    if (reset) begin
      reg_mstatus_prv <= 2'h3;
      reg_mstatus_gva <= 1'h0;
      reg_mstatus_tsr <= 1'h0;
      reg_mstatus_tw <= 1'h0;
      reg_mstatus_tvm <= 1'h0;
      reg_mstatus_mxr <= 1'h0;
      reg_mstatus_sum <= 1'h0;
      reg_mstatus_mprv <= 1'h0;
      reg_mstatus_fs <= 2'h0;
      reg_mstatus_mpp <= 2'h3;
      reg_mstatus_spp <= 1'h0;
      reg_mstatus_mpie <= 1'h0;
      reg_mstatus_spie <= 1'h0;
      reg_mstatus_mie <= 1'h0;
      reg_mstatus_sie <= 1'h0;
      reg_dcsr_ebreakm <= 1'h0;
      reg_dcsr_ebreaks <= 1'h0;
      reg_dcsr_ebreaku <= 1'h0;
      reg_dcsr_cause <= 3'h0;
      reg_dcsr_step <= 1'h0;
      reg_dcsr_prv <= 2'h3;
      reg_debug <= 1'h0;
      reg_bp_0_control_dmode <= 1'h0;
      reg_bp_0_control_action <= 1'h0;
      reg_bp_0_control_x <= 1'h0;
      reg_bp_0_control_w <= 1'h0;
      reg_bp_0_control_r <= 1'h0;
      reg_pmp_0_cfg_l <= 1'h0;
      reg_pmp_0_cfg_a <= 2'h0;
      reg_pmp_1_cfg_l <= 1'h0;
      reg_pmp_1_cfg_a <= 2'h0;
      reg_pmp_2_cfg_l <= 1'h0;
      reg_pmp_2_cfg_a <= 2'h0;
      reg_pmp_3_cfg_l <= 1'h0;
      reg_pmp_3_cfg_a <= 2'h0;
      reg_pmp_4_cfg_l <= 1'h0;
      reg_pmp_4_cfg_a <= 2'h0;
      reg_pmp_5_cfg_l <= 1'h0;
      reg_pmp_5_cfg_a <= 2'h0;
      reg_pmp_6_cfg_l <= 1'h0;
      reg_pmp_6_cfg_a <= 2'h0;
      reg_pmp_7_cfg_l <= 1'h0;
      reg_pmp_7_cfg_a <= 2'h0;
      reg_mcause <= 64'h0;
      reg_mtvec <= 32'h0;
      reg_menvcfg_fiom <= 1'h0;
      reg_senvcfg_fiom <= 1'h0;
      reg_satp_mode <= 4'h0;
      reg_mcountinhibit <= 3'h0;
      small_0 <= 6'h0;
      large_0 <= 58'h0;
      reg_misa <= 64'h8000000000941105;
      reg_custom_0 <= 64'h208;
      io_status_cease_r <= 1'h0;
    end
    else begin
      if ((insn_ret
             ? ret_prv
             : _io_trace_0_exception_output
                 ? (trapToDebug ? (reg_debug ? reg_mstatus_prv : 2'h3) : _GEN_19)
                 : reg_mstatus_prv) == 2'h2)
        reg_mstatus_prv <= 2'h0;
      else if (insn_ret) begin
        if (io_rw_addr[9]) begin
          if (_T_427)
            reg_mstatus_prv <= reg_dcsr_prv;
          else
            reg_mstatus_prv <= reg_mstatus_mpp;
        end
        else
          reg_mstatus_prv <= _GEN_20;
      end
      else if (_io_trace_0_exception_output) begin
        if (trapToDebug) begin
          if (reg_debug) begin
          end
          else
            reg_mstatus_prv <= 2'h3;
        end
        else
          reg_mstatus_prv <= _GEN_19;
      end
      if (_GEN_29) begin
      end
      else
        reg_mstatus_gva <= io_gva;
      if (_csr_wen_T_4 & (&_decoded_decoded_T_22)) begin
        reg_mstatus_tsr <= _reg_bp_0_control_WIRE_1[22];
        reg_mstatus_tw <= _reg_bp_0_control_WIRE_1[21];
        reg_mstatus_tvm <= _reg_bp_0_control_WIRE_1[20];
        reg_mstatus_mprv <= _reg_bp_0_control_WIRE_1[17];
        if (_reg_bp_0_control_WIRE_1[12:11] == 2'h2)
          reg_mstatus_mpp <= 2'h0;
        else
          reg_mstatus_mpp <= _reg_bp_0_control_WIRE_1[12:11];
        reg_mstatus_mpie <= _reg_bp_0_control_WIRE_1[7];
        reg_mstatus_mie <= _reg_bp_0_control_WIRE_1[3];
      end
      else begin
        reg_mstatus_mprv <= ~(insn_ret & ~(ret_prv[1])) & reg_mstatus_mprv;
        if (~insn_ret | _GEN_24) begin
          if (_GEN_29) begin
          end
          else
            reg_mstatus_mpp <= reg_mstatus_prv;
          reg_mstatus_mie <= _GEN_29 & reg_mstatus_mie;
        end
        else begin
          reg_mstatus_mpp <= 2'h0;
          reg_mstatus_mie <= reg_mstatus_mpie;
        end
        reg_mstatus_mpie <=
          insn_ret & ~_GEN_24 | (_GEN_29 ? reg_mstatus_mpie : reg_mstatus_mie);
      end
      if (_csr_wen_T_4) begin
        if (&_decoded_decoded_T) begin
          reg_mstatus_mxr <= _reg_bp_0_control_WIRE_1[19];
          reg_mstatus_sum <= _reg_bp_0_control_WIRE_1[18];
          reg_mstatus_fs <= {2{|(_reg_bp_0_control_WIRE_1[14:13])}};
          reg_mstatus_spp <= _reg_bp_0_control_WIRE_1[8];
          reg_mstatus_spie <= _reg_bp_0_control_WIRE_1[5];
          reg_mstatus_sie <= _reg_bp_0_control_WIRE_1[1];
        end
        else if (&_decoded_decoded_T_22) begin
          reg_mstatus_mxr <= _reg_bp_0_control_WIRE_1[19];
          reg_mstatus_sum <= _reg_bp_0_control_WIRE_1[18];
          reg_mstatus_fs <= {2{|(_reg_bp_0_control_WIRE_1[14:13])}};
          reg_mstatus_spp <= _reg_bp_0_control_WIRE_1[8];
          reg_mstatus_spie <= _reg_bp_0_control_WIRE_1[5];
          reg_mstatus_sie <= _reg_bp_0_control_WIRE_1[1];
        end
        else begin
          reg_mstatus_spp <= _GEN_44;
          reg_mstatus_spie <= _GEN_43;
          if (_GEN_26)
            reg_mstatus_sie <= reg_mstatus_spie;
          else
            reg_mstatus_sie <= _GEN_42;
        end
      end
      else begin
        reg_mstatus_spp <= _GEN_44;
        reg_mstatus_spie <= _GEN_43;
        if (_GEN_26)
          reg_mstatus_sie <= reg_mstatus_spie;
        else
          reg_mstatus_sie <= _GEN_42;
      end
      if (_csr_wen_T_4 & (&_decoded_decoded_T_152)) begin
        reg_dcsr_ebreakm <= _reg_bp_0_control_WIRE_1[15];
        reg_dcsr_ebreaks <= _reg_bp_0_control_WIRE_1[13];
        reg_dcsr_ebreaku <= _reg_bp_0_control_WIRE_1[12];
        reg_dcsr_step <= _reg_bp_0_control_WIRE_1[2];
        if (_reg_bp_0_control_WIRE_1[1:0] == 2'h2)
          reg_dcsr_prv <= 2'h0;
        else
          reg_dcsr_prv <= _reg_bp_0_control_WIRE_1[1:0];
      end
      else if (_GEN_27)
        reg_dcsr_prv <= reg_mstatus_prv;
      if (_GEN_27) begin
        if (reg_singleStepped)
          reg_dcsr_cause <= 3'h4;
        else
          reg_dcsr_cause <=
            {1'h0, causeIsDebugInt ? 2'h3 : causeIsDebugTrigger ? 2'h2 : 2'h1};
      end
      reg_debug <= (~insn_ret | ~(io_rw_addr[9]) | ~_T_427) & (_GEN_27 | reg_debug);
      if (_GEN_33) begin
        reg_bp_0_control_dmode <= dMode;
        reg_bp_0_control_action <= dMode & _GEN_25[0];
        reg_bp_0_control_x <= _reg_bp_0_control_WIRE_1[2];
        reg_bp_0_control_w <= _reg_bp_0_control_WIRE_1[1];
        reg_bp_0_control_r <= _reg_bp_0_control_WIRE_1[0];
      end
      if (_GEN_34) begin
        reg_pmp_0_cfg_l <= _reg_bp_0_control_WIRE_1[7];
        reg_pmp_0_cfg_a <= _reg_bp_0_control_WIRE_1[4:3];
      end
      if (_GEN_35) begin
        reg_pmp_1_cfg_l <= _reg_bp_0_control_WIRE_1[15];
        reg_pmp_1_cfg_a <= _reg_bp_0_control_WIRE_1[12:11];
      end
      if (_GEN_36) begin
        reg_pmp_2_cfg_l <= _reg_bp_0_control_WIRE_1[23];
        reg_pmp_2_cfg_a <= _reg_bp_0_control_WIRE_1[20:19];
      end
      if (_GEN_37) begin
        reg_pmp_3_cfg_l <= _reg_bp_0_control_WIRE_1[31];
        reg_pmp_3_cfg_a <= _reg_bp_0_control_WIRE_1[28:27];
      end
      if (_GEN_38) begin
        reg_pmp_4_cfg_l <= _reg_bp_0_control_WIRE_1[39];
        reg_pmp_4_cfg_a <= _reg_bp_0_control_WIRE_1[36:35];
      end
      if (_GEN_39) begin
        reg_pmp_5_cfg_l <= _reg_bp_0_control_WIRE_1[47];
        reg_pmp_5_cfg_a <= _reg_bp_0_control_WIRE_1[44:43];
      end
      if (_GEN_40) begin
        reg_pmp_6_cfg_l <= _reg_bp_0_control_WIRE_1[55];
        reg_pmp_6_cfg_a <= _reg_bp_0_control_WIRE_1[52:51];
      end
      if (_GEN_41) begin
        reg_pmp_7_cfg_l <= _reg_bp_0_control_WIRE_1[63];
        reg_pmp_7_cfg_a <= _reg_bp_0_control_WIRE_1[60:59];
      end
      if (_csr_wen_T_4 & (&_decoded_decoded_T_102))
        reg_mcause <= _reg_bp_0_control_WIRE_1 & 64'h800000000000000F;
      else if (_GEN_29) begin
      end
      else if (insn_call)
        reg_mcause <= _GEN_16;
      else if (insn_break)
        reg_mcause <= 64'h3;
      else
        reg_mcause <= io_cause;
      if (_csr_wen_T_4 & (&_decoded_decoded_T_32))
        reg_mtvec <= _reg_bp_0_control_WIRE_1[31:0];
      if (_csr_wen_T_4 & (&_decoded_decoded_T_36))
        reg_menvcfg_fiom <= _reg_bp_0_control_WIRE_1[0];
      if (_csr_wen_T_4 & (&_decoded_decoded_T_8))
        reg_senvcfg_fiom <= _reg_bp_0_control_WIRE_1[0];
      if (_GEN_32)
        reg_satp_mode <= {_reg_bp_0_control_WIRE_1[63], 3'h0};
      if (_csr_wen_T_4 & (&_decoded_decoded_T_38))
        reg_mcountinhibit <= _reg_bp_0_control_WIRE_1[2:0] & 3'h5;
      if (_csr_wen_T_4 & (&_decoded_decoded_T_162)) begin
        small_0 <= _reg_bp_0_control_WIRE_1[5:0];
        large_0 <= _reg_bp_0_control_WIRE_1[63:6];
      end
      else begin
        if (reg_mcountinhibit[2]) begin
        end
        else
          small_0 <= nextSmall[5:0];
        if (nextSmall[6] & ~(reg_mcountinhibit[2]))
          large_0 <= large_0 + 58'h1;
      end
      if (_csr_wen_T_4 & (&_decoded_decoded_T_24)
          & (~(io_pc[1]) | _reg_bp_0_control_WIRE_1[2]))
        reg_misa <=
          ~(~_reg_bp_0_control_WIRE_1 | {60'h0, ~(_reg_bp_0_control_WIRE_1[5]), 3'h0})
          & 64'h1005 | reg_misa & 64'hFFFFFFFFFFFFEFFA;
      if (_csr_wen_T_4 & (&_decoded_decoded_T_158))
        reg_custom_0 <=
          _reg_bp_0_control_WIRE_1 & 64'h208 | reg_custom_0 & 64'hFFFFFFFFFFFFFDF7;
      io_status_cease_r <=
        system_insn
        & (&{io_rw_addr[2],
             _GEN_11[3],
             _GEN_11[4],
             _GEN_11[5],
             _GEN_11[6],
             _GEN_11[7],
             io_rw_addr[8],
             io_rw_addr[9],
             _GEN_11[10],
             _GEN_11[11]}) | io_status_cease_r;
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_154))
      reg_dpc <= ~_GEN_31;
    else if (_GEN_27)
      reg_dpc <= ~_epc_T_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_156))
      reg_dscratch0 <= _reg_bp_0_control_WIRE_1;
    reg_singleStepped <=
      _io_singleStep_output
      & (io_retire | _io_trace_0_exception_output | reg_singleStepped);
    reg_bp_0_control_chain <= ~(reset | _GEN_33) & reg_bp_0_control_chain;
    if (_GEN_33) begin
      reg_bp_0_control_tmatch <= _reg_bp_0_control_WIRE_1[8:7];
      reg_bp_0_control_m <= _reg_bp_0_control_WIRE_1[6];
      reg_bp_0_control_s <= _reg_bp_0_control_WIRE_1[4];
      reg_bp_0_control_u <= _reg_bp_0_control_WIRE_1[3];
    end
    if (_csr_wen_T_4 & _T_1864 & (&_decoded_decoded_T_148))
      reg_bp_0_address <= _reg_bp_0_control_WIRE_1[38:0];
    if (_GEN_34) begin
      reg_pmp_0_cfg_x <= _reg_bp_0_control_WIRE_1[2];
      reg_pmp_0_cfg_w <= _reg_bp_0_control_WIRE_1[1] & _reg_bp_0_control_WIRE_1[0];
      reg_pmp_0_cfg_r <= _reg_bp_0_control_WIRE_1[0];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_112)
        & ~(reg_pmp_0_cfg_l | reg_pmp_1_cfg_l & ~(reg_pmp_1_cfg_a[1])
            & reg_pmp_1_cfg_a[0]))
      reg_pmp_0_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_35) begin
      reg_pmp_1_cfg_x <= _reg_bp_0_control_WIRE_1[10];
      reg_pmp_1_cfg_w <= _reg_bp_0_control_WIRE_1[9] & _reg_bp_0_control_WIRE_1[8];
      reg_pmp_1_cfg_r <= _reg_bp_0_control_WIRE_1[8];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_114)
        & ~(reg_pmp_1_cfg_l | reg_pmp_2_cfg_l & ~(reg_pmp_2_cfg_a[1])
            & reg_pmp_2_cfg_a[0]))
      reg_pmp_1_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_36) begin
      reg_pmp_2_cfg_x <= _reg_bp_0_control_WIRE_1[18];
      reg_pmp_2_cfg_w <= _reg_bp_0_control_WIRE_1[17] & _reg_bp_0_control_WIRE_1[16];
      reg_pmp_2_cfg_r <= _reg_bp_0_control_WIRE_1[16];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_116)
        & ~(reg_pmp_2_cfg_l | reg_pmp_3_cfg_l & ~(reg_pmp_3_cfg_a[1])
            & reg_pmp_3_cfg_a[0]))
      reg_pmp_2_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_37) begin
      reg_pmp_3_cfg_x <= _reg_bp_0_control_WIRE_1[26];
      reg_pmp_3_cfg_w <= _reg_bp_0_control_WIRE_1[25] & _reg_bp_0_control_WIRE_1[24];
      reg_pmp_3_cfg_r <= _reg_bp_0_control_WIRE_1[24];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_118)
        & ~(reg_pmp_3_cfg_l | reg_pmp_4_cfg_l & ~(reg_pmp_4_cfg_a[1])
            & reg_pmp_4_cfg_a[0]))
      reg_pmp_3_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_38) begin
      reg_pmp_4_cfg_x <= _reg_bp_0_control_WIRE_1[34];
      reg_pmp_4_cfg_w <= _reg_bp_0_control_WIRE_1[33] & _reg_bp_0_control_WIRE_1[32];
      reg_pmp_4_cfg_r <= _reg_bp_0_control_WIRE_1[32];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_120)
        & ~(reg_pmp_4_cfg_l | reg_pmp_5_cfg_l & ~(reg_pmp_5_cfg_a[1])
            & reg_pmp_5_cfg_a[0]))
      reg_pmp_4_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_39) begin
      reg_pmp_5_cfg_x <= _reg_bp_0_control_WIRE_1[42];
      reg_pmp_5_cfg_w <= _reg_bp_0_control_WIRE_1[41] & _reg_bp_0_control_WIRE_1[40];
      reg_pmp_5_cfg_r <= _reg_bp_0_control_WIRE_1[40];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_122)
        & ~(reg_pmp_5_cfg_l | reg_pmp_6_cfg_l & ~(reg_pmp_6_cfg_a[1])
            & reg_pmp_6_cfg_a[0]))
      reg_pmp_5_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_40) begin
      reg_pmp_6_cfg_x <= _reg_bp_0_control_WIRE_1[50];
      reg_pmp_6_cfg_w <= _reg_bp_0_control_WIRE_1[49] & _reg_bp_0_control_WIRE_1[48];
      reg_pmp_6_cfg_r <= _reg_bp_0_control_WIRE_1[48];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_124)
        & ~(reg_pmp_6_cfg_l | reg_pmp_7_cfg_l & ~(reg_pmp_7_cfg_a[1])
            & reg_pmp_7_cfg_a[0]))
      reg_pmp_6_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_GEN_41) begin
      reg_pmp_7_cfg_x <= _reg_bp_0_control_WIRE_1[58];
      reg_pmp_7_cfg_w <= _reg_bp_0_control_WIRE_1[57] & _reg_bp_0_control_WIRE_1[56];
      reg_pmp_7_cfg_r <= _reg_bp_0_control_WIRE_1[56];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_126)
        & ~(reg_pmp_7_cfg_l | reg_pmp_7_cfg_l & ~(reg_pmp_7_cfg_a[1])
            & reg_pmp_7_cfg_a[0]))
      reg_pmp_7_addr <= _reg_bp_0_control_WIRE_1[29:0];
    if (_csr_wen_T_4) begin
      if (&_decoded_decoded_T_2)
        reg_mie <= reg_mie & ~sie_mask | _reg_bp_0_control_WIRE_1 & sie_mask;
      else if (&_decoded_decoded_T_30)
        reg_mie <= _reg_bp_0_control_WIRE_1 & 64'hAAA;
      if (&_decoded_decoded_T_18)
        reg_mip_ssip <=
          reg_mip_ssip & ~(reg_mideleg[1]) | _reg_bp_0_control_WIRE_1[1] & reg_mideleg[1];
      else if (&_decoded_decoded_T_106)
        reg_mip_ssip <= _GEN_30[0];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_28))
      reg_mideleg <= _reg_bp_0_control_WIRE_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_26))
      reg_medeleg <= _reg_bp_0_control_WIRE_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_106)) begin
      reg_mip_seip <= _GEN_30[8];
      reg_mip_stip <= _GEN_30[4];
    end
    if (_csr_wen_T_4 & (&_decoded_decoded_T_100))
      reg_mepc <= ~_GEN_31;
    else if (_GEN_29) begin
    end
    else
      reg_mepc <= ~_epc_T_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_104))
      reg_mtval <= _reg_bp_0_control_WIRE_1[39:0];
    else if (_GEN_29) begin
    end
    else if (insn_break)
      reg_mtval <= ~_epc_T_1;
    else
      reg_mtval <= io_tval;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_98))
      reg_mscratch <= _reg_bp_0_control_WIRE_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_34))
      reg_mcounteren <= _reg_bp_0_control_WIRE_1[31:0];
    if (_csr_wen_T_4 & (&_decoded_decoded_T_6))
      reg_scounteren <= _reg_bp_0_control_WIRE_1[31:0];
    if (_csr_wen_T_4 & (&_decoded_decoded_T_12))
      reg_sepc <= ~_GEN_31;
    else if (_GEN_28) begin
    end
    else
      reg_sepc <= ~_epc_T_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_14))
      reg_scause <= _reg_bp_0_control_WIRE_1 & 64'h800000000000001F;
    else if (_GEN_28) begin
    end
    else if (insn_call)
      reg_scause <= _GEN_16;
    else if (insn_break)
      reg_scause <= 64'h3;
    else
      reg_scause <= io_cause;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_16))
      reg_stval <= _reg_bp_0_control_WIRE_1[39:0];
    else if (_GEN_28) begin
    end
    else if (insn_break)
      reg_stval <= ~_epc_T_1;
    else
      reg_stval <= io_tval;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_10))
      reg_sscratch <= _reg_bp_0_control_WIRE_1;
    if (_csr_wen_T_4 & (&_decoded_decoded_T_4))
      reg_stvec <= _reg_bp_0_control_WIRE_1[38:0];
    if (_GEN_32)
      reg_satp_ppn <= {24'h0, _reg_bp_0_control_WIRE_1[19:0]};
  end // always @(posedge)
  wire [6:0]  nextSmall_1 = {1'h0, small_1} + {6'h0, ~_io_csr_stall_output};
  always @(posedge io_ungated_clock) begin
    if (reset) begin
      reg_wfi <= 1'h0;
      small_1 <= 6'h0;
      large_1 <= 58'h0;
    end
    else begin
      reg_wfi <=
        ~((|{_GEN[11], _GEN[9], _GEN[7], _GEN[5], _GEN[3], _GEN[1]}) | io_interrupts_debug
          | _io_trace_0_exception_output)
        & (system_insn
           & (&{io_rw_addr[2],
                _GEN_11[3],
                _GEN_11[4],
                _GEN_11[5],
                _GEN_11[6],
                _GEN_11[7],
                io_rw_addr[8],
                _GEN_11[9],
                _GEN_11[10],
                _GEN_11[11]}) & ~_io_singleStep_output & ~reg_debug | reg_wfi);
      if (_csr_wen_T_4 & (&_decoded_decoded_T_160)) begin
        small_1 <= _reg_bp_0_control_WIRE_1[5:0];
        large_1 <= _reg_bp_0_control_WIRE_1[63:6];
      end
      else begin
        if (reg_mcountinhibit[0]) begin
        end
        else
          small_1 <= nextSmall_1[5:0];
        if (nextSmall_1[6] & ~(reg_mcountinhibit[0]))
          large_1 <= large_1 + 58'h1;
      end
    end
  end // always @(posedge)
  assign io_rw_rdata = _io_rw_rdata_WIRE;
  assign io_decode_0_fp_illegal = reg_mstatus_fs == 2'h0 | ~(reg_misa[5]);
  assign io_decode_0_read_illegal =
    _io_decode_0_system_illegal_T | ~csr_exists
    | (_io_decode_0_virtual_access_illegal_T_24 | io_decode_0_inst[31:20] == 12'h680)
    & ~allow_sfence_vma
    | (io_decode_0_inst[31:20] > 12'hBFF & io_decode_0_inst[31:20] < 12'hC20
       | io_decode_0_inst[31:20] > 12'hC7F & io_decode_0_inst[31:20] < 12'hCA0)
    & ~((reg_mstatus_prv[1] | _io_decode_0_virtual_access_illegal_T_3[0])
        & ((|reg_mstatus_prv) | _io_decode_0_virtual_access_illegal_T_11[0]))
    | (&{io_decode_0_inst[24],
         io_decode_0_inst[25],
         _GEN_14[0],
         io_decode_0_inst[27],
         io_decode_0_inst[28],
         io_decode_0_inst[29],
         io_decode_0_inst[30],
         _GEN_14[5]}) & ~reg_debug;
  assign io_decode_0_write_illegal = &(io_decode_0_inst[31:30]);
  assign io_decode_0_write_flush =
    ~(io_decode_0_write_flush_addr_m > 12'h33F
      & io_decode_0_write_flush_addr_m < 12'h344);
  assign io_decode_0_system_illegal =
    _io_decode_0_system_illegal_T
    | (&{io_decode_0_inst[22],
         _GEN_12[21],
         _GEN_12[22],
         _GEN_12[23],
         _GEN_12[24],
         _GEN_12[25],
         io_decode_0_inst[28],
         _GEN_12[27],
         _GEN_12[28],
         _GEN_12[29]}) & ~(reg_mstatus_prv[1] | ~reg_mstatus_tw)
    | (|_decoded_orMatrixOutputs_T_10) & ~(reg_mstatus_prv[1] | ~reg_mstatus_tsr)
    | (|_decoded_orMatrixOutputs_T_10) & io_decode_0_inst[30] & io_decode_0_inst[27]
    & ~reg_debug
    | (&{io_decode_0_inst[0],
         io_decode_0_inst[1],
         _GEN_12[0],
         _GEN_12[1],
         io_decode_0_inst[4],
         io_decode_0_inst[5],
         io_decode_0_inst[6],
         _GEN_12[5],
         _GEN_12[6],
         _GEN_12[7],
         io_decode_0_inst[25],
         _GEN_12[24],
         _GEN_12[25],
         io_decode_0_inst[28],
         _GEN_12[27],
         _GEN_12[28],
         _GEN_12[29]}) & ~allow_sfence_vma;
  assign io_csr_stall = _io_csr_stall_output;
  assign io_eret = _exception_T | insn_ret;
  assign io_singleStep = _io_singleStep_output;
  assign io_status_debug = reg_debug;
  assign io_status_wfi = reg_wfi;
  assign io_status_isa = reg_misa[31:0];
  assign io_status_dprv =
    reg_mstatus_mprv & ~reg_debug ? reg_mstatus_mpp : reg_mstatus_prv;
  assign io_status_prv = reg_mstatus_prv;
  assign io_status_mxr = reg_mstatus_mxr;
  assign io_status_sum = reg_mstatus_sum;
  assign io_ptbr_mode = reg_satp_mode;
  assign io_ptbr_ppn = reg_satp_ppn;
  assign io_evec =
    insn_ret
      ? (io_rw_addr[9]
           ? (_T_427 ? ~(~reg_dpc | _GEN_10) : ~(~reg_mepc | _GEN_10))
           : ~(~reg_sepc | _GEN_10))
      : trapToDebug
          ? {28'h0, reg_debug ? {8'h80, ~insn_break, 3'h0} : 12'h800}
          : {_GEN_18[0] & cause[63] & cause[7:6] == 2'h0
               ? {_GEN_18[39:8], cause[5:0]}
               : _GEN_18[39:2],
             2'h0};
  assign io_time = value_1;
  assign io_interrupt =
    ((io_interrupts_debug | _GEN_0[15] | _GEN_0[14] | _GEN_0[13] | _GEN_0[12] | _GEN_0[11]
      | _GEN_0[3] | _GEN_0[7] | _GEN_0[9] | _GEN_0[1] | _GEN_0[5] | _GEN_0[10] | _GEN_0[2]
      | _GEN_0[6] | _GEN_0[8] | _GEN_0[0] | _GEN_0[4] | _GEN_1[10] | _GEN_1[2] | _GEN_1[6]
      | _GEN_1[8] | _GEN_1[0] | _GEN_1[4]) & ~_io_singleStep_output | reg_singleStepped)
    & ~(reg_debug | io_status_cease_r);
  assign io_interrupt_cause =
    {60'h0,
     io_interrupts_debug
       ? 4'hE
       : _GEN_0[15]
           ? 4'hF
           : _GEN_0[14]
               ? 4'hE
               : _GEN_0[13]
                   ? 4'hD
                   : _GEN_0[12]
                       ? 4'hC
                       : _GEN_0[11]
                           ? 4'hB
                           : _GEN_0[3]
                               ? 4'h3
                               : _GEN_0[7]
                                   ? 4'h7
                                   : _GEN_0[9]
                                       ? 4'h9
                                       : _GEN_0[1]
                                           ? 4'h1
                                           : _GEN_0[5]
                                               ? 4'h5
                                               : _GEN_0[10]
                                                   ? 4'hA
                                                   : _GEN_0[2]
                                                       ? 4'h2
                                                       : _GEN_0[6]
                                                           ? 4'h6
                                                           : _GEN_0[8]
                                                               ? 4'h8
                                                               : _GEN_0[0]
                                                                   ? 4'h0
                                                                   : _GEN_0[4]
                                                                       ? 4'h4
                                                                       : _GEN_1[10]
                                                                           ? 4'hB
                                                                           : _GEN_1[2]
                                                                               ? 4'h3
                                                                               : _GEN_1[6]
                                                                                   ? 4'h7
                                                                                   : _GEN_1[8]
                                                                                       ? 4'h9
                                                                                       : _GEN_1[0]
                                                                                           ? 4'h1
                                                                                           : {3'h2,
                                                                                              _GEN_1[4]}}
    - 64'h8000000000000000;
  assign io_bp_0_control_action = reg_bp_0_control_action;
  assign io_bp_0_control_chain = reg_bp_0_control_chain;
  assign io_bp_0_control_tmatch = reg_bp_0_control_tmatch;
  assign io_bp_0_control_m = reg_bp_0_control_m;
  assign io_bp_0_control_s = reg_bp_0_control_s;
  assign io_bp_0_control_u = reg_bp_0_control_u;
  assign io_bp_0_control_x = reg_bp_0_control_x;
  assign io_bp_0_control_w = reg_bp_0_control_w;
  assign io_bp_0_control_r = reg_bp_0_control_r;
  assign io_bp_0_address = reg_bp_0_address;
  assign io_pmp_0_cfg_l = reg_pmp_0_cfg_l;
  assign io_pmp_0_cfg_a = reg_pmp_0_cfg_a;
  assign io_pmp_0_cfg_x = reg_pmp_0_cfg_x;
  assign io_pmp_0_cfg_w = reg_pmp_0_cfg_w;
  assign io_pmp_0_cfg_r = reg_pmp_0_cfg_r;
  assign io_pmp_0_addr = reg_pmp_0_addr;
  assign io_pmp_0_mask = {_GEN_2 & ~(_GEN_2 + 30'h1), 2'h3};
  assign io_pmp_1_cfg_l = reg_pmp_1_cfg_l;
  assign io_pmp_1_cfg_a = reg_pmp_1_cfg_a;
  assign io_pmp_1_cfg_x = reg_pmp_1_cfg_x;
  assign io_pmp_1_cfg_w = reg_pmp_1_cfg_w;
  assign io_pmp_1_cfg_r = reg_pmp_1_cfg_r;
  assign io_pmp_1_addr = reg_pmp_1_addr;
  assign io_pmp_1_mask = {_GEN_3 & ~(_GEN_3 + 30'h1), 2'h3};
  assign io_pmp_2_cfg_l = reg_pmp_2_cfg_l;
  assign io_pmp_2_cfg_a = reg_pmp_2_cfg_a;
  assign io_pmp_2_cfg_x = reg_pmp_2_cfg_x;
  assign io_pmp_2_cfg_w = reg_pmp_2_cfg_w;
  assign io_pmp_2_cfg_r = reg_pmp_2_cfg_r;
  assign io_pmp_2_addr = reg_pmp_2_addr;
  assign io_pmp_2_mask = {_GEN_4 & ~(_GEN_4 + 30'h1), 2'h3};
  assign io_pmp_3_cfg_l = reg_pmp_3_cfg_l;
  assign io_pmp_3_cfg_a = reg_pmp_3_cfg_a;
  assign io_pmp_3_cfg_x = reg_pmp_3_cfg_x;
  assign io_pmp_3_cfg_w = reg_pmp_3_cfg_w;
  assign io_pmp_3_cfg_r = reg_pmp_3_cfg_r;
  assign io_pmp_3_addr = reg_pmp_3_addr;
  assign io_pmp_3_mask = {_GEN_5 & ~(_GEN_5 + 30'h1), 2'h3};
  assign io_pmp_4_cfg_l = reg_pmp_4_cfg_l;
  assign io_pmp_4_cfg_a = reg_pmp_4_cfg_a;
  assign io_pmp_4_cfg_x = reg_pmp_4_cfg_x;
  assign io_pmp_4_cfg_w = reg_pmp_4_cfg_w;
  assign io_pmp_4_cfg_r = reg_pmp_4_cfg_r;
  assign io_pmp_4_addr = reg_pmp_4_addr;
  assign io_pmp_4_mask = {_GEN_6 & ~(_GEN_6 + 30'h1), 2'h3};
  assign io_pmp_5_cfg_l = reg_pmp_5_cfg_l;
  assign io_pmp_5_cfg_a = reg_pmp_5_cfg_a;
  assign io_pmp_5_cfg_x = reg_pmp_5_cfg_x;
  assign io_pmp_5_cfg_w = reg_pmp_5_cfg_w;
  assign io_pmp_5_cfg_r = reg_pmp_5_cfg_r;
  assign io_pmp_5_addr = reg_pmp_5_addr;
  assign io_pmp_5_mask = {_GEN_7 & ~(_GEN_7 + 30'h1), 2'h3};
  assign io_pmp_6_cfg_l = reg_pmp_6_cfg_l;
  assign io_pmp_6_cfg_a = reg_pmp_6_cfg_a;
  assign io_pmp_6_cfg_x = reg_pmp_6_cfg_x;
  assign io_pmp_6_cfg_w = reg_pmp_6_cfg_w;
  assign io_pmp_6_cfg_r = reg_pmp_6_cfg_r;
  assign io_pmp_6_addr = reg_pmp_6_addr;
  assign io_pmp_6_mask = {_GEN_8 & ~(_GEN_8 + 30'h1), 2'h3};
  assign io_pmp_7_cfg_l = reg_pmp_7_cfg_l;
  assign io_pmp_7_cfg_a = reg_pmp_7_cfg_a;
  assign io_pmp_7_cfg_x = reg_pmp_7_cfg_x;
  assign io_pmp_7_cfg_w = reg_pmp_7_cfg_w;
  assign io_pmp_7_cfg_r = reg_pmp_7_cfg_r;
  assign io_pmp_7_addr = reg_pmp_7_addr;
  assign io_pmp_7_mask = {_GEN_9 & ~(_GEN_9 + 30'h1), 2'h3};
  assign io_inhibit_cycle = reg_mcountinhibit[0];
  assign io_trace_0_valid = io_retire | _io_trace_0_exception_output;
  assign io_trace_0_iaddr = io_pc;
  assign io_trace_0_insn = io_inst_0;
  assign io_trace_0_exception = _io_trace_0_exception_output;
  assign io_customCSRs_0_value = reg_custom_0;
endmodule

module BreakpointUnit(
  input         io_status_debug,
  input  [1:0]  io_status_prv,
  input         io_bp_0_control_action,
                io_bp_0_control_chain,
  input  [1:0]  io_bp_0_control_tmatch,
  input         io_bp_0_control_m,
                io_bp_0_control_s,
                io_bp_0_control_u,
                io_bp_0_control_x,
                io_bp_0_control_w,
                io_bp_0_control_r,
  input  [38:0] io_bp_0_address,
                io_pc,
                io_ea,
  output        io_xcpt_if,
                io_xcpt_ld,
                io_xcpt_st,
                io_debug_if,
                io_debug_ld,
                io_debug_st
);

  wire [3:0] _en_T_2 =
    {io_bp_0_control_m, 1'h0, io_bp_0_control_s, io_bp_0_control_u} >> io_status_prv;
  wire       en = ~io_status_debug & _en_T_2[0];
  wire       _w_T_2 = io_ea >= io_bp_0_address;
  wire       _r_T_8 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _r_T_10 = _r_T_8 & io_bp_0_address[1];
  wire       _r_T_18 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _r_T_20 = _r_T_18 & io_bp_0_address[1];
  wire       _w_T_8 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _w_T_10 = _w_T_8 & io_bp_0_address[1];
  wire       _w_T_18 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _w_T_20 = _w_T_18 & io_bp_0_address[1];
  wire       _x_T_8 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _x_T_10 = _x_T_8 & io_bp_0_address[1];
  wire       _x_T_18 = io_bp_0_control_tmatch[0] & io_bp_0_address[0];
  wire       _x_T_20 = _x_T_18 & io_bp_0_address[1];
  wire       _T_1 =
    ~io_bp_0_control_chain & en & io_bp_0_control_r
    & (io_bp_0_control_tmatch[1]
         ? _w_T_2 ^ io_bp_0_control_tmatch[0]
         : (~io_ea
            | {35'h0,
               _r_T_10 & io_bp_0_address[2],
               _r_T_10,
               _r_T_8,
               io_bp_0_control_tmatch[0]}) == (~io_bp_0_address
                                               | {35'h0,
                                                  _r_T_20 & io_bp_0_address[2],
                                                  _r_T_20,
                                                  _r_T_18,
                                                  io_bp_0_control_tmatch[0]}));
  wire       _T_3 =
    ~io_bp_0_control_chain & en & io_bp_0_control_w
    & (io_bp_0_control_tmatch[1]
         ? _w_T_2 ^ io_bp_0_control_tmatch[0]
         : (~io_ea
            | {35'h0,
               _w_T_10 & io_bp_0_address[2],
               _w_T_10,
               _w_T_8,
               io_bp_0_control_tmatch[0]}) == (~io_bp_0_address
                                               | {35'h0,
                                                  _w_T_20 & io_bp_0_address[2],
                                                  _w_T_20,
                                                  _w_T_18,
                                                  io_bp_0_control_tmatch[0]}));
  wire       _T_5 =
    ~io_bp_0_control_chain & en & io_bp_0_control_x
    & (io_bp_0_control_tmatch[1]
         ? io_pc >= io_bp_0_address ^ io_bp_0_control_tmatch[0]
         : (~io_pc
            | {35'h0,
               _x_T_10 & io_bp_0_address[2],
               _x_T_10,
               _x_T_8,
               io_bp_0_control_tmatch[0]}) == (~io_bp_0_address
                                               | {35'h0,
                                                  _x_T_20 & io_bp_0_address[2],
                                                  _x_T_20,
                                                  _x_T_18,
                                                  io_bp_0_control_tmatch[0]}));
  assign io_xcpt_if = _T_5 & ~io_bp_0_control_action;
  assign io_xcpt_ld = _T_1 & ~io_bp_0_control_action;
  assign io_xcpt_st = _T_3 & ~io_bp_0_control_action;
  assign io_debug_if = _T_5 & io_bp_0_control_action;
  assign io_debug_ld = _T_1 & io_bp_0_control_action;
  assign io_debug_st = _T_3 & io_bp_0_control_action;
endmodule

module ALU(
  input         io_dw,
  input  [3:0]  io_fn,
  input  [63:0] io_in2,
                io_in1,
  output [63:0] io_out,
                io_adder_out,
  output        io_cmp_out
);

  wire [63:0] in2_inv = {64{io_fn[3]}} ^ io_in2;
  wire [63:0] in1_xor_in2 = io_in1 ^ in2_inv;
  wire [63:0] _io_adder_out_output = io_in1 + in2_inv + {63'h0, io_fn[3]};
  wire        slt =
    io_in1[63] == io_in2[63]
      ? _io_adder_out_output[63]
      : io_fn[1] ? io_in2[63] : io_in1[63];
  wire [31:0] shin_hi = io_dw ? io_in1[63:32] : {32{io_fn[3] & io_in1[31]}};
  wire        _shout_T = io_fn == 4'h5;
  wire        _shout_T_1 = io_fn == 4'hB;
  wire [63:0] shin =
    _shout_T | _shout_T_1
      ? {shin_hi, io_in1[31:0]}
      : {io_in1[0],
         io_in1[1],
         io_in1[2],
         io_in1[3],
         io_in1[4],
         io_in1[5],
         io_in1[6],
         io_in1[7],
         io_in1[8],
         io_in1[9],
         io_in1[10],
         io_in1[11],
         io_in1[12],
         io_in1[13],
         io_in1[14],
         io_in1[15],
         io_in1[16],
         io_in1[17],
         io_in1[18],
         io_in1[19],
         io_in1[20],
         io_in1[21],
         io_in1[22],
         io_in1[23],
         io_in1[24],
         io_in1[25],
         io_in1[26],
         io_in1[27],
         io_in1[28],
         io_in1[29],
         io_in1[30],
         io_in1[31],
         shin_hi[0],
         shin_hi[1],
         shin_hi[2],
         shin_hi[3],
         shin_hi[4],
         shin_hi[5],
         shin_hi[6],
         shin_hi[7],
         shin_hi[8],
         shin_hi[9],
         shin_hi[10],
         shin_hi[11],
         shin_hi[12],
         shin_hi[13],
         shin_hi[14],
         shin_hi[15],
         shin_hi[16],
         shin_hi[17],
         shin_hi[18],
         shin_hi[19],
         shin_hi[20],
         shin_hi[21],
         shin_hi[22],
         shin_hi[23],
         shin_hi[24],
         shin_hi[25],
         shin_hi[26],
         shin_hi[27],
         shin_hi[28],
         shin_hi[29],
         shin_hi[30],
         shin_hi[31]};
  wire [64:0] _shout_r_T_5 =
    $signed($signed({io_fn[3] & shin[63], shin})
            >>> {59'h0, io_in2[5] & io_dw, io_in2[4:0]});
  wire        _logic_T_4 = io_fn == 4'h6;
  wire [63:0] out =
    io_fn == 4'h0 | io_fn == 4'hA
      ? _io_adder_out_output
      : {63'h0, io_fn > 4'hB & slt} | (io_fn == 4'h4 | _logic_T_4 ? in1_xor_in2 : 64'h0)
        | (_logic_T_4 | io_fn == 4'h7 ? io_in1 & io_in2 : 64'h0)
        | (_shout_T | _shout_T_1 ? _shout_r_T_5[63:0] : 64'h0)
        | (io_fn == 4'h1
             ? {_shout_r_T_5[0],
                _shout_r_T_5[1],
                _shout_r_T_5[2],
                _shout_r_T_5[3],
                _shout_r_T_5[4],
                _shout_r_T_5[5],
                _shout_r_T_5[6],
                _shout_r_T_5[7],
                _shout_r_T_5[8],
                _shout_r_T_5[9],
                _shout_r_T_5[10],
                _shout_r_T_5[11],
                _shout_r_T_5[12],
                _shout_r_T_5[13],
                _shout_r_T_5[14],
                _shout_r_T_5[15],
                _shout_r_T_5[16],
                _shout_r_T_5[17],
                _shout_r_T_5[18],
                _shout_r_T_5[19],
                _shout_r_T_5[20],
                _shout_r_T_5[21],
                _shout_r_T_5[22],
                _shout_r_T_5[23],
                _shout_r_T_5[24],
                _shout_r_T_5[25],
                _shout_r_T_5[26],
                _shout_r_T_5[27],
                _shout_r_T_5[28],
                _shout_r_T_5[29],
                _shout_r_T_5[30],
                _shout_r_T_5[31],
                _shout_r_T_5[32],
                _shout_r_T_5[33],
                _shout_r_T_5[34],
                _shout_r_T_5[35],
                _shout_r_T_5[36],
                _shout_r_T_5[37],
                _shout_r_T_5[38],
                _shout_r_T_5[39],
                _shout_r_T_5[40],
                _shout_r_T_5[41],
                _shout_r_T_5[42],
                _shout_r_T_5[43],
                _shout_r_T_5[44],
                _shout_r_T_5[45],
                _shout_r_T_5[46],
                _shout_r_T_5[47],
                _shout_r_T_5[48],
                _shout_r_T_5[49],
                _shout_r_T_5[50],
                _shout_r_T_5[51],
                _shout_r_T_5[52],
                _shout_r_T_5[53],
                _shout_r_T_5[54],
                _shout_r_T_5[55],
                _shout_r_T_5[56],
                _shout_r_T_5[57],
                _shout_r_T_5[58],
                _shout_r_T_5[59],
                _shout_r_T_5[60],
                _shout_r_T_5[61],
                _shout_r_T_5[62],
                _shout_r_T_5[63]}
             : 64'h0);
  assign io_out = io_dw ? out : {{32{out[31]}}, out[31:0]};
  assign io_adder_out = _io_adder_out_output;
  assign io_cmp_out = io_fn[0] ^ (io_fn[3] ? slt : in1_xor_in2 == 64'h0);
endmodule

module MulDiv(
  input         clock,
                reset,
                io_req_valid,
  input  [3:0]  io_req_bits_fn,
  input         io_req_bits_dw,
  input  [63:0] io_req_bits_in1,
                io_req_bits_in2,
  input  [4:0]  io_req_bits_tag,
  input         io_kill,
                io_resp_ready,
  output        io_req_ready,
                io_resp_valid,
  output [63:0] io_resp_bits_data,
  output [4:0]  io_resp_bits_tag
);

  reg  [2:0]   state;
  reg          req_dw;
  reg  [4:0]   req_tag;
  reg  [6:0]   count;
  reg          neg_out;
  reg          isHi;
  reg          resHi;
  reg  [64:0]  divisor;
  reg  [129:0] remainder;
  wire [63:0]  result = resHi ? remainder[128:65] : remainder[63:0];
  wire [31:0]  loOut = req_dw | state[0] ? result[31:0] : result[63:32];
  wire         _io_resp_valid_output = state == 3'h6 | (&state);
  wire         _io_req_ready_output = state == 3'h0;
  wire [65:0]  _GEN =
    {{65{remainder[64]}}, remainder[0]} * {divisor[64], divisor}
    + {remainder[129], remainder[129:65]};
  wire [64:0]  subtractor = remainder[128:64] - divisor;
  wire [2:0]   decoded_invInputs = ~(io_req_bits_fn[2:0]);
  wire [1:0]   _decoded_T_2 = {decoded_invInputs[1], decoded_invInputs[2]};
  wire         lhs_sign =
    (|{decoded_invInputs[0], &_decoded_T_2})
    & (io_req_bits_dw ? io_req_bits_in1[63] : io_req_bits_in1[31]);
  wire         rhs_sign =
    (|{&_decoded_T_2, &{decoded_invInputs[0], io_req_bits_fn[2]}})
    & (io_req_bits_dw ? io_req_bits_in2[63] : io_req_bits_in2[31]);
  wire         _T_10 = state == 3'h1;
  wire         _T_13 = state == 3'h5;
  wire         _T_14 = state == 3'h2;
  wire         _GEN_0 = _T_14 & count == 7'h3F;
  wire         _T_17 = state == 3'h3;
  wire         _T_18 = count == 7'h40;
  wire         _T_23 = _io_req_ready_output & io_req_valid;
  wire [1:0]   _decoded_orMatrixOutputs_T_4 =
    {&{io_req_bits_fn[0], decoded_invInputs[2]}, io_req_bits_fn[1]};
  always @(posedge clock) begin
    if (reset)
      state <= 3'h0;
    else if (_T_23) begin
      if (decoded_invInputs[2])
        state <= 3'h2;
      else
        state <= {1'h0, ~(lhs_sign | rhs_sign), 1'h1};
    end
    else if (io_resp_ready & _io_resp_valid_output | io_kill)
      state <= 3'h0;
    else if (_T_17 & _T_18)
      state <= {1'h1, ~neg_out, 1'h1};
    else if (_GEN_0)
      state <= 3'h6;
    else if (_T_13)
      state <= 3'h7;
    else if (_T_10)
      state <= 3'h3;
    if (_T_23) begin
      req_dw <= io_req_bits_dw;
      req_tag <= io_req_bits_tag;
      count <= {1'h0, decoded_invInputs[2] & ~io_req_bits_dw, 5'h0};
      if (|_decoded_orMatrixOutputs_T_4)
        neg_out <= lhs_sign;
      else
        neg_out <= lhs_sign != rhs_sign;
      isHi <= |_decoded_orMatrixOutputs_T_4;
      divisor <=
        {rhs_sign,
         io_req_bits_dw ? io_req_bits_in2[63:32] : {32{rhs_sign}},
         io_req_bits_in2[31:0]};
      remainder <=
        {66'h0,
         io_req_bits_dw ? io_req_bits_in1[63:32] : {32{lhs_sign}},
         io_req_bits_in1[31:0]};
    end
    else begin
      if (_T_17) begin
        count <= count + 7'h1;
        remainder <=
          {1'h0,
           subtractor[64] ? remainder[127:64] : subtractor[63:0],
           remainder[63:0],
           ~(subtractor[64])};
      end
      else if (_T_14) begin
        count <= count + 7'h1;
        remainder <= {_GEN[65:1], count == 7'h3E & neg_out, _GEN[0], remainder[63:1]};
      end
      else if (_T_13 | _T_10 & remainder[63])
        remainder <= {66'h0, 64'h0 - result};
      neg_out <= ~(_T_17 & count == 7'h0 & ~(subtractor[64]) & ~isHi) & neg_out;
      if (_T_10 & divisor[63])
        divisor <= subtractor;
    end
    resHi <= ~_T_23 & (_T_17 & _T_18 | _GEN_0 ? isHi : ~_T_13 & resHi);
  end // always @(posedge)
  assign io_req_ready = _io_req_ready_output;
  assign io_resp_valid = _io_resp_valid_output;
  assign io_resp_bits_data = {req_dw ? result[63:32] : {32{loOut[31]}}, loOut};
  assign io_resp_bits_tag = req_tag;
endmodule

// external module plusarg_reader

module PlusArgTimeout(
  input        clock,
               reset,
  input [31:0] io_count
);

  wire [31:0] _plusarg_reader_out;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((|_plusarg_reader_out) & ~reset & io_count >= _plusarg_reader_out) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Timeout exceeded: Kill the emulation after INT rdtime cycles. Off if 0.\n    at PlusArg.scala:64 assert (io.count < max, s\"Timeout exceeded: $docstring\")\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("max_core_cycles=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
endmodule

module Rocket(
  input         clock,
                reset,
                io_hartid,
                io_interrupts_debug,
                io_interrupts_mtip,
                io_interrupts_msip,
                io_interrupts_meip,
                io_interrupts_seip,
                io_imem_resp_valid,
                io_imem_resp_bits_btb_taken,
                io_imem_resp_bits_btb_bridx,
  input  [39:0] io_imem_resp_bits_pc,
  input  [31:0] io_imem_resp_bits_data,
  input         io_imem_resp_bits_xcpt_pf_inst,
                io_imem_resp_bits_xcpt_gf_inst,
                io_imem_resp_bits_xcpt_ae_inst,
                io_imem_resp_bits_replay,
                io_imem_gpa_valid,
                io_dmem_req_ready,
                io_dmem_s2_nack,
                io_dmem_resp_valid,
  input  [6:0]  io_dmem_resp_bits_tag,
  input  [63:0] io_dmem_resp_bits_data,
  input         io_dmem_resp_bits_replay,
                io_dmem_resp_bits_has_data,
  input  [63:0] io_dmem_resp_bits_data_word_bypass,
  input         io_dmem_replay_next,
                io_dmem_s2_xcpt_ma_ld,
                io_dmem_s2_xcpt_ma_st,
                io_dmem_s2_xcpt_pf_ld,
                io_dmem_s2_xcpt_pf_st,
                io_dmem_s2_xcpt_gf_ld,
                io_dmem_s2_xcpt_gf_st,
                io_dmem_s2_xcpt_ae_ld,
                io_dmem_s2_xcpt_ae_st,
                io_dmem_ordered,
                io_dmem_perf_release,
                io_dmem_perf_grant,
  output        io_imem_might_request,
                io_imem_req_valid,
  output [39:0] io_imem_req_bits_pc,
  output        io_imem_req_bits_speculative,
                io_imem_sfence_valid,
                io_imem_sfence_bits_rs1,
                io_imem_sfence_bits_rs2,
  output [38:0] io_imem_sfence_bits_addr,
  output        io_imem_resp_ready,
                io_imem_btb_update_valid,
                io_imem_bht_update_valid,
                io_imem_flush_icache,
                io_imem_progress,
                io_dmem_req_valid,
  output [39:0] io_dmem_req_bits_addr,
  output [6:0]  io_dmem_req_bits_tag,
  output [4:0]  io_dmem_req_bits_cmd,
  output [1:0]  io_dmem_req_bits_size,
  output        io_dmem_req_bits_signed,
  output [1:0]  io_dmem_req_bits_dprv,
  output        io_dmem_req_bits_dv,
                io_dmem_s1_kill,
  output [63:0] io_dmem_s1_data_data,
  output [3:0]  io_ptw_ptbr_mode,
  output [43:0] io_ptw_ptbr_ppn,
  output        io_ptw_sfence_valid,
                io_ptw_sfence_bits_rs1,
                io_ptw_status_debug,
  output [1:0]  io_ptw_status_prv,
  output        io_ptw_status_mxr,
                io_ptw_status_sum,
                io_ptw_pmp_0_cfg_l,
  output [1:0]  io_ptw_pmp_0_cfg_a,
  output        io_ptw_pmp_0_cfg_x,
                io_ptw_pmp_0_cfg_w,
                io_ptw_pmp_0_cfg_r,
  output [29:0] io_ptw_pmp_0_addr,
  output [31:0] io_ptw_pmp_0_mask,
  output        io_ptw_pmp_1_cfg_l,
  output [1:0]  io_ptw_pmp_1_cfg_a,
  output        io_ptw_pmp_1_cfg_x,
                io_ptw_pmp_1_cfg_w,
                io_ptw_pmp_1_cfg_r,
  output [29:0] io_ptw_pmp_1_addr,
  output [31:0] io_ptw_pmp_1_mask,
  output        io_ptw_pmp_2_cfg_l,
  output [1:0]  io_ptw_pmp_2_cfg_a,
  output        io_ptw_pmp_2_cfg_x,
                io_ptw_pmp_2_cfg_w,
                io_ptw_pmp_2_cfg_r,
  output [29:0] io_ptw_pmp_2_addr,
  output [31:0] io_ptw_pmp_2_mask,
  output        io_ptw_pmp_3_cfg_l,
  output [1:0]  io_ptw_pmp_3_cfg_a,
  output        io_ptw_pmp_3_cfg_x,
                io_ptw_pmp_3_cfg_w,
                io_ptw_pmp_3_cfg_r,
  output [29:0] io_ptw_pmp_3_addr,
  output [31:0] io_ptw_pmp_3_mask,
  output        io_ptw_pmp_4_cfg_l,
  output [1:0]  io_ptw_pmp_4_cfg_a,
  output        io_ptw_pmp_4_cfg_x,
                io_ptw_pmp_4_cfg_w,
                io_ptw_pmp_4_cfg_r,
  output [29:0] io_ptw_pmp_4_addr,
  output [31:0] io_ptw_pmp_4_mask,
  output        io_ptw_pmp_5_cfg_l,
  output [1:0]  io_ptw_pmp_5_cfg_a,
  output        io_ptw_pmp_5_cfg_x,
                io_ptw_pmp_5_cfg_w,
                io_ptw_pmp_5_cfg_r,
  output [29:0] io_ptw_pmp_5_addr,
  output [31:0] io_ptw_pmp_5_mask,
  output        io_ptw_pmp_6_cfg_l,
  output [1:0]  io_ptw_pmp_6_cfg_a,
  output        io_ptw_pmp_6_cfg_x,
                io_ptw_pmp_6_cfg_w,
                io_ptw_pmp_6_cfg_r,
  output [29:0] io_ptw_pmp_6_addr,
  output [31:0] io_ptw_pmp_6_mask,
  output        io_ptw_pmp_7_cfg_l,
  output [1:0]  io_ptw_pmp_7_cfg_a,
  output        io_ptw_pmp_7_cfg_x,
                io_ptw_pmp_7_cfg_w,
                io_ptw_pmp_7_cfg_r,
  output [29:0] io_ptw_pmp_7_addr,
  output [31:0] io_ptw_pmp_7_mask,
  output [63:0] io_ptw_customCSRs_csrs_0_value,
  output        io_wfi
);

  wire        _io_dmem_req_valid_output;
  wire        _GEN;
  wire        take_pc_wb;
  wire        take_pc_mem;
  wire        _div_io_req_ready;
  wire        _div_io_resp_valid;
  wire [63:0] _div_io_resp_bits_data;
  wire [4:0]  _div_io_resp_bits_tag;
  wire [63:0] _alu_io_out;
  wire [63:0] _alu_io_adder_out;
  wire        _alu_io_cmp_out;
  wire        _bpu_io_xcpt_if;
  wire        _bpu_io_xcpt_ld;
  wire        _bpu_io_xcpt_st;
  wire        _bpu_io_debug_if;
  wire        _bpu_io_debug_ld;
  wire        _bpu_io_debug_st;
  wire [63:0] _csr_io_rw_rdata;
  wire        _csr_io_decode_0_fp_illegal;
  wire        _csr_io_decode_0_read_illegal;
  wire        _csr_io_decode_0_write_illegal;
  wire        _csr_io_decode_0_write_flush;
  wire        _csr_io_decode_0_system_illegal;
  wire        _csr_io_csr_stall;
  wire        _csr_io_eret;
  wire        _csr_io_singleStep;
  wire        _csr_io_status_debug;
  wire [31:0] _csr_io_status_isa;
  wire [1:0]  _csr_io_status_dprv;
  wire [1:0]  _csr_io_status_prv;
  wire [39:0] _csr_io_evec;
  wire [63:0] _csr_io_time;
  wire        _csr_io_interrupt;
  wire [63:0] _csr_io_interrupt_cause;
  wire        _csr_io_bp_0_control_action;
  wire        _csr_io_bp_0_control_chain;
  wire [1:0]  _csr_io_bp_0_control_tmatch;
  wire        _csr_io_bp_0_control_m;
  wire        _csr_io_bp_0_control_s;
  wire        _csr_io_bp_0_control_u;
  wire        _csr_io_bp_0_control_x;
  wire        _csr_io_bp_0_control_w;
  wire        _csr_io_bp_0_control_r;
  wire [38:0] _csr_io_bp_0_address;
  wire        _csr_io_inhibit_cycle;
  wire        _csr_io_trace_0_valid;
  wire [39:0] _csr_io_trace_0_iaddr;
  wire [31:0] _csr_io_trace_0_insn;
  wire        _csr_io_trace_0_exception;
  wire [63:0] _csr_io_customCSRs_0_value;
  wire [63:0] _rf_ext_R0_data;
  wire [63:0] _rf_ext_R1_data;
  wire [39:0] _ibuf_io_pc;
  wire        _ibuf_io_inst_0_valid;
  wire        _ibuf_io_inst_0_bits_xcpt0_pf_inst;
  wire        _ibuf_io_inst_0_bits_xcpt0_gf_inst;
  wire        _ibuf_io_inst_0_bits_xcpt0_ae_inst;
  wire        _ibuf_io_inst_0_bits_xcpt1_pf_inst;
  wire        _ibuf_io_inst_0_bits_xcpt1_gf_inst;
  wire        _ibuf_io_inst_0_bits_xcpt1_ae_inst;
  wire        _ibuf_io_inst_0_bits_replay;
  wire        _ibuf_io_inst_0_bits_rvc;
  wire [31:0] _ibuf_io_inst_0_bits_inst_bits;
  wire [4:0]  _ibuf_io_inst_0_bits_inst_rd;
  wire [4:0]  _ibuf_io_inst_0_bits_inst_rs1;
  wire [4:0]  _ibuf_io_inst_0_bits_inst_rs2;
  wire [31:0] _ibuf_io_inst_0_bits_raw;
  reg  [63:0] casez_tmp;
  reg  [63:0] casez_tmp_0;
  reg  [63:0] casez_tmp_1;
  reg  [63:0] casez_tmp_2;
  reg         id_reg_pause;
  reg         imem_might_request_reg;
  reg         ex_ctrl_fp;
  reg         ex_ctrl_rocc;
  reg         ex_ctrl_branch;
  reg         ex_ctrl_jal;
  reg         ex_ctrl_jalr;
  reg         ex_ctrl_rxs2;
  reg         ex_ctrl_rxs1;
  reg  [1:0]  ex_ctrl_sel_alu2;
  reg  [1:0]  ex_ctrl_sel_alu1;
  reg  [2:0]  ex_ctrl_sel_imm;
  reg         ex_ctrl_alu_dw;
  reg  [3:0]  ex_ctrl_alu_fn;
  reg         ex_ctrl_mem;
  reg  [4:0]  ex_ctrl_mem_cmd;
  reg         ex_ctrl_rfs1;
  reg         ex_ctrl_rfs2;
  reg         ex_ctrl_wfd;
  reg         ex_ctrl_mul;
  reg         ex_ctrl_div;
  reg         ex_ctrl_wxd;
  reg  [2:0]  ex_ctrl_csr;
  reg         ex_ctrl_fence_i;
  reg         mem_ctrl_fp;
  reg         mem_ctrl_rocc;
  reg         mem_ctrl_branch;
  reg         mem_ctrl_jal;
  reg         mem_ctrl_jalr;
  reg         mem_ctrl_rxs2;
  reg         mem_ctrl_rxs1;
  reg         mem_ctrl_mem;
  reg         mem_ctrl_rfs1;
  reg         mem_ctrl_rfs2;
  reg         mem_ctrl_wfd;
  reg         mem_ctrl_mul;
  reg         mem_ctrl_div;
  reg         mem_ctrl_wxd;
  reg  [2:0]  mem_ctrl_csr;
  reg         mem_ctrl_fence_i;
  reg         wb_ctrl_rocc;
  reg         wb_ctrl_rxs2;
  reg         wb_ctrl_rxs1;
  reg         wb_ctrl_mem;
  reg         wb_ctrl_rfs1;
  reg         wb_ctrl_rfs2;
  reg         wb_ctrl_wfd;
  reg         wb_ctrl_div;
  reg         wb_ctrl_wxd;
  reg  [2:0]  wb_ctrl_csr;
  reg         wb_ctrl_fence_i;
  reg         ex_reg_xcpt_interrupt;
  reg         ex_reg_valid;
  reg         ex_reg_rvc;
  reg         ex_reg_xcpt;
  reg         ex_reg_flush_pipe;
  reg         ex_reg_load_use;
  reg  [63:0] ex_reg_cause;
  reg         ex_reg_replay;
  reg  [39:0] ex_reg_pc;
  reg  [1:0]  ex_reg_mem_size;
  reg         ex_reg_hls;
  reg  [31:0] ex_reg_inst;
  reg  [31:0] ex_reg_raw_inst;
  reg         mem_reg_xcpt_interrupt;
  reg         mem_reg_valid;
  reg         mem_reg_rvc;
  reg         mem_reg_xcpt;
  reg         mem_reg_replay;
  reg         mem_reg_flush_pipe;
  reg  [63:0] mem_reg_cause;
  reg         mem_reg_slow_bypass;
  reg         mem_reg_load;
  reg         mem_reg_store;
  reg         mem_reg_sfence;
  reg  [39:0] mem_reg_pc;
  reg  [31:0] mem_reg_inst;
  reg  [1:0]  mem_reg_mem_size;
  reg         mem_reg_hls_or_dv;
  reg  [31:0] mem_reg_raw_inst;
  reg  [63:0] mem_reg_wdata;
  reg  [63:0] mem_reg_rs2;
  reg         mem_br_taken;
  reg         wb_reg_valid;
  reg         wb_reg_xcpt;
  reg         wb_reg_replay;
  reg         wb_reg_flush_pipe;
  reg  [63:0] wb_reg_cause;
  reg         wb_reg_sfence;
  reg  [39:0] wb_reg_pc;
  reg  [1:0]  wb_reg_mem_size;
  reg         wb_reg_hls_or_dv;
  reg  [31:0] wb_reg_inst;
  reg  [31:0] wb_reg_raw_inst;
  reg  [63:0] wb_reg_wdata;
  wire        take_pc_mem_wb = take_pc_wb | take_pc_mem;
  wire [29:0] _GEN_0 = ~(_ibuf_io_inst_0_bits_inst_bits[31:2]);
  wire [6:0]  _id_ctrl_decoder_decoded_T =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[10]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_4 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[11]};
  wire [6:0]  _id_ctrl_decoder_decoded_T_6 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[4],
     _GEN_0[12]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_8 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[12]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_12 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [5:0]  _id_ctrl_decoder_decoded_T_14 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_18 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[12]};
  wire [14:0] _id_ctrl_decoder_decoded_T_22 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [12:0] _id_ctrl_decoder_decoded_T_26 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [14:0] _id_ctrl_decoder_decoded_T_28 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_36 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [9:0]  _id_ctrl_decoder_decoded_T_38 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12]};
  wire [6:0]  _id_ctrl_decoder_decoded_T_40 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6]};
  wire [9:0]  _id_ctrl_decoder_decoded_T_46 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[12]};
  wire [13:0] _id_ctrl_decoder_decoded_T_48 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [14:0] _id_ctrl_decoder_decoded_T_52 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_60 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[12]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_62 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_64 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13]};
  wire [10:0] _id_ctrl_decoder_decoded_T_68 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _GEN_0[25],
     _GEN_0[26]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_74 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[13]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_76 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_86 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [14:0] _id_ctrl_decoder_decoded_T_88 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [14:0] _id_ctrl_decoder_decoded_T_92 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [14:0] _id_ctrl_decoder_decoded_T_98 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [13:0] _id_ctrl_decoder_decoded_T_130 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [12:0] _id_ctrl_decoder_decoded_T_136 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[27],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [16:0] _id_ctrl_decoder_decoded_T_138 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [18:0] _id_ctrl_decoder_decoded_T_140 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _GEN_0[18],
     _GEN_0[19],
     _GEN_0[20],
     _GEN_0[21],
     _GEN_0[22],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [17:0] _id_ctrl_decoder_decoded_T_152 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[5],
     _GEN_0[6],
     _GEN_0[7],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [21:0] _id_ctrl_decoder_decoded_T_156 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[5],
     _GEN_0[6],
     _GEN_0[7],
     _GEN_0[8],
     _GEN_0[9],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [2:0]  _id_ctrl_decoder_decoded_orMatrixOutputs_T =
    {&_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_138};
  wire [21:0] _id_ctrl_decoder_decoded_orMatrixOutputs_T_8 =
    {&_id_ctrl_decoder_decoded_T,
     &_id_ctrl_decoder_decoded_T_4,
     &_id_ctrl_decoder_decoded_T_8,
     &_id_ctrl_decoder_decoded_T_12,
     &_id_ctrl_decoder_decoded_T_14,
     &_id_ctrl_decoder_decoded_T_22,
     &_id_ctrl_decoder_decoded_T_26,
     &_id_ctrl_decoder_decoded_T_28,
     &_id_ctrl_decoder_decoded_T_38,
     &_id_ctrl_decoder_decoded_T_40,
     &_id_ctrl_decoder_decoded_T_48,
     &_id_ctrl_decoder_decoded_T_52,
     &_id_ctrl_decoder_decoded_T_62,
     &_id_ctrl_decoder_decoded_T_64,
     &_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_74,
     &_id_ctrl_decoder_decoded_T_88,
     &_id_ctrl_decoder_decoded_T_92,
     &_id_ctrl_decoder_decoded_T_98,
     &_id_ctrl_decoder_decoded_T_130,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_138};
  wire [2:0]  _id_ctrl_decoder_decoded_orMatrixOutputs_T_10 =
    {&{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _GEN_0[10],
       _GEN_0[11],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_id_ctrl_decoder_decoded_T_130};
  wire [6:0]  _id_ctrl_decoder_decoded_orMatrixOutputs_T_20 =
    {&{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _GEN_0[2],
       _GEN_0[3],
       _GEN_0[4],
       _GEN_0[10]},
     &_id_ctrl_decoder_decoded_T_4,
     &_id_ctrl_decoder_decoded_T_6,
     &_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_140,
     &_id_ctrl_decoder_decoded_T_156};
  wire [21:0] _id_ctrl_decoder_decoded_orMatrixOutputs_T_46 =
    {&_id_ctrl_decoder_decoded_T,
     &_id_ctrl_decoder_decoded_T_4,
     &_id_ctrl_decoder_decoded_T_6,
     &_id_ctrl_decoder_decoded_T_12,
     &_id_ctrl_decoder_decoded_T_22,
     &_id_ctrl_decoder_decoded_T_26,
     &_id_ctrl_decoder_decoded_T_28,
     &_id_ctrl_decoder_decoded_T_36,
     &_id_ctrl_decoder_decoded_T_48,
     &_id_ctrl_decoder_decoded_T_52,
     &_id_ctrl_decoder_decoded_T_60,
     &_id_ctrl_decoder_decoded_T_64,
     &_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_76,
     &_id_ctrl_decoder_decoded_T_86,
     &_id_ctrl_decoder_decoded_T_88,
     &_id_ctrl_decoder_decoded_T_92,
     &_id_ctrl_decoder_decoded_T_98,
     &_id_ctrl_decoder_decoded_T_130,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_138,
     &_id_ctrl_decoder_decoded_T_152};
  wire [12:0] _id_ctrl_decoder_decoded_orMatrixOutputs_T_48 =
    {&_id_ctrl_decoder_decoded_T_18,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _GEN_0[2],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[11],
       _GEN_0[12]},
     &_id_ctrl_decoder_decoded_T_22,
     &_id_ctrl_decoder_decoded_T_26,
     &_id_ctrl_decoder_decoded_T_28,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _GEN_0[4],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_86,
     &_id_ctrl_decoder_decoded_T_98,
     &_id_ctrl_decoder_decoded_T_130,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_138,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]}};
  reg         id_reg_fence;
  wire        id_mem_busy = ~io_dmem_ordered | _io_dmem_req_valid_output;
  wire        _io_rocc_cmd_valid_T = wb_reg_valid & wb_ctrl_rocc;
  wire        _dcache_kill_mem_T = mem_reg_valid & mem_ctrl_wxd;
  wire        _fp_data_hazard_ex_T_1 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;
  wire        _fp_data_hazard_mem_T_1 =
    mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs1;
  wire        _fp_data_hazard_ex_T_3 = ex_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;
  wire        _fp_data_hazard_mem_T_3 =
    mem_reg_inst[11:7] == _ibuf_io_inst_0_bits_inst_rs2;
  reg         ex_reg_rs_bypass_0;
  reg         ex_reg_rs_bypass_1;
  reg  [1:0]  ex_reg_rs_lsb_0;
  reg  [1:0]  ex_reg_rs_lsb_1;
  reg  [61:0] ex_reg_rs_msb_0;
  reg  [61:0] ex_reg_rs_msb_1;
  always @(*) begin
    casez (ex_reg_rs_lsb_0)
      2'b00:
        casez_tmp = 64'h0;
      2'b01:
        casez_tmp = mem_reg_wdata;
      2'b10:
        casez_tmp = wb_reg_wdata;
      default:
        casez_tmp = io_dmem_resp_bits_data_word_bypass;
    endcase
  end // always @(*)
  wire [63:0] _ex_rs_T_6 = {ex_reg_rs_msb_0, ex_reg_rs_lsb_0};
  wire [63:0] ex_rs_0 = ex_reg_rs_bypass_0 ? casez_tmp : _ex_rs_T_6;
  always @(*) begin
    casez (ex_reg_rs_lsb_1)
      2'b00:
        casez_tmp_0 = 64'h0;
      2'b01:
        casez_tmp_0 = mem_reg_wdata;
      2'b10:
        casez_tmp_0 = wb_reg_wdata;
      default:
        casez_tmp_0 = io_dmem_resp_bits_data_word_bypass;
    endcase
  end // always @(*)
  wire [63:0] _ex_rs_T_13 = {ex_reg_rs_msb_1, ex_reg_rs_lsb_1};
  wire [63:0] ex_rs_1 = ex_reg_rs_bypass_1 ? casez_tmp_0 : _ex_rs_T_13;
  wire        _ex_imm_b0_T_4 = ex_ctrl_sel_imm == 3'h5;
  wire        ex_imm_sign = ~_ex_imm_b0_T_4 & ex_reg_inst[31];
  wire        _ex_imm_b4_1_T = ex_ctrl_sel_imm == 3'h2;
  wire        _ex_imm_b4_1_T_2 = ex_ctrl_sel_imm == 3'h1;
  wire        _ex_imm_b0_T = ex_ctrl_sel_imm == 3'h0;
  always @(*) begin
    casez (ex_ctrl_sel_alu2)
      2'b00:
        casez_tmp_1 = 64'h0;
      2'b01:
        casez_tmp_1 = {60'h0, ex_reg_rvc ? 4'h2 : 4'h4};
      2'b10:
        casez_tmp_1 = ex_rs_1;
      default:
        casez_tmp_1 =
          {{33{ex_imm_sign}},
           _ex_imm_b4_1_T ? ex_reg_inst[30:20] : {11{ex_imm_sign}},
           ex_ctrl_sel_imm != 3'h2 & ex_ctrl_sel_imm != 3'h3
             ? {8{ex_imm_sign}}
             : ex_reg_inst[19:12],
           ~(_ex_imm_b4_1_T | _ex_imm_b0_T_4)
             & (ex_ctrl_sel_imm == 3'h3
                  ? ex_reg_inst[20]
                  : _ex_imm_b4_1_T_2 ? ex_reg_inst[7] : ex_imm_sign),
           _ex_imm_b4_1_T | _ex_imm_b0_T_4 ? 6'h0 : ex_reg_inst[30:25],
           _ex_imm_b4_1_T
             ? 4'h0
             : _ex_imm_b0_T | _ex_imm_b4_1_T_2
                 ? ex_reg_inst[11:8]
                 : _ex_imm_b0_T_4 ? ex_reg_inst[19:16] : ex_reg_inst[24:21],
           _ex_imm_b0_T
             ? ex_reg_inst[7]
             : ex_ctrl_sel_imm == 3'h4
                 ? ex_reg_inst[20]
                 : _ex_imm_b0_T_4 & ex_reg_inst[15]};
    endcase
  end // always @(*)
  wire        _div_io_req_valid_T = ex_reg_valid & ex_ctrl_div;
  wire        ex_pc_valid = ex_reg_valid | ex_reg_replay | ex_reg_xcpt_interrupt;
  wire        wb_dcache_miss = wb_ctrl_mem & ~io_dmem_resp_valid;
  wire        _mem_cfi_taken_T = mem_ctrl_branch & mem_br_taken;
  wire [31:0] _mem_br_target_T_8 =
    _mem_cfi_taken_T
      ? {{20{mem_reg_inst[31]}},
         mem_reg_inst[7],
         mem_reg_inst[30:25],
         mem_reg_inst[11:8],
         1'h0}
      : mem_ctrl_jal
          ? {{12{mem_reg_inst[31]}},
             mem_reg_inst[19:12],
             mem_reg_inst[20],
             mem_reg_inst[30:21],
             1'h0}
          : {28'h0, mem_reg_rvc ? 4'h2 : 4'h4};
  wire [39:0] _mem_br_target_T_10 =
    mem_reg_pc + {{8{_mem_br_target_T_8[31]}}, _mem_br_target_T_8};
  wire [39:0] _mem_npc_T_4 =
    mem_ctrl_jalr | mem_reg_sfence
      ? {mem_reg_wdata[63:39] == 25'h0 | (&(mem_reg_wdata[63:39]))
           ? mem_reg_wdata[39]
           : ~(mem_reg_wdata[38]),
         mem_reg_wdata[38:0]}
      : _mem_br_target_T_10;
  wire [39:0] _mem_npc_T_5 = _mem_npc_T_4 & 40'hFFFFFFFFFE;
  wire        mem_cfi_taken = _mem_cfi_taken_T | mem_ctrl_jalr | mem_ctrl_jal;
  assign take_pc_mem = mem_reg_valid & ~mem_reg_xcpt & (mem_cfi_taken | mem_reg_sfence);
  always @(*) begin
    casez (ex_ctrl_rocc ? 2'h3 : ex_reg_mem_size)
      2'b00:
        casez_tmp_2 = {2{{2{{2{ex_rs_1[7:0]}}}}}};
      2'b01:
        casez_tmp_2 = {2{{2{ex_rs_1[15:0]}}}};
      2'b10:
        casez_tmp_2 = {2{ex_rs_1[31:0]}};
      default:
        casez_tmp_2 = ex_rs_1;
    endcase
  end // always @(*)
  wire        mem_debug_breakpoint =
    mem_reg_load & _bpu_io_debug_ld | mem_reg_store & _bpu_io_debug_st;
  wire        mem_ldst_xcpt =
    mem_debug_breakpoint | mem_reg_load & _bpu_io_xcpt_ld | mem_reg_store
    & _bpu_io_xcpt_st;
  wire        dcache_kill_mem = _dcache_kill_mem_T & io_dmem_replay_next;
  wire        killm_common = dcache_kill_mem | take_pc_wb | mem_reg_xcpt | ~mem_reg_valid;
  reg         div_io_kill_REG;
  wire        _T_110 = wb_reg_valid & wb_ctrl_mem;
  wire        _T_97 = _T_110 & io_dmem_s2_xcpt_pf_st;
  wire        _T_99 = _T_110 & io_dmem_s2_xcpt_pf_ld;
  wire        _T_101 = _T_110 & io_dmem_s2_xcpt_gf_st;
  wire        _T_103 = _T_110 & io_dmem_s2_xcpt_gf_ld;
  wire        _T_105 = _T_110 & io_dmem_s2_xcpt_ae_st;
  wire        _T_107 = _T_110 & io_dmem_s2_xcpt_ae_ld;
  wire        _T_109 = _T_110 & io_dmem_s2_xcpt_ma_st;
  wire        wb_xcpt =
    wb_reg_xcpt | _T_97 | _T_99 | _T_101 | _T_103 | _T_105 | _T_107 | _T_109 | _T_110
    & io_dmem_s2_xcpt_ma_ld;
  wire        wb_wxd = wb_reg_valid & wb_ctrl_wxd;
  wire        wb_set_sboard = wb_ctrl_div | wb_dcache_miss | wb_ctrl_rocc;
  wire        replay_wb_common = io_dmem_s2_nack | wb_reg_replay;
  wire        _replay_wb_T = replay_wb_common | _io_rocc_cmd_valid_T;
  assign take_pc_wb = _replay_wb_T | wb_xcpt | _csr_io_eret | wb_reg_flush_pipe;
  wire        dmem_resp_valid = io_dmem_resp_valid & io_dmem_resp_bits_has_data;
  wire        _T_138 =
    dmem_resp_valid & io_dmem_resp_bits_replay & ~(io_dmem_resp_bits_tag[0]);
  assign _GEN = ~_T_138 & ~wb_wxd;
  wire [4:0]  ll_waddr = _T_138 ? io_dmem_resp_bits_tag[5:1] : _div_io_resp_bits_tag;
  wire        ll_wen = _T_138 | _GEN & _div_io_resp_valid;
  wire        wb_valid = wb_reg_valid & ~_replay_wb_T & ~wb_xcpt;
  wire        wb_wen = wb_valid & wb_ctrl_wxd;
  wire        rf_wen = wb_wen | ll_wen;
  wire [4:0]  rf_waddr = ll_wen ? ll_waddr : wb_reg_inst[11:7];
  wire [63:0] coreMonitorBundle_wrdata =
    dmem_resp_valid & ~(io_dmem_resp_bits_tag[0])
      ? io_dmem_resp_bits_data
      : ll_wen
          ? _div_io_resp_bits_data
          : (|wb_ctrl_csr) ? _csr_io_rw_rdata : wb_reg_wdata;
  wire [63:0] id_rs_0 =
    rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs1
      ? coreMonitorBundle_wrdata
      : _rf_ext_R0_data;
  wire [63:0] id_rs_1 =
    rf_wen & (|rf_waddr) & rf_waddr == _ibuf_io_inst_0_bits_inst_rs2
      ? coreMonitorBundle_wrdata
      : _rf_ext_R1_data;
  wire        _csr_io_htval_htval_valid_imem_T = wb_reg_cause == 64'h14;
  wire        _T_145 =
    (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_46) & (|_ibuf_io_inst_0_bits_inst_rs1);
  wire        _T_147 =
    (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_48) & (|_ibuf_io_inst_0_bits_inst_rs2);
  wire        _T_149 =
    (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_8) & (|_ibuf_io_inst_0_bits_inst_rd);
  reg  [31:0] _r;
  wire [31:0] r = {_r[31:1], 1'h0};
  wire [31:0] _id_sboard_hazard_T = r >> _ibuf_io_inst_0_bits_inst_rs1;
  wire [31:0] _id_sboard_hazard_T_7 = r >> _ibuf_io_inst_0_bits_inst_rs2;
  wire [31:0] _id_sboard_hazard_T_14 = r >> _ibuf_io_inst_0_bits_inst_rd;
  wire        data_hazard_mem =
    mem_ctrl_wxd
    & (_T_145 & _fp_data_hazard_mem_T_1 | _T_147 & _fp_data_hazard_mem_T_3 | _T_149
       & _ibuf_io_inst_0_bits_inst_rd == mem_reg_inst[11:7]);
  reg         dcache_blocked_blocked;
  reg         rocc_blocked;
  wire        _ctrl_stalld_T_28 =
    ex_reg_valid & ex_ctrl_wxd
    & (_T_145 & _fp_data_hazard_ex_T_1 | _T_147 & _fp_data_hazard_ex_T_3 | _T_149
       & _ibuf_io_inst_0_bits_inst_rd == ex_reg_inst[11:7])
    & ((|ex_ctrl_csr) | ex_ctrl_jalr | ex_ctrl_mem | ex_ctrl_mul | ex_ctrl_div
       | ex_ctrl_fp | ex_ctrl_rocc) | mem_reg_valid & data_hazard_mem
    & ((|mem_ctrl_csr) | mem_ctrl_mem & mem_reg_slow_bypass | mem_ctrl_mul | mem_ctrl_div
       | mem_ctrl_fp | mem_ctrl_rocc) | wb_reg_valid & wb_ctrl_wxd
    & (_T_145 & _ibuf_io_inst_0_bits_inst_rs1 == wb_reg_inst[11:7] | _T_147
       & _ibuf_io_inst_0_bits_inst_rs2 == wb_reg_inst[11:7] | _T_149
       & _ibuf_io_inst_0_bits_inst_rd == wb_reg_inst[11:7]) & wb_set_sboard | _T_145
    & _id_sboard_hazard_T[0] & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rs1)
    | _T_147 & _id_sboard_hazard_T_7[0]
    & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rs2) | _T_149
    & _id_sboard_hazard_T_14[0] & ~(ll_wen & ll_waddr == _ibuf_io_inst_0_bits_inst_rd)
    | _csr_io_singleStep & (ex_reg_valid | mem_reg_valid | wb_reg_valid)
    | (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_20) & dcache_blocked_blocked
    & ~io_dmem_perf_grant | (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_10)
    & (~(_div_io_req_ready | _div_io_resp_valid & ~wb_wxd) | _div_io_req_valid_T)
    | id_mem_busy
    & ((|_id_ctrl_decoder_decoded_orMatrixOutputs_T) & _ibuf_io_inst_0_bits_inst_bits[25]
       | (&_id_ctrl_decoder_decoded_T_46) | id_reg_fence
       & (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_20)) | _csr_io_csr_stall
    | id_reg_pause;
  wire        ctrl_killd =
    ~_ibuf_io_inst_0_valid | _ibuf_io_inst_0_bits_replay | take_pc_mem_wb
    | _ctrl_stalld_T_28 | _csr_io_interrupt;
  reg         io_imem_progress_REG;
  wire        _io_imem_sfence_valid_output = wb_reg_valid & wb_reg_sfence;
  assign _io_dmem_req_valid_output = ex_reg_valid & ex_ctrl_mem;
  reg  [63:0] coreMonitorBundle_rd0val_REG;
  reg  [63:0] coreMonitorBundle_rd0val_REG_1;
  reg  [63:0] coreMonitorBundle_rd1val_REG;
  reg  [63:0] coreMonitorBundle_rd1val_REG_1;
  `ifndef SYNTHESIS
    wire coreMonitorBundle_wrenx = wb_wen & ~wb_set_sboard;
    wire _T_165 = wb_ctrl_rxs1 | wb_ctrl_rfs1;
    wire _T_169 = wb_ctrl_rxs2 | wb_ctrl_rfs2;
    always @(posedge clock) begin
      if (~reset
          & ~(~(wb_reg_xcpt & _csr_io_htval_htval_valid_imem_T)
              | io_imem_gpa_valid)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at RocketCore.scala:718 assert(!htval_valid_imem || io.imem.gpa.valid)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if ((`PRINTF_COND_) & _csr_io_trace_0_valid & ~reset)
        $fwrite(32'h80000002,
                "C%d: %d [%d] pc=[%x] W[r%d=%x][%d] R[r%d=%x] R[r%d=%x] inst=[%x] DASM(%x)\n",
                io_hartid, _csr_io_time[31:0],
                _csr_io_trace_0_valid & ~_csr_io_trace_0_exception,
                {{24{_csr_io_trace_0_iaddr[39]}}, _csr_io_trace_0_iaddr},
                wb_ctrl_wxd | wb_ctrl_wfd ? wb_reg_inst[11:7] : 5'h0,
                coreMonitorBundle_wrenx ? coreMonitorBundle_wrdata : 64'h0,
                coreMonitorBundle_wrenx, _T_165 ? wb_reg_inst[19:15] : 5'h0,
                _T_165 ? coreMonitorBundle_rd0val_REG_1 : 64'h0,
                _T_169 ? wb_reg_inst[24:20] : 5'h0,
                _T_169 ? coreMonitorBundle_rd1val_REG_1 : 64'h0, _csr_io_trace_0_insn,
                _csr_io_trace_0_insn);
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _T_41 =
    _bpu_io_xcpt_if
    | (|{_ibuf_io_inst_0_bits_xcpt0_pf_inst,
         _ibuf_io_inst_0_bits_xcpt0_gf_inst,
         _ibuf_io_inst_0_bits_xcpt0_ae_inst});
  wire [31:0] inst =
    _ibuf_io_inst_0_bits_rvc
      ? {16'h0, _ibuf_io_inst_0_bits_raw[15:0]}
      : _ibuf_io_inst_0_bits_raw;
  wire [7:0]  _id_ctrl_decoder_decoded_T_32 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[11]};
  wire [14:0] _id_ctrl_decoder_decoded_T_50 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [15:0] _id_ctrl_decoder_decoded_T_54 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [15:0] _id_ctrl_decoder_decoded_T_94 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _GEN_0[29]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_104 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_108 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_114 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [8:0]  _id_ctrl_decoder_decoded_T_118 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _ibuf_io_inst_0_bits_inst_bits[14]};
  wire [13:0] _id_ctrl_decoder_decoded_T_158 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[13],
     _GEN_0[12],
     _ibuf_io_inst_0_bits_inst_bits[27],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [2:0]  _T_37 =
    {_ibuf_io_inst_0_bits_xcpt1_pf_inst,
     _ibuf_io_inst_0_bits_xcpt1_gf_inst,
     _ibuf_io_inst_0_bits_xcpt1_ae_inst};
  wire        _mem_reg_store_T_3 = ex_ctrl_mem_cmd == 5'h7;
  wire        _mem_reg_store_T_5 = ex_ctrl_mem_cmd == 5'h4;
  wire        _mem_reg_store_T_6 = ex_ctrl_mem_cmd == 5'h9;
  wire        _mem_reg_store_T_7 = ex_ctrl_mem_cmd == 5'hA;
  wire        _mem_reg_store_T_8 = ex_ctrl_mem_cmd == 5'hB;
  wire        _mem_reg_store_T_12 = ex_ctrl_mem_cmd == 5'h8;
  wire        _mem_reg_store_T_13 = ex_ctrl_mem_cmd == 5'hC;
  wire        _mem_reg_store_T_14 = ex_ctrl_mem_cmd == 5'hD;
  wire        _mem_reg_store_T_15 = ex_ctrl_mem_cmd == 5'hE;
  wire        _mem_reg_store_T_16 = ex_ctrl_mem_cmd == 5'hF;
  wire        _T_73 = ex_ctrl_jalr & _csr_io_status_debug;
  wire [31:0] _T_153 = r & ~(ll_wen ? 32'h1 << ll_waddr : 32'h0);
  wire        _T_155 = wb_set_sboard & wb_wen;
  wire [8:0]  _id_ctrl_decoder_decoded_T_10 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _ibuf_io_inst_0_bits_inst_bits[2],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _GEN_0[2],
     _GEN_0[3],
     _GEN_0[4],
     _GEN_0[11],
     _GEN_0[12]};
  wire [7:0]  _id_ctrl_decoder_decoded_T_56 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11]};
  wire [16:0] _id_ctrl_decoder_decoded_T_150 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _ibuf_io_inst_0_bits_inst_bits[6],
     _GEN_0[5],
     _GEN_0[6],
     _GEN_0[7],
     _ibuf_io_inst_0_bits_inst_bits[25],
     _GEN_0[24],
     _GEN_0[25],
     _ibuf_io_inst_0_bits_inst_bits[28],
     _GEN_0[27],
     _GEN_0[28],
     _GEN_0[29]};
  wire [2:0]  id_ctrl_csr =
    {|{&{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[19],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_62,
       &_id_ctrl_decoder_decoded_T_74,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _ibuf_io_inst_0_bits_inst_bits[20],
         _GEN_0[19],
         _ibuf_io_inst_0_bits_inst_bits[22],
         _GEN_0[21],
         _GEN_0[22],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_150,
       &{_ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[5],
         _GEN_0[6],
         _GEN_0[7],
         _GEN_0[8],
         _GEN_0[9],
         _GEN_0[10],
         _GEN_0[11],
         _GEN_0[12],
         _GEN_0[13],
         _GEN_0[14],
         _GEN_0[15],
         _GEN_0[16],
         _GEN_0[17],
         _GEN_0[18],
         _ibuf_io_inst_0_bits_inst_bits[21],
         _GEN_0[20],
         _GEN_0[21],
         _ibuf_io_inst_0_bits_inst_bits[24],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _ibuf_io_inst_0_bits_inst_bits[27],
         _ibuf_io_inst_0_bits_inst_bits[28],
         _ibuf_io_inst_0_bits_inst_bits[29],
         _ibuf_io_inst_0_bits_inst_bits[30],
         _GEN_0[29]}},
     &_id_ctrl_decoder_decoded_T_74,
     &_id_ctrl_decoder_decoded_T_62};
  wire        id_bypass_src_1_0 = _ibuf_io_inst_0_bits_inst_rs2 == 5'h0;
  wire        _id_csr_ren_T = id_ctrl_csr == 3'h6;
  wire        id_csr_en = _id_csr_ren_T | (&id_ctrl_csr) | id_ctrl_csr == 3'h5;
  wire        id_system_insn = id_ctrl_csr == 3'h4;
  wire        id_csr_ren =
    (_id_csr_ren_T | (&id_ctrl_csr)) & ~(|_ibuf_io_inst_0_bits_inst_rs1);
  wire        id_illegal_insn =
    {&_id_ctrl_decoder_decoded_T,
     &_id_ctrl_decoder_decoded_T_4,
     &_id_ctrl_decoder_decoded_T_6,
     &_id_ctrl_decoder_decoded_T_10,
     &_id_ctrl_decoder_decoded_T_12,
     &_id_ctrl_decoder_decoded_T_14,
     &_id_ctrl_decoder_decoded_T_22,
     &_id_ctrl_decoder_decoded_T_26,
     &_id_ctrl_decoder_decoded_T_28,
     &_id_ctrl_decoder_decoded_T_36,
     &_id_ctrl_decoder_decoded_T_40,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[8],
       _GEN_0[9],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[13],
       _GEN_0[14],
       _GEN_0[15],
       _GEN_0[16],
       _GEN_0[17],
       _GEN_0[19],
       _GEN_0[20],
       _GEN_0[21],
       _GEN_0[22],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _GEN_0[26],
       _GEN_0[27],
       _GEN_0[28],
       _GEN_0[29]},
     &_id_ctrl_decoder_decoded_T_48,
     &_id_ctrl_decoder_decoded_T_52,
     &_id_ctrl_decoder_decoded_T_56,
     &_id_ctrl_decoder_decoded_T_64,
     &_id_ctrl_decoder_decoded_T_68,
     &_id_ctrl_decoder_decoded_T_74,
     &_id_ctrl_decoder_decoded_T_86,
     &_id_ctrl_decoder_decoded_T_88,
     &_id_ctrl_decoder_decoded_T_92,
     &_id_ctrl_decoder_decoded_T_98,
     &_id_ctrl_decoder_decoded_T_130,
     &_id_ctrl_decoder_decoded_T_136,
     &_id_ctrl_decoder_decoded_T_140,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[8],
       _GEN_0[9],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[13],
       _GEN_0[14],
       _GEN_0[15],
       _GEN_0[16],
       _GEN_0[17],
       _GEN_0[18],
       _ibuf_io_inst_0_bits_inst_bits[21],
       _GEN_0[20],
       _GEN_0[21],
       _GEN_0[22],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _GEN_0[28],
       _GEN_0[29]},
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[8],
       _GEN_0[9],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[13],
       _GEN_0[14],
       _GEN_0[15],
       _GEN_0[16],
       _GEN_0[17],
       _ibuf_io_inst_0_bits_inst_bits[20],
       _GEN_0[19],
       _ibuf_io_inst_0_bits_inst_bits[22],
       _GEN_0[21],
       _GEN_0[22],
       _GEN_0[23],
       _GEN_0[24],
       _GEN_0[25],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _GEN_0[28],
       _GEN_0[29]},
     &_id_ctrl_decoder_decoded_T_156,
     &{_ibuf_io_inst_0_bits_inst_bits[0],
       _ibuf_io_inst_0_bits_inst_bits[1],
       _GEN_0[0],
       _GEN_0[1],
       _ibuf_io_inst_0_bits_inst_bits[4],
       _ibuf_io_inst_0_bits_inst_bits[5],
       _ibuf_io_inst_0_bits_inst_bits[6],
       _GEN_0[5],
       _GEN_0[6],
       _GEN_0[7],
       _GEN_0[8],
       _GEN_0[9],
       _GEN_0[10],
       _GEN_0[11],
       _GEN_0[12],
       _GEN_0[13],
       _GEN_0[14],
       _GEN_0[15],
       _GEN_0[16],
       _GEN_0[17],
       _GEN_0[18],
       _ibuf_io_inst_0_bits_inst_bits[21],
       _GEN_0[20],
       _GEN_0[21],
       _ibuf_io_inst_0_bits_inst_bits[24],
       _ibuf_io_inst_0_bits_inst_bits[25],
       _GEN_0[24],
       _ibuf_io_inst_0_bits_inst_bits[27],
       _ibuf_io_inst_0_bits_inst_bits[28],
       _ibuf_io_inst_0_bits_inst_bits[29],
       _ibuf_io_inst_0_bits_inst_bits[30],
       _GEN_0[29]}} == 29'h0 | (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_10)
    & ~(_csr_io_status_isa[12]) | (|_id_ctrl_decoder_decoded_orMatrixOutputs_T)
    & ~(_csr_io_status_isa[0]) | _ibuf_io_inst_0_bits_rvc & ~(_csr_io_status_isa[2])
    | id_csr_en
    & (_csr_io_decode_0_read_illegal | ~id_csr_ren & _csr_io_decode_0_write_illegal)
    | ~_ibuf_io_inst_0_bits_rvc & id_system_insn & _csr_io_decode_0_system_illegal;
  wire        id_xcpt =
    _csr_io_interrupt | _bpu_io_debug_if | _bpu_io_xcpt_if
    | _ibuf_io_inst_0_bits_xcpt0_pf_inst | _ibuf_io_inst_0_bits_xcpt0_gf_inst
    | _ibuf_io_inst_0_bits_xcpt0_ae_inst | _ibuf_io_inst_0_bits_xcpt1_pf_inst
    | _ibuf_io_inst_0_bits_xcpt1_gf_inst | _ibuf_io_inst_0_bits_xcpt1_ae_inst
    | id_illegal_insn;
  wire        _T_29 = ex_reg_valid & ex_ctrl_wxd;
  wire        _T_32 = _dcache_kill_mem_T & ~mem_ctrl_mem;
  wire        id_bypass_src_1_1 = _T_29 & _fp_data_hazard_ex_T_3;
  wire        id_bypass_src_1_2 = _T_32 & _fp_data_hazard_mem_T_3;
  wire        do_bypass_1 =
    id_bypass_src_1_0 | id_bypass_src_1_1 | id_bypass_src_1_2 | _dcache_kill_mem_T
    & _fp_data_hazard_mem_T_3;
  wire        _T_54 = (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_48) & ~do_bypass_1;
  wire        replay_ex =
    ex_reg_replay | ex_reg_valid
    & (ex_ctrl_mem & ~io_dmem_req_ready | ex_ctrl_div & ~_div_io_req_ready
       | wb_dcache_miss & ex_reg_load_use);
  wire        ctrl_killx = take_pc_mem_wb | replay_ex | ~ex_reg_valid;
  wire        ex_sfence =
    ex_ctrl_mem
    & (ex_ctrl_mem_cmd == 5'h14 | ex_ctrl_mem_cmd == 5'h15 | ex_ctrl_mem_cmd == 5'h16);
  wire        mem_pc_valid = mem_reg_valid | mem_reg_replay | mem_reg_xcpt_interrupt;
  wire        mem_npc_misaligned =
    ~(_csr_io_status_isa[2]) & _mem_npc_T_4[1] & ~mem_reg_sfence;
  wire        _T_69 = mem_reg_valid & mem_reg_flush_pipe;
  wire        _T_74 = mem_reg_xcpt_interrupt | mem_reg_xcpt;
  wire        _T_75 = mem_reg_valid & mem_npc_misaligned;
  wire        mem_xcpt = _T_74 | _T_75 | mem_reg_valid & mem_ldst_xcpt;
  wire        _ctrl_killm_T = killm_common | mem_xcpt;
  wire [4:0]  id_ctrl_mem_cmd =
    {&_id_ctrl_decoder_decoded_T_150,
     &_id_ctrl_decoder_decoded_T_68,
     |{&_id_ctrl_decoder_decoded_T_136,
       &_id_ctrl_decoder_decoded_T_138,
       &_id_ctrl_decoder_decoded_T_150,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _ibuf_io_inst_0_bits_inst_bits[2],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12],
         _GEN_0[25],
         _GEN_0[26],
         _ibuf_io_inst_0_bits_inst_bits[31]}},
     |{&_id_ctrl_decoder_decoded_T_138,
       &_id_ctrl_decoder_decoded_T_158,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _ibuf_io_inst_0_bits_inst_bits[2],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12],
         _GEN_0[25],
         _GEN_0[26],
         _ibuf_io_inst_0_bits_inst_bits[30]}},
     |{&_id_ctrl_decoder_decoded_T_18,
       &_id_ctrl_decoder_decoded_T_158,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _ibuf_io_inst_0_bits_inst_bits[2],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12],
         _GEN_0[25],
         _GEN_0[26],
         _ibuf_io_inst_0_bits_inst_bits[29]}}};
  wire        id_bypass_src_0_1 = _T_29 & _fp_data_hazard_ex_T_1;
  wire        id_bypass_src_0_2 = _T_32 & _fp_data_hazard_mem_T_1;
  wire        do_bypass =
    ~(|_ibuf_io_inst_0_bits_inst_rs1) | id_bypass_src_0_1 | id_bypass_src_0_2
    | _dcache_kill_mem_T & _fp_data_hazard_mem_T_1;
  wire [15:0] _id_ctrl_decoder_decoded_T_162 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _GEN_0[10],
     _GEN_0[11],
     _GEN_0[12],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _GEN_0[29]};
  wire [15:0] _id_ctrl_decoder_decoded_T_166 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _GEN_0[1],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[3],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _GEN_0[29]};
  wire [15:0] _id_ctrl_decoder_decoded_T_168 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[3],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _GEN_0[29]};
  wire [15:0] _id_ctrl_decoder_decoded_T_170 =
    {_ibuf_io_inst_0_bits_inst_bits[0],
     _ibuf_io_inst_0_bits_inst_bits[1],
     _GEN_0[0],
     _ibuf_io_inst_0_bits_inst_bits[4],
     _ibuf_io_inst_0_bits_inst_bits[5],
     _GEN_0[4],
     _ibuf_io_inst_0_bits_inst_bits[12],
     _GEN_0[11],
     _ibuf_io_inst_0_bits_inst_bits[14],
     _GEN_0[23],
     _GEN_0[24],
     _GEN_0[25],
     _GEN_0[26],
     _GEN_0[27],
     _ibuf_io_inst_0_bits_inst_bits[30],
     _GEN_0[29]};
  wire [3:0]  id_ctrl_alu_fn =
    {|{&{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[12],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_86,
       &_id_ctrl_decoder_decoded_T_162,
       &_id_ctrl_decoder_decoded_T_166,
       &_id_ctrl_decoder_decoded_T_168,
       &_id_ctrl_decoder_decoded_T_170},
     |{&_id_ctrl_decoder_decoded_T_64,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _GEN_0[10],
         _ibuf_io_inst_0_bits_inst_bits[14]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_86,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _ibuf_io_inst_0_bits_inst_bits[3],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[23],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_130},
     |{&{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _GEN_0[11],
         _GEN_0[12]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[13]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &_id_ctrl_decoder_decoded_T_162,
       &_id_ctrl_decoder_decoded_T_166,
       &_id_ctrl_decoder_decoded_T_168,
       &_id_ctrl_decoder_decoded_T_170},
     |{&_id_ctrl_decoder_decoded_T_48,
       &_id_ctrl_decoder_decoded_T_52,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _GEN_0[11]},
       &_id_ctrl_decoder_decoded_T_88,
       &_id_ctrl_decoder_decoded_T_92,
       &_id_ctrl_decoder_decoded_T_98,
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _GEN_0[2],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _ibuf_io_inst_0_bits_inst_bits[6],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[14]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _GEN_0[3],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[13],
         _ibuf_io_inst_0_bits_inst_bits[14]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _GEN_0[1],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]},
       &{_ibuf_io_inst_0_bits_inst_bits[0],
         _ibuf_io_inst_0_bits_inst_bits[1],
         _GEN_0[0],
         _ibuf_io_inst_0_bits_inst_bits[4],
         _ibuf_io_inst_0_bits_inst_bits[5],
         _GEN_0[4],
         _ibuf_io_inst_0_bits_inst_bits[12],
         _ibuf_io_inst_0_bits_inst_bits[14],
         _ibuf_io_inst_0_bits_inst_bits[25],
         _GEN_0[24],
         _GEN_0[25],
         _GEN_0[26],
         _GEN_0[27],
         _GEN_0[28],
         _GEN_0[29]}}};
  always @(posedge clock) begin
    id_reg_pause <=
      ~(_csr_io_time[4:0] == 5'h0 | _csr_io_inhibit_cycle | io_dmem_perf_release
        | take_pc_mem_wb)
      & (~ctrl_killd & (&_id_ctrl_decoder_decoded_T_10)
         & _ibuf_io_inst_0_bits_inst_bits[23:20] == 4'h0 | id_reg_pause);
    imem_might_request_reg <= ex_pc_valid | mem_pc_valid | _csr_io_customCSRs_0_value[1];
    ex_ctrl_fp <= ctrl_killd & ex_ctrl_fp;
    ex_ctrl_rocc <= ctrl_killd & ex_ctrl_rocc;
    if (ctrl_killd) begin
    end
    else begin
      ex_ctrl_branch <= |{&_id_ctrl_decoder_decoded_T_32, &_id_ctrl_decoder_decoded_T_86};
      ex_ctrl_jal <= &_id_ctrl_decoder_decoded_T_40;
      ex_ctrl_jalr <= &_id_ctrl_decoder_decoded_T_38;
      ex_ctrl_rxs2 <= |_id_ctrl_decoder_decoded_orMatrixOutputs_T_48;
      ex_ctrl_rxs1 <= |_id_ctrl_decoder_decoded_orMatrixOutputs_T_46;
      if (id_xcpt) begin
        if (_T_41)
          ex_ctrl_sel_alu2 <= 2'h0;
        else
          ex_ctrl_sel_alu2 <= {1'h0, |_T_37};
        if (_T_41 | (|_T_37))
          ex_ctrl_sel_alu1 <= 2'h2;
        else
          ex_ctrl_sel_alu1 <= 2'h1;
        ex_ctrl_alu_fn <= 4'h0;
      end
      else begin
        ex_ctrl_sel_alu2 <=
          {|{&_id_ctrl_decoder_decoded_T,
             &_id_ctrl_decoder_decoded_T_4,
             &_id_ctrl_decoder_decoded_T_6,
             &_id_ctrl_decoder_decoded_T_12,
             &_id_ctrl_decoder_decoded_T_14,
             &_id_ctrl_decoder_decoded_T_22,
             &_id_ctrl_decoder_decoded_T_26,
             &_id_ctrl_decoder_decoded_T_28,
             &_id_ctrl_decoder_decoded_T_32,
             &_id_ctrl_decoder_decoded_T_36,
             &_id_ctrl_decoder_decoded_T_48,
             &_id_ctrl_decoder_decoded_T_52,
             &_id_ctrl_decoder_decoded_T_64,
             &_id_ctrl_decoder_decoded_T_88,
             &_id_ctrl_decoder_decoded_T_92,
             &_id_ctrl_decoder_decoded_T_98,
             &_id_ctrl_decoder_decoded_T_104,
             &_id_ctrl_decoder_decoded_T_114,
             &_id_ctrl_decoder_decoded_T_130},
           |{&_id_ctrl_decoder_decoded_T,
             &_id_ctrl_decoder_decoded_T_4,
             &_id_ctrl_decoder_decoded_T_6,
             &_id_ctrl_decoder_decoded_T_12,
             &_id_ctrl_decoder_decoded_T_14,
             &_id_ctrl_decoder_decoded_T_38,
             &_id_ctrl_decoder_decoded_T_40,
             &_id_ctrl_decoder_decoded_T_50,
             &_id_ctrl_decoder_decoded_T_54,
             &_id_ctrl_decoder_decoded_T_64,
             &_id_ctrl_decoder_decoded_T_88,
             &_id_ctrl_decoder_decoded_T_94,
             &_id_ctrl_decoder_decoded_T_108,
             &_id_ctrl_decoder_decoded_T_118}};
        ex_ctrl_sel_alu1 <=
          {|{&{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _ibuf_io_inst_0_bits_inst_bits[2],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _GEN_0[3],
               _GEN_0[4]},
             &_id_ctrl_decoder_decoded_T_40},
           |{&_id_ctrl_decoder_decoded_T,
             &_id_ctrl_decoder_decoded_T_4,
             &_id_ctrl_decoder_decoded_T_6,
             &_id_ctrl_decoder_decoded_T_12,
             &_id_ctrl_decoder_decoded_T_22,
             &_id_ctrl_decoder_decoded_T_26,
             &_id_ctrl_decoder_decoded_T_28,
             &_id_ctrl_decoder_decoded_T_36,
             &_id_ctrl_decoder_decoded_T_48,
             &_id_ctrl_decoder_decoded_T_52,
             &_id_ctrl_decoder_decoded_T_60,
             &_id_ctrl_decoder_decoded_T_64,
             &_id_ctrl_decoder_decoded_T_68,
             &_id_ctrl_decoder_decoded_T_76,
             &_id_ctrl_decoder_decoded_T_86,
             &_id_ctrl_decoder_decoded_T_88,
             &_id_ctrl_decoder_decoded_T_92,
             &_id_ctrl_decoder_decoded_T_98,
             &_id_ctrl_decoder_decoded_T_130,
             &_id_ctrl_decoder_decoded_T_136,
             &_id_ctrl_decoder_decoded_T_138,
             &_id_ctrl_decoder_decoded_T_152}};
        ex_ctrl_alu_fn <= id_ctrl_alu_fn;
      end
      ex_ctrl_sel_imm <=
        {|{&_id_ctrl_decoder_decoded_T,
           &_id_ctrl_decoder_decoded_T_4,
           &_id_ctrl_decoder_decoded_T_8,
           &_id_ctrl_decoder_decoded_T_12,
           &_id_ctrl_decoder_decoded_T_38,
           &_id_ctrl_decoder_decoded_T_50,
           &_id_ctrl_decoder_decoded_T_54,
           &_id_ctrl_decoder_decoded_T_64,
           &_id_ctrl_decoder_decoded_T_88,
           &_id_ctrl_decoder_decoded_T_94,
           &_id_ctrl_decoder_decoded_T_108,
           &_id_ctrl_decoder_decoded_T_118},
         |{&_id_ctrl_decoder_decoded_T_14, &_id_ctrl_decoder_decoded_T_40},
         |{&_id_ctrl_decoder_decoded_T_32,
           &_id_ctrl_decoder_decoded_T_40,
           &_id_ctrl_decoder_decoded_T_104,
           &_id_ctrl_decoder_decoded_T_114}};
      ex_ctrl_alu_dw <=
        id_xcpt
        | (|{&_id_ctrl_decoder_decoded_T,
             &_id_ctrl_decoder_decoded_T_4,
             &_id_ctrl_decoder_decoded_T_6,
             &_id_ctrl_decoder_decoded_T_14,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _GEN_0[10],
               _GEN_0[11],
               _GEN_0[12],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[29]},
             &_id_ctrl_decoder_decoded_T_26,
             &_id_ctrl_decoder_decoded_T_36,
             &_id_ctrl_decoder_decoded_T_40,
             &_id_ctrl_decoder_decoded_T_48,
             &_id_ctrl_decoder_decoded_T_56,
             &_id_ctrl_decoder_decoded_T_64,
             &_id_ctrl_decoder_decoded_T_68,
             &_id_ctrl_decoder_decoded_T_74,
             &_id_ctrl_decoder_decoded_T_86,
             &_id_ctrl_decoder_decoded_T_88,
             &{_ibuf_io_inst_0_bits_inst_bits[0],
               _ibuf_io_inst_0_bits_inst_bits[1],
               _GEN_0[0],
               _GEN_0[1],
               _ibuf_io_inst_0_bits_inst_bits[4],
               _ibuf_io_inst_0_bits_inst_bits[5],
               _GEN_0[4],
               _ibuf_io_inst_0_bits_inst_bits[12],
               _GEN_0[11],
               _ibuf_io_inst_0_bits_inst_bits[14],
               _GEN_0[23],
               _GEN_0[24],
               _GEN_0[25],
               _GEN_0[26],
               _GEN_0[27],
               _GEN_0[29]},
             &_id_ctrl_decoder_decoded_T_136,
             &_id_ctrl_decoder_decoded_T_138,
             &_id_ctrl_decoder_decoded_T_150});
      ex_ctrl_mem <= |_id_ctrl_decoder_decoded_orMatrixOutputs_T_20;
      ex_ctrl_mem_cmd <= id_ctrl_mem_cmd;
      ex_ctrl_div <= |_id_ctrl_decoder_decoded_orMatrixOutputs_T_10;
      ex_ctrl_wxd <= |_id_ctrl_decoder_decoded_orMatrixOutputs_T_8;
      if (id_system_insn & (|_id_ctrl_decoder_decoded_orMatrixOutputs_T_20))
        ex_ctrl_csr <= 3'h0;
      else if (id_csr_ren)
        ex_ctrl_csr <= 3'h2;
      else
        ex_ctrl_csr <= id_ctrl_csr;
      ex_ctrl_fence_i <= &_id_ctrl_decoder_decoded_T_46;
      ex_reg_rvc <= id_xcpt & (|_T_37) | _ibuf_io_inst_0_bits_rvc;
      ex_reg_flush_pipe <=
        (&_id_ctrl_decoder_decoded_T_46) | id_system_insn | id_csr_en & ~id_csr_ren
        & _csr_io_decode_0_write_flush;
      ex_reg_load_use <= mem_reg_valid & data_hazard_mem & mem_ctrl_mem;
      if (id_ctrl_mem_cmd == 5'h14 | id_ctrl_mem_cmd == 5'h15 | id_ctrl_mem_cmd == 5'h16
          | id_ctrl_mem_cmd == 5'h5)
        ex_reg_mem_size <=
          {|_ibuf_io_inst_0_bits_inst_rs2, |_ibuf_io_inst_0_bits_inst_rs1};
      else
        ex_reg_mem_size <= _ibuf_io_inst_0_bits_inst_bits[13:12];
      ex_reg_rs_bypass_0 <= ~id_illegal_insn & do_bypass;
      ex_reg_rs_bypass_1 <= do_bypass_1;
      if (id_illegal_insn) begin
        ex_reg_rs_lsb_0 <= inst[1:0];
        ex_reg_rs_msb_0 <= {32'h0, inst[31:2]};
      end
      else if ((|_id_ctrl_decoder_decoded_orMatrixOutputs_T_46) & ~do_bypass) begin
        ex_reg_rs_lsb_0 <= id_rs_0[1:0];
        ex_reg_rs_msb_0 <= id_rs_0[63:2];
      end
      else if (|_ibuf_io_inst_0_bits_inst_rs1) begin
        if (id_bypass_src_0_1)
          ex_reg_rs_lsb_0 <= 2'h1;
        else
          ex_reg_rs_lsb_0 <= {1'h1, ~id_bypass_src_0_2};
      end
      else
        ex_reg_rs_lsb_0 <= 2'h0;
      if (_T_54)
        ex_reg_rs_lsb_1 <= id_rs_1[1:0];
      else if (id_bypass_src_1_0)
        ex_reg_rs_lsb_1 <= 2'h0;
      else if (id_bypass_src_1_1)
        ex_reg_rs_lsb_1 <= 2'h1;
      else
        ex_reg_rs_lsb_1 <= {1'h1, ~id_bypass_src_1_2};
    end
    ex_ctrl_rfs1 <= ctrl_killd & ex_ctrl_rfs1;
    ex_ctrl_rfs2 <= ctrl_killd & ex_ctrl_rfs2;
    ex_ctrl_wfd <= ctrl_killd & ex_ctrl_wfd;
    ex_ctrl_mul <= ctrl_killd & ex_ctrl_mul;
    if (_T_69 | ~ex_pc_valid) begin
    end
    else begin
      mem_ctrl_fp <= ex_ctrl_fp;
      mem_ctrl_rocc <= ex_ctrl_rocc;
      mem_ctrl_branch <= ex_ctrl_branch;
      mem_ctrl_jal <= ex_ctrl_jal;
      mem_ctrl_jalr <= ex_ctrl_jalr;
      mem_ctrl_rxs2 <= ex_ctrl_rxs2;
      mem_ctrl_rxs1 <= ex_ctrl_rxs1;
      mem_ctrl_mem <= ex_ctrl_mem;
      mem_ctrl_rfs1 <= ex_ctrl_rfs1;
      mem_ctrl_rfs2 <= ex_ctrl_rfs2;
      mem_ctrl_wfd <= ex_ctrl_wfd;
      mem_ctrl_mul <= ex_ctrl_mul;
      mem_ctrl_div <= ex_ctrl_div;
      mem_ctrl_wxd <= ex_ctrl_wxd;
      mem_ctrl_csr <= ex_ctrl_csr;
      mem_ctrl_fence_i <= _T_73 | ex_ctrl_fence_i;
      mem_reg_rvc <= ex_reg_rvc;
      mem_reg_flush_pipe <= _T_73 | ex_reg_flush_pipe;
      mem_reg_cause <= ex_reg_cause;
      mem_reg_slow_bypass <= _mem_reg_store_T_3 | ~(ex_reg_mem_size[1]);
      mem_reg_load <=
        ex_ctrl_mem
        & (ex_ctrl_mem_cmd == 5'h0 | ex_ctrl_mem_cmd == 5'h10 | ex_ctrl_mem_cmd == 5'h6
           | _mem_reg_store_T_3 | _mem_reg_store_T_5 | _mem_reg_store_T_6
           | _mem_reg_store_T_7 | _mem_reg_store_T_8 | _mem_reg_store_T_12
           | _mem_reg_store_T_13 | _mem_reg_store_T_14 | _mem_reg_store_T_15
           | _mem_reg_store_T_16);
      mem_reg_store <=
        ex_ctrl_mem
        & (ex_ctrl_mem_cmd == 5'h1 | ex_ctrl_mem_cmd == 5'h11 | _mem_reg_store_T_3
           | _mem_reg_store_T_5 | _mem_reg_store_T_6 | _mem_reg_store_T_7
           | _mem_reg_store_T_8 | _mem_reg_store_T_12 | _mem_reg_store_T_13
           | _mem_reg_store_T_14 | _mem_reg_store_T_15 | _mem_reg_store_T_16);
      mem_reg_pc <= ex_reg_pc;
      mem_reg_inst <= ex_reg_inst;
      mem_reg_mem_size <= ex_reg_mem_size;
      mem_reg_hls_or_dv <= ex_reg_hls;
      mem_reg_raw_inst <= ex_reg_raw_inst;
      mem_reg_wdata <= _alu_io_out;
      mem_br_taken <= _alu_io_cmp_out;
    end
    if (mem_pc_valid) begin
      wb_ctrl_rocc <= mem_ctrl_rocc;
      wb_ctrl_rxs2 <= mem_ctrl_rxs2;
      wb_ctrl_rxs1 <= mem_ctrl_rxs1;
      wb_ctrl_mem <= mem_ctrl_mem;
      wb_ctrl_rfs1 <= mem_ctrl_rfs1;
      wb_ctrl_rfs2 <= mem_ctrl_rfs2;
      wb_ctrl_wfd <= mem_ctrl_wfd;
      wb_ctrl_div <= mem_ctrl_div;
      wb_ctrl_wxd <= mem_ctrl_wxd;
      wb_ctrl_csr <= mem_ctrl_csr;
      wb_ctrl_fence_i <= mem_ctrl_fence_i;
      if (_T_74)
        wb_reg_cause <= mem_reg_cause;
      else
        wb_reg_cause <= {60'h0, _T_75 ? 4'h0 : mem_debug_breakpoint ? 4'hE : 4'h3};
      wb_reg_sfence <= mem_reg_sfence;
      wb_reg_pc <= mem_reg_pc;
      wb_reg_mem_size <= mem_reg_mem_size;
      wb_reg_hls_or_dv <= mem_reg_hls_or_dv;
      wb_reg_inst <= mem_reg_inst;
      wb_reg_raw_inst <= mem_reg_raw_inst;
      if (~mem_reg_xcpt & mem_ctrl_fp & mem_ctrl_wxd)
        wb_reg_wdata <= 64'h0;
      else if (~mem_reg_xcpt & (mem_ctrl_jalr ^ mem_npc_misaligned))
        wb_reg_wdata <= {{24{_mem_br_target_T_10[39]}}, _mem_br_target_T_10};
      else
        wb_reg_wdata <= mem_reg_wdata;
    end
    ex_reg_xcpt_interrupt <= ~take_pc_mem_wb & _ibuf_io_inst_0_valid & _csr_io_interrupt;
    ex_reg_valid <= ~ctrl_killd;
    ex_reg_xcpt <= ~ctrl_killd & id_xcpt;
    if (~ctrl_killd | _csr_io_interrupt | _ibuf_io_inst_0_bits_replay) begin
      if (_csr_io_interrupt)
        ex_reg_cause <= _csr_io_interrupt_cause;
      else
        ex_reg_cause <=
          {59'h0,
           _bpu_io_debug_if
             ? 5'hE
             : _bpu_io_xcpt_if
                 ? 5'h3
                 : _ibuf_io_inst_0_bits_xcpt0_pf_inst
                     ? 5'hC
                     : _ibuf_io_inst_0_bits_xcpt0_gf_inst
                         ? 5'h14
                         : _ibuf_io_inst_0_bits_xcpt0_ae_inst
                             ? 5'h1
                             : _ibuf_io_inst_0_bits_xcpt1_pf_inst
                                 ? 5'hC
                                 : _ibuf_io_inst_0_bits_xcpt1_gf_inst
                                     ? 5'h14
                                     : _ibuf_io_inst_0_bits_xcpt1_ae_inst ? 5'h1 : 5'h2};
      ex_reg_pc <= _ibuf_io_pc;
      ex_reg_inst <= _ibuf_io_inst_0_bits_inst_bits;
      ex_reg_raw_inst <= _ibuf_io_inst_0_bits_raw;
    end
    ex_reg_replay <=
      ~take_pc_mem_wb & _ibuf_io_inst_0_valid & _ibuf_io_inst_0_bits_replay;
    ex_reg_hls <= ctrl_killd & ex_reg_hls;
    mem_reg_xcpt_interrupt <= ~take_pc_mem_wb & ex_reg_xcpt_interrupt;
    mem_reg_valid <= ~ctrl_killx;
    mem_reg_xcpt <= ~ctrl_killx & (ex_reg_xcpt_interrupt | ex_reg_xcpt);
    mem_reg_replay <= ~take_pc_mem_wb & replay_ex;
    mem_reg_sfence <= ~_T_69 & (ex_pc_valid ? ex_sfence : mem_reg_sfence);
    if (_T_69
        | ~(ex_pc_valid & ex_ctrl_rxs2 & (ex_ctrl_mem | ex_ctrl_rocc | ex_sfence))) begin
    end
    else
      mem_reg_rs2 <= casez_tmp_2;
    wb_reg_valid <= ~_ctrl_killm_T;
    wb_reg_xcpt <= mem_xcpt & ~take_pc_wb;
    wb_reg_replay <= (dcache_kill_mem | mem_reg_replay) & ~take_pc_wb;
    wb_reg_flush_pipe <= ~_ctrl_killm_T & mem_reg_flush_pipe;
    if (~ctrl_killd & _T_54)
      ex_reg_rs_msb_1 <= id_rs_1[63:2];
    div_io_kill_REG <= _div_io_req_ready & _div_io_req_valid_T;
    dcache_blocked_blocked <=
      ~io_dmem_req_ready & ~io_dmem_perf_grant
      & (dcache_blocked_blocked | _io_dmem_req_valid_output | io_dmem_s2_nack);
    rocc_blocked <= ~wb_xcpt & (_io_rocc_cmd_valid_T & ~replay_wb_common | rocc_blocked);
    io_imem_progress_REG <= wb_reg_valid & ~replay_wb_common;
    if (ex_reg_rs_bypass_0)
      coreMonitorBundle_rd0val_REG <= casez_tmp;
    else
      coreMonitorBundle_rd0val_REG <= _ex_rs_T_6;
    coreMonitorBundle_rd0val_REG_1 <= coreMonitorBundle_rd0val_REG;
    if (ex_reg_rs_bypass_1)
      coreMonitorBundle_rd1val_REG <= casez_tmp_0;
    else
      coreMonitorBundle_rd1val_REG <= _ex_rs_T_13;
    coreMonitorBundle_rd1val_REG_1 <= coreMonitorBundle_rd1val_REG;
    if (reset) begin
      id_reg_fence <= 1'h0;
      _r <= 32'h0;
    end
    else begin
      id_reg_fence <=
        ~ctrl_killd
        & ((&_id_ctrl_decoder_decoded_T_10)
           | (|_id_ctrl_decoder_decoded_orMatrixOutputs_T)
           & _ibuf_io_inst_0_bits_inst_bits[26]) | id_mem_busy & id_reg_fence;
      if (ll_wen | _T_155)
        _r <= _T_153 | (_T_155 ? 32'h1 << wb_reg_inst[11:7] : 32'h0);
      else if (ll_wen)
        _r <= _T_153;
    end
  end // always @(posedge)
  IBuf ibuf (
    .clock                        (clock),
    .reset                        (reset),
    .io_imem_valid                (io_imem_resp_valid),
    .io_imem_bits_btb_taken       (io_imem_resp_bits_btb_taken),
    .io_imem_bits_btb_bridx       (io_imem_resp_bits_btb_bridx),
    .io_imem_bits_pc              (io_imem_resp_bits_pc),
    .io_imem_bits_data            (io_imem_resp_bits_data),
    .io_imem_bits_xcpt_pf_inst    (io_imem_resp_bits_xcpt_pf_inst),
    .io_imem_bits_xcpt_gf_inst    (io_imem_resp_bits_xcpt_gf_inst),
    .io_imem_bits_xcpt_ae_inst    (io_imem_resp_bits_xcpt_ae_inst),
    .io_imem_bits_replay          (io_imem_resp_bits_replay),
    .io_kill                      (take_pc_mem_wb),
    .io_inst_0_ready              (~_ctrl_stalld_T_28),
    .io_imem_ready                (io_imem_resp_ready),
    .io_pc                        (_ibuf_io_pc),
    .io_inst_0_valid              (_ibuf_io_inst_0_valid),
    .io_inst_0_bits_xcpt0_pf_inst (_ibuf_io_inst_0_bits_xcpt0_pf_inst),
    .io_inst_0_bits_xcpt0_gf_inst (_ibuf_io_inst_0_bits_xcpt0_gf_inst),
    .io_inst_0_bits_xcpt0_ae_inst (_ibuf_io_inst_0_bits_xcpt0_ae_inst),
    .io_inst_0_bits_xcpt1_pf_inst (_ibuf_io_inst_0_bits_xcpt1_pf_inst),
    .io_inst_0_bits_xcpt1_gf_inst (_ibuf_io_inst_0_bits_xcpt1_gf_inst),
    .io_inst_0_bits_xcpt1_ae_inst (_ibuf_io_inst_0_bits_xcpt1_ae_inst),
    .io_inst_0_bits_replay        (_ibuf_io_inst_0_bits_replay),
    .io_inst_0_bits_rvc           (_ibuf_io_inst_0_bits_rvc),
    .io_inst_0_bits_inst_bits     (_ibuf_io_inst_0_bits_inst_bits),
    .io_inst_0_bits_inst_rd       (_ibuf_io_inst_0_bits_inst_rd),
    .io_inst_0_bits_inst_rs1      (_ibuf_io_inst_0_bits_inst_rs1),
    .io_inst_0_bits_inst_rs2      (_ibuf_io_inst_0_bits_inst_rs2),
    .io_inst_0_bits_raw           (_ibuf_io_inst_0_bits_raw)
  );
  rf_combMem rf_ext (
    .R0_addr (~_ibuf_io_inst_0_bits_inst_rs1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (~_ibuf_io_inst_0_bits_inst_rs2),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .W0_addr (~rf_waddr),
    .W0_en   (rf_wen & (|rf_waddr)),
    .W0_clk  (clock),
    .W0_data (coreMonitorBundle_wrdata),
    .R0_data (_rf_ext_R0_data),
    .R1_data (_rf_ext_R1_data)
  );
  CSRFile csr (
    .clock                      (clock),
    .reset                      (reset),
    .io_ungated_clock           (clock),
    .io_interrupts_debug        (io_interrupts_debug),
    .io_interrupts_mtip         (io_interrupts_mtip),
    .io_interrupts_msip         (io_interrupts_msip),
    .io_interrupts_meip         (io_interrupts_meip),
    .io_interrupts_seip         (io_interrupts_seip),
    .io_hartid                  (io_hartid),
    .io_rw_addr                 (wb_reg_inst[31:20]),
    .io_rw_cmd                  (wb_ctrl_csr & {wb_reg_valid, 2'h3}),
    .io_rw_wdata                (wb_reg_wdata),
    .io_decode_0_inst           (_ibuf_io_inst_0_bits_inst_bits),
    .io_exception               (wb_xcpt),
    .io_retire                  (wb_valid),
    .io_cause
      (wb_reg_xcpt
         ? wb_reg_cause
         : {59'h0,
            _T_97
              ? 5'hF
              : _T_99
                  ? 5'hD
                  : _T_101
                      ? 5'h17
                      : _T_103
                          ? 5'h15
                          : {2'h0,
                             _T_105 ? 3'h7 : _T_107 ? 3'h5 : {1'h1, _T_109, 1'h0}}}),
    .io_pc                      (wb_reg_pc),
    .io_tval
      (wb_xcpt
       & (~wb_reg_xcpt | wb_reg_cause == 64'h3 | wb_reg_cause == 64'h1
          | wb_reg_cause == 64'hC | _csr_io_htval_htval_valid_imem_T
          | wb_reg_cause == 64'h2)
         ? {wb_reg_wdata[63:39] == 25'h0 | (&(wb_reg_wdata[63:39]))
              ? wb_reg_wdata[39]
              : ~(wb_reg_wdata[38]),
            wb_reg_wdata[38:0]}
         : 40'h0),
    .io_gva                     (wb_xcpt & ~wb_reg_xcpt & wb_reg_hls_or_dv),
    .io_inst_0
      ({(&(wb_reg_raw_inst[1:0])) ? wb_reg_inst[31:16] : 16'h0, wb_reg_raw_inst[15:0]}),
    .io_rw_rdata                (_csr_io_rw_rdata),
    .io_decode_0_fp_illegal     (_csr_io_decode_0_fp_illegal),
    .io_decode_0_read_illegal   (_csr_io_decode_0_read_illegal),
    .io_decode_0_write_illegal  (_csr_io_decode_0_write_illegal),
    .io_decode_0_write_flush    (_csr_io_decode_0_write_flush),
    .io_decode_0_system_illegal (_csr_io_decode_0_system_illegal),
    .io_csr_stall               (_csr_io_csr_stall),
    .io_eret                    (_csr_io_eret),
    .io_singleStep              (_csr_io_singleStep),
    .io_status_debug            (_csr_io_status_debug),
    .io_status_wfi              (io_wfi),
    .io_status_isa              (_csr_io_status_isa),
    .io_status_dprv             (_csr_io_status_dprv),
    .io_status_prv              (_csr_io_status_prv),
    .io_status_mxr              (io_ptw_status_mxr),
    .io_status_sum              (io_ptw_status_sum),
    .io_ptbr_mode               (io_ptw_ptbr_mode),
    .io_ptbr_ppn                (io_ptw_ptbr_ppn),
    .io_evec                    (_csr_io_evec),
    .io_time                    (_csr_io_time),
    .io_interrupt               (_csr_io_interrupt),
    .io_interrupt_cause         (_csr_io_interrupt_cause),
    .io_bp_0_control_action     (_csr_io_bp_0_control_action),
    .io_bp_0_control_chain      (_csr_io_bp_0_control_chain),
    .io_bp_0_control_tmatch     (_csr_io_bp_0_control_tmatch),
    .io_bp_0_control_m          (_csr_io_bp_0_control_m),
    .io_bp_0_control_s          (_csr_io_bp_0_control_s),
    .io_bp_0_control_u          (_csr_io_bp_0_control_u),
    .io_bp_0_control_x          (_csr_io_bp_0_control_x),
    .io_bp_0_control_w          (_csr_io_bp_0_control_w),
    .io_bp_0_control_r          (_csr_io_bp_0_control_r),
    .io_bp_0_address            (_csr_io_bp_0_address),
    .io_pmp_0_cfg_l             (io_ptw_pmp_0_cfg_l),
    .io_pmp_0_cfg_a             (io_ptw_pmp_0_cfg_a),
    .io_pmp_0_cfg_x             (io_ptw_pmp_0_cfg_x),
    .io_pmp_0_cfg_w             (io_ptw_pmp_0_cfg_w),
    .io_pmp_0_cfg_r             (io_ptw_pmp_0_cfg_r),
    .io_pmp_0_addr              (io_ptw_pmp_0_addr),
    .io_pmp_0_mask              (io_ptw_pmp_0_mask),
    .io_pmp_1_cfg_l             (io_ptw_pmp_1_cfg_l),
    .io_pmp_1_cfg_a             (io_ptw_pmp_1_cfg_a),
    .io_pmp_1_cfg_x             (io_ptw_pmp_1_cfg_x),
    .io_pmp_1_cfg_w             (io_ptw_pmp_1_cfg_w),
    .io_pmp_1_cfg_r             (io_ptw_pmp_1_cfg_r),
    .io_pmp_1_addr              (io_ptw_pmp_1_addr),
    .io_pmp_1_mask              (io_ptw_pmp_1_mask),
    .io_pmp_2_cfg_l             (io_ptw_pmp_2_cfg_l),
    .io_pmp_2_cfg_a             (io_ptw_pmp_2_cfg_a),
    .io_pmp_2_cfg_x             (io_ptw_pmp_2_cfg_x),
    .io_pmp_2_cfg_w             (io_ptw_pmp_2_cfg_w),
    .io_pmp_2_cfg_r             (io_ptw_pmp_2_cfg_r),
    .io_pmp_2_addr              (io_ptw_pmp_2_addr),
    .io_pmp_2_mask              (io_ptw_pmp_2_mask),
    .io_pmp_3_cfg_l             (io_ptw_pmp_3_cfg_l),
    .io_pmp_3_cfg_a             (io_ptw_pmp_3_cfg_a),
    .io_pmp_3_cfg_x             (io_ptw_pmp_3_cfg_x),
    .io_pmp_3_cfg_w             (io_ptw_pmp_3_cfg_w),
    .io_pmp_3_cfg_r             (io_ptw_pmp_3_cfg_r),
    .io_pmp_3_addr              (io_ptw_pmp_3_addr),
    .io_pmp_3_mask              (io_ptw_pmp_3_mask),
    .io_pmp_4_cfg_l             (io_ptw_pmp_4_cfg_l),
    .io_pmp_4_cfg_a             (io_ptw_pmp_4_cfg_a),
    .io_pmp_4_cfg_x             (io_ptw_pmp_4_cfg_x),
    .io_pmp_4_cfg_w             (io_ptw_pmp_4_cfg_w),
    .io_pmp_4_cfg_r             (io_ptw_pmp_4_cfg_r),
    .io_pmp_4_addr              (io_ptw_pmp_4_addr),
    .io_pmp_4_mask              (io_ptw_pmp_4_mask),
    .io_pmp_5_cfg_l             (io_ptw_pmp_5_cfg_l),
    .io_pmp_5_cfg_a             (io_ptw_pmp_5_cfg_a),
    .io_pmp_5_cfg_x             (io_ptw_pmp_5_cfg_x),
    .io_pmp_5_cfg_w             (io_ptw_pmp_5_cfg_w),
    .io_pmp_5_cfg_r             (io_ptw_pmp_5_cfg_r),
    .io_pmp_5_addr              (io_ptw_pmp_5_addr),
    .io_pmp_5_mask              (io_ptw_pmp_5_mask),
    .io_pmp_6_cfg_l             (io_ptw_pmp_6_cfg_l),
    .io_pmp_6_cfg_a             (io_ptw_pmp_6_cfg_a),
    .io_pmp_6_cfg_x             (io_ptw_pmp_6_cfg_x),
    .io_pmp_6_cfg_w             (io_ptw_pmp_6_cfg_w),
    .io_pmp_6_cfg_r             (io_ptw_pmp_6_cfg_r),
    .io_pmp_6_addr              (io_ptw_pmp_6_addr),
    .io_pmp_6_mask              (io_ptw_pmp_6_mask),
    .io_pmp_7_cfg_l             (io_ptw_pmp_7_cfg_l),
    .io_pmp_7_cfg_a             (io_ptw_pmp_7_cfg_a),
    .io_pmp_7_cfg_x             (io_ptw_pmp_7_cfg_x),
    .io_pmp_7_cfg_w             (io_ptw_pmp_7_cfg_w),
    .io_pmp_7_cfg_r             (io_ptw_pmp_7_cfg_r),
    .io_pmp_7_addr              (io_ptw_pmp_7_addr),
    .io_pmp_7_mask              (io_ptw_pmp_7_mask),
    .io_inhibit_cycle           (_csr_io_inhibit_cycle),
    .io_trace_0_valid           (_csr_io_trace_0_valid),
    .io_trace_0_iaddr           (_csr_io_trace_0_iaddr),
    .io_trace_0_insn            (_csr_io_trace_0_insn),
    .io_trace_0_exception       (_csr_io_trace_0_exception),
    .io_customCSRs_0_value      (_csr_io_customCSRs_0_value)
  );
  BreakpointUnit bpu (
    .io_status_debug        (_csr_io_status_debug),
    .io_status_prv          (_csr_io_status_prv),
    .io_bp_0_control_action (_csr_io_bp_0_control_action),
    .io_bp_0_control_chain  (_csr_io_bp_0_control_chain),
    .io_bp_0_control_tmatch (_csr_io_bp_0_control_tmatch),
    .io_bp_0_control_m      (_csr_io_bp_0_control_m),
    .io_bp_0_control_s      (_csr_io_bp_0_control_s),
    .io_bp_0_control_u      (_csr_io_bp_0_control_u),
    .io_bp_0_control_x      (_csr_io_bp_0_control_x),
    .io_bp_0_control_w      (_csr_io_bp_0_control_w),
    .io_bp_0_control_r      (_csr_io_bp_0_control_r),
    .io_bp_0_address        (_csr_io_bp_0_address),
    .io_pc                  (_ibuf_io_pc[38:0]),
    .io_ea                  (mem_reg_wdata[38:0]),
    .io_xcpt_if             (_bpu_io_xcpt_if),
    .io_xcpt_ld             (_bpu_io_xcpt_ld),
    .io_xcpt_st             (_bpu_io_xcpt_st),
    .io_debug_if            (_bpu_io_debug_if),
    .io_debug_ld            (_bpu_io_debug_ld),
    .io_debug_st            (_bpu_io_debug_st)
  );
  ALU alu (
    .io_dw        (ex_ctrl_alu_dw),
    .io_fn        (ex_ctrl_alu_fn),
    .io_in2       (casez_tmp_1),
    .io_in1
      (ex_ctrl_sel_alu1 == 2'h2
         ? {{24{ex_reg_pc[39]}}, ex_reg_pc}
         : ex_ctrl_sel_alu1 == 2'h1 ? ex_rs_0 : 64'h0),
    .io_out       (_alu_io_out),
    .io_adder_out (_alu_io_adder_out),
    .io_cmp_out   (_alu_io_cmp_out)
  );
  MulDiv div (
    .clock             (clock),
    .reset             (reset),
    .io_req_valid      (_div_io_req_valid_T),
    .io_req_bits_fn    (ex_ctrl_alu_fn),
    .io_req_bits_dw    (ex_ctrl_alu_dw),
    .io_req_bits_in1   (ex_rs_0),
    .io_req_bits_in2   (ex_rs_1),
    .io_req_bits_tag   (ex_reg_inst[11:7]),
    .io_kill           (killm_common & div_io_kill_REG),
    .io_resp_ready     (_GEN),
    .io_req_ready      (_div_io_req_ready),
    .io_resp_valid     (_div_io_resp_valid),
    .io_resp_bits_data (_div_io_resp_bits_data),
    .io_resp_bits_tag  (_div_io_resp_bits_tag)
  );
  PlusArgTimeout PlusArgTimeout (
    .clock    (clock),
    .reset    (reset),
    .io_count (_csr_io_time[31:0])
  );
  assign io_imem_might_request = imem_might_request_reg;
  assign io_imem_req_valid = take_pc_mem_wb;
  assign io_imem_req_bits_pc =
    wb_xcpt | _csr_io_eret ? _csr_io_evec : _replay_wb_T ? wb_reg_pc : _mem_npc_T_5;
  assign io_imem_req_bits_speculative = ~take_pc_wb;
  assign io_imem_sfence_valid = _io_imem_sfence_valid_output;
  assign io_imem_sfence_bits_rs1 = wb_reg_mem_size[0];
  assign io_imem_sfence_bits_rs2 = wb_reg_mem_size[1];
  assign io_imem_sfence_bits_addr = wb_reg_wdata[38:0];
  assign io_imem_btb_update_valid =
    mem_reg_valid & ~take_pc_wb
    & (ex_pc_valid
         ? _mem_npc_T_5 != ex_reg_pc
         : ~(_ibuf_io_inst_0_valid | io_imem_resp_valid) | _mem_npc_T_5 != _ibuf_io_pc)
    & (~(mem_ctrl_branch | mem_ctrl_jalr | mem_ctrl_jal) | mem_cfi_taken);
  assign io_imem_bht_update_valid = mem_reg_valid & ~take_pc_wb;
  assign io_imem_flush_icache = wb_reg_valid & wb_ctrl_fence_i & ~io_dmem_s2_nack;
  assign io_imem_progress = io_imem_progress_REG;
  assign io_dmem_req_valid = _io_dmem_req_valid_output;
  assign io_dmem_req_bits_addr =
    {ex_rs_0[63:39] == 25'h0 | (&(ex_rs_0[63:39]))
       ? _alu_io_adder_out[39]
       : ~(_alu_io_adder_out[38]),
     _alu_io_adder_out[38:0]};
  assign io_dmem_req_bits_tag = {1'h0, ex_reg_inst[11:7], ex_ctrl_fp};
  assign io_dmem_req_bits_cmd = ex_ctrl_mem_cmd;
  assign io_dmem_req_bits_size = ex_reg_mem_size;
  assign io_dmem_req_bits_signed = ~(ex_reg_hls ? ex_reg_inst[20] : ex_reg_inst[14]);
  assign io_dmem_req_bits_dprv = ex_reg_hls ? 2'h0 : _csr_io_status_dprv;
  assign io_dmem_req_bits_dv = ex_reg_hls;
  assign io_dmem_s1_kill = killm_common | mem_ldst_xcpt;
  assign io_dmem_s1_data_data = mem_reg_rs2;
  assign io_ptw_sfence_valid = _io_imem_sfence_valid_output;
  assign io_ptw_sfence_bits_rs1 = wb_reg_mem_size[0];
  assign io_ptw_status_debug = _csr_io_status_debug;
  assign io_ptw_status_prv = _csr_io_status_prv;
  assign io_ptw_customCSRs_csrs_0_value = _csr_io_customCSRs_0_value;
endmodule

module RocketTile(
  input         clock,
                reset,
                auto_buffer_out_a_ready,
                auto_buffer_out_b_valid,
  input  [1:0]  auto_buffer_out_b_bits_param,
  input  [3:0]  auto_buffer_out_b_bits_size,
  input  [1:0]  auto_buffer_out_b_bits_source,
  input  [31:0] auto_buffer_out_b_bits_address,
  input         auto_buffer_out_c_ready,
                auto_buffer_out_d_valid,
  input  [2:0]  auto_buffer_out_d_bits_opcode,
  input  [1:0]  auto_buffer_out_d_bits_param,
  input  [3:0]  auto_buffer_out_d_bits_size,
  input  [1:0]  auto_buffer_out_d_bits_source,
                auto_buffer_out_d_bits_sink,
  input         auto_buffer_out_d_bits_denied,
  input  [63:0] auto_buffer_out_d_bits_data,
  input         auto_buffer_out_d_bits_corrupt,
                auto_buffer_out_e_ready,
                auto_int_local_in_3_0,
                auto_int_local_in_2_0,
                auto_int_local_in_1_0,
                auto_int_local_in_1_1,
                auto_int_local_in_0_0,
                auto_hartid_in,
  output        auto_buffer_out_a_valid,
  output [2:0]  auto_buffer_out_a_bits_opcode,
                auto_buffer_out_a_bits_param,
  output [3:0]  auto_buffer_out_a_bits_size,
  output [1:0]  auto_buffer_out_a_bits_source,
  output [31:0] auto_buffer_out_a_bits_address,
  output [7:0]  auto_buffer_out_a_bits_mask,
  output [63:0] auto_buffer_out_a_bits_data,
  output        auto_buffer_out_b_ready,
                auto_buffer_out_c_valid,
  output [2:0]  auto_buffer_out_c_bits_opcode,
                auto_buffer_out_c_bits_param,
  output [3:0]  auto_buffer_out_c_bits_size,
  output [1:0]  auto_buffer_out_c_bits_source,
  output [31:0] auto_buffer_out_c_bits_address,
  output [63:0] auto_buffer_out_c_bits_data,
  output        auto_buffer_out_d_ready,
                auto_buffer_out_e_valid,
  output [1:0]  auto_buffer_out_e_bits_sink,
  output        auto_wfi_out_0
);

  wire        _core_io_imem_might_request;
  wire        _core_io_imem_req_valid;
  wire [39:0] _core_io_imem_req_bits_pc;
  wire        _core_io_imem_req_bits_speculative;
  wire        _core_io_imem_sfence_valid;
  wire        _core_io_imem_sfence_bits_rs1;
  wire        _core_io_imem_sfence_bits_rs2;
  wire [38:0] _core_io_imem_sfence_bits_addr;
  wire        _core_io_imem_resp_ready;
  wire        _core_io_imem_btb_update_valid;
  wire        _core_io_imem_bht_update_valid;
  wire        _core_io_imem_flush_icache;
  wire        _core_io_imem_progress;
  wire        _core_io_dmem_req_valid;
  wire [39:0] _core_io_dmem_req_bits_addr;
  wire [6:0]  _core_io_dmem_req_bits_tag;
  wire [4:0]  _core_io_dmem_req_bits_cmd;
  wire [1:0]  _core_io_dmem_req_bits_size;
  wire        _core_io_dmem_req_bits_signed;
  wire [1:0]  _core_io_dmem_req_bits_dprv;
  wire        _core_io_dmem_req_bits_dv;
  wire        _core_io_dmem_s1_kill;
  wire [63:0] _core_io_dmem_s1_data_data;
  wire [3:0]  _core_io_ptw_ptbr_mode;
  wire [43:0] _core_io_ptw_ptbr_ppn;
  wire        _core_io_ptw_sfence_valid;
  wire        _core_io_ptw_sfence_bits_rs1;
  wire        _core_io_ptw_status_debug;
  wire [1:0]  _core_io_ptw_status_prv;
  wire        _core_io_ptw_status_mxr;
  wire        _core_io_ptw_status_sum;
  wire        _core_io_ptw_pmp_0_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_0_cfg_a;
  wire        _core_io_ptw_pmp_0_cfg_x;
  wire        _core_io_ptw_pmp_0_cfg_w;
  wire        _core_io_ptw_pmp_0_cfg_r;
  wire [29:0] _core_io_ptw_pmp_0_addr;
  wire [31:0] _core_io_ptw_pmp_0_mask;
  wire        _core_io_ptw_pmp_1_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_1_cfg_a;
  wire        _core_io_ptw_pmp_1_cfg_x;
  wire        _core_io_ptw_pmp_1_cfg_w;
  wire        _core_io_ptw_pmp_1_cfg_r;
  wire [29:0] _core_io_ptw_pmp_1_addr;
  wire [31:0] _core_io_ptw_pmp_1_mask;
  wire        _core_io_ptw_pmp_2_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_2_cfg_a;
  wire        _core_io_ptw_pmp_2_cfg_x;
  wire        _core_io_ptw_pmp_2_cfg_w;
  wire        _core_io_ptw_pmp_2_cfg_r;
  wire [29:0] _core_io_ptw_pmp_2_addr;
  wire [31:0] _core_io_ptw_pmp_2_mask;
  wire        _core_io_ptw_pmp_3_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_3_cfg_a;
  wire        _core_io_ptw_pmp_3_cfg_x;
  wire        _core_io_ptw_pmp_3_cfg_w;
  wire        _core_io_ptw_pmp_3_cfg_r;
  wire [29:0] _core_io_ptw_pmp_3_addr;
  wire [31:0] _core_io_ptw_pmp_3_mask;
  wire        _core_io_ptw_pmp_4_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_4_cfg_a;
  wire        _core_io_ptw_pmp_4_cfg_x;
  wire        _core_io_ptw_pmp_4_cfg_w;
  wire        _core_io_ptw_pmp_4_cfg_r;
  wire [29:0] _core_io_ptw_pmp_4_addr;
  wire [31:0] _core_io_ptw_pmp_4_mask;
  wire        _core_io_ptw_pmp_5_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_5_cfg_a;
  wire        _core_io_ptw_pmp_5_cfg_x;
  wire        _core_io_ptw_pmp_5_cfg_w;
  wire        _core_io_ptw_pmp_5_cfg_r;
  wire [29:0] _core_io_ptw_pmp_5_addr;
  wire [31:0] _core_io_ptw_pmp_5_mask;
  wire        _core_io_ptw_pmp_6_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_6_cfg_a;
  wire        _core_io_ptw_pmp_6_cfg_x;
  wire        _core_io_ptw_pmp_6_cfg_w;
  wire        _core_io_ptw_pmp_6_cfg_r;
  wire [29:0] _core_io_ptw_pmp_6_addr;
  wire [31:0] _core_io_ptw_pmp_6_mask;
  wire        _core_io_ptw_pmp_7_cfg_l;
  wire [1:0]  _core_io_ptw_pmp_7_cfg_a;
  wire        _core_io_ptw_pmp_7_cfg_x;
  wire        _core_io_ptw_pmp_7_cfg_w;
  wire        _core_io_ptw_pmp_7_cfg_r;
  wire [29:0] _core_io_ptw_pmp_7_addr;
  wire [31:0] _core_io_ptw_pmp_7_mask;
  wire [63:0] _core_io_ptw_customCSRs_csrs_0_value;
  wire        _core_io_wfi;
  wire        _ptw_io_requestor_0_req_ready;
  wire        _ptw_io_requestor_0_resp_valid;
  wire        _ptw_io_requestor_0_resp_bits_ae_ptw;
  wire        _ptw_io_requestor_0_resp_bits_ae_final;
  wire        _ptw_io_requestor_0_resp_bits_pf;
  wire        _ptw_io_requestor_0_resp_bits_gf;
  wire        _ptw_io_requestor_0_resp_bits_hr;
  wire        _ptw_io_requestor_0_resp_bits_hw;
  wire        _ptw_io_requestor_0_resp_bits_hx;
  wire [43:0] _ptw_io_requestor_0_resp_bits_pte_ppn;
  wire        _ptw_io_requestor_0_resp_bits_pte_d;
  wire        _ptw_io_requestor_0_resp_bits_pte_a;
  wire        _ptw_io_requestor_0_resp_bits_pte_g;
  wire        _ptw_io_requestor_0_resp_bits_pte_u;
  wire        _ptw_io_requestor_0_resp_bits_pte_x;
  wire        _ptw_io_requestor_0_resp_bits_pte_w;
  wire        _ptw_io_requestor_0_resp_bits_pte_r;
  wire        _ptw_io_requestor_0_resp_bits_pte_v;
  wire [1:0]  _ptw_io_requestor_0_resp_bits_level;
  wire        _ptw_io_requestor_0_resp_bits_homogeneous;
  wire        _ptw_io_requestor_0_resp_bits_gpa_is_pte;
  wire [3:0]  _ptw_io_requestor_0_ptbr_mode;
  wire        _ptw_io_requestor_0_status_debug;
  wire        _ptw_io_requestor_0_status_mxr;
  wire        _ptw_io_requestor_0_status_sum;
  wire        _ptw_io_requestor_0_pmp_0_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_0_cfg_a;
  wire        _ptw_io_requestor_0_pmp_0_cfg_x;
  wire        _ptw_io_requestor_0_pmp_0_cfg_w;
  wire        _ptw_io_requestor_0_pmp_0_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_0_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_0_mask;
  wire        _ptw_io_requestor_0_pmp_1_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_1_cfg_a;
  wire        _ptw_io_requestor_0_pmp_1_cfg_x;
  wire        _ptw_io_requestor_0_pmp_1_cfg_w;
  wire        _ptw_io_requestor_0_pmp_1_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_1_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_1_mask;
  wire        _ptw_io_requestor_0_pmp_2_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_2_cfg_a;
  wire        _ptw_io_requestor_0_pmp_2_cfg_x;
  wire        _ptw_io_requestor_0_pmp_2_cfg_w;
  wire        _ptw_io_requestor_0_pmp_2_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_2_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_2_mask;
  wire        _ptw_io_requestor_0_pmp_3_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_3_cfg_a;
  wire        _ptw_io_requestor_0_pmp_3_cfg_x;
  wire        _ptw_io_requestor_0_pmp_3_cfg_w;
  wire        _ptw_io_requestor_0_pmp_3_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_3_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_3_mask;
  wire        _ptw_io_requestor_0_pmp_4_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_4_cfg_a;
  wire        _ptw_io_requestor_0_pmp_4_cfg_x;
  wire        _ptw_io_requestor_0_pmp_4_cfg_w;
  wire        _ptw_io_requestor_0_pmp_4_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_4_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_4_mask;
  wire        _ptw_io_requestor_0_pmp_5_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_5_cfg_a;
  wire        _ptw_io_requestor_0_pmp_5_cfg_x;
  wire        _ptw_io_requestor_0_pmp_5_cfg_w;
  wire        _ptw_io_requestor_0_pmp_5_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_5_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_5_mask;
  wire        _ptw_io_requestor_0_pmp_6_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_6_cfg_a;
  wire        _ptw_io_requestor_0_pmp_6_cfg_x;
  wire        _ptw_io_requestor_0_pmp_6_cfg_w;
  wire        _ptw_io_requestor_0_pmp_6_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_6_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_6_mask;
  wire        _ptw_io_requestor_0_pmp_7_cfg_l;
  wire [1:0]  _ptw_io_requestor_0_pmp_7_cfg_a;
  wire        _ptw_io_requestor_0_pmp_7_cfg_x;
  wire        _ptw_io_requestor_0_pmp_7_cfg_w;
  wire        _ptw_io_requestor_0_pmp_7_cfg_r;
  wire [29:0] _ptw_io_requestor_0_pmp_7_addr;
  wire [31:0] _ptw_io_requestor_0_pmp_7_mask;
  wire        _ptw_io_requestor_1_req_ready;
  wire        _ptw_io_requestor_1_resp_valid;
  wire        _ptw_io_requestor_1_resp_bits_ae_ptw;
  wire        _ptw_io_requestor_1_resp_bits_ae_final;
  wire        _ptw_io_requestor_1_resp_bits_pf;
  wire        _ptw_io_requestor_1_resp_bits_gf;
  wire        _ptw_io_requestor_1_resp_bits_hr;
  wire        _ptw_io_requestor_1_resp_bits_hw;
  wire        _ptw_io_requestor_1_resp_bits_hx;
  wire [43:0] _ptw_io_requestor_1_resp_bits_pte_ppn;
  wire        _ptw_io_requestor_1_resp_bits_pte_d;
  wire        _ptw_io_requestor_1_resp_bits_pte_a;
  wire        _ptw_io_requestor_1_resp_bits_pte_g;
  wire        _ptw_io_requestor_1_resp_bits_pte_u;
  wire        _ptw_io_requestor_1_resp_bits_pte_x;
  wire        _ptw_io_requestor_1_resp_bits_pte_w;
  wire        _ptw_io_requestor_1_resp_bits_pte_r;
  wire        _ptw_io_requestor_1_resp_bits_pte_v;
  wire [1:0]  _ptw_io_requestor_1_resp_bits_level;
  wire        _ptw_io_requestor_1_resp_bits_homogeneous;
  wire        _ptw_io_requestor_1_resp_bits_gpa_is_pte;
  wire [3:0]  _ptw_io_requestor_1_ptbr_mode;
  wire        _ptw_io_requestor_1_status_debug;
  wire [1:0]  _ptw_io_requestor_1_status_prv;
  wire        _ptw_io_requestor_1_pmp_0_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_0_cfg_a;
  wire        _ptw_io_requestor_1_pmp_0_cfg_x;
  wire        _ptw_io_requestor_1_pmp_0_cfg_w;
  wire        _ptw_io_requestor_1_pmp_0_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_0_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_0_mask;
  wire        _ptw_io_requestor_1_pmp_1_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_1_cfg_a;
  wire        _ptw_io_requestor_1_pmp_1_cfg_x;
  wire        _ptw_io_requestor_1_pmp_1_cfg_w;
  wire        _ptw_io_requestor_1_pmp_1_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_1_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_1_mask;
  wire        _ptw_io_requestor_1_pmp_2_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_2_cfg_a;
  wire        _ptw_io_requestor_1_pmp_2_cfg_x;
  wire        _ptw_io_requestor_1_pmp_2_cfg_w;
  wire        _ptw_io_requestor_1_pmp_2_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_2_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_2_mask;
  wire        _ptw_io_requestor_1_pmp_3_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_3_cfg_a;
  wire        _ptw_io_requestor_1_pmp_3_cfg_x;
  wire        _ptw_io_requestor_1_pmp_3_cfg_w;
  wire        _ptw_io_requestor_1_pmp_3_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_3_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_3_mask;
  wire        _ptw_io_requestor_1_pmp_4_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_4_cfg_a;
  wire        _ptw_io_requestor_1_pmp_4_cfg_x;
  wire        _ptw_io_requestor_1_pmp_4_cfg_w;
  wire        _ptw_io_requestor_1_pmp_4_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_4_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_4_mask;
  wire        _ptw_io_requestor_1_pmp_5_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_5_cfg_a;
  wire        _ptw_io_requestor_1_pmp_5_cfg_x;
  wire        _ptw_io_requestor_1_pmp_5_cfg_w;
  wire        _ptw_io_requestor_1_pmp_5_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_5_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_5_mask;
  wire        _ptw_io_requestor_1_pmp_6_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_6_cfg_a;
  wire        _ptw_io_requestor_1_pmp_6_cfg_x;
  wire        _ptw_io_requestor_1_pmp_6_cfg_w;
  wire        _ptw_io_requestor_1_pmp_6_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_6_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_6_mask;
  wire        _ptw_io_requestor_1_pmp_7_cfg_l;
  wire [1:0]  _ptw_io_requestor_1_pmp_7_cfg_a;
  wire        _ptw_io_requestor_1_pmp_7_cfg_x;
  wire        _ptw_io_requestor_1_pmp_7_cfg_w;
  wire        _ptw_io_requestor_1_pmp_7_cfg_r;
  wire [29:0] _ptw_io_requestor_1_pmp_7_addr;
  wire [31:0] _ptw_io_requestor_1_pmp_7_mask;
  wire [63:0] _ptw_io_requestor_1_customCSRs_csrs_0_value;
  wire        _ptw_io_mem_req_valid;
  wire [39:0] _ptw_io_mem_req_bits_addr;
  wire        _ptw_io_mem_req_bits_dv;
  wire        _ptw_io_mem_s1_kill;
  wire        _dcacheArb_io_requestor_0_req_ready;
  wire        _dcacheArb_io_requestor_0_s2_nack;
  wire        _dcacheArb_io_requestor_0_resp_valid;
  wire [63:0] _dcacheArb_io_requestor_0_resp_bits_data;
  wire        _dcacheArb_io_requestor_0_s2_xcpt_ae_ld;
  wire        _dcacheArb_io_requestor_1_req_ready;
  wire        _dcacheArb_io_requestor_1_s2_nack;
  wire        _dcacheArb_io_requestor_1_resp_valid;
  wire [6:0]  _dcacheArb_io_requestor_1_resp_bits_tag;
  wire [63:0] _dcacheArb_io_requestor_1_resp_bits_data;
  wire        _dcacheArb_io_requestor_1_resp_bits_replay;
  wire        _dcacheArb_io_requestor_1_resp_bits_has_data;
  wire [63:0] _dcacheArb_io_requestor_1_resp_bits_data_word_bypass;
  wire        _dcacheArb_io_requestor_1_replay_next;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ma_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ma_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_pf_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_pf_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_gf_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_gf_st;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ae_ld;
  wire        _dcacheArb_io_requestor_1_s2_xcpt_ae_st;
  wire        _dcacheArb_io_requestor_1_ordered;
  wire        _dcacheArb_io_requestor_1_perf_release;
  wire        _dcacheArb_io_requestor_1_perf_grant;
  wire        _dcacheArb_io_mem_req_valid;
  wire [39:0] _dcacheArb_io_mem_req_bits_addr;
  wire [6:0]  _dcacheArb_io_mem_req_bits_tag;
  wire [4:0]  _dcacheArb_io_mem_req_bits_cmd;
  wire [1:0]  _dcacheArb_io_mem_req_bits_size;
  wire        _dcacheArb_io_mem_req_bits_signed;
  wire [1:0]  _dcacheArb_io_mem_req_bits_dprv;
  wire        _dcacheArb_io_mem_req_bits_dv;
  wire        _dcacheArb_io_mem_req_bits_phys;
  wire        _dcacheArb_io_mem_s1_kill;
  wire [63:0] _dcacheArb_io_mem_s1_data_data;
  wire        _frontend_auto_icache_master_out_a_valid;
  wire [31:0] _frontend_auto_icache_master_out_a_bits_address;
  wire        _frontend_io_cpu_resp_valid;
  wire        _frontend_io_cpu_resp_bits_btb_taken;
  wire        _frontend_io_cpu_resp_bits_btb_bridx;
  wire [39:0] _frontend_io_cpu_resp_bits_pc;
  wire [31:0] _frontend_io_cpu_resp_bits_data;
  wire        _frontend_io_cpu_resp_bits_xcpt_pf_inst;
  wire        _frontend_io_cpu_resp_bits_xcpt_gf_inst;
  wire        _frontend_io_cpu_resp_bits_xcpt_ae_inst;
  wire        _frontend_io_cpu_resp_bits_replay;
  wire        _frontend_io_cpu_gpa_valid;
  wire        _frontend_io_ptw_req_valid;
  wire        _frontend_io_ptw_req_bits_valid;
  wire [26:0] _frontend_io_ptw_req_bits_bits_addr;
  wire        _frontend_io_ptw_req_bits_bits_need_gpa;
  wire        _frontend_io_ptw_req_bits_bits_vstage1;
  wire        _frontend_io_ptw_req_bits_bits_stage2;
  wire        _dcache_auto_out_a_valid;
  wire [2:0]  _dcache_auto_out_a_bits_opcode;
  wire [2:0]  _dcache_auto_out_a_bits_param;
  wire [3:0]  _dcache_auto_out_a_bits_size;
  wire        _dcache_auto_out_a_bits_source;
  wire [31:0] _dcache_auto_out_a_bits_address;
  wire [7:0]  _dcache_auto_out_a_bits_mask;
  wire [63:0] _dcache_auto_out_a_bits_data;
  wire        _dcache_auto_out_b_ready;
  wire        _dcache_auto_out_c_valid;
  wire [2:0]  _dcache_auto_out_c_bits_opcode;
  wire [2:0]  _dcache_auto_out_c_bits_param;
  wire [3:0]  _dcache_auto_out_c_bits_size;
  wire        _dcache_auto_out_c_bits_source;
  wire [31:0] _dcache_auto_out_c_bits_address;
  wire [63:0] _dcache_auto_out_c_bits_data;
  wire        _dcache_auto_out_d_ready;
  wire        _dcache_auto_out_e_valid;
  wire [1:0]  _dcache_auto_out_e_bits_sink;
  wire        _dcache_io_cpu_req_ready;
  wire        _dcache_io_cpu_s2_nack;
  wire        _dcache_io_cpu_resp_valid;
  wire [39:0] _dcache_io_cpu_resp_bits_addr;
  wire [6:0]  _dcache_io_cpu_resp_bits_tag;
  wire [4:0]  _dcache_io_cpu_resp_bits_cmd;
  wire [1:0]  _dcache_io_cpu_resp_bits_size;
  wire        _dcache_io_cpu_resp_bits_signed;
  wire [1:0]  _dcache_io_cpu_resp_bits_dprv;
  wire        _dcache_io_cpu_resp_bits_dv;
  wire [63:0] _dcache_io_cpu_resp_bits_data;
  wire [7:0]  _dcache_io_cpu_resp_bits_mask;
  wire        _dcache_io_cpu_resp_bits_replay;
  wire        _dcache_io_cpu_resp_bits_has_data;
  wire [63:0] _dcache_io_cpu_resp_bits_data_word_bypass;
  wire [63:0] _dcache_io_cpu_resp_bits_data_raw;
  wire [63:0] _dcache_io_cpu_resp_bits_store_data;
  wire        _dcache_io_cpu_replay_next;
  wire        _dcache_io_cpu_s2_xcpt_ma_ld;
  wire        _dcache_io_cpu_s2_xcpt_ma_st;
  wire        _dcache_io_cpu_s2_xcpt_pf_ld;
  wire        _dcache_io_cpu_s2_xcpt_pf_st;
  wire        _dcache_io_cpu_s2_xcpt_gf_ld;
  wire        _dcache_io_cpu_s2_xcpt_gf_st;
  wire        _dcache_io_cpu_s2_xcpt_ae_ld;
  wire        _dcache_io_cpu_s2_xcpt_ae_st;
  wire        _dcache_io_cpu_ordered;
  wire        _dcache_io_cpu_perf_release;
  wire        _dcache_io_cpu_perf_grant;
  wire        _dcache_io_ptw_req_valid;
  wire [26:0] _dcache_io_ptw_req_bits_bits_addr;
  wire        _dcache_io_ptw_req_bits_bits_need_gpa;
  wire        _dcache_io_ptw_req_bits_bits_vstage1;
  wire        _dcache_io_ptw_req_bits_bits_stage2;
  wire        _intXbar_auto_int_out_0;
  wire        _intXbar_auto_int_out_1;
  wire        _intXbar_auto_int_out_2;
  wire        _intXbar_auto_int_out_3;
  wire        _intXbar_auto_int_out_4;
  wire        _tlMasterXbar_auto_in_1_a_ready;
  wire        _tlMasterXbar_auto_in_1_d_valid;
  wire [2:0]  _tlMasterXbar_auto_in_1_d_bits_opcode;
  wire [3:0]  _tlMasterXbar_auto_in_1_d_bits_size;
  wire [63:0] _tlMasterXbar_auto_in_1_d_bits_data;
  wire        _tlMasterXbar_auto_in_1_d_bits_corrupt;
  wire        _tlMasterXbar_auto_in_0_a_ready;
  wire        _tlMasterXbar_auto_in_0_b_valid;
  wire [1:0]  _tlMasterXbar_auto_in_0_b_bits_param;
  wire [3:0]  _tlMasterXbar_auto_in_0_b_bits_size;
  wire        _tlMasterXbar_auto_in_0_b_bits_source;
  wire [31:0] _tlMasterXbar_auto_in_0_b_bits_address;
  wire        _tlMasterXbar_auto_in_0_c_ready;
  wire        _tlMasterXbar_auto_in_0_d_valid;
  wire [2:0]  _tlMasterXbar_auto_in_0_d_bits_opcode;
  wire [1:0]  _tlMasterXbar_auto_in_0_d_bits_param;
  wire [3:0]  _tlMasterXbar_auto_in_0_d_bits_size;
  wire        _tlMasterXbar_auto_in_0_d_bits_source;
  wire [1:0]  _tlMasterXbar_auto_in_0_d_bits_sink;
  wire        _tlMasterXbar_auto_in_0_d_bits_denied;
  wire [63:0] _tlMasterXbar_auto_in_0_d_bits_data;
  wire        _tlMasterXbar_auto_in_0_e_ready;
  reg         wfiNodeOut_0_REG;
  always @(posedge clock) begin
    if (reset)
      wfiNodeOut_0_REG <= 1'h0;
    else
      wfiNodeOut_0_REG <= _core_io_wfi;
  end // always @(posedge)
  TLXbar_8 tlMasterXbar (
    .clock                    (clock),
    .reset                    (reset),
    .auto_in_1_a_valid        (_frontend_auto_icache_master_out_a_valid),
    .auto_in_1_a_bits_address (_frontend_auto_icache_master_out_a_bits_address),
    .auto_in_0_a_valid        (_dcache_auto_out_a_valid),
    .auto_in_0_a_bits_opcode  (_dcache_auto_out_a_bits_opcode),
    .auto_in_0_a_bits_param   (_dcache_auto_out_a_bits_param),
    .auto_in_0_a_bits_size    (_dcache_auto_out_a_bits_size),
    .auto_in_0_a_bits_source  (_dcache_auto_out_a_bits_source),
    .auto_in_0_a_bits_address (_dcache_auto_out_a_bits_address),
    .auto_in_0_a_bits_mask    (_dcache_auto_out_a_bits_mask),
    .auto_in_0_a_bits_data    (_dcache_auto_out_a_bits_data),
    .auto_in_0_b_ready        (_dcache_auto_out_b_ready),
    .auto_in_0_c_valid        (_dcache_auto_out_c_valid),
    .auto_in_0_c_bits_opcode  (_dcache_auto_out_c_bits_opcode),
    .auto_in_0_c_bits_param   (_dcache_auto_out_c_bits_param),
    .auto_in_0_c_bits_size    (_dcache_auto_out_c_bits_size),
    .auto_in_0_c_bits_source  (_dcache_auto_out_c_bits_source),
    .auto_in_0_c_bits_address (_dcache_auto_out_c_bits_address),
    .auto_in_0_c_bits_data    (_dcache_auto_out_c_bits_data),
    .auto_in_0_d_ready        (_dcache_auto_out_d_ready),
    .auto_in_0_e_valid        (_dcache_auto_out_e_valid),
    .auto_in_0_e_bits_sink    (_dcache_auto_out_e_bits_sink),
    .auto_out_a_ready         (auto_buffer_out_a_ready),
    .auto_out_b_valid         (auto_buffer_out_b_valid),
    .auto_out_b_bits_param    (auto_buffer_out_b_bits_param),
    .auto_out_b_bits_size     (auto_buffer_out_b_bits_size),
    .auto_out_b_bits_source   (auto_buffer_out_b_bits_source),
    .auto_out_b_bits_address  (auto_buffer_out_b_bits_address),
    .auto_out_c_ready         (auto_buffer_out_c_ready),
    .auto_out_d_valid         (auto_buffer_out_d_valid),
    .auto_out_d_bits_opcode   (auto_buffer_out_d_bits_opcode),
    .auto_out_d_bits_param    (auto_buffer_out_d_bits_param),
    .auto_out_d_bits_size     (auto_buffer_out_d_bits_size),
    .auto_out_d_bits_source   (auto_buffer_out_d_bits_source),
    .auto_out_d_bits_sink     (auto_buffer_out_d_bits_sink),
    .auto_out_d_bits_denied   (auto_buffer_out_d_bits_denied),
    .auto_out_d_bits_data     (auto_buffer_out_d_bits_data),
    .auto_out_d_bits_corrupt  (auto_buffer_out_d_bits_corrupt),
    .auto_out_e_ready         (auto_buffer_out_e_ready),
    .auto_in_1_a_ready        (_tlMasterXbar_auto_in_1_a_ready),
    .auto_in_1_d_valid        (_tlMasterXbar_auto_in_1_d_valid),
    .auto_in_1_d_bits_opcode  (_tlMasterXbar_auto_in_1_d_bits_opcode),
    .auto_in_1_d_bits_size    (_tlMasterXbar_auto_in_1_d_bits_size),
    .auto_in_1_d_bits_data    (_tlMasterXbar_auto_in_1_d_bits_data),
    .auto_in_1_d_bits_corrupt (_tlMasterXbar_auto_in_1_d_bits_corrupt),
    .auto_in_0_a_ready        (_tlMasterXbar_auto_in_0_a_ready),
    .auto_in_0_b_valid        (_tlMasterXbar_auto_in_0_b_valid),
    .auto_in_0_b_bits_param   (_tlMasterXbar_auto_in_0_b_bits_param),
    .auto_in_0_b_bits_size    (_tlMasterXbar_auto_in_0_b_bits_size),
    .auto_in_0_b_bits_source  (_tlMasterXbar_auto_in_0_b_bits_source),
    .auto_in_0_b_bits_address (_tlMasterXbar_auto_in_0_b_bits_address),
    .auto_in_0_c_ready        (_tlMasterXbar_auto_in_0_c_ready),
    .auto_in_0_d_valid        (_tlMasterXbar_auto_in_0_d_valid),
    .auto_in_0_d_bits_opcode  (_tlMasterXbar_auto_in_0_d_bits_opcode),
    .auto_in_0_d_bits_param   (_tlMasterXbar_auto_in_0_d_bits_param),
    .auto_in_0_d_bits_size    (_tlMasterXbar_auto_in_0_d_bits_size),
    .auto_in_0_d_bits_source  (_tlMasterXbar_auto_in_0_d_bits_source),
    .auto_in_0_d_bits_sink    (_tlMasterXbar_auto_in_0_d_bits_sink),
    .auto_in_0_d_bits_denied  (_tlMasterXbar_auto_in_0_d_bits_denied),
    .auto_in_0_d_bits_data    (_tlMasterXbar_auto_in_0_d_bits_data),
    .auto_in_0_e_ready        (_tlMasterXbar_auto_in_0_e_ready),
    .auto_out_a_valid         (auto_buffer_out_a_valid),
    .auto_out_a_bits_opcode   (auto_buffer_out_a_bits_opcode),
    .auto_out_a_bits_param    (auto_buffer_out_a_bits_param),
    .auto_out_a_bits_size     (auto_buffer_out_a_bits_size),
    .auto_out_a_bits_source   (auto_buffer_out_a_bits_source),
    .auto_out_a_bits_address  (auto_buffer_out_a_bits_address),
    .auto_out_a_bits_mask     (auto_buffer_out_a_bits_mask),
    .auto_out_a_bits_data     (auto_buffer_out_a_bits_data),
    .auto_out_b_ready         (auto_buffer_out_b_ready),
    .auto_out_c_valid         (auto_buffer_out_c_valid),
    .auto_out_c_bits_opcode   (auto_buffer_out_c_bits_opcode),
    .auto_out_c_bits_param    (auto_buffer_out_c_bits_param),
    .auto_out_c_bits_size     (auto_buffer_out_c_bits_size),
    .auto_out_c_bits_source   (auto_buffer_out_c_bits_source),
    .auto_out_c_bits_address  (auto_buffer_out_c_bits_address),
    .auto_out_c_bits_data     (auto_buffer_out_c_bits_data),
    .auto_out_d_ready         (auto_buffer_out_d_ready),
    .auto_out_e_valid         (auto_buffer_out_e_valid),
    .auto_out_e_bits_sink     (auto_buffer_out_e_bits_sink)
  );
  IntXbar_1 intXbar (
    .auto_int_in_3_0 (auto_int_local_in_3_0),
    .auto_int_in_2_0 (auto_int_local_in_2_0),
    .auto_int_in_1_0 (auto_int_local_in_1_0),
    .auto_int_in_1_1 (auto_int_local_in_1_1),
    .auto_int_in_0_0 (auto_int_local_in_0_0),
    .auto_int_out_0  (_intXbar_auto_int_out_0),
    .auto_int_out_1  (_intXbar_auto_int_out_1),
    .auto_int_out_2  (_intXbar_auto_int_out_2),
    .auto_int_out_3  (_intXbar_auto_int_out_3),
    .auto_int_out_4  (_intXbar_auto_int_out_4)
  );
  DCache dcache (
    .clock                             (clock),
    .reset                             (reset),
    .auto_out_a_ready                  (_tlMasterXbar_auto_in_0_a_ready),
    .auto_out_b_valid                  (_tlMasterXbar_auto_in_0_b_valid),
    .auto_out_b_bits_param             (_tlMasterXbar_auto_in_0_b_bits_param),
    .auto_out_b_bits_size              (_tlMasterXbar_auto_in_0_b_bits_size),
    .auto_out_b_bits_source            (_tlMasterXbar_auto_in_0_b_bits_source),
    .auto_out_b_bits_address           (_tlMasterXbar_auto_in_0_b_bits_address),
    .auto_out_c_ready                  (_tlMasterXbar_auto_in_0_c_ready),
    .auto_out_d_valid                  (_tlMasterXbar_auto_in_0_d_valid),
    .auto_out_d_bits_opcode            (_tlMasterXbar_auto_in_0_d_bits_opcode),
    .auto_out_d_bits_param             (_tlMasterXbar_auto_in_0_d_bits_param),
    .auto_out_d_bits_size              (_tlMasterXbar_auto_in_0_d_bits_size),
    .auto_out_d_bits_source            (_tlMasterXbar_auto_in_0_d_bits_source),
    .auto_out_d_bits_sink              (_tlMasterXbar_auto_in_0_d_bits_sink),
    .auto_out_d_bits_denied            (_tlMasterXbar_auto_in_0_d_bits_denied),
    .auto_out_d_bits_data              (_tlMasterXbar_auto_in_0_d_bits_data),
    .auto_out_e_ready                  (_tlMasterXbar_auto_in_0_e_ready),
    .io_cpu_req_valid                  (_dcacheArb_io_mem_req_valid),
    .io_cpu_req_bits_addr              (_dcacheArb_io_mem_req_bits_addr),
    .io_cpu_req_bits_tag               (_dcacheArb_io_mem_req_bits_tag),
    .io_cpu_req_bits_cmd               (_dcacheArb_io_mem_req_bits_cmd),
    .io_cpu_req_bits_size              (_dcacheArb_io_mem_req_bits_size),
    .io_cpu_req_bits_signed            (_dcacheArb_io_mem_req_bits_signed),
    .io_cpu_req_bits_dprv              (_dcacheArb_io_mem_req_bits_dprv),
    .io_cpu_req_bits_dv                (_dcacheArb_io_mem_req_bits_dv),
    .io_cpu_req_bits_phys              (_dcacheArb_io_mem_req_bits_phys),
    .io_cpu_s1_kill                    (_dcacheArb_io_mem_s1_kill),
    .io_cpu_s1_data_data               (_dcacheArb_io_mem_s1_data_data),
    .io_cpu_s1_data_mask               (8'h0),
    .io_ptw_req_ready                  (_ptw_io_requestor_0_req_ready),
    .io_ptw_resp_valid                 (_ptw_io_requestor_0_resp_valid),
    .io_ptw_resp_bits_ae_ptw           (_ptw_io_requestor_0_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final         (_ptw_io_requestor_0_resp_bits_ae_final),
    .io_ptw_resp_bits_pf               (_ptw_io_requestor_0_resp_bits_pf),
    .io_ptw_resp_bits_gf               (_ptw_io_requestor_0_resp_bits_gf),
    .io_ptw_resp_bits_hr               (_ptw_io_requestor_0_resp_bits_hr),
    .io_ptw_resp_bits_hw               (_ptw_io_requestor_0_resp_bits_hw),
    .io_ptw_resp_bits_hx               (_ptw_io_requestor_0_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn          (_ptw_io_requestor_0_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d            (_ptw_io_requestor_0_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a            (_ptw_io_requestor_0_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g            (_ptw_io_requestor_0_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u            (_ptw_io_requestor_0_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x            (_ptw_io_requestor_0_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w            (_ptw_io_requestor_0_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r            (_ptw_io_requestor_0_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v            (_ptw_io_requestor_0_resp_bits_pte_v),
    .io_ptw_resp_bits_level            (_ptw_io_requestor_0_resp_bits_level),
    .io_ptw_resp_bits_homogeneous      (_ptw_io_requestor_0_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte       (_ptw_io_requestor_0_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode                  (_ptw_io_requestor_0_ptbr_mode),
    .io_ptw_status_debug               (_ptw_io_requestor_0_status_debug),
    .io_ptw_status_mxr                 (_ptw_io_requestor_0_status_mxr),
    .io_ptw_status_sum                 (_ptw_io_requestor_0_status_sum),
    .io_ptw_pmp_0_cfg_l                (_ptw_io_requestor_0_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                (_ptw_io_requestor_0_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                (_ptw_io_requestor_0_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                (_ptw_io_requestor_0_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                (_ptw_io_requestor_0_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                 (_ptw_io_requestor_0_pmp_0_addr),
    .io_ptw_pmp_0_mask                 (_ptw_io_requestor_0_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                (_ptw_io_requestor_0_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                (_ptw_io_requestor_0_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                (_ptw_io_requestor_0_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                (_ptw_io_requestor_0_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                (_ptw_io_requestor_0_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                 (_ptw_io_requestor_0_pmp_1_addr),
    .io_ptw_pmp_1_mask                 (_ptw_io_requestor_0_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                (_ptw_io_requestor_0_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                (_ptw_io_requestor_0_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                (_ptw_io_requestor_0_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                (_ptw_io_requestor_0_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                (_ptw_io_requestor_0_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                 (_ptw_io_requestor_0_pmp_2_addr),
    .io_ptw_pmp_2_mask                 (_ptw_io_requestor_0_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                (_ptw_io_requestor_0_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                (_ptw_io_requestor_0_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                (_ptw_io_requestor_0_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                (_ptw_io_requestor_0_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                (_ptw_io_requestor_0_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                 (_ptw_io_requestor_0_pmp_3_addr),
    .io_ptw_pmp_3_mask                 (_ptw_io_requestor_0_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                (_ptw_io_requestor_0_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                (_ptw_io_requestor_0_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                (_ptw_io_requestor_0_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                (_ptw_io_requestor_0_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                (_ptw_io_requestor_0_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                 (_ptw_io_requestor_0_pmp_4_addr),
    .io_ptw_pmp_4_mask                 (_ptw_io_requestor_0_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                (_ptw_io_requestor_0_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                (_ptw_io_requestor_0_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                (_ptw_io_requestor_0_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                (_ptw_io_requestor_0_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                (_ptw_io_requestor_0_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                 (_ptw_io_requestor_0_pmp_5_addr),
    .io_ptw_pmp_5_mask                 (_ptw_io_requestor_0_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                (_ptw_io_requestor_0_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                (_ptw_io_requestor_0_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                (_ptw_io_requestor_0_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                (_ptw_io_requestor_0_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                (_ptw_io_requestor_0_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                 (_ptw_io_requestor_0_pmp_6_addr),
    .io_ptw_pmp_6_mask                 (_ptw_io_requestor_0_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                (_ptw_io_requestor_0_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                (_ptw_io_requestor_0_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                (_ptw_io_requestor_0_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                (_ptw_io_requestor_0_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                (_ptw_io_requestor_0_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                 (_ptw_io_requestor_0_pmp_7_addr),
    .io_ptw_pmp_7_mask                 (_ptw_io_requestor_0_pmp_7_mask),
    .auto_out_a_valid                  (_dcache_auto_out_a_valid),
    .auto_out_a_bits_opcode            (_dcache_auto_out_a_bits_opcode),
    .auto_out_a_bits_param             (_dcache_auto_out_a_bits_param),
    .auto_out_a_bits_size              (_dcache_auto_out_a_bits_size),
    .auto_out_a_bits_source            (_dcache_auto_out_a_bits_source),
    .auto_out_a_bits_address           (_dcache_auto_out_a_bits_address),
    .auto_out_a_bits_mask              (_dcache_auto_out_a_bits_mask),
    .auto_out_a_bits_data              (_dcache_auto_out_a_bits_data),
    .auto_out_b_ready                  (_dcache_auto_out_b_ready),
    .auto_out_c_valid                  (_dcache_auto_out_c_valid),
    .auto_out_c_bits_opcode            (_dcache_auto_out_c_bits_opcode),
    .auto_out_c_bits_param             (_dcache_auto_out_c_bits_param),
    .auto_out_c_bits_size              (_dcache_auto_out_c_bits_size),
    .auto_out_c_bits_source            (_dcache_auto_out_c_bits_source),
    .auto_out_c_bits_address           (_dcache_auto_out_c_bits_address),
    .auto_out_c_bits_data              (_dcache_auto_out_c_bits_data),
    .auto_out_d_ready                  (_dcache_auto_out_d_ready),
    .auto_out_e_valid                  (_dcache_auto_out_e_valid),
    .auto_out_e_bits_sink              (_dcache_auto_out_e_bits_sink),
    .io_cpu_req_ready                  (_dcache_io_cpu_req_ready),
    .io_cpu_s2_nack                    (_dcache_io_cpu_s2_nack),
    .io_cpu_resp_valid                 (_dcache_io_cpu_resp_valid),
    .io_cpu_resp_bits_addr             (_dcache_io_cpu_resp_bits_addr),
    .io_cpu_resp_bits_tag              (_dcache_io_cpu_resp_bits_tag),
    .io_cpu_resp_bits_cmd              (_dcache_io_cpu_resp_bits_cmd),
    .io_cpu_resp_bits_size             (_dcache_io_cpu_resp_bits_size),
    .io_cpu_resp_bits_signed           (_dcache_io_cpu_resp_bits_signed),
    .io_cpu_resp_bits_dprv             (_dcache_io_cpu_resp_bits_dprv),
    .io_cpu_resp_bits_dv               (_dcache_io_cpu_resp_bits_dv),
    .io_cpu_resp_bits_data             (_dcache_io_cpu_resp_bits_data),
    .io_cpu_resp_bits_mask             (_dcache_io_cpu_resp_bits_mask),
    .io_cpu_resp_bits_replay           (_dcache_io_cpu_resp_bits_replay),
    .io_cpu_resp_bits_has_data         (_dcache_io_cpu_resp_bits_has_data),
    .io_cpu_resp_bits_data_word_bypass (_dcache_io_cpu_resp_bits_data_word_bypass),
    .io_cpu_resp_bits_data_raw         (_dcache_io_cpu_resp_bits_data_raw),
    .io_cpu_resp_bits_store_data       (_dcache_io_cpu_resp_bits_store_data),
    .io_cpu_replay_next                (_dcache_io_cpu_replay_next),
    .io_cpu_s2_xcpt_ma_ld              (_dcache_io_cpu_s2_xcpt_ma_ld),
    .io_cpu_s2_xcpt_ma_st              (_dcache_io_cpu_s2_xcpt_ma_st),
    .io_cpu_s2_xcpt_pf_ld              (_dcache_io_cpu_s2_xcpt_pf_ld),
    .io_cpu_s2_xcpt_pf_st              (_dcache_io_cpu_s2_xcpt_pf_st),
    .io_cpu_s2_xcpt_gf_ld              (_dcache_io_cpu_s2_xcpt_gf_ld),
    .io_cpu_s2_xcpt_gf_st              (_dcache_io_cpu_s2_xcpt_gf_st),
    .io_cpu_s2_xcpt_ae_ld              (_dcache_io_cpu_s2_xcpt_ae_ld),
    .io_cpu_s2_xcpt_ae_st              (_dcache_io_cpu_s2_xcpt_ae_st),
    .io_cpu_ordered                    (_dcache_io_cpu_ordered),
    .io_cpu_perf_release               (_dcache_io_cpu_perf_release),
    .io_cpu_perf_grant                 (_dcache_io_cpu_perf_grant),
    .io_ptw_req_valid                  (_dcache_io_ptw_req_valid),
    .io_ptw_req_bits_bits_addr         (_dcache_io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa     (_dcache_io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1      (_dcache_io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2       (_dcache_io_ptw_req_bits_bits_stage2)
  );
  Frontend frontend (
    .clock                                 (clock),
    .reset                                 (reset),
    .auto_icache_master_out_a_ready        (_tlMasterXbar_auto_in_1_a_ready),
    .auto_icache_master_out_d_valid        (_tlMasterXbar_auto_in_1_d_valid),
    .auto_icache_master_out_d_bits_opcode  (_tlMasterXbar_auto_in_1_d_bits_opcode),
    .auto_icache_master_out_d_bits_size    (_tlMasterXbar_auto_in_1_d_bits_size),
    .auto_icache_master_out_d_bits_data    (_tlMasterXbar_auto_in_1_d_bits_data),
    .auto_icache_master_out_d_bits_corrupt (_tlMasterXbar_auto_in_1_d_bits_corrupt),
    .io_cpu_might_request                  (_core_io_imem_might_request),
    .io_cpu_req_valid                      (_core_io_imem_req_valid),
    .io_cpu_req_bits_pc                    (_core_io_imem_req_bits_pc),
    .io_cpu_req_bits_speculative           (_core_io_imem_req_bits_speculative),
    .io_cpu_sfence_valid                   (_core_io_imem_sfence_valid),
    .io_cpu_sfence_bits_rs1                (_core_io_imem_sfence_bits_rs1),
    .io_cpu_sfence_bits_rs2                (_core_io_imem_sfence_bits_rs2),
    .io_cpu_sfence_bits_addr               (_core_io_imem_sfence_bits_addr),
    .io_cpu_resp_ready                     (_core_io_imem_resp_ready),
    .io_cpu_btb_update_valid               (_core_io_imem_btb_update_valid),
    .io_cpu_bht_update_valid               (_core_io_imem_bht_update_valid),
    .io_cpu_flush_icache                   (_core_io_imem_flush_icache),
    .io_cpu_progress                       (_core_io_imem_progress),
    .io_ptw_req_ready                      (_ptw_io_requestor_1_req_ready),
    .io_ptw_resp_valid                     (_ptw_io_requestor_1_resp_valid),
    .io_ptw_resp_bits_ae_ptw               (_ptw_io_requestor_1_resp_bits_ae_ptw),
    .io_ptw_resp_bits_ae_final             (_ptw_io_requestor_1_resp_bits_ae_final),
    .io_ptw_resp_bits_pf                   (_ptw_io_requestor_1_resp_bits_pf),
    .io_ptw_resp_bits_gf                   (_ptw_io_requestor_1_resp_bits_gf),
    .io_ptw_resp_bits_hr                   (_ptw_io_requestor_1_resp_bits_hr),
    .io_ptw_resp_bits_hw                   (_ptw_io_requestor_1_resp_bits_hw),
    .io_ptw_resp_bits_hx                   (_ptw_io_requestor_1_resp_bits_hx),
    .io_ptw_resp_bits_pte_ppn              (_ptw_io_requestor_1_resp_bits_pte_ppn),
    .io_ptw_resp_bits_pte_d                (_ptw_io_requestor_1_resp_bits_pte_d),
    .io_ptw_resp_bits_pte_a                (_ptw_io_requestor_1_resp_bits_pte_a),
    .io_ptw_resp_bits_pte_g                (_ptw_io_requestor_1_resp_bits_pte_g),
    .io_ptw_resp_bits_pte_u                (_ptw_io_requestor_1_resp_bits_pte_u),
    .io_ptw_resp_bits_pte_x                (_ptw_io_requestor_1_resp_bits_pte_x),
    .io_ptw_resp_bits_pte_w                (_ptw_io_requestor_1_resp_bits_pte_w),
    .io_ptw_resp_bits_pte_r                (_ptw_io_requestor_1_resp_bits_pte_r),
    .io_ptw_resp_bits_pte_v                (_ptw_io_requestor_1_resp_bits_pte_v),
    .io_ptw_resp_bits_level                (_ptw_io_requestor_1_resp_bits_level),
    .io_ptw_resp_bits_homogeneous          (_ptw_io_requestor_1_resp_bits_homogeneous),
    .io_ptw_resp_bits_gpa_is_pte           (_ptw_io_requestor_1_resp_bits_gpa_is_pte),
    .io_ptw_ptbr_mode                      (_ptw_io_requestor_1_ptbr_mode),
    .io_ptw_status_debug                   (_ptw_io_requestor_1_status_debug),
    .io_ptw_status_prv                     (_ptw_io_requestor_1_status_prv),
    .io_ptw_pmp_0_cfg_l                    (_ptw_io_requestor_1_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                    (_ptw_io_requestor_1_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                    (_ptw_io_requestor_1_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                    (_ptw_io_requestor_1_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                    (_ptw_io_requestor_1_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                     (_ptw_io_requestor_1_pmp_0_addr),
    .io_ptw_pmp_0_mask                     (_ptw_io_requestor_1_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                    (_ptw_io_requestor_1_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                    (_ptw_io_requestor_1_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                    (_ptw_io_requestor_1_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                    (_ptw_io_requestor_1_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                    (_ptw_io_requestor_1_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                     (_ptw_io_requestor_1_pmp_1_addr),
    .io_ptw_pmp_1_mask                     (_ptw_io_requestor_1_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                    (_ptw_io_requestor_1_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                    (_ptw_io_requestor_1_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                    (_ptw_io_requestor_1_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                    (_ptw_io_requestor_1_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                    (_ptw_io_requestor_1_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                     (_ptw_io_requestor_1_pmp_2_addr),
    .io_ptw_pmp_2_mask                     (_ptw_io_requestor_1_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                    (_ptw_io_requestor_1_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                    (_ptw_io_requestor_1_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                    (_ptw_io_requestor_1_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                    (_ptw_io_requestor_1_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                    (_ptw_io_requestor_1_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                     (_ptw_io_requestor_1_pmp_3_addr),
    .io_ptw_pmp_3_mask                     (_ptw_io_requestor_1_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                    (_ptw_io_requestor_1_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                    (_ptw_io_requestor_1_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                    (_ptw_io_requestor_1_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                    (_ptw_io_requestor_1_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                    (_ptw_io_requestor_1_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                     (_ptw_io_requestor_1_pmp_4_addr),
    .io_ptw_pmp_4_mask                     (_ptw_io_requestor_1_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                    (_ptw_io_requestor_1_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                    (_ptw_io_requestor_1_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                    (_ptw_io_requestor_1_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                    (_ptw_io_requestor_1_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                    (_ptw_io_requestor_1_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                     (_ptw_io_requestor_1_pmp_5_addr),
    .io_ptw_pmp_5_mask                     (_ptw_io_requestor_1_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                    (_ptw_io_requestor_1_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                    (_ptw_io_requestor_1_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                    (_ptw_io_requestor_1_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                    (_ptw_io_requestor_1_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                    (_ptw_io_requestor_1_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                     (_ptw_io_requestor_1_pmp_6_addr),
    .io_ptw_pmp_6_mask                     (_ptw_io_requestor_1_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                    (_ptw_io_requestor_1_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                    (_ptw_io_requestor_1_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                    (_ptw_io_requestor_1_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                    (_ptw_io_requestor_1_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                    (_ptw_io_requestor_1_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                     (_ptw_io_requestor_1_pmp_7_addr),
    .io_ptw_pmp_7_mask                     (_ptw_io_requestor_1_pmp_7_mask),
    .io_ptw_customCSRs_csrs_0_value        (_ptw_io_requestor_1_customCSRs_csrs_0_value),
    .auto_icache_master_out_a_valid        (_frontend_auto_icache_master_out_a_valid),
    .auto_icache_master_out_a_bits_address
      (_frontend_auto_icache_master_out_a_bits_address),
    .io_cpu_resp_valid                     (_frontend_io_cpu_resp_valid),
    .io_cpu_resp_bits_btb_taken            (_frontend_io_cpu_resp_bits_btb_taken),
    .io_cpu_resp_bits_btb_bridx            (_frontend_io_cpu_resp_bits_btb_bridx),
    .io_cpu_resp_bits_pc                   (_frontend_io_cpu_resp_bits_pc),
    .io_cpu_resp_bits_data                 (_frontend_io_cpu_resp_bits_data),
    .io_cpu_resp_bits_xcpt_pf_inst         (_frontend_io_cpu_resp_bits_xcpt_pf_inst),
    .io_cpu_resp_bits_xcpt_gf_inst         (_frontend_io_cpu_resp_bits_xcpt_gf_inst),
    .io_cpu_resp_bits_xcpt_ae_inst         (_frontend_io_cpu_resp_bits_xcpt_ae_inst),
    .io_cpu_resp_bits_replay               (_frontend_io_cpu_resp_bits_replay),
    .io_cpu_gpa_valid                      (_frontend_io_cpu_gpa_valid),
    .io_ptw_req_valid                      (_frontend_io_ptw_req_valid),
    .io_ptw_req_bits_valid                 (_frontend_io_ptw_req_bits_valid),
    .io_ptw_req_bits_bits_addr             (_frontend_io_ptw_req_bits_bits_addr),
    .io_ptw_req_bits_bits_need_gpa         (_frontend_io_ptw_req_bits_bits_need_gpa),
    .io_ptw_req_bits_bits_vstage1          (_frontend_io_ptw_req_bits_bits_vstage1),
    .io_ptw_req_bits_bits_stage2           (_frontend_io_ptw_req_bits_bits_stage2)
  );
  HellaCacheArbiter dcacheArb (
    .clock                                     (clock),
    .io_requestor_0_req_valid                  (_ptw_io_mem_req_valid),
    .io_requestor_0_req_bits_addr              (_ptw_io_mem_req_bits_addr),
    .io_requestor_0_req_bits_dv                (_ptw_io_mem_req_bits_dv),
    .io_requestor_0_s1_kill                    (_ptw_io_mem_s1_kill),
    .io_requestor_1_req_valid                  (_core_io_dmem_req_valid),
    .io_requestor_1_req_bits_addr              (_core_io_dmem_req_bits_addr),
    .io_requestor_1_req_bits_tag               (_core_io_dmem_req_bits_tag),
    .io_requestor_1_req_bits_cmd               (_core_io_dmem_req_bits_cmd),
    .io_requestor_1_req_bits_size              (_core_io_dmem_req_bits_size),
    .io_requestor_1_req_bits_signed            (_core_io_dmem_req_bits_signed),
    .io_requestor_1_req_bits_dprv              (_core_io_dmem_req_bits_dprv),
    .io_requestor_1_req_bits_dv                (_core_io_dmem_req_bits_dv),
    .io_requestor_1_s1_kill                    (_core_io_dmem_s1_kill),
    .io_requestor_1_s1_data_data               (_core_io_dmem_s1_data_data),
    .io_mem_req_ready                          (_dcache_io_cpu_req_ready),
    .io_mem_s2_nack                            (_dcache_io_cpu_s2_nack),
    .io_mem_resp_valid                         (_dcache_io_cpu_resp_valid),
    .io_mem_resp_bits_tag                      (_dcache_io_cpu_resp_bits_tag),
    .io_mem_resp_bits_data                     (_dcache_io_cpu_resp_bits_data),
    .io_mem_resp_bits_replay                   (_dcache_io_cpu_resp_bits_replay),
    .io_mem_resp_bits_has_data                 (_dcache_io_cpu_resp_bits_has_data),
    .io_mem_resp_bits_data_word_bypass
      (_dcache_io_cpu_resp_bits_data_word_bypass),
    .io_mem_replay_next                        (_dcache_io_cpu_replay_next),
    .io_mem_s2_xcpt_ma_ld                      (_dcache_io_cpu_s2_xcpt_ma_ld),
    .io_mem_s2_xcpt_ma_st                      (_dcache_io_cpu_s2_xcpt_ma_st),
    .io_mem_s2_xcpt_pf_ld                      (_dcache_io_cpu_s2_xcpt_pf_ld),
    .io_mem_s2_xcpt_pf_st                      (_dcache_io_cpu_s2_xcpt_pf_st),
    .io_mem_s2_xcpt_gf_ld                      (_dcache_io_cpu_s2_xcpt_gf_ld),
    .io_mem_s2_xcpt_gf_st                      (_dcache_io_cpu_s2_xcpt_gf_st),
    .io_mem_s2_xcpt_ae_ld                      (_dcache_io_cpu_s2_xcpt_ae_ld),
    .io_mem_s2_xcpt_ae_st                      (_dcache_io_cpu_s2_xcpt_ae_st),
    .io_mem_ordered                            (_dcache_io_cpu_ordered),
    .io_mem_perf_release                       (_dcache_io_cpu_perf_release),
    .io_mem_perf_grant                         (_dcache_io_cpu_perf_grant),
    .io_requestor_0_req_ready                  (_dcacheArb_io_requestor_0_req_ready),
    .io_requestor_0_s2_nack                    (_dcacheArb_io_requestor_0_s2_nack),
    .io_requestor_0_resp_valid                 (_dcacheArb_io_requestor_0_resp_valid),
    .io_requestor_0_resp_bits_data             (_dcacheArb_io_requestor_0_resp_bits_data),
    .io_requestor_0_s2_xcpt_ae_ld              (_dcacheArb_io_requestor_0_s2_xcpt_ae_ld),
    .io_requestor_1_req_ready                  (_dcacheArb_io_requestor_1_req_ready),
    .io_requestor_1_s2_nack                    (_dcacheArb_io_requestor_1_s2_nack),
    .io_requestor_1_resp_valid                 (_dcacheArb_io_requestor_1_resp_valid),
    .io_requestor_1_resp_bits_tag              (_dcacheArb_io_requestor_1_resp_bits_tag),
    .io_requestor_1_resp_bits_data             (_dcacheArb_io_requestor_1_resp_bits_data),
    .io_requestor_1_resp_bits_replay
      (_dcacheArb_io_requestor_1_resp_bits_replay),
    .io_requestor_1_resp_bits_has_data
      (_dcacheArb_io_requestor_1_resp_bits_has_data),
    .io_requestor_1_resp_bits_data_word_bypass
      (_dcacheArb_io_requestor_1_resp_bits_data_word_bypass),
    .io_requestor_1_replay_next                (_dcacheArb_io_requestor_1_replay_next),
    .io_requestor_1_s2_xcpt_ma_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ma_ld),
    .io_requestor_1_s2_xcpt_ma_st              (_dcacheArb_io_requestor_1_s2_xcpt_ma_st),
    .io_requestor_1_s2_xcpt_pf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_pf_ld),
    .io_requestor_1_s2_xcpt_pf_st              (_dcacheArb_io_requestor_1_s2_xcpt_pf_st),
    .io_requestor_1_s2_xcpt_gf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_gf_ld),
    .io_requestor_1_s2_xcpt_gf_st              (_dcacheArb_io_requestor_1_s2_xcpt_gf_st),
    .io_requestor_1_s2_xcpt_ae_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ae_ld),
    .io_requestor_1_s2_xcpt_ae_st              (_dcacheArb_io_requestor_1_s2_xcpt_ae_st),
    .io_requestor_1_ordered                    (_dcacheArb_io_requestor_1_ordered),
    .io_requestor_1_perf_release               (_dcacheArb_io_requestor_1_perf_release),
    .io_requestor_1_perf_grant                 (_dcacheArb_io_requestor_1_perf_grant),
    .io_mem_req_valid                          (_dcacheArb_io_mem_req_valid),
    .io_mem_req_bits_addr                      (_dcacheArb_io_mem_req_bits_addr),
    .io_mem_req_bits_tag                       (_dcacheArb_io_mem_req_bits_tag),
    .io_mem_req_bits_cmd                       (_dcacheArb_io_mem_req_bits_cmd),
    .io_mem_req_bits_size                      (_dcacheArb_io_mem_req_bits_size),
    .io_mem_req_bits_signed                    (_dcacheArb_io_mem_req_bits_signed),
    .io_mem_req_bits_dprv                      (_dcacheArb_io_mem_req_bits_dprv),
    .io_mem_req_bits_dv                        (_dcacheArb_io_mem_req_bits_dv),
    .io_mem_req_bits_phys                      (_dcacheArb_io_mem_req_bits_phys),
    .io_mem_s1_kill                            (_dcacheArb_io_mem_s1_kill),
    .io_mem_s1_data_data                       (_dcacheArb_io_mem_s1_data_data)
  );
  PTW ptw (
    .clock                                  (clock),
    .reset                                  (reset),
    .io_requestor_0_req_valid               (_dcache_io_ptw_req_valid),
    .io_requestor_0_req_bits_valid          (1'h1),
    .io_requestor_0_req_bits_bits_addr      (_dcache_io_ptw_req_bits_bits_addr),
    .io_requestor_0_req_bits_bits_need_gpa  (_dcache_io_ptw_req_bits_bits_need_gpa),
    .io_requestor_0_req_bits_bits_vstage1   (_dcache_io_ptw_req_bits_bits_vstage1),
    .io_requestor_0_req_bits_bits_stage2    (_dcache_io_ptw_req_bits_bits_stage2),
    .io_requestor_1_req_valid               (_frontend_io_ptw_req_valid),
    .io_requestor_1_req_bits_valid          (_frontend_io_ptw_req_bits_valid),
    .io_requestor_1_req_bits_bits_addr      (_frontend_io_ptw_req_bits_bits_addr),
    .io_requestor_1_req_bits_bits_need_gpa  (_frontend_io_ptw_req_bits_bits_need_gpa),
    .io_requestor_1_req_bits_bits_vstage1   (_frontend_io_ptw_req_bits_bits_vstage1),
    .io_requestor_1_req_bits_bits_stage2    (_frontend_io_ptw_req_bits_bits_stage2),
    .io_mem_req_ready                       (_dcacheArb_io_requestor_0_req_ready),
    .io_mem_s2_nack                         (_dcacheArb_io_requestor_0_s2_nack),
    .io_mem_resp_valid                      (_dcacheArb_io_requestor_0_resp_valid),
    .io_mem_resp_bits_data                  (_dcacheArb_io_requestor_0_resp_bits_data),
    .io_mem_s2_xcpt_ae_ld                   (_dcacheArb_io_requestor_0_s2_xcpt_ae_ld),
    .io_dpath_ptbr_mode                     (_core_io_ptw_ptbr_mode),
    .io_dpath_ptbr_ppn                      (_core_io_ptw_ptbr_ppn),
    .io_dpath_sfence_valid                  (_core_io_ptw_sfence_valid),
    .io_dpath_sfence_bits_rs1               (_core_io_ptw_sfence_bits_rs1),
    .io_dpath_status_debug                  (_core_io_ptw_status_debug),
    .io_dpath_status_prv                    (_core_io_ptw_status_prv),
    .io_dpath_status_mxr                    (_core_io_ptw_status_mxr),
    .io_dpath_status_sum                    (_core_io_ptw_status_sum),
    .io_dpath_pmp_0_cfg_l                   (_core_io_ptw_pmp_0_cfg_l),
    .io_dpath_pmp_0_cfg_a                   (_core_io_ptw_pmp_0_cfg_a),
    .io_dpath_pmp_0_cfg_x                   (_core_io_ptw_pmp_0_cfg_x),
    .io_dpath_pmp_0_cfg_w                   (_core_io_ptw_pmp_0_cfg_w),
    .io_dpath_pmp_0_cfg_r                   (_core_io_ptw_pmp_0_cfg_r),
    .io_dpath_pmp_0_addr                    (_core_io_ptw_pmp_0_addr),
    .io_dpath_pmp_0_mask                    (_core_io_ptw_pmp_0_mask),
    .io_dpath_pmp_1_cfg_l                   (_core_io_ptw_pmp_1_cfg_l),
    .io_dpath_pmp_1_cfg_a                   (_core_io_ptw_pmp_1_cfg_a),
    .io_dpath_pmp_1_cfg_x                   (_core_io_ptw_pmp_1_cfg_x),
    .io_dpath_pmp_1_cfg_w                   (_core_io_ptw_pmp_1_cfg_w),
    .io_dpath_pmp_1_cfg_r                   (_core_io_ptw_pmp_1_cfg_r),
    .io_dpath_pmp_1_addr                    (_core_io_ptw_pmp_1_addr),
    .io_dpath_pmp_1_mask                    (_core_io_ptw_pmp_1_mask),
    .io_dpath_pmp_2_cfg_l                   (_core_io_ptw_pmp_2_cfg_l),
    .io_dpath_pmp_2_cfg_a                   (_core_io_ptw_pmp_2_cfg_a),
    .io_dpath_pmp_2_cfg_x                   (_core_io_ptw_pmp_2_cfg_x),
    .io_dpath_pmp_2_cfg_w                   (_core_io_ptw_pmp_2_cfg_w),
    .io_dpath_pmp_2_cfg_r                   (_core_io_ptw_pmp_2_cfg_r),
    .io_dpath_pmp_2_addr                    (_core_io_ptw_pmp_2_addr),
    .io_dpath_pmp_2_mask                    (_core_io_ptw_pmp_2_mask),
    .io_dpath_pmp_3_cfg_l                   (_core_io_ptw_pmp_3_cfg_l),
    .io_dpath_pmp_3_cfg_a                   (_core_io_ptw_pmp_3_cfg_a),
    .io_dpath_pmp_3_cfg_x                   (_core_io_ptw_pmp_3_cfg_x),
    .io_dpath_pmp_3_cfg_w                   (_core_io_ptw_pmp_3_cfg_w),
    .io_dpath_pmp_3_cfg_r                   (_core_io_ptw_pmp_3_cfg_r),
    .io_dpath_pmp_3_addr                    (_core_io_ptw_pmp_3_addr),
    .io_dpath_pmp_3_mask                    (_core_io_ptw_pmp_3_mask),
    .io_dpath_pmp_4_cfg_l                   (_core_io_ptw_pmp_4_cfg_l),
    .io_dpath_pmp_4_cfg_a                   (_core_io_ptw_pmp_4_cfg_a),
    .io_dpath_pmp_4_cfg_x                   (_core_io_ptw_pmp_4_cfg_x),
    .io_dpath_pmp_4_cfg_w                   (_core_io_ptw_pmp_4_cfg_w),
    .io_dpath_pmp_4_cfg_r                   (_core_io_ptw_pmp_4_cfg_r),
    .io_dpath_pmp_4_addr                    (_core_io_ptw_pmp_4_addr),
    .io_dpath_pmp_4_mask                    (_core_io_ptw_pmp_4_mask),
    .io_dpath_pmp_5_cfg_l                   (_core_io_ptw_pmp_5_cfg_l),
    .io_dpath_pmp_5_cfg_a                   (_core_io_ptw_pmp_5_cfg_a),
    .io_dpath_pmp_5_cfg_x                   (_core_io_ptw_pmp_5_cfg_x),
    .io_dpath_pmp_5_cfg_w                   (_core_io_ptw_pmp_5_cfg_w),
    .io_dpath_pmp_5_cfg_r                   (_core_io_ptw_pmp_5_cfg_r),
    .io_dpath_pmp_5_addr                    (_core_io_ptw_pmp_5_addr),
    .io_dpath_pmp_5_mask                    (_core_io_ptw_pmp_5_mask),
    .io_dpath_pmp_6_cfg_l                   (_core_io_ptw_pmp_6_cfg_l),
    .io_dpath_pmp_6_cfg_a                   (_core_io_ptw_pmp_6_cfg_a),
    .io_dpath_pmp_6_cfg_x                   (_core_io_ptw_pmp_6_cfg_x),
    .io_dpath_pmp_6_cfg_w                   (_core_io_ptw_pmp_6_cfg_w),
    .io_dpath_pmp_6_cfg_r                   (_core_io_ptw_pmp_6_cfg_r),
    .io_dpath_pmp_6_addr                    (_core_io_ptw_pmp_6_addr),
    .io_dpath_pmp_6_mask                    (_core_io_ptw_pmp_6_mask),
    .io_dpath_pmp_7_cfg_l                   (_core_io_ptw_pmp_7_cfg_l),
    .io_dpath_pmp_7_cfg_a                   (_core_io_ptw_pmp_7_cfg_a),
    .io_dpath_pmp_7_cfg_x                   (_core_io_ptw_pmp_7_cfg_x),
    .io_dpath_pmp_7_cfg_w                   (_core_io_ptw_pmp_7_cfg_w),
    .io_dpath_pmp_7_cfg_r                   (_core_io_ptw_pmp_7_cfg_r),
    .io_dpath_pmp_7_addr                    (_core_io_ptw_pmp_7_addr),
    .io_dpath_pmp_7_mask                    (_core_io_ptw_pmp_7_mask),
    .io_dpath_customCSRs_csrs_0_value       (_core_io_ptw_customCSRs_csrs_0_value),
    .io_requestor_0_req_ready               (_ptw_io_requestor_0_req_ready),
    .io_requestor_0_resp_valid              (_ptw_io_requestor_0_resp_valid),
    .io_requestor_0_resp_bits_ae_ptw        (_ptw_io_requestor_0_resp_bits_ae_ptw),
    .io_requestor_0_resp_bits_ae_final      (_ptw_io_requestor_0_resp_bits_ae_final),
    .io_requestor_0_resp_bits_pf            (_ptw_io_requestor_0_resp_bits_pf),
    .io_requestor_0_resp_bits_gf            (_ptw_io_requestor_0_resp_bits_gf),
    .io_requestor_0_resp_bits_hr            (_ptw_io_requestor_0_resp_bits_hr),
    .io_requestor_0_resp_bits_hw            (_ptw_io_requestor_0_resp_bits_hw),
    .io_requestor_0_resp_bits_hx            (_ptw_io_requestor_0_resp_bits_hx),
    .io_requestor_0_resp_bits_pte_ppn       (_ptw_io_requestor_0_resp_bits_pte_ppn),
    .io_requestor_0_resp_bits_pte_d         (_ptw_io_requestor_0_resp_bits_pte_d),
    .io_requestor_0_resp_bits_pte_a         (_ptw_io_requestor_0_resp_bits_pte_a),
    .io_requestor_0_resp_bits_pte_g         (_ptw_io_requestor_0_resp_bits_pte_g),
    .io_requestor_0_resp_bits_pte_u         (_ptw_io_requestor_0_resp_bits_pte_u),
    .io_requestor_0_resp_bits_pte_x         (_ptw_io_requestor_0_resp_bits_pte_x),
    .io_requestor_0_resp_bits_pte_w         (_ptw_io_requestor_0_resp_bits_pte_w),
    .io_requestor_0_resp_bits_pte_r         (_ptw_io_requestor_0_resp_bits_pte_r),
    .io_requestor_0_resp_bits_pte_v         (_ptw_io_requestor_0_resp_bits_pte_v),
    .io_requestor_0_resp_bits_level         (_ptw_io_requestor_0_resp_bits_level),
    .io_requestor_0_resp_bits_homogeneous   (_ptw_io_requestor_0_resp_bits_homogeneous),
    .io_requestor_0_resp_bits_gpa_is_pte    (_ptw_io_requestor_0_resp_bits_gpa_is_pte),
    .io_requestor_0_ptbr_mode               (_ptw_io_requestor_0_ptbr_mode),
    .io_requestor_0_status_debug            (_ptw_io_requestor_0_status_debug),
    .io_requestor_0_status_mxr              (_ptw_io_requestor_0_status_mxr),
    .io_requestor_0_status_sum              (_ptw_io_requestor_0_status_sum),
    .io_requestor_0_pmp_0_cfg_l             (_ptw_io_requestor_0_pmp_0_cfg_l),
    .io_requestor_0_pmp_0_cfg_a             (_ptw_io_requestor_0_pmp_0_cfg_a),
    .io_requestor_0_pmp_0_cfg_x             (_ptw_io_requestor_0_pmp_0_cfg_x),
    .io_requestor_0_pmp_0_cfg_w             (_ptw_io_requestor_0_pmp_0_cfg_w),
    .io_requestor_0_pmp_0_cfg_r             (_ptw_io_requestor_0_pmp_0_cfg_r),
    .io_requestor_0_pmp_0_addr              (_ptw_io_requestor_0_pmp_0_addr),
    .io_requestor_0_pmp_0_mask              (_ptw_io_requestor_0_pmp_0_mask),
    .io_requestor_0_pmp_1_cfg_l             (_ptw_io_requestor_0_pmp_1_cfg_l),
    .io_requestor_0_pmp_1_cfg_a             (_ptw_io_requestor_0_pmp_1_cfg_a),
    .io_requestor_0_pmp_1_cfg_x             (_ptw_io_requestor_0_pmp_1_cfg_x),
    .io_requestor_0_pmp_1_cfg_w             (_ptw_io_requestor_0_pmp_1_cfg_w),
    .io_requestor_0_pmp_1_cfg_r             (_ptw_io_requestor_0_pmp_1_cfg_r),
    .io_requestor_0_pmp_1_addr              (_ptw_io_requestor_0_pmp_1_addr),
    .io_requestor_0_pmp_1_mask              (_ptw_io_requestor_0_pmp_1_mask),
    .io_requestor_0_pmp_2_cfg_l             (_ptw_io_requestor_0_pmp_2_cfg_l),
    .io_requestor_0_pmp_2_cfg_a             (_ptw_io_requestor_0_pmp_2_cfg_a),
    .io_requestor_0_pmp_2_cfg_x             (_ptw_io_requestor_0_pmp_2_cfg_x),
    .io_requestor_0_pmp_2_cfg_w             (_ptw_io_requestor_0_pmp_2_cfg_w),
    .io_requestor_0_pmp_2_cfg_r             (_ptw_io_requestor_0_pmp_2_cfg_r),
    .io_requestor_0_pmp_2_addr              (_ptw_io_requestor_0_pmp_2_addr),
    .io_requestor_0_pmp_2_mask              (_ptw_io_requestor_0_pmp_2_mask),
    .io_requestor_0_pmp_3_cfg_l             (_ptw_io_requestor_0_pmp_3_cfg_l),
    .io_requestor_0_pmp_3_cfg_a             (_ptw_io_requestor_0_pmp_3_cfg_a),
    .io_requestor_0_pmp_3_cfg_x             (_ptw_io_requestor_0_pmp_3_cfg_x),
    .io_requestor_0_pmp_3_cfg_w             (_ptw_io_requestor_0_pmp_3_cfg_w),
    .io_requestor_0_pmp_3_cfg_r             (_ptw_io_requestor_0_pmp_3_cfg_r),
    .io_requestor_0_pmp_3_addr              (_ptw_io_requestor_0_pmp_3_addr),
    .io_requestor_0_pmp_3_mask              (_ptw_io_requestor_0_pmp_3_mask),
    .io_requestor_0_pmp_4_cfg_l             (_ptw_io_requestor_0_pmp_4_cfg_l),
    .io_requestor_0_pmp_4_cfg_a             (_ptw_io_requestor_0_pmp_4_cfg_a),
    .io_requestor_0_pmp_4_cfg_x             (_ptw_io_requestor_0_pmp_4_cfg_x),
    .io_requestor_0_pmp_4_cfg_w             (_ptw_io_requestor_0_pmp_4_cfg_w),
    .io_requestor_0_pmp_4_cfg_r             (_ptw_io_requestor_0_pmp_4_cfg_r),
    .io_requestor_0_pmp_4_addr              (_ptw_io_requestor_0_pmp_4_addr),
    .io_requestor_0_pmp_4_mask              (_ptw_io_requestor_0_pmp_4_mask),
    .io_requestor_0_pmp_5_cfg_l             (_ptw_io_requestor_0_pmp_5_cfg_l),
    .io_requestor_0_pmp_5_cfg_a             (_ptw_io_requestor_0_pmp_5_cfg_a),
    .io_requestor_0_pmp_5_cfg_x             (_ptw_io_requestor_0_pmp_5_cfg_x),
    .io_requestor_0_pmp_5_cfg_w             (_ptw_io_requestor_0_pmp_5_cfg_w),
    .io_requestor_0_pmp_5_cfg_r             (_ptw_io_requestor_0_pmp_5_cfg_r),
    .io_requestor_0_pmp_5_addr              (_ptw_io_requestor_0_pmp_5_addr),
    .io_requestor_0_pmp_5_mask              (_ptw_io_requestor_0_pmp_5_mask),
    .io_requestor_0_pmp_6_cfg_l             (_ptw_io_requestor_0_pmp_6_cfg_l),
    .io_requestor_0_pmp_6_cfg_a             (_ptw_io_requestor_0_pmp_6_cfg_a),
    .io_requestor_0_pmp_6_cfg_x             (_ptw_io_requestor_0_pmp_6_cfg_x),
    .io_requestor_0_pmp_6_cfg_w             (_ptw_io_requestor_0_pmp_6_cfg_w),
    .io_requestor_0_pmp_6_cfg_r             (_ptw_io_requestor_0_pmp_6_cfg_r),
    .io_requestor_0_pmp_6_addr              (_ptw_io_requestor_0_pmp_6_addr),
    .io_requestor_0_pmp_6_mask              (_ptw_io_requestor_0_pmp_6_mask),
    .io_requestor_0_pmp_7_cfg_l             (_ptw_io_requestor_0_pmp_7_cfg_l),
    .io_requestor_0_pmp_7_cfg_a             (_ptw_io_requestor_0_pmp_7_cfg_a),
    .io_requestor_0_pmp_7_cfg_x             (_ptw_io_requestor_0_pmp_7_cfg_x),
    .io_requestor_0_pmp_7_cfg_w             (_ptw_io_requestor_0_pmp_7_cfg_w),
    .io_requestor_0_pmp_7_cfg_r             (_ptw_io_requestor_0_pmp_7_cfg_r),
    .io_requestor_0_pmp_7_addr              (_ptw_io_requestor_0_pmp_7_addr),
    .io_requestor_0_pmp_7_mask              (_ptw_io_requestor_0_pmp_7_mask),
    .io_requestor_1_req_ready               (_ptw_io_requestor_1_req_ready),
    .io_requestor_1_resp_valid              (_ptw_io_requestor_1_resp_valid),
    .io_requestor_1_resp_bits_ae_ptw        (_ptw_io_requestor_1_resp_bits_ae_ptw),
    .io_requestor_1_resp_bits_ae_final      (_ptw_io_requestor_1_resp_bits_ae_final),
    .io_requestor_1_resp_bits_pf            (_ptw_io_requestor_1_resp_bits_pf),
    .io_requestor_1_resp_bits_gf            (_ptw_io_requestor_1_resp_bits_gf),
    .io_requestor_1_resp_bits_hr            (_ptw_io_requestor_1_resp_bits_hr),
    .io_requestor_1_resp_bits_hw            (_ptw_io_requestor_1_resp_bits_hw),
    .io_requestor_1_resp_bits_hx            (_ptw_io_requestor_1_resp_bits_hx),
    .io_requestor_1_resp_bits_pte_ppn       (_ptw_io_requestor_1_resp_bits_pte_ppn),
    .io_requestor_1_resp_bits_pte_d         (_ptw_io_requestor_1_resp_bits_pte_d),
    .io_requestor_1_resp_bits_pte_a         (_ptw_io_requestor_1_resp_bits_pte_a),
    .io_requestor_1_resp_bits_pte_g         (_ptw_io_requestor_1_resp_bits_pte_g),
    .io_requestor_1_resp_bits_pte_u         (_ptw_io_requestor_1_resp_bits_pte_u),
    .io_requestor_1_resp_bits_pte_x         (_ptw_io_requestor_1_resp_bits_pte_x),
    .io_requestor_1_resp_bits_pte_w         (_ptw_io_requestor_1_resp_bits_pte_w),
    .io_requestor_1_resp_bits_pte_r         (_ptw_io_requestor_1_resp_bits_pte_r),
    .io_requestor_1_resp_bits_pte_v         (_ptw_io_requestor_1_resp_bits_pte_v),
    .io_requestor_1_resp_bits_level         (_ptw_io_requestor_1_resp_bits_level),
    .io_requestor_1_resp_bits_homogeneous   (_ptw_io_requestor_1_resp_bits_homogeneous),
    .io_requestor_1_resp_bits_gpa_is_pte    (_ptw_io_requestor_1_resp_bits_gpa_is_pte),
    .io_requestor_1_ptbr_mode               (_ptw_io_requestor_1_ptbr_mode),
    .io_requestor_1_status_debug            (_ptw_io_requestor_1_status_debug),
    .io_requestor_1_status_prv              (_ptw_io_requestor_1_status_prv),
    .io_requestor_1_pmp_0_cfg_l             (_ptw_io_requestor_1_pmp_0_cfg_l),
    .io_requestor_1_pmp_0_cfg_a             (_ptw_io_requestor_1_pmp_0_cfg_a),
    .io_requestor_1_pmp_0_cfg_x             (_ptw_io_requestor_1_pmp_0_cfg_x),
    .io_requestor_1_pmp_0_cfg_w             (_ptw_io_requestor_1_pmp_0_cfg_w),
    .io_requestor_1_pmp_0_cfg_r             (_ptw_io_requestor_1_pmp_0_cfg_r),
    .io_requestor_1_pmp_0_addr              (_ptw_io_requestor_1_pmp_0_addr),
    .io_requestor_1_pmp_0_mask              (_ptw_io_requestor_1_pmp_0_mask),
    .io_requestor_1_pmp_1_cfg_l             (_ptw_io_requestor_1_pmp_1_cfg_l),
    .io_requestor_1_pmp_1_cfg_a             (_ptw_io_requestor_1_pmp_1_cfg_a),
    .io_requestor_1_pmp_1_cfg_x             (_ptw_io_requestor_1_pmp_1_cfg_x),
    .io_requestor_1_pmp_1_cfg_w             (_ptw_io_requestor_1_pmp_1_cfg_w),
    .io_requestor_1_pmp_1_cfg_r             (_ptw_io_requestor_1_pmp_1_cfg_r),
    .io_requestor_1_pmp_1_addr              (_ptw_io_requestor_1_pmp_1_addr),
    .io_requestor_1_pmp_1_mask              (_ptw_io_requestor_1_pmp_1_mask),
    .io_requestor_1_pmp_2_cfg_l             (_ptw_io_requestor_1_pmp_2_cfg_l),
    .io_requestor_1_pmp_2_cfg_a             (_ptw_io_requestor_1_pmp_2_cfg_a),
    .io_requestor_1_pmp_2_cfg_x             (_ptw_io_requestor_1_pmp_2_cfg_x),
    .io_requestor_1_pmp_2_cfg_w             (_ptw_io_requestor_1_pmp_2_cfg_w),
    .io_requestor_1_pmp_2_cfg_r             (_ptw_io_requestor_1_pmp_2_cfg_r),
    .io_requestor_1_pmp_2_addr              (_ptw_io_requestor_1_pmp_2_addr),
    .io_requestor_1_pmp_2_mask              (_ptw_io_requestor_1_pmp_2_mask),
    .io_requestor_1_pmp_3_cfg_l             (_ptw_io_requestor_1_pmp_3_cfg_l),
    .io_requestor_1_pmp_3_cfg_a             (_ptw_io_requestor_1_pmp_3_cfg_a),
    .io_requestor_1_pmp_3_cfg_x             (_ptw_io_requestor_1_pmp_3_cfg_x),
    .io_requestor_1_pmp_3_cfg_w             (_ptw_io_requestor_1_pmp_3_cfg_w),
    .io_requestor_1_pmp_3_cfg_r             (_ptw_io_requestor_1_pmp_3_cfg_r),
    .io_requestor_1_pmp_3_addr              (_ptw_io_requestor_1_pmp_3_addr),
    .io_requestor_1_pmp_3_mask              (_ptw_io_requestor_1_pmp_3_mask),
    .io_requestor_1_pmp_4_cfg_l             (_ptw_io_requestor_1_pmp_4_cfg_l),
    .io_requestor_1_pmp_4_cfg_a             (_ptw_io_requestor_1_pmp_4_cfg_a),
    .io_requestor_1_pmp_4_cfg_x             (_ptw_io_requestor_1_pmp_4_cfg_x),
    .io_requestor_1_pmp_4_cfg_w             (_ptw_io_requestor_1_pmp_4_cfg_w),
    .io_requestor_1_pmp_4_cfg_r             (_ptw_io_requestor_1_pmp_4_cfg_r),
    .io_requestor_1_pmp_4_addr              (_ptw_io_requestor_1_pmp_4_addr),
    .io_requestor_1_pmp_4_mask              (_ptw_io_requestor_1_pmp_4_mask),
    .io_requestor_1_pmp_5_cfg_l             (_ptw_io_requestor_1_pmp_5_cfg_l),
    .io_requestor_1_pmp_5_cfg_a             (_ptw_io_requestor_1_pmp_5_cfg_a),
    .io_requestor_1_pmp_5_cfg_x             (_ptw_io_requestor_1_pmp_5_cfg_x),
    .io_requestor_1_pmp_5_cfg_w             (_ptw_io_requestor_1_pmp_5_cfg_w),
    .io_requestor_1_pmp_5_cfg_r             (_ptw_io_requestor_1_pmp_5_cfg_r),
    .io_requestor_1_pmp_5_addr              (_ptw_io_requestor_1_pmp_5_addr),
    .io_requestor_1_pmp_5_mask              (_ptw_io_requestor_1_pmp_5_mask),
    .io_requestor_1_pmp_6_cfg_l             (_ptw_io_requestor_1_pmp_6_cfg_l),
    .io_requestor_1_pmp_6_cfg_a             (_ptw_io_requestor_1_pmp_6_cfg_a),
    .io_requestor_1_pmp_6_cfg_x             (_ptw_io_requestor_1_pmp_6_cfg_x),
    .io_requestor_1_pmp_6_cfg_w             (_ptw_io_requestor_1_pmp_6_cfg_w),
    .io_requestor_1_pmp_6_cfg_r             (_ptw_io_requestor_1_pmp_6_cfg_r),
    .io_requestor_1_pmp_6_addr              (_ptw_io_requestor_1_pmp_6_addr),
    .io_requestor_1_pmp_6_mask              (_ptw_io_requestor_1_pmp_6_mask),
    .io_requestor_1_pmp_7_cfg_l             (_ptw_io_requestor_1_pmp_7_cfg_l),
    .io_requestor_1_pmp_7_cfg_a             (_ptw_io_requestor_1_pmp_7_cfg_a),
    .io_requestor_1_pmp_7_cfg_x             (_ptw_io_requestor_1_pmp_7_cfg_x),
    .io_requestor_1_pmp_7_cfg_w             (_ptw_io_requestor_1_pmp_7_cfg_w),
    .io_requestor_1_pmp_7_cfg_r             (_ptw_io_requestor_1_pmp_7_cfg_r),
    .io_requestor_1_pmp_7_addr              (_ptw_io_requestor_1_pmp_7_addr),
    .io_requestor_1_pmp_7_mask              (_ptw_io_requestor_1_pmp_7_mask),
    .io_requestor_1_customCSRs_csrs_0_value (_ptw_io_requestor_1_customCSRs_csrs_0_value),
    .io_mem_req_valid                       (_ptw_io_mem_req_valid),
    .io_mem_req_bits_addr                   (_ptw_io_mem_req_bits_addr),
    .io_mem_req_bits_dv                     (_ptw_io_mem_req_bits_dv),
    .io_mem_s1_kill                         (_ptw_io_mem_s1_kill)
  );
  Rocket core (
    .clock                              (clock),
    .reset                              (reset),
    .io_hartid                          (auto_hartid_in),
    .io_interrupts_debug                (_intXbar_auto_int_out_0),
    .io_interrupts_mtip                 (_intXbar_auto_int_out_2),
    .io_interrupts_msip                 (_intXbar_auto_int_out_1),
    .io_interrupts_meip                 (_intXbar_auto_int_out_3),
    .io_interrupts_seip                 (_intXbar_auto_int_out_4),
    .io_imem_resp_valid                 (_frontend_io_cpu_resp_valid),
    .io_imem_resp_bits_btb_taken        (_frontend_io_cpu_resp_bits_btb_taken),
    .io_imem_resp_bits_btb_bridx        (_frontend_io_cpu_resp_bits_btb_bridx),
    .io_imem_resp_bits_pc               (_frontend_io_cpu_resp_bits_pc),
    .io_imem_resp_bits_data             (_frontend_io_cpu_resp_bits_data),
    .io_imem_resp_bits_xcpt_pf_inst     (_frontend_io_cpu_resp_bits_xcpt_pf_inst),
    .io_imem_resp_bits_xcpt_gf_inst     (_frontend_io_cpu_resp_bits_xcpt_gf_inst),
    .io_imem_resp_bits_xcpt_ae_inst     (_frontend_io_cpu_resp_bits_xcpt_ae_inst),
    .io_imem_resp_bits_replay           (_frontend_io_cpu_resp_bits_replay),
    .io_imem_gpa_valid                  (_frontend_io_cpu_gpa_valid),
    .io_dmem_req_ready                  (_dcacheArb_io_requestor_1_req_ready),
    .io_dmem_s2_nack                    (_dcacheArb_io_requestor_1_s2_nack),
    .io_dmem_resp_valid                 (_dcacheArb_io_requestor_1_resp_valid),
    .io_dmem_resp_bits_tag              (_dcacheArb_io_requestor_1_resp_bits_tag),
    .io_dmem_resp_bits_data             (_dcacheArb_io_requestor_1_resp_bits_data),
    .io_dmem_resp_bits_replay           (_dcacheArb_io_requestor_1_resp_bits_replay),
    .io_dmem_resp_bits_has_data         (_dcacheArb_io_requestor_1_resp_bits_has_data),
    .io_dmem_resp_bits_data_word_bypass
      (_dcacheArb_io_requestor_1_resp_bits_data_word_bypass),
    .io_dmem_replay_next                (_dcacheArb_io_requestor_1_replay_next),
    .io_dmem_s2_xcpt_ma_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ma_ld),
    .io_dmem_s2_xcpt_ma_st              (_dcacheArb_io_requestor_1_s2_xcpt_ma_st),
    .io_dmem_s2_xcpt_pf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_pf_ld),
    .io_dmem_s2_xcpt_pf_st              (_dcacheArb_io_requestor_1_s2_xcpt_pf_st),
    .io_dmem_s2_xcpt_gf_ld              (_dcacheArb_io_requestor_1_s2_xcpt_gf_ld),
    .io_dmem_s2_xcpt_gf_st              (_dcacheArb_io_requestor_1_s2_xcpt_gf_st),
    .io_dmem_s2_xcpt_ae_ld              (_dcacheArb_io_requestor_1_s2_xcpt_ae_ld),
    .io_dmem_s2_xcpt_ae_st              (_dcacheArb_io_requestor_1_s2_xcpt_ae_st),
    .io_dmem_ordered                    (_dcacheArb_io_requestor_1_ordered),
    .io_dmem_perf_release               (_dcacheArb_io_requestor_1_perf_release),
    .io_dmem_perf_grant                 (_dcacheArb_io_requestor_1_perf_grant),
    .io_imem_might_request              (_core_io_imem_might_request),
    .io_imem_req_valid                  (_core_io_imem_req_valid),
    .io_imem_req_bits_pc                (_core_io_imem_req_bits_pc),
    .io_imem_req_bits_speculative       (_core_io_imem_req_bits_speculative),
    .io_imem_sfence_valid               (_core_io_imem_sfence_valid),
    .io_imem_sfence_bits_rs1            (_core_io_imem_sfence_bits_rs1),
    .io_imem_sfence_bits_rs2            (_core_io_imem_sfence_bits_rs2),
    .io_imem_sfence_bits_addr           (_core_io_imem_sfence_bits_addr),
    .io_imem_resp_ready                 (_core_io_imem_resp_ready),
    .io_imem_btb_update_valid           (_core_io_imem_btb_update_valid),
    .io_imem_bht_update_valid           (_core_io_imem_bht_update_valid),
    .io_imem_flush_icache               (_core_io_imem_flush_icache),
    .io_imem_progress                   (_core_io_imem_progress),
    .io_dmem_req_valid                  (_core_io_dmem_req_valid),
    .io_dmem_req_bits_addr              (_core_io_dmem_req_bits_addr),
    .io_dmem_req_bits_tag               (_core_io_dmem_req_bits_tag),
    .io_dmem_req_bits_cmd               (_core_io_dmem_req_bits_cmd),
    .io_dmem_req_bits_size              (_core_io_dmem_req_bits_size),
    .io_dmem_req_bits_signed            (_core_io_dmem_req_bits_signed),
    .io_dmem_req_bits_dprv              (_core_io_dmem_req_bits_dprv),
    .io_dmem_req_bits_dv                (_core_io_dmem_req_bits_dv),
    .io_dmem_s1_kill                    (_core_io_dmem_s1_kill),
    .io_dmem_s1_data_data               (_core_io_dmem_s1_data_data),
    .io_ptw_ptbr_mode                   (_core_io_ptw_ptbr_mode),
    .io_ptw_ptbr_ppn                    (_core_io_ptw_ptbr_ppn),
    .io_ptw_sfence_valid                (_core_io_ptw_sfence_valid),
    .io_ptw_sfence_bits_rs1             (_core_io_ptw_sfence_bits_rs1),
    .io_ptw_status_debug                (_core_io_ptw_status_debug),
    .io_ptw_status_prv                  (_core_io_ptw_status_prv),
    .io_ptw_status_mxr                  (_core_io_ptw_status_mxr),
    .io_ptw_status_sum                  (_core_io_ptw_status_sum),
    .io_ptw_pmp_0_cfg_l                 (_core_io_ptw_pmp_0_cfg_l),
    .io_ptw_pmp_0_cfg_a                 (_core_io_ptw_pmp_0_cfg_a),
    .io_ptw_pmp_0_cfg_x                 (_core_io_ptw_pmp_0_cfg_x),
    .io_ptw_pmp_0_cfg_w                 (_core_io_ptw_pmp_0_cfg_w),
    .io_ptw_pmp_0_cfg_r                 (_core_io_ptw_pmp_0_cfg_r),
    .io_ptw_pmp_0_addr                  (_core_io_ptw_pmp_0_addr),
    .io_ptw_pmp_0_mask                  (_core_io_ptw_pmp_0_mask),
    .io_ptw_pmp_1_cfg_l                 (_core_io_ptw_pmp_1_cfg_l),
    .io_ptw_pmp_1_cfg_a                 (_core_io_ptw_pmp_1_cfg_a),
    .io_ptw_pmp_1_cfg_x                 (_core_io_ptw_pmp_1_cfg_x),
    .io_ptw_pmp_1_cfg_w                 (_core_io_ptw_pmp_1_cfg_w),
    .io_ptw_pmp_1_cfg_r                 (_core_io_ptw_pmp_1_cfg_r),
    .io_ptw_pmp_1_addr                  (_core_io_ptw_pmp_1_addr),
    .io_ptw_pmp_1_mask                  (_core_io_ptw_pmp_1_mask),
    .io_ptw_pmp_2_cfg_l                 (_core_io_ptw_pmp_2_cfg_l),
    .io_ptw_pmp_2_cfg_a                 (_core_io_ptw_pmp_2_cfg_a),
    .io_ptw_pmp_2_cfg_x                 (_core_io_ptw_pmp_2_cfg_x),
    .io_ptw_pmp_2_cfg_w                 (_core_io_ptw_pmp_2_cfg_w),
    .io_ptw_pmp_2_cfg_r                 (_core_io_ptw_pmp_2_cfg_r),
    .io_ptw_pmp_2_addr                  (_core_io_ptw_pmp_2_addr),
    .io_ptw_pmp_2_mask                  (_core_io_ptw_pmp_2_mask),
    .io_ptw_pmp_3_cfg_l                 (_core_io_ptw_pmp_3_cfg_l),
    .io_ptw_pmp_3_cfg_a                 (_core_io_ptw_pmp_3_cfg_a),
    .io_ptw_pmp_3_cfg_x                 (_core_io_ptw_pmp_3_cfg_x),
    .io_ptw_pmp_3_cfg_w                 (_core_io_ptw_pmp_3_cfg_w),
    .io_ptw_pmp_3_cfg_r                 (_core_io_ptw_pmp_3_cfg_r),
    .io_ptw_pmp_3_addr                  (_core_io_ptw_pmp_3_addr),
    .io_ptw_pmp_3_mask                  (_core_io_ptw_pmp_3_mask),
    .io_ptw_pmp_4_cfg_l                 (_core_io_ptw_pmp_4_cfg_l),
    .io_ptw_pmp_4_cfg_a                 (_core_io_ptw_pmp_4_cfg_a),
    .io_ptw_pmp_4_cfg_x                 (_core_io_ptw_pmp_4_cfg_x),
    .io_ptw_pmp_4_cfg_w                 (_core_io_ptw_pmp_4_cfg_w),
    .io_ptw_pmp_4_cfg_r                 (_core_io_ptw_pmp_4_cfg_r),
    .io_ptw_pmp_4_addr                  (_core_io_ptw_pmp_4_addr),
    .io_ptw_pmp_4_mask                  (_core_io_ptw_pmp_4_mask),
    .io_ptw_pmp_5_cfg_l                 (_core_io_ptw_pmp_5_cfg_l),
    .io_ptw_pmp_5_cfg_a                 (_core_io_ptw_pmp_5_cfg_a),
    .io_ptw_pmp_5_cfg_x                 (_core_io_ptw_pmp_5_cfg_x),
    .io_ptw_pmp_5_cfg_w                 (_core_io_ptw_pmp_5_cfg_w),
    .io_ptw_pmp_5_cfg_r                 (_core_io_ptw_pmp_5_cfg_r),
    .io_ptw_pmp_5_addr                  (_core_io_ptw_pmp_5_addr),
    .io_ptw_pmp_5_mask                  (_core_io_ptw_pmp_5_mask),
    .io_ptw_pmp_6_cfg_l                 (_core_io_ptw_pmp_6_cfg_l),
    .io_ptw_pmp_6_cfg_a                 (_core_io_ptw_pmp_6_cfg_a),
    .io_ptw_pmp_6_cfg_x                 (_core_io_ptw_pmp_6_cfg_x),
    .io_ptw_pmp_6_cfg_w                 (_core_io_ptw_pmp_6_cfg_w),
    .io_ptw_pmp_6_cfg_r                 (_core_io_ptw_pmp_6_cfg_r),
    .io_ptw_pmp_6_addr                  (_core_io_ptw_pmp_6_addr),
    .io_ptw_pmp_6_mask                  (_core_io_ptw_pmp_6_mask),
    .io_ptw_pmp_7_cfg_l                 (_core_io_ptw_pmp_7_cfg_l),
    .io_ptw_pmp_7_cfg_a                 (_core_io_ptw_pmp_7_cfg_a),
    .io_ptw_pmp_7_cfg_x                 (_core_io_ptw_pmp_7_cfg_x),
    .io_ptw_pmp_7_cfg_w                 (_core_io_ptw_pmp_7_cfg_w),
    .io_ptw_pmp_7_cfg_r                 (_core_io_ptw_pmp_7_cfg_r),
    .io_ptw_pmp_7_addr                  (_core_io_ptw_pmp_7_addr),
    .io_ptw_pmp_7_mask                  (_core_io_ptw_pmp_7_mask),
    .io_ptw_customCSRs_csrs_0_value     (_core_io_ptw_customCSRs_csrs_0_value),
    .io_wfi                             (_core_io_wfi)
  );
  assign auto_wfi_out_0 = wfiNodeOut_0_REG;
endmodule

module Queue_86(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_2 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_87(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
                io_enq_bits_sink,
  input         io_enq_bits_denied,
  input  [63:0] io_enq_bits_data,
  input         io_enq_bits_corrupt,
                io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
                io_deq_bits_sink,
  output        io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_burst_combMem_0 ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_burst_combMem_0 ram_sink_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_sink),
    .R0_data (io_deq_bits_sink)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_denied),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_corrupt),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_88(
  input         clock,
                reset,
                io_enq_valid,
  input  [1:0]  io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [1:0]  io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_burst_combMem_0 ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_2 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_89(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
                io_enq_bits_param,
  input  [3:0]  io_enq_bits_size,
  input  [1:0]  io_enq_bits_source,
  input  [31:0] io_enq_bits_address,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
                io_deq_bits_param,
  output [3:0]  io_deq_bits_size,
  output [1:0]  io_deq_bits_source,
  output [31:0] io_deq_bits_address,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_size_combMem ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_param),
    .R0_data (io_deq_bits_param)
  );
  ram_id_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_burst_combMem_0 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem_2 ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_90(
  input        clock,
               reset,
               io_enq_valid,
  input  [1:0] io_enq_bits_sink,
  output       io_enq_ready,
               io_deq_valid,
  output [1:0] io_deq_bits_sink
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (~empty)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != ~empty)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_burst_combMem_0 ram_sink_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_sink),
    .R0_data (io_deq_bits_sink)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_11(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [3:0]  auto_in_a_bits_size,
  input  [1:0]  auto_in_a_bits_source,
  input  [31:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_b_ready,
                auto_in_c_valid,
  input  [2:0]  auto_in_c_bits_opcode,
                auto_in_c_bits_param,
  input  [3:0]  auto_in_c_bits_size,
  input  [1:0]  auto_in_c_bits_source,
  input  [31:0] auto_in_c_bits_address,
  input  [63:0] auto_in_c_bits_data,
  input         auto_in_d_ready,
                auto_in_e_valid,
  input  [1:0]  auto_in_e_bits_sink,
  input         auto_out_a_ready,
                auto_out_b_valid,
  input  [1:0]  auto_out_b_bits_param,
  input  [3:0]  auto_out_b_bits_size,
  input  [1:0]  auto_out_b_bits_source,
  input  [31:0] auto_out_b_bits_address,
  input         auto_out_c_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_param,
  input  [3:0]  auto_out_d_bits_size,
  input  [1:0]  auto_out_d_bits_source,
                auto_out_d_bits_sink,
  input         auto_out_d_bits_denied,
  input  [63:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_b_valid,
  output [1:0]  auto_in_b_bits_param,
  output [3:0]  auto_in_b_bits_size,
  output [1:0]  auto_in_b_bits_source,
  output [31:0] auto_in_b_bits_address,
  output        auto_in_c_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
  output [3:0]  auto_in_d_bits_size,
  output [1:0]  auto_in_d_bits_source,
                auto_in_d_bits_sink,
  output        auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_in_e_ready,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
                auto_out_a_bits_param,
  output [3:0]  auto_out_a_bits_size,
  output [1:0]  auto_out_a_bits_source,
  output [31:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_b_ready,
                auto_out_c_valid,
  output [2:0]  auto_out_c_bits_opcode,
                auto_out_c_bits_param,
  output [3:0]  auto_out_c_bits_size,
  output [1:0]  auto_out_c_bits_source,
  output [31:0] auto_out_c_bits_address,
  output [63:0] auto_out_c_bits_data,
  output        auto_out_d_ready,
                auto_out_e_valid,
  output [1:0]  auto_out_e_bits_sink
);

  Queue_86 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_param   (auto_in_a_bits_param),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_param   (auto_out_a_bits_param),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_87 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_param   (auto_out_d_bits_param),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_sink    (auto_out_d_bits_sink),
    .io_enq_bits_denied  (auto_out_d_bits_denied),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_enq_bits_corrupt (auto_out_d_bits_corrupt),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_param   (auto_in_d_bits_param),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_sink    (auto_in_d_bits_sink),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
  Queue_88 nodeIn_b_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_b_valid),
    .io_enq_bits_param   (auto_out_b_bits_param),
    .io_enq_bits_size    (auto_out_b_bits_size),
    .io_enq_bits_source  (auto_out_b_bits_source),
    .io_enq_bits_address (auto_out_b_bits_address),
    .io_deq_ready        (auto_in_b_ready),
    .io_enq_ready        (auto_out_b_ready),
    .io_deq_valid        (auto_in_b_valid),
    .io_deq_bits_param   (auto_in_b_bits_param),
    .io_deq_bits_size    (auto_in_b_bits_size),
    .io_deq_bits_source  (auto_in_b_bits_source),
    .io_deq_bits_address (auto_in_b_bits_address)
  );
  Queue_89 nodeOut_c_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_c_valid),
    .io_enq_bits_opcode  (auto_in_c_bits_opcode),
    .io_enq_bits_param   (auto_in_c_bits_param),
    .io_enq_bits_size    (auto_in_c_bits_size),
    .io_enq_bits_source  (auto_in_c_bits_source),
    .io_enq_bits_address (auto_in_c_bits_address),
    .io_enq_bits_data    (auto_in_c_bits_data),
    .io_deq_ready        (auto_out_c_ready),
    .io_enq_ready        (auto_in_c_ready),
    .io_deq_valid        (auto_out_c_valid),
    .io_deq_bits_opcode  (auto_out_c_bits_opcode),
    .io_deq_bits_param   (auto_out_c_bits_param),
    .io_deq_bits_size    (auto_out_c_bits_size),
    .io_deq_bits_source  (auto_out_c_bits_source),
    .io_deq_bits_address (auto_out_c_bits_address),
    .io_deq_bits_data    (auto_out_c_bits_data)
  );
  Queue_90 nodeOut_e_q (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (auto_in_e_valid),
    .io_enq_bits_sink (auto_in_e_bits_sink),
    .io_enq_ready     (auto_in_e_ready),
    .io_deq_valid     (auto_out_e_valid),
    .io_deq_bits_sink (auto_out_e_bits_sink)
  );
endmodule

module SynchronizerShiftReg_w1_d3(
  input  clock,
         io_d,
  output io_q
);

  NonSyncResetSynchronizerPrimitiveShiftReg_d3 output_chain (
    .clock (clock),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module IntSyncAsyncCrossingSink_1(
  input  clock,
         auto_in_sync_0,
  output auto_out_0
);

  SynchronizerShiftReg_w1_d3 chain (
    .clock (clock),
    .io_d  (auto_in_sync_0),
    .io_q  (auto_out_0)
  );
endmodule

module IntSyncSyncCrossingSink(
  input  auto_in_sync_0,
         auto_in_sync_1,
  output auto_out_0,
         auto_out_1
);

  assign auto_out_0 = auto_in_sync_0;
  assign auto_out_1 = auto_in_sync_1;
endmodule

module IntSyncSyncCrossingSink_1(
  input  auto_in_sync_0,
  output auto_out_0
);

  assign auto_out_0 = auto_in_sync_0;
endmodule

module AsyncResetRegVec_w1_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  reg reg_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_0 <= 1'h0;
    else
      reg_0 <= io_d;
  end // always @(posedge, posedge)
  assign io_q = reg_0;
endmodule

module IntSyncCrossingSource_1(
  input  clock,
         reset,
         auto_in_0,
  output auto_out_sync_0
);

  AsyncResetRegVec_w1_i0 reg_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (auto_in_0),
    .io_q  (auto_out_sync_0)
  );
endmodule

module TilePRCIDomain(
  input         auto_intsink_in_sync_0,
                auto_tile_reset_domain_tile_hartid_in,
                auto_int_in_clock_xing_in_2_sync_0,
                auto_int_in_clock_xing_in_1_sync_0,
                auto_int_in_clock_xing_in_0_sync_0,
                auto_int_in_clock_xing_in_0_sync_1,
                auto_tl_master_clock_xing_out_a_ready,
                auto_tl_master_clock_xing_out_b_valid,
  input  [1:0]  auto_tl_master_clock_xing_out_b_bits_param,
  input  [3:0]  auto_tl_master_clock_xing_out_b_bits_size,
  input  [1:0]  auto_tl_master_clock_xing_out_b_bits_source,
  input  [31:0] auto_tl_master_clock_xing_out_b_bits_address,
  input         auto_tl_master_clock_xing_out_c_ready,
                auto_tl_master_clock_xing_out_d_valid,
  input  [2:0]  auto_tl_master_clock_xing_out_d_bits_opcode,
  input  [1:0]  auto_tl_master_clock_xing_out_d_bits_param,
  input  [3:0]  auto_tl_master_clock_xing_out_d_bits_size,
  input  [1:0]  auto_tl_master_clock_xing_out_d_bits_source,
                auto_tl_master_clock_xing_out_d_bits_sink,
  input         auto_tl_master_clock_xing_out_d_bits_denied,
  input  [63:0] auto_tl_master_clock_xing_out_d_bits_data,
  input         auto_tl_master_clock_xing_out_d_bits_corrupt,
                auto_tap_clock_in_clock,
                auto_tap_clock_in_reset,
  output        auto_int_out_clock_xing_out_2_sync_0,
                auto_int_out_clock_xing_out_1_sync_0,
                auto_int_out_clock_xing_out_0_sync_0,
                auto_tl_master_clock_xing_out_a_valid,
  output [2:0]  auto_tl_master_clock_xing_out_a_bits_opcode,
                auto_tl_master_clock_xing_out_a_bits_param,
  output [3:0]  auto_tl_master_clock_xing_out_a_bits_size,
  output [1:0]  auto_tl_master_clock_xing_out_a_bits_source,
  output [31:0] auto_tl_master_clock_xing_out_a_bits_address,
  output [7:0]  auto_tl_master_clock_xing_out_a_bits_mask,
  output [63:0] auto_tl_master_clock_xing_out_a_bits_data,
  output        auto_tl_master_clock_xing_out_b_ready,
                auto_tl_master_clock_xing_out_c_valid,
  output [2:0]  auto_tl_master_clock_xing_out_c_bits_opcode,
                auto_tl_master_clock_xing_out_c_bits_param,
  output [3:0]  auto_tl_master_clock_xing_out_c_bits_size,
  output [1:0]  auto_tl_master_clock_xing_out_c_bits_source,
  output [31:0] auto_tl_master_clock_xing_out_c_bits_address,
  output [63:0] auto_tl_master_clock_xing_out_c_bits_data,
  output        auto_tl_master_clock_xing_out_d_ready,
                auto_tl_master_clock_xing_out_e_valid,
  output [1:0]  auto_tl_master_clock_xing_out_e_bits_sink
);

  wire        _intsink_3_auto_out_0;
  wire        _intsink_2_auto_out_0;
  wire        _intsink_1_auto_out_0;
  wire        _intsink_1_auto_out_1;
  wire        _intsink_auto_out_0;
  wire        _buffer_auto_in_a_ready;
  wire        _buffer_auto_in_b_valid;
  wire [1:0]  _buffer_auto_in_b_bits_param;
  wire [3:0]  _buffer_auto_in_b_bits_size;
  wire [1:0]  _buffer_auto_in_b_bits_source;
  wire [31:0] _buffer_auto_in_b_bits_address;
  wire        _buffer_auto_in_c_ready;
  wire        _buffer_auto_in_d_valid;
  wire [2:0]  _buffer_auto_in_d_bits_opcode;
  wire [1:0]  _buffer_auto_in_d_bits_param;
  wire [3:0]  _buffer_auto_in_d_bits_size;
  wire [1:0]  _buffer_auto_in_d_bits_source;
  wire [1:0]  _buffer_auto_in_d_bits_sink;
  wire        _buffer_auto_in_d_bits_denied;
  wire [63:0] _buffer_auto_in_d_bits_data;
  wire        _buffer_auto_in_d_bits_corrupt;
  wire        _buffer_auto_in_e_ready;
  wire        _tile_reset_domain_tile_auto_buffer_out_a_valid;
  wire [2:0]  _tile_reset_domain_tile_auto_buffer_out_a_bits_opcode;
  wire [2:0]  _tile_reset_domain_tile_auto_buffer_out_a_bits_param;
  wire [3:0]  _tile_reset_domain_tile_auto_buffer_out_a_bits_size;
  wire [1:0]  _tile_reset_domain_tile_auto_buffer_out_a_bits_source;
  wire [31:0] _tile_reset_domain_tile_auto_buffer_out_a_bits_address;
  wire [7:0]  _tile_reset_domain_tile_auto_buffer_out_a_bits_mask;
  wire [63:0] _tile_reset_domain_tile_auto_buffer_out_a_bits_data;
  wire        _tile_reset_domain_tile_auto_buffer_out_b_ready;
  wire        _tile_reset_domain_tile_auto_buffer_out_c_valid;
  wire [2:0]  _tile_reset_domain_tile_auto_buffer_out_c_bits_opcode;
  wire [2:0]  _tile_reset_domain_tile_auto_buffer_out_c_bits_param;
  wire [3:0]  _tile_reset_domain_tile_auto_buffer_out_c_bits_size;
  wire [1:0]  _tile_reset_domain_tile_auto_buffer_out_c_bits_source;
  wire [31:0] _tile_reset_domain_tile_auto_buffer_out_c_bits_address;
  wire [63:0] _tile_reset_domain_tile_auto_buffer_out_c_bits_data;
  wire        _tile_reset_domain_tile_auto_buffer_out_d_ready;
  wire        _tile_reset_domain_tile_auto_buffer_out_e_valid;
  wire [1:0]  _tile_reset_domain_tile_auto_buffer_out_e_bits_sink;
  wire        _tile_reset_domain_tile_auto_wfi_out_0;
  RocketTile tile_reset_domain_tile (
    .clock                          (auto_tap_clock_in_clock),
    .reset                          (auto_tap_clock_in_reset),
    .auto_buffer_out_a_ready        (_buffer_auto_in_a_ready),
    .auto_buffer_out_b_valid        (_buffer_auto_in_b_valid),
    .auto_buffer_out_b_bits_param   (_buffer_auto_in_b_bits_param),
    .auto_buffer_out_b_bits_size    (_buffer_auto_in_b_bits_size),
    .auto_buffer_out_b_bits_source  (_buffer_auto_in_b_bits_source),
    .auto_buffer_out_b_bits_address (_buffer_auto_in_b_bits_address),
    .auto_buffer_out_c_ready        (_buffer_auto_in_c_ready),
    .auto_buffer_out_d_valid        (_buffer_auto_in_d_valid),
    .auto_buffer_out_d_bits_opcode  (_buffer_auto_in_d_bits_opcode),
    .auto_buffer_out_d_bits_param   (_buffer_auto_in_d_bits_param),
    .auto_buffer_out_d_bits_size    (_buffer_auto_in_d_bits_size),
    .auto_buffer_out_d_bits_source  (_buffer_auto_in_d_bits_source),
    .auto_buffer_out_d_bits_sink    (_buffer_auto_in_d_bits_sink),
    .auto_buffer_out_d_bits_denied  (_buffer_auto_in_d_bits_denied),
    .auto_buffer_out_d_bits_data    (_buffer_auto_in_d_bits_data),
    .auto_buffer_out_d_bits_corrupt (_buffer_auto_in_d_bits_corrupt),
    .auto_buffer_out_e_ready        (_buffer_auto_in_e_ready),
    .auto_int_local_in_3_0          (_intsink_3_auto_out_0),
    .auto_int_local_in_2_0          (_intsink_2_auto_out_0),
    .auto_int_local_in_1_0          (_intsink_1_auto_out_0),
    .auto_int_local_in_1_1          (_intsink_1_auto_out_1),
    .auto_int_local_in_0_0          (_intsink_auto_out_0),
    .auto_hartid_in                 (auto_tile_reset_domain_tile_hartid_in),
    .auto_buffer_out_a_valid        (_tile_reset_domain_tile_auto_buffer_out_a_valid),
    .auto_buffer_out_a_bits_opcode
      (_tile_reset_domain_tile_auto_buffer_out_a_bits_opcode),
    .auto_buffer_out_a_bits_param
      (_tile_reset_domain_tile_auto_buffer_out_a_bits_param),
    .auto_buffer_out_a_bits_size    (_tile_reset_domain_tile_auto_buffer_out_a_bits_size),
    .auto_buffer_out_a_bits_source
      (_tile_reset_domain_tile_auto_buffer_out_a_bits_source),
    .auto_buffer_out_a_bits_address
      (_tile_reset_domain_tile_auto_buffer_out_a_bits_address),
    .auto_buffer_out_a_bits_mask    (_tile_reset_domain_tile_auto_buffer_out_a_bits_mask),
    .auto_buffer_out_a_bits_data    (_tile_reset_domain_tile_auto_buffer_out_a_bits_data),
    .auto_buffer_out_b_ready        (_tile_reset_domain_tile_auto_buffer_out_b_ready),
    .auto_buffer_out_c_valid        (_tile_reset_domain_tile_auto_buffer_out_c_valid),
    .auto_buffer_out_c_bits_opcode
      (_tile_reset_domain_tile_auto_buffer_out_c_bits_opcode),
    .auto_buffer_out_c_bits_param
      (_tile_reset_domain_tile_auto_buffer_out_c_bits_param),
    .auto_buffer_out_c_bits_size    (_tile_reset_domain_tile_auto_buffer_out_c_bits_size),
    .auto_buffer_out_c_bits_source
      (_tile_reset_domain_tile_auto_buffer_out_c_bits_source),
    .auto_buffer_out_c_bits_address
      (_tile_reset_domain_tile_auto_buffer_out_c_bits_address),
    .auto_buffer_out_c_bits_data    (_tile_reset_domain_tile_auto_buffer_out_c_bits_data),
    .auto_buffer_out_d_ready        (_tile_reset_domain_tile_auto_buffer_out_d_ready),
    .auto_buffer_out_e_valid        (_tile_reset_domain_tile_auto_buffer_out_e_valid),
    .auto_buffer_out_e_bits_sink    (_tile_reset_domain_tile_auto_buffer_out_e_bits_sink),
    .auto_wfi_out_0                 (_tile_reset_domain_tile_auto_wfi_out_0)
  );
  TLBuffer_11 buffer (
    .clock                   (auto_tap_clock_in_clock),
    .reset                   (auto_tap_clock_in_reset),
    .auto_in_a_valid         (_tile_reset_domain_tile_auto_buffer_out_a_valid),
    .auto_in_a_bits_opcode   (_tile_reset_domain_tile_auto_buffer_out_a_bits_opcode),
    .auto_in_a_bits_param    (_tile_reset_domain_tile_auto_buffer_out_a_bits_param),
    .auto_in_a_bits_size     (_tile_reset_domain_tile_auto_buffer_out_a_bits_size),
    .auto_in_a_bits_source   (_tile_reset_domain_tile_auto_buffer_out_a_bits_source),
    .auto_in_a_bits_address  (_tile_reset_domain_tile_auto_buffer_out_a_bits_address),
    .auto_in_a_bits_mask     (_tile_reset_domain_tile_auto_buffer_out_a_bits_mask),
    .auto_in_a_bits_data     (_tile_reset_domain_tile_auto_buffer_out_a_bits_data),
    .auto_in_b_ready         (_tile_reset_domain_tile_auto_buffer_out_b_ready),
    .auto_in_c_valid         (_tile_reset_domain_tile_auto_buffer_out_c_valid),
    .auto_in_c_bits_opcode   (_tile_reset_domain_tile_auto_buffer_out_c_bits_opcode),
    .auto_in_c_bits_param    (_tile_reset_domain_tile_auto_buffer_out_c_bits_param),
    .auto_in_c_bits_size     (_tile_reset_domain_tile_auto_buffer_out_c_bits_size),
    .auto_in_c_bits_source   (_tile_reset_domain_tile_auto_buffer_out_c_bits_source),
    .auto_in_c_bits_address  (_tile_reset_domain_tile_auto_buffer_out_c_bits_address),
    .auto_in_c_bits_data     (_tile_reset_domain_tile_auto_buffer_out_c_bits_data),
    .auto_in_d_ready         (_tile_reset_domain_tile_auto_buffer_out_d_ready),
    .auto_in_e_valid         (_tile_reset_domain_tile_auto_buffer_out_e_valid),
    .auto_in_e_bits_sink     (_tile_reset_domain_tile_auto_buffer_out_e_bits_sink),
    .auto_out_a_ready        (auto_tl_master_clock_xing_out_a_ready),
    .auto_out_b_valid        (auto_tl_master_clock_xing_out_b_valid),
    .auto_out_b_bits_param   (auto_tl_master_clock_xing_out_b_bits_param),
    .auto_out_b_bits_size    (auto_tl_master_clock_xing_out_b_bits_size),
    .auto_out_b_bits_source  (auto_tl_master_clock_xing_out_b_bits_source),
    .auto_out_b_bits_address (auto_tl_master_clock_xing_out_b_bits_address),
    .auto_out_c_ready        (auto_tl_master_clock_xing_out_c_ready),
    .auto_out_d_valid        (auto_tl_master_clock_xing_out_d_valid),
    .auto_out_d_bits_opcode  (auto_tl_master_clock_xing_out_d_bits_opcode),
    .auto_out_d_bits_param   (auto_tl_master_clock_xing_out_d_bits_param),
    .auto_out_d_bits_size    (auto_tl_master_clock_xing_out_d_bits_size),
    .auto_out_d_bits_source  (auto_tl_master_clock_xing_out_d_bits_source),
    .auto_out_d_bits_sink    (auto_tl_master_clock_xing_out_d_bits_sink),
    .auto_out_d_bits_denied  (auto_tl_master_clock_xing_out_d_bits_denied),
    .auto_out_d_bits_data    (auto_tl_master_clock_xing_out_d_bits_data),
    .auto_out_d_bits_corrupt (auto_tl_master_clock_xing_out_d_bits_corrupt),
    .auto_in_a_ready         (_buffer_auto_in_a_ready),
    .auto_in_b_valid         (_buffer_auto_in_b_valid),
    .auto_in_b_bits_param    (_buffer_auto_in_b_bits_param),
    .auto_in_b_bits_size     (_buffer_auto_in_b_bits_size),
    .auto_in_b_bits_source   (_buffer_auto_in_b_bits_source),
    .auto_in_b_bits_address  (_buffer_auto_in_b_bits_address),
    .auto_in_c_ready         (_buffer_auto_in_c_ready),
    .auto_in_d_valid         (_buffer_auto_in_d_valid),
    .auto_in_d_bits_opcode   (_buffer_auto_in_d_bits_opcode),
    .auto_in_d_bits_param    (_buffer_auto_in_d_bits_param),
    .auto_in_d_bits_size     (_buffer_auto_in_d_bits_size),
    .auto_in_d_bits_source   (_buffer_auto_in_d_bits_source),
    .auto_in_d_bits_sink     (_buffer_auto_in_d_bits_sink),
    .auto_in_d_bits_denied   (_buffer_auto_in_d_bits_denied),
    .auto_in_d_bits_data     (_buffer_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt  (_buffer_auto_in_d_bits_corrupt),
    .auto_in_e_ready         (_buffer_auto_in_e_ready),
    .auto_out_a_valid        (auto_tl_master_clock_xing_out_a_valid),
    .auto_out_a_bits_opcode  (auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_out_a_bits_param   (auto_tl_master_clock_xing_out_a_bits_param),
    .auto_out_a_bits_size    (auto_tl_master_clock_xing_out_a_bits_size),
    .auto_out_a_bits_source  (auto_tl_master_clock_xing_out_a_bits_source),
    .auto_out_a_bits_address (auto_tl_master_clock_xing_out_a_bits_address),
    .auto_out_a_bits_mask    (auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_out_a_bits_data    (auto_tl_master_clock_xing_out_a_bits_data),
    .auto_out_b_ready        (auto_tl_master_clock_xing_out_b_ready),
    .auto_out_c_valid        (auto_tl_master_clock_xing_out_c_valid),
    .auto_out_c_bits_opcode  (auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_out_c_bits_param   (auto_tl_master_clock_xing_out_c_bits_param),
    .auto_out_c_bits_size    (auto_tl_master_clock_xing_out_c_bits_size),
    .auto_out_c_bits_source  (auto_tl_master_clock_xing_out_c_bits_source),
    .auto_out_c_bits_address (auto_tl_master_clock_xing_out_c_bits_address),
    .auto_out_c_bits_data    (auto_tl_master_clock_xing_out_c_bits_data),
    .auto_out_d_ready        (auto_tl_master_clock_xing_out_d_ready),
    .auto_out_e_valid        (auto_tl_master_clock_xing_out_e_valid),
    .auto_out_e_bits_sink    (auto_tl_master_clock_xing_out_e_bits_sink)
  );
  IntSyncAsyncCrossingSink_1 intsink (
    .clock          (auto_tap_clock_in_clock),
    .auto_in_sync_0 (auto_intsink_in_sync_0),
    .auto_out_0     (_intsink_auto_out_0)
  );
  IntSyncSyncCrossingSink intsink_1 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_0_sync_0),
    .auto_in_sync_1 (auto_int_in_clock_xing_in_0_sync_1),
    .auto_out_0     (_intsink_1_auto_out_0),
    .auto_out_1     (_intsink_1_auto_out_1)
  );
  IntSyncSyncCrossingSink_1 intsink_2 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_1_sync_0),
    .auto_out_0     (_intsink_2_auto_out_0)
  );
  IntSyncSyncCrossingSink_1 intsink_3 (
    .auto_in_sync_0 (auto_int_in_clock_xing_in_2_sync_0),
    .auto_out_0     (_intsink_3_auto_out_0)
  );
  IntSyncCrossingSource_1 intsource_1 (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (1'h0),
    .auto_out_sync_0 (auto_int_out_clock_xing_out_0_sync_0)
  );
  IntSyncCrossingSource_1 intsource_2 (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (_tile_reset_domain_tile_auto_wfi_out_0),
    .auto_out_sync_0 (auto_int_out_clock_xing_out_1_sync_0)
  );
  IntSyncCrossingSource_1 intsource_3 (
    .clock           (auto_tap_clock_in_clock),
    .reset           (auto_tap_clock_in_reset),
    .auto_in_0       (1'h0),
    .auto_out_sync_0 (auto_int_out_clock_xing_out_2_sync_0)
  );
endmodule

module LevelGateway(
  input  clock,
         reset,
         io_interrupt,
         io_plic_ready,
         io_plic_complete,
  output io_plic_valid
);

  reg inFlight;
  always @(posedge clock) begin
    if (reset)
      inFlight <= 1'h0;
    else
      inFlight <= ~io_plic_complete & (io_interrupt & io_plic_ready | inFlight);
  end // always @(posedge)
  assign io_plic_valid = io_interrupt & ~inFlight;
endmodule

module PLICFanIn(
  input  [2:0] io_prio_0,
               io_prio_1,
               io_prio_2,
               io_prio_3,
               io_prio_4,
               io_prio_5,
               io_prio_6,
               io_prio_7,
  input  [7:0] io_ip,
  output [3:0] io_dev,
  output [2:0] io_max
);

  wire [3:0] effectivePriority_1 = {io_ip[0], io_prio_0};
  wire [3:0] effectivePriority_2 = {io_ip[1], io_prio_1};
  wire [3:0] effectivePriority_3 = {io_ip[2], io_prio_2};
  wire [3:0] effectivePriority_4 = {io_ip[3], io_prio_3};
  wire [3:0] effectivePriority_5 = {io_ip[4], io_prio_4};
  wire [3:0] effectivePriority_6 = {io_ip[5], io_prio_5};
  wire [3:0] effectivePriority_7 = {io_ip[6], io_prio_6};
  wire       _T = effectivePriority_1 < 4'h9;
  wire [3:0] _T_2 = _T ? 4'h8 : effectivePriority_1;
  wire       _T_4 = effectivePriority_2 >= effectivePriority_3;
  wire [3:0] _T_6 = _T_4 ? effectivePriority_2 : effectivePriority_3;
  wire       _T_8 = _T_2 >= _T_6;
  wire [3:0] _T_10 = _T_8 ? _T_2 : _T_6;
  wire       _T_12 = effectivePriority_4 >= effectivePriority_5;
  wire [3:0] _T_14 = _T_12 ? effectivePriority_4 : effectivePriority_5;
  wire       _T_16 = effectivePriority_6 >= effectivePriority_7;
  wire [3:0] _T_18 = _T_16 ? effectivePriority_6 : effectivePriority_7;
  wire       _T_20 = _T_14 >= _T_18;
  wire [3:0] _T_22 = _T_20 ? _T_14 : _T_18;
  wire       _T_24 = _T_10 >= _T_22;
  wire [3:0] _T_26 = _T_24 ? _T_10 : _T_22;
  wire       _T_28 = _T_26 >= {io_ip[7], io_prio_7};
  assign io_dev =
    _T_28
      ? {1'h0,
         _T_24
           ? {1'h0, _T_8 ? {1'h0, ~_T} : {1'h1, ~_T_4}}
           : {1'h1, _T_20 ? {1'h0, ~_T_12} : {1'h1, ~_T_16}}}
      : 4'h8;
  assign io_max = _T_28 ? _T_26[2:0] : io_prio_7;
endmodule

module Queue_91(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_read,
  input  [22:0] io_enq_bits_index,
  input  [63:0] io_enq_bits_data,
  input  [7:0]  io_enq_bits_mask,
  input  [9:0]  io_enq_bits_extra_tlrr_extra_source,
  input  [1:0]  io_enq_bits_extra_tlrr_extra_size,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_bits_read,
  output [22:0] io_deq_bits_index,
  output [63:0] io_deq_bits_data,
  output [7:0]  io_deq_bits_mask,
  output [9:0]  io_deq_bits_extra_tlrr_extra_source,
  output [1:0]  io_deq_bits_extra_tlrr_extra_size
);

  reg  maybe_full;
  wire do_enq = ~maybe_full & io_enq_valid;
  always @(posedge clock) begin
    if (reset)
      maybe_full <= 1'h0;
    else if (do_enq != (io_deq_ready & maybe_full))
      maybe_full <= do_enq;
  end // always @(posedge)
  ram_last_combMem ram_read_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_read),
    .R0_data (io_deq_bits_read)
  );
  ram_index_combMem ram_index_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_index),
    .R0_data (io_deq_bits_index)
  );
  ram_data_combMem ram_data_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_strb_combMem ram_mask_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_extra_tlrr_extra_source_combMem ram_extra_tlrr_extra_source_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_extra_tlrr_extra_source),
    .R0_data (io_deq_bits_extra_tlrr_extra_source)
  );
  ram_burst_combMem ram_extra_tlrr_extra_size_ext (
    .R0_addr (1'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (1'h0),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_extra_tlrr_extra_size),
    .R0_data (io_deq_bits_extra_tlrr_extra_size)
  );
  assign io_enq_ready = ~maybe_full;
  assign io_deq_valid = maybe_full;
endmodule

module TLPLIC(
  input         clock,
                reset,
                auto_int_in_0,
                auto_int_in_1,
                auto_int_in_2,
                auto_int_in_3,
                auto_int_in_4,
                auto_int_in_5,
                auto_int_in_6,
                auto_int_in_7,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [27:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
  output        auto_int_out_1_0,
                auto_int_out_0_0,
                auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire        out_woready_18;
  wire        out_woready_23;
  wire        _out_rofireMux_T_1;
  wire        out_backSel_80;
  wire        out_backSel_64;
  wire        completer_0;
  wire [3:0]  completerDev;
  wire        completer_1;
  wire        _out_back_q_io_deq_valid;
  wire        _out_back_q_io_deq_bits_read;
  wire [22:0] _out_back_q_io_deq_bits_index;
  wire [63:0] _out_back_q_io_deq_bits_data;
  wire [7:0]  _out_back_q_io_deq_bits_mask;
  wire [3:0]  _fanin_1_io_dev;
  wire [2:0]  _fanin_1_io_max;
  wire [3:0]  _fanin_io_dev;
  wire [2:0]  _fanin_io_max;
  wire        _gateways_gateway_7_io_plic_valid;
  wire        _gateways_gateway_6_io_plic_valid;
  wire        _gateways_gateway_5_io_plic_valid;
  wire        _gateways_gateway_4_io_plic_valid;
  wire        _gateways_gateway_3_io_plic_valid;
  wire        _gateways_gateway_2_io_plic_valid;
  wire        _gateways_gateway_1_io_plic_valid;
  wire        _gateways_gateway_io_plic_valid;
  reg  [2:0]  priority_0;
  reg  [2:0]  priority_1;
  reg  [2:0]  priority_2;
  reg  [2:0]  priority_3;
  reg  [2:0]  priority_4;
  reg  [2:0]  priority_5;
  reg  [2:0]  priority_6;
  reg  [2:0]  priority_7;
  reg  [2:0]  threshold_0;
  reg  [2:0]  threshold_1;
  reg         pending_0;
  reg         pending_1;
  reg         pending_2;
  reg         pending_3;
  reg         pending_4;
  reg         pending_5;
  reg         pending_6;
  reg         pending_7;
  reg  [6:0]  enables_0_0;
  reg         enables_0_1;
  reg  [6:0]  enables_1_0;
  reg         enables_1_1;
  reg  [3:0]  maxDevs_0;
  reg  [3:0]  maxDevs_1;
  wire [7:0]  pendingUInt =
    {pending_7,
     pending_6,
     pending_5,
     pending_4,
     pending_3,
     pending_2,
     pending_1,
     pending_0};
  reg  [2:0]  intnodeOut_0_REG;
  reg  [2:0]  intnodeOut_0_REG_1;
  wire [15:0] _completedDevs_T_1 = 16'h1 << completerDev;
  wire [7:0]  _GEN = completer_0 | completer_1 ? _completedDevs_T_1[8:1] : 8'h0;
  wire        _out_T_19 =
    {_out_back_q_io_deq_bits_index[22:19],
     _out_back_q_io_deq_bits_index[17:11],
     _out_back_q_io_deq_bits_index[8:5],
     _out_back_q_io_deq_bits_index[3]} == 16'h0;
  wire [31:0] _out_womask_T_23 =
    {{8{_out_back_q_io_deq_bits_mask[7]}},
     {8{_out_back_q_io_deq_bits_mask[6]}},
     {8{_out_back_q_io_deq_bits_mask[5]}},
     {8{_out_back_q_io_deq_bits_mask[4]}}};
  wire        claimer_1 =
    _out_rofireMux_T_1 & out_backSel_80 & _out_T_19 & (|_out_womask_T_23);
  wire [8:0]  _GEN_0 = {5'h0, completerDev};
  wire [8:0]  _out_completer_1_T = {enables_1_1, enables_1_0, 1'h0} >> _GEN_0;
  assign completer_1 = out_woready_18 & (&_out_womask_T_23) & _out_completer_1_T[0];
  wire        claimer_0 =
    _out_rofireMux_T_1 & out_backSel_64 & _out_T_19 & (|_out_womask_T_23);
  assign completerDev = _out_back_q_io_deq_bits_data[35:32];
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & (|({claimer_1, claimer_0} & {claimer_1, claimer_0} - 2'h1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Plic.scala:246 assert((claimer.asUInt & (claimer.asUInt - 1.U)) === 0.U) // One-Hot\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset
          & (|({completer_1, completer_0} & {completer_1, completer_0} - 2'h1))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Plic.scala:263 assert((completer.asUInt & (completer.asUInt - 1.U)) === 0.U) // One-Hot\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & completerDev != _out_back_q_io_deq_bits_data[35:32]) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: completerDev should be consistent for all harts\n    at Plic.scala:293 assert(completerDev === data.extract(log2Ceil(nDevices+1)-1, 0),\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire [8:0]  _out_completer_0_T = {enables_0_1, enables_0_0, 1'h0} >> _GEN_0;
  assign completer_0 = out_woready_23 & (&_out_womask_T_23) & _out_completer_0_T[0];
  wire [6:0]  out_oindex =
    {_out_back_q_io_deq_bits_index[18],
     _out_back_q_io_deq_bits_index[10:9],
     _out_back_q_io_deq_bits_index[4],
     _out_back_q_io_deq_bits_index[2:0]};
  wire [6:0]  _GEN_1 =
    {_out_back_q_io_deq_bits_index[18],
     _out_back_q_io_deq_bits_index[10:9],
     _out_back_q_io_deq_bits_index[4],
     _out_back_q_io_deq_bits_index[2:0]};
  assign out_backSel_64 = _GEN_1 == 7'h40;
  assign out_backSel_80 = _GEN_1 == 7'h50;
  wire        _out_wofireMux_T = _out_back_q_io_deq_valid & auto_in_d_ready;
  assign _out_rofireMux_T_1 = _out_wofireMux_T & _out_back_q_io_deq_bits_read;
  wire        _out_wofireMux_T_2 = _out_wofireMux_T & ~_out_back_q_io_deq_bits_read;
  wire        out_woready_4 = _out_wofireMux_T_2 & _GEN_1 == 7'h1 & _out_T_19;
  wire        out_woready_15 = _out_wofireMux_T_2 & _GEN_1 == 7'h2 & _out_T_19;
  wire        out_woready_20 = _out_wofireMux_T_2 & _GEN_1 == 7'h3 & _out_T_19;
  wire        out_woready_27 = _out_wofireMux_T_2 & _GEN_1 == 7'h20 & _out_T_19;
  wire        out_woready_2 = _out_wofireMux_T_2 & _GEN_1 == 7'h28 & _out_T_19;
  assign out_woready_23 = _out_wofireMux_T_2 & out_backSel_64 & _out_T_19;
  assign out_woready_18 = _out_wofireMux_T_2 & out_backSel_80 & _out_T_19;
  wire        _out_out_bits_data_T_10 = out_oindex == 7'h0;
  wire [3:0]  claiming = (claimer_0 ? maxDevs_0 : 4'h0) | (claimer_1 ? maxDevs_1 : 4'h0);
  wire        claimedDevs_1 = claiming == 4'h1;
  wire        claimedDevs_2 = claiming == 4'h2;
  wire        claimedDevs_3 = claiming == 4'h3;
  wire        claimedDevs_4 = claiming == 4'h4;
  wire        claimedDevs_5 = claiming == 4'h5;
  wire        claimedDevs_6 = claiming == 4'h6;
  wire        claimedDevs_7 = claiming == 4'h7;
  wire        claimedDevs_8 = claiming == 4'h8;
  always @(posedge clock) begin
    if (_out_wofireMux_T_2 & _GEN_1 == 7'h0 & _out_T_19 & _out_back_q_io_deq_bits_mask[4])
      priority_0 <= _out_back_q_io_deq_bits_data[34:32];
    if (out_woready_4 & _out_back_q_io_deq_bits_mask[0])
      priority_1 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_4 & _out_back_q_io_deq_bits_mask[4])
      priority_2 <= _out_back_q_io_deq_bits_data[34:32];
    if (out_woready_15 & _out_back_q_io_deq_bits_mask[0])
      priority_3 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_15 & _out_back_q_io_deq_bits_mask[4])
      priority_4 <= _out_back_q_io_deq_bits_data[34:32];
    if (out_woready_20 & _out_back_q_io_deq_bits_mask[0])
      priority_5 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_20 & _out_back_q_io_deq_bits_mask[4])
      priority_6 <= _out_back_q_io_deq_bits_data[34:32];
    if (_out_wofireMux_T_2 & _GEN_1 == 7'h4 & _out_T_19 & _out_back_q_io_deq_bits_mask[0])
      priority_7 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_23 & _out_back_q_io_deq_bits_mask[0])
      threshold_0 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_18 & _out_back_q_io_deq_bits_mask[0])
      threshold_1 <= _out_back_q_io_deq_bits_data[2:0];
    if (out_woready_27 & _out_back_q_io_deq_bits_mask[0])
      enables_0_0 <= _out_back_q_io_deq_bits_data[7:1];
    if (out_woready_27 & _out_back_q_io_deq_bits_mask[1])
      enables_0_1 <= _out_back_q_io_deq_bits_data[8];
    if (out_woready_2 & _out_back_q_io_deq_bits_mask[0])
      enables_1_0 <= _out_back_q_io_deq_bits_data[7:1];
    if (out_woready_2 & _out_back_q_io_deq_bits_mask[1])
      enables_1_1 <= _out_back_q_io_deq_bits_data[8];
    maxDevs_0 <= _fanin_io_dev;
    maxDevs_1 <= _fanin_1_io_dev;
    intnodeOut_0_REG <= _fanin_io_max;
    intnodeOut_0_REG_1 <= _fanin_1_io_max;
    if (reset) begin
      pending_0 <= 1'h0;
      pending_1 <= 1'h0;
      pending_2 <= 1'h0;
      pending_3 <= 1'h0;
      pending_4 <= 1'h0;
      pending_5 <= 1'h0;
      pending_6 <= 1'h0;
      pending_7 <= 1'h0;
    end
    else begin
      if (claimedDevs_1 | _gateways_gateway_io_plic_valid)
        pending_0 <= ~claimedDevs_1;
      if (claimedDevs_2 | _gateways_gateway_1_io_plic_valid)
        pending_1 <= ~claimedDevs_2;
      if (claimedDevs_3 | _gateways_gateway_2_io_plic_valid)
        pending_2 <= ~claimedDevs_3;
      if (claimedDevs_4 | _gateways_gateway_3_io_plic_valid)
        pending_3 <= ~claimedDevs_4;
      if (claimedDevs_5 | _gateways_gateway_4_io_plic_valid)
        pending_4 <= ~claimedDevs_5;
      if (claimedDevs_6 | _gateways_gateway_5_io_plic_valid)
        pending_5 <= ~claimedDevs_6;
      if (claimedDevs_7 | _gateways_gateway_6_io_plic_valid)
        pending_6 <= ~claimedDevs_7;
      if (claimedDevs_8 | _gateways_gateway_7_io_plic_valid)
        pending_7 <= ~claimedDevs_8;
    end
  end // always @(posedge)
  LevelGateway gateways_gateway (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_0),
    .io_plic_ready    (~pending_0),
    .io_plic_complete (_GEN[0]),
    .io_plic_valid    (_gateways_gateway_io_plic_valid)
  );
  LevelGateway gateways_gateway_1 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_1),
    .io_plic_ready    (~pending_1),
    .io_plic_complete (_GEN[1]),
    .io_plic_valid    (_gateways_gateway_1_io_plic_valid)
  );
  LevelGateway gateways_gateway_2 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_2),
    .io_plic_ready    (~pending_2),
    .io_plic_complete (_GEN[2]),
    .io_plic_valid    (_gateways_gateway_2_io_plic_valid)
  );
  LevelGateway gateways_gateway_3 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_3),
    .io_plic_ready    (~pending_3),
    .io_plic_complete (_GEN[3]),
    .io_plic_valid    (_gateways_gateway_3_io_plic_valid)
  );
  LevelGateway gateways_gateway_4 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_4),
    .io_plic_ready    (~pending_4),
    .io_plic_complete (_GEN[4]),
    .io_plic_valid    (_gateways_gateway_4_io_plic_valid)
  );
  LevelGateway gateways_gateway_5 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_5),
    .io_plic_ready    (~pending_5),
    .io_plic_complete (_GEN[5]),
    .io_plic_valid    (_gateways_gateway_5_io_plic_valid)
  );
  LevelGateway gateways_gateway_6 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_6),
    .io_plic_ready    (~pending_6),
    .io_plic_complete (_GEN[6]),
    .io_plic_valid    (_gateways_gateway_6_io_plic_valid)
  );
  LevelGateway gateways_gateway_7 (
    .clock            (clock),
    .reset            (reset),
    .io_interrupt     (auto_int_in_7),
    .io_plic_ready    (~pending_7),
    .io_plic_complete (_GEN[7]),
    .io_plic_valid    (_gateways_gateway_7_io_plic_valid)
  );
  PLICFanIn fanin (
    .io_prio_0 (priority_0),
    .io_prio_1 (priority_1),
    .io_prio_2 (priority_2),
    .io_prio_3 (priority_3),
    .io_prio_4 (priority_4),
    .io_prio_5 (priority_5),
    .io_prio_6 (priority_6),
    .io_prio_7 (priority_7),
    .io_ip     ({enables_0_1, enables_0_0} & pendingUInt),
    .io_dev    (_fanin_io_dev),
    .io_max    (_fanin_io_max)
  );
  PLICFanIn fanin_1 (
    .io_prio_0 (priority_0),
    .io_prio_1 (priority_1),
    .io_prio_2 (priority_2),
    .io_prio_3 (priority_3),
    .io_prio_4 (priority_4),
    .io_prio_5 (priority_5),
    .io_prio_6 (priority_6),
    .io_prio_7 (priority_7),
    .io_ip     ({enables_1_1, enables_1_0} & pendingUInt),
    .io_dev    (_fanin_1_io_dev),
    .io_max    (_fanin_1_io_max)
  );
  Queue_91 out_back_q (
    .clock                               (clock),
    .reset                               (reset),
    .io_enq_valid                        (auto_in_a_valid),
    .io_enq_bits_read                    (auto_in_a_bits_opcode == 3'h4),
    .io_enq_bits_index                   (auto_in_a_bits_address[25:3]),
    .io_enq_bits_data                    (auto_in_a_bits_data),
    .io_enq_bits_mask                    (auto_in_a_bits_mask),
    .io_enq_bits_extra_tlrr_extra_source (auto_in_a_bits_source),
    .io_enq_bits_extra_tlrr_extra_size   (auto_in_a_bits_size),
    .io_deq_ready                        (auto_in_d_ready),
    .io_enq_ready                        (auto_in_a_ready),
    .io_deq_valid                        (_out_back_q_io_deq_valid),
    .io_deq_bits_read                    (_out_back_q_io_deq_bits_read),
    .io_deq_bits_index                   (_out_back_q_io_deq_bits_index),
    .io_deq_bits_data                    (_out_back_q_io_deq_bits_data),
    .io_deq_bits_mask                    (_out_back_q_io_deq_bits_mask),
    .io_deq_bits_extra_tlrr_extra_source (auto_in_d_bits_source),
    .io_deq_bits_extra_tlrr_extra_size   (auto_in_d_bits_size)
  );
  assign auto_int_out_1_0 = intnodeOut_0_REG_1 > threshold_1;
  assign auto_int_out_0_0 = intnodeOut_0_REG > threshold_0;
  assign auto_in_d_valid = _out_back_q_io_deq_valid;
  assign auto_in_d_bits_opcode = {2'h0, _out_back_q_io_deq_bits_read};
  assign auto_in_d_bits_data =
    ~(_out_out_bits_data_T_10 | out_oindex == 7'h1 | out_oindex == 7'h2
      | out_oindex == 7'h3 | out_oindex == 7'h4 | out_oindex == 7'h10
      | out_oindex == 7'h20 | out_oindex == 7'h28 | out_oindex == 7'h40
      | out_oindex == 7'h50) | _out_T_19
      ? (_out_out_bits_data_T_10
           ? {29'h0, priority_0, 32'h0}
           : out_oindex == 7'h1
               ? {29'h0, priority_2, 29'h0, priority_1}
               : out_oindex == 7'h2
                   ? {29'h0, priority_4, 29'h0, priority_3}
                   : out_oindex == 7'h3
                       ? {29'h0, priority_6, 29'h0, priority_5}
                       : out_oindex == 7'h4
                           ? {61'h0, priority_7}
                           : out_oindex == 7'h10
                               ? {55'h0,
                                  pending_7,
                                  pending_6,
                                  pending_5,
                                  pending_4,
                                  pending_3,
                                  pending_2,
                                  pending_1,
                                  pending_0,
                                  1'h0}
                               : out_oindex == 7'h20
                                   ? {55'h0, enables_0_1, enables_0_0, 1'h0}
                                   : out_oindex == 7'h28
                                       ? {55'h0, enables_1_1, enables_1_0, 1'h0}
                                       : out_oindex == 7'h40
                                           ? {28'h0, maxDevs_0, 29'h0, threshold_0}
                                           : out_oindex == 7'h50
                                               ? {28'h0, maxDevs_1, 29'h0, threshold_1}
                                               : 64'h0)
      : 64'h0;
endmodule

module ClockSinkDomain(
  input         auto_plic_int_in_0,
                auto_plic_int_in_1,
                auto_plic_int_in_2,
                auto_plic_int_in_3,
                auto_plic_int_in_4,
                auto_plic_int_in_5,
                auto_plic_int_in_6,
                auto_plic_int_in_7,
                auto_plic_in_a_valid,
  input  [2:0]  auto_plic_in_a_bits_opcode,
  input  [1:0]  auto_plic_in_a_bits_size,
  input  [9:0]  auto_plic_in_a_bits_source,
  input  [27:0] auto_plic_in_a_bits_address,
  input  [7:0]  auto_plic_in_a_bits_mask,
  input  [63:0] auto_plic_in_a_bits_data,
  input         auto_plic_in_d_ready,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_plic_int_out_1_0,
                auto_plic_int_out_0_0,
                auto_plic_in_a_ready,
                auto_plic_in_d_valid,
  output [2:0]  auto_plic_in_d_bits_opcode,
  output [1:0]  auto_plic_in_d_bits_size,
  output [9:0]  auto_plic_in_d_bits_source,
  output [63:0] auto_plic_in_d_bits_data
);

  TLPLIC plic (
    .clock                  (auto_clock_in_clock),
    .reset                  (auto_clock_in_reset),
    .auto_int_in_0          (auto_plic_int_in_0),
    .auto_int_in_1          (auto_plic_int_in_1),
    .auto_int_in_2          (auto_plic_int_in_2),
    .auto_int_in_3          (auto_plic_int_in_3),
    .auto_int_in_4          (auto_plic_int_in_4),
    .auto_int_in_5          (auto_plic_int_in_5),
    .auto_int_in_6          (auto_plic_int_in_6),
    .auto_int_in_7          (auto_plic_int_in_7),
    .auto_in_a_valid        (auto_plic_in_a_valid),
    .auto_in_a_bits_opcode  (auto_plic_in_a_bits_opcode),
    .auto_in_a_bits_size    (auto_plic_in_a_bits_size),
    .auto_in_a_bits_source  (auto_plic_in_a_bits_source),
    .auto_in_a_bits_address (auto_plic_in_a_bits_address),
    .auto_in_a_bits_mask    (auto_plic_in_a_bits_mask),
    .auto_in_a_bits_data    (auto_plic_in_a_bits_data),
    .auto_in_d_ready        (auto_plic_in_d_ready),
    .auto_int_out_1_0       (auto_plic_int_out_1_0),
    .auto_int_out_0_0       (auto_plic_int_out_0_0),
    .auto_in_a_ready        (auto_plic_in_a_ready),
    .auto_in_d_valid        (auto_plic_in_d_valid),
    .auto_in_d_bits_opcode  (auto_plic_in_d_bits_opcode),
    .auto_in_d_bits_size    (auto_plic_in_d_bits_size),
    .auto_in_d_bits_source  (auto_plic_in_d_bits_source),
    .auto_in_d_bits_data    (auto_plic_in_d_bits_data)
  );
endmodule

module CLINT(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [25:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                io_rtcTick,
  output        auto_int_out_0,
                auto_int_out_1,
                auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire        out_woready_9;
  wire        out_woready_17;
  reg         casez_tmp;
  reg  [63:0] casez_tmp_0;
  reg  [63:0] time_0;
  reg  [63:0] timecmp_0;
  reg         ipi_0;
  wire        out_front_bits_read = auto_in_a_bits_opcode == 3'h4;
  wire        _out_out_bits_data_WIRE_1 = auto_in_a_bits_address[13:3] == 11'h0;
  wire        valids_1_0 = out_woready_9 & auto_in_a_bits_mask[0];
  wire        valids_1_1 = out_woready_9 & auto_in_a_bits_mask[1];
  wire        valids_1_2 = out_woready_9 & auto_in_a_bits_mask[2];
  wire        valids_1_3 = out_woready_9 & auto_in_a_bits_mask[3];
  wire        valids_1_4 = out_woready_9 & auto_in_a_bits_mask[4];
  wire        valids_1_5 = out_woready_9 & auto_in_a_bits_mask[5];
  wire        valids_1_6 = out_woready_9 & auto_in_a_bits_mask[6];
  wire        valids_1_7 = out_woready_9 & auto_in_a_bits_mask[7];
  wire        valids_0 = out_woready_17 & auto_in_a_bits_mask[0];
  wire        valids_1 = out_woready_17 & auto_in_a_bits_mask[1];
  wire        valids_2 = out_woready_17 & auto_in_a_bits_mask[2];
  wire        valids_3 = out_woready_17 & auto_in_a_bits_mask[3];
  wire        valids_4 = out_woready_17 & auto_in_a_bits_mask[4];
  wire        valids_5 = out_woready_17 & auto_in_a_bits_mask[5];
  wire        valids_6 = out_woready_17 & auto_in_a_bits_mask[6];
  wire        valids_7 = out_woready_17 & auto_in_a_bits_mask[7];
  wire        _out_wofireMux_T_2 =
    auto_in_a_valid & auto_in_d_ready & ~out_front_bits_read;
  assign out_woready_17 =
    _out_wofireMux_T_2 & auto_in_a_bits_address[15:14] == 2'h1
    & _out_out_bits_data_WIRE_1;
  assign out_woready_9 =
    _out_wofireMux_T_2 & auto_in_a_bits_address[15:14] == 2'h2
    & (&(auto_in_a_bits_address[13:3]));
  always @(*) begin
    casez (auto_in_a_bits_address[15:14])
      2'b00:
        casez_tmp = _out_out_bits_data_WIRE_1;
      2'b01:
        casez_tmp = _out_out_bits_data_WIRE_1;
      2'b10:
        casez_tmp = &(auto_in_a_bits_address[13:3]);
      default:
        casez_tmp = 1'h1;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_in_a_bits_address[15:14])
      2'b00:
        casez_tmp_0 = {63'h0, ipi_0};
      2'b01:
        casez_tmp_0 = timecmp_0;
      2'b10:
        casez_tmp_0 = time_0;
      default:
        casez_tmp_0 = 64'h0;
    endcase
  end // always @(*)
  always @(posedge clock) begin
    if (reset) begin
      time_0 <= 64'h0;
      ipi_0 <= 1'h0;
    end
    else begin
      if (valids_1_0 | valids_1_1 | valids_1_2 | valids_1_3 | valids_1_4 | valids_1_5
          | valids_1_6 | valids_1_7)
        time_0 <=
          {valids_1_7 ? auto_in_a_bits_data[63:56] : time_0[63:56],
           valids_1_6 ? auto_in_a_bits_data[55:48] : time_0[55:48],
           valids_1_5 ? auto_in_a_bits_data[47:40] : time_0[47:40],
           valids_1_4 ? auto_in_a_bits_data[39:32] : time_0[39:32],
           valids_1_3 ? auto_in_a_bits_data[31:24] : time_0[31:24],
           valids_1_2 ? auto_in_a_bits_data[23:16] : time_0[23:16],
           valids_1_1 ? auto_in_a_bits_data[15:8] : time_0[15:8],
           valids_1_0 ? auto_in_a_bits_data[7:0] : time_0[7:0]};
      else if (io_rtcTick)
        time_0 <= time_0 + 64'h1;
      if (_out_wofireMux_T_2 & auto_in_a_bits_address[15:14] == 2'h0
          & _out_out_bits_data_WIRE_1 & auto_in_a_bits_mask[0])
        ipi_0 <= auto_in_a_bits_data[0];
    end
    if (valids_0 | valids_1 | valids_2 | valids_3 | valids_4 | valids_5 | valids_6
        | valids_7)
      timecmp_0 <=
        {valids_7 ? auto_in_a_bits_data[63:56] : timecmp_0[63:56],
         valids_6 ? auto_in_a_bits_data[55:48] : timecmp_0[55:48],
         valids_5 ? auto_in_a_bits_data[47:40] : timecmp_0[47:40],
         valids_4 ? auto_in_a_bits_data[39:32] : timecmp_0[39:32],
         valids_3 ? auto_in_a_bits_data[31:24] : timecmp_0[31:24],
         valids_2 ? auto_in_a_bits_data[23:16] : timecmp_0[23:16],
         valids_1 ? auto_in_a_bits_data[15:8] : timecmp_0[15:8],
         valids_0 ? auto_in_a_bits_data[7:0] : timecmp_0[7:0]};
  end // always @(posedge)
  assign auto_int_out_0 = ipi_0;
  assign auto_int_out_1 = time_0 >= timecmp_0;
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_opcode = {2'h0, out_front_bits_read};
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data = casez_tmp ? casez_tmp_0 : 64'h0;
endmodule

module BundleBridgeNexus_15(
  output auto_out
);

  wire outputs_0 = 1'h0;
  assign auto_out = outputs_0;
endmodule

module TLXbar_10(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [8:0]  auto_in_a_bits_address,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_1_a_ready,
                auto_out_1_d_valid,
  input  [31:0] auto_out_1_d_bits_data,
  input         auto_out_0_a_ready,
                auto_out_0_d_valid,
                auto_out_0_d_bits_denied,
  input  [31:0] auto_out_0_d_bits_data,
  input         auto_out_0_d_bits_corrupt,
  output        auto_in_a_ready,
                auto_in_d_valid,
                auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
  output [6:0]  auto_out_1_a_bits_address,
  output [31:0] auto_out_1_a_bits_data,
  output        auto_out_1_d_ready,
                auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output [8:0]  auto_out_0_a_bits_address,
  output [31:0] auto_out_0_a_bits_data,
  output        auto_out_0_d_ready
);

  wire [6:0] _GEN = auto_in_a_bits_address[8:2] ^ 7'h11;
  wire       requestAIO_0_0 =
    auto_in_a_bits_address[8:6] == 3'h0 | {_GEN[6:2], _GEN[0]} == 6'h0
    | auto_in_a_bits_address[8:3] == 6'hB | auto_in_a_bits_address[8:5] == 4'h3
    | auto_in_a_bits_address[8:7] == 2'h1 | auto_in_a_bits_address[8];
  wire       requestAIO_0_1 =
    {auto_in_a_bits_address[8:4] ^ 5'h4, auto_in_a_bits_address[2]} == 6'h0
    | auto_in_a_bits_address[8:3] == 6'hA;
  reg        beatsLeft;
  wire [1:0] readys_valid = {auto_out_1_d_valid, auto_out_0_d_valid};
  reg  [1:0] readys_mask;
  wire [1:0] _readys_filter_T_1 = readys_valid & ~readys_mask;
  wire [1:0] readys_readys =
    ~({readys_mask[1], _readys_filter_T_1[1] | readys_mask[0]}
      & {|_readys_filter_T_1, auto_out_1_d_valid | _readys_filter_T_1[0]});
  wire       winner_0 = readys_readys[0] & auto_out_0_d_valid;
  wire       winner_1 = readys_readys[1] & auto_out_1_d_valid;
  wire       _in_0_d_valid_T = auto_out_0_d_valid | auto_out_1_d_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset & ~(~winner_0 | ~winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:77 assert((prefixOR zip winner) map { case (p,w) => !p || !w } reduce {_ && _})\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~_in_0_d_valid_T | winner_0 | winner_1)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed\n    at Arbiter.scala:79 assert (!valids.reduce(_||_) || winner.reduce(_||_))\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg        state_0;
  reg        state_1;
  wire       muxState_0 = beatsLeft ? state_0 : winner_0;
  wire       in_0_d_valid =
    beatsLeft
      ? state_0 & auto_out_0_d_valid | state_1 & auto_out_1_d_valid
      : _in_0_d_valid_T;
  wire [1:0] _readys_mask_T = readys_readys & readys_valid;
  wire       latch = ~beatsLeft & auto_in_d_ready;
  always @(posedge clock) begin
    if (reset) begin
      beatsLeft <= 1'h0;
      readys_mask <= 2'h3;
      state_0 <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      beatsLeft <= ~latch & beatsLeft - (auto_in_d_ready & in_0_d_valid);
      if (latch & (|readys_valid))
        readys_mask <= _readys_mask_T | {_readys_mask_T[0], 1'h0};
      if (beatsLeft) begin
      end
      else begin
        state_0 <= winner_0;
        state_1 <= winner_1;
      end
    end
  end // always @(posedge)
  assign auto_in_a_ready =
    requestAIO_0_0 & auto_out_0_a_ready | requestAIO_0_1 & auto_out_1_a_ready;
  assign auto_in_d_valid = in_0_d_valid;
  assign auto_in_d_bits_denied = muxState_0 & auto_out_0_d_bits_denied;
  assign auto_in_d_bits_data =
    (muxState_0 ? auto_out_0_d_bits_data : 32'h0)
    | ((beatsLeft ? state_1 : winner_1) ? auto_out_1_d_bits_data : 32'h0);
  assign auto_in_d_bits_corrupt = muxState_0 & auto_out_0_d_bits_corrupt;
  assign auto_out_1_a_valid = auto_in_a_valid & requestAIO_0_1;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address[6:0];
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & (beatsLeft ? state_1 : readys_readys[1]);
  assign auto_out_0_a_valid = auto_in_a_valid & requestAIO_0_0;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_a_bits_address = auto_in_a_bits_address;
  assign auto_out_0_a_bits_data = auto_in_a_bits_data;
  assign auto_out_0_d_ready = auto_in_d_ready & (beatsLeft ? state_0 : readys_readys[0]);
endmodule

module DMIToTL(
  input         auto_out_a_ready,
                auto_out_d_valid,
                auto_out_d_bits_denied,
  input  [31:0] auto_out_d_bits_data,
  input         auto_out_d_bits_corrupt,
                io_dmi_req_valid,
  input  [6:0]  io_dmi_req_bits_addr,
  input  [31:0] io_dmi_req_bits_data,
  input  [1:0]  io_dmi_req_bits_op,
  input         io_dmi_resp_ready,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [8:0]  auto_out_a_bits_address,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready,
                io_dmi_req_ready,
                io_dmi_resp_valid,
  output [31:0] io_dmi_resp_bits_data,
  output [1:0]  io_dmi_resp_bits_resp
);

  wire _T = io_dmi_req_bits_op == 2'h2;
  wire _T_1 = io_dmi_req_bits_op == 2'h1;
  assign auto_out_a_valid = io_dmi_req_valid;
  assign auto_out_a_bits_opcode = _T ? 3'h0 : {_T_1, 2'h0};
  assign auto_out_a_bits_address = _T | _T_1 ? {io_dmi_req_bits_addr, 2'h0} : 9'h48;
  assign auto_out_a_bits_data = _T ? io_dmi_req_bits_data : 32'h0;
  assign auto_out_d_ready = io_dmi_resp_ready;
  assign io_dmi_req_ready = auto_out_a_ready;
  assign io_dmi_resp_valid = auto_out_d_valid;
  assign io_dmi_resp_bits_data = auto_out_d_bits_data;
  assign io_dmi_resp_bits_resp = {1'h0, auto_out_d_bits_corrupt | auto_out_d_bits_denied};
endmodule

module TLDebugModuleOuter(
  input         clock,
                reset,
                auto_dmi_in_a_valid,
  input  [2:0]  auto_dmi_in_a_bits_opcode,
  input  [6:0]  auto_dmi_in_a_bits_address,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_d_ready,
                io_ctrl_dmactiveAck,
                io_innerCtrl_ready,
                io_hgDebugInt_0,
  output        auto_dmi_in_a_ready,
                auto_dmi_in_d_valid,
  output [31:0] auto_dmi_in_d_bits_data,
  output        auto_int_out_0,
                io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_innerCtrl_valid,
                io_innerCtrl_bits_resumereq,
                io_innerCtrl_bits_ackhavereset,
                io_innerCtrl_bits_hrmask_0
);

  wire out_woready_12;
  wire DMCONTROLWrData_setresethaltreq;
  wire DMCONTROLWrData_clrresethaltreq;
  reg  DMCONTROLReg_haltreq;
  reg  DMCONTROLReg_ndmreset;
  reg  DMCONTROLReg_dmactive;
  reg  hrmaskReg_0;
  wire hrmaskNxt_0 =
    ~(~DMCONTROLReg_dmactive | out_woready_12 & DMCONTROLWrData_clrresethaltreq)
    & (out_woready_12 & DMCONTROLWrData_setresethaltreq | hrmaskReg_0);
  wire _out_out_bits_data_WIRE_1 =
    {auto_dmi_in_a_bits_address[4], auto_dmi_in_a_bits_address[2]} == 2'h0;
  assign DMCONTROLWrData_clrresethaltreq = auto_dmi_in_a_bits_data[2];
  assign DMCONTROLWrData_setresethaltreq = auto_dmi_in_a_bits_data[3];
  assign out_woready_12 =
    auto_dmi_in_a_valid & auto_dmi_in_d_ready & auto_dmi_in_a_bits_opcode != 3'h4
    & ~(auto_dmi_in_a_bits_address[3]) & _out_out_bits_data_WIRE_1;
  reg  debugIntRegs_0;
  reg  innerCtrlValidReg;
  reg  innerCtrlResumeReqReg;
  reg  innerCtrlAckHaveResetReg;
  wire _io_innerCtrl_valid_output = out_woready_12 | innerCtrlValidReg;
  wire _io_innerCtrl_bits_resumereq_output =
    out_woready_12 & auto_dmi_in_a_bits_data[30] | innerCtrlResumeReqReg;
  wire _io_innerCtrl_bits_ackhavereset_output =
    out_woready_12 & auto_dmi_in_a_bits_data[28] | innerCtrlAckHaveResetReg;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      DMCONTROLReg_haltreq <= 1'h0;
      DMCONTROLReg_ndmreset <= 1'h0;
      DMCONTROLReg_dmactive <= 1'h0;
      hrmaskReg_0 <= 1'h0;
      debugIntRegs_0 <= 1'h0;
      innerCtrlValidReg <= 1'h0;
      innerCtrlResumeReqReg <= 1'h0;
      innerCtrlAckHaveResetReg <= 1'h0;
    end
    else begin
      DMCONTROLReg_haltreq <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[31] : DMCONTROLReg_haltreq);
      DMCONTROLReg_ndmreset <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[1] : DMCONTROLReg_ndmreset);
      if (out_woready_12)
        DMCONTROLReg_dmactive <= auto_dmi_in_a_bits_data[0];
      hrmaskReg_0 <= hrmaskNxt_0;
      debugIntRegs_0 <=
        DMCONTROLReg_dmactive
        & (out_woready_12 ? auto_dmi_in_a_bits_data[31] : debugIntRegs_0);
      innerCtrlValidReg <= _io_innerCtrl_valid_output & ~io_innerCtrl_ready;
      innerCtrlResumeReqReg <= _io_innerCtrl_bits_resumereq_output & ~io_innerCtrl_ready;
      innerCtrlAckHaveResetReg <=
        _io_innerCtrl_bits_ackhavereset_output & ~io_innerCtrl_ready;
    end
  end // always @(posedge, posedge)
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_data =
    _out_out_bits_data_WIRE_1
      ? (auto_dmi_in_a_bits_address[3]
           ? 32'h112380
           : {DMCONTROLReg_haltreq,
              29'h0,
              DMCONTROLReg_ndmreset,
              DMCONTROLReg_dmactive & io_ctrl_dmactiveAck})
      : 32'h0;
  assign auto_int_out_0 = debugIntRegs_0 | io_hgDebugInt_0;
  assign io_ctrl_ndreset = DMCONTROLReg_ndmreset;
  assign io_ctrl_dmactive = DMCONTROLReg_dmactive;
  assign io_innerCtrl_valid = _io_innerCtrl_valid_output;
  assign io_innerCtrl_bits_resumereq = _io_innerCtrl_bits_resumereq_output;
  assign io_innerCtrl_bits_ackhavereset = _io_innerCtrl_bits_ackhavereset_output;
  assign io_innerCtrl_bits_hrmask_0 = hrmaskNxt_0;
endmodule

module IntSyncCrossingSource_4(
  input  auto_in_0,
  output auto_out_sync_0
);

  assign auto_out_sync_0 = auto_in_0;
endmodule

module TLBusBypassBar(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [8:0]  auto_in_a_bits_address,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_1_a_ready,
                auto_out_1_d_valid,
  input  [2:0]  auto_out_1_d_bits_opcode,
  input         auto_out_1_d_bits_denied,
  input  [31:0] auto_out_1_d_bits_data,
  input         auto_out_1_d_bits_corrupt,
                auto_out_0_a_ready,
                auto_out_0_d_valid,
  input  [2:0]  auto_out_0_d_bits_opcode,
  input         auto_out_0_d_bits_denied,
                auto_out_0_d_bits_corrupt,
                io_bypass,
  output        auto_in_a_ready,
                auto_in_d_valid,
                auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_1_a_valid,
  output [2:0]  auto_out_1_a_bits_opcode,
  output [8:0]  auto_out_1_a_bits_address,
  output [31:0] auto_out_1_a_bits_data,
  output        auto_out_1_d_ready,
                auto_out_0_a_valid,
  output [2:0]  auto_out_0_a_bits_opcode,
  output        auto_out_0_d_ready
);

  reg        in_reset;
  reg        bypass_reg;
  wire       bypass = in_reset ? io_bypass : bypass_reg;
  reg  [1:0] flight;
  wire       _nodeIn_a_ready_T = bypass == io_bypass;
  wire       nodeIn_a_ready =
    _nodeIn_a_ready_T & (bypass ? auto_out_0_a_ready : auto_out_1_a_ready);
  wire       nodeIn_d_valid = bypass ? auto_out_0_d_valid : auto_out_1_d_valid;
  wire [1:0] _GEN =
    bypass ? auto_out_0_d_bits_opcode[2:1] : auto_out_1_d_bits_opcode[2:1];
  wire       done_3 = auto_in_d_ready & nodeIn_d_valid;
  wire [1:0] next_flight =
    flight + {1'h0, done_3 & _GEN[1] & ~(_GEN[0])}
    + {1'h0, nodeIn_a_ready & auto_in_a_valid} - {1'h0, done_3};
  always @(posedge clock) begin
    if (reset) begin
      in_reset <= 1'h1;
      flight <= 2'h0;
    end
    else begin
      in_reset <= 1'h0;
      flight <= next_flight;
    end
    if (in_reset | next_flight == 2'h0)
      bypass_reg <= io_bypass;
  end // always @(posedge)
  assign auto_in_a_ready = nodeIn_a_ready;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_denied =
    bypass ? auto_out_0_d_bits_denied : auto_out_1_d_bits_denied;
  assign auto_in_d_bits_data = bypass ? 32'h0 : auto_out_1_d_bits_data;
  assign auto_in_d_bits_corrupt =
    bypass ? auto_out_0_d_bits_corrupt : auto_out_1_d_bits_corrupt;
  assign auto_out_1_a_valid = _nodeIn_a_ready_T & auto_in_a_valid & ~bypass;
  assign auto_out_1_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_1_a_bits_address = auto_in_a_bits_address;
  assign auto_out_1_a_bits_data = auto_in_a_bits_data;
  assign auto_out_1_d_ready = auto_in_d_ready & ~bypass;
  assign auto_out_0_a_valid = _nodeIn_a_ready_T & auto_in_a_valid & bypass;
  assign auto_out_0_a_bits_opcode = auto_in_a_bits_opcode;
  assign auto_out_0_d_ready = auto_in_d_ready & bypass;
endmodule

module TLError_1(
  input        clock,
               reset,
               auto_in_a_valid,
  input  [2:0] auto_in_a_bits_opcode,
  input        auto_in_d_ready,
  output       auto_in_a_ready,
               auto_in_d_valid,
  output [2:0] auto_in_d_bits_opcode,
  output       auto_in_d_bits_denied,
               auto_in_d_bits_corrupt
);

  wire       da_ready;
  reg  [2:0] casez_tmp;
  reg        idle;
  wire       winner_1 = auto_in_a_valid & idle;
  always @(*) begin
    casez (auto_in_a_bits_opcode)
      3'b000:
        casez_tmp = 3'h0;
      3'b001:
        casez_tmp = 3'h0;
      3'b010:
        casez_tmp = 3'h1;
      3'b011:
        casez_tmp = 3'h1;
      3'b100:
        casez_tmp = 3'h1;
      3'b101:
        casez_tmp = 3'h2;
      3'b110:
        casez_tmp = 3'h4;
      default:
        casez_tmp = 3'h4;
    endcase
  end // always @(*)
  reg        beatsLeft;
  reg        state_1;
  wire       _nodeIn_d_bits_WIRE_5 = beatsLeft ? state_1 : winner_1;
  assign da_ready = auto_in_d_ready & (~beatsLeft | state_1);
  wire       nodeIn_d_valid = (~beatsLeft | state_1) & winner_1;
  always @(posedge clock) begin
    if (reset) begin
      idle <= 1'h1;
      beatsLeft <= 1'h0;
      state_1 <= 1'h0;
    end
    else begin
      idle <= ~(da_ready & winner_1 & casez_tmp == 3'h4) & idle;
      beatsLeft <=
        ~(~beatsLeft & auto_in_d_ready) & beatsLeft - (auto_in_d_ready & nodeIn_d_valid);
      if (beatsLeft) begin
      end
      else
        state_1 <= winner_1;
    end
  end // always @(posedge)
  assign auto_in_a_ready = da_ready & idle;
  assign auto_in_d_valid = nodeIn_d_valid;
  assign auto_in_d_bits_opcode = _nodeIn_d_bits_WIRE_5 ? casez_tmp : 3'h0;
  assign auto_in_d_bits_denied = _nodeIn_d_bits_WIRE_5;
  assign auto_in_d_bits_corrupt = _nodeIn_d_bits_WIRE_5 & casez_tmp[0];
endmodule

module TLBusBypass(
  input         clock,
                reset,
                auto_node_out_out_a_ready,
                auto_node_out_out_d_valid,
  input  [2:0]  auto_node_out_out_d_bits_opcode,
  input         auto_node_out_out_d_bits_denied,
  input  [31:0] auto_node_out_out_d_bits_data,
  input         auto_node_out_out_d_bits_corrupt,
                auto_node_in_in_a_valid,
  input  [2:0]  auto_node_in_in_a_bits_opcode,
  input  [8:0]  auto_node_in_in_a_bits_address,
  input  [31:0] auto_node_in_in_a_bits_data,
  input         auto_node_in_in_d_ready,
                io_bypass,
  output        auto_node_out_out_a_valid,
  output [2:0]  auto_node_out_out_a_bits_opcode,
  output [8:0]  auto_node_out_out_a_bits_address,
  output [31:0] auto_node_out_out_a_bits_data,
  output        auto_node_out_out_d_ready,
                auto_node_in_in_a_ready,
                auto_node_in_in_d_valid,
                auto_node_in_in_d_bits_denied,
  output [31:0] auto_node_in_in_d_bits_data,
  output        auto_node_in_in_d_bits_corrupt
);

  wire       _error_auto_in_a_ready;
  wire       _error_auto_in_d_valid;
  wire [2:0] _error_auto_in_d_bits_opcode;
  wire       _error_auto_in_d_bits_denied;
  wire       _error_auto_in_d_bits_corrupt;
  wire       _bar_auto_out_0_a_valid;
  wire [2:0] _bar_auto_out_0_a_bits_opcode;
  wire       _bar_auto_out_0_d_ready;
  TLBusBypassBar bar (
    .clock                     (clock),
    .reset                     (reset),
    .auto_in_a_valid           (auto_node_in_in_a_valid),
    .auto_in_a_bits_opcode     (auto_node_in_in_a_bits_opcode),
    .auto_in_a_bits_address    (auto_node_in_in_a_bits_address),
    .auto_in_a_bits_data       (auto_node_in_in_a_bits_data),
    .auto_in_d_ready           (auto_node_in_in_d_ready),
    .auto_out_1_a_ready        (auto_node_out_out_a_ready),
    .auto_out_1_d_valid        (auto_node_out_out_d_valid),
    .auto_out_1_d_bits_opcode  (auto_node_out_out_d_bits_opcode),
    .auto_out_1_d_bits_denied  (auto_node_out_out_d_bits_denied),
    .auto_out_1_d_bits_data    (auto_node_out_out_d_bits_data),
    .auto_out_1_d_bits_corrupt (auto_node_out_out_d_bits_corrupt),
    .auto_out_0_a_ready        (_error_auto_in_a_ready),
    .auto_out_0_d_valid        (_error_auto_in_d_valid),
    .auto_out_0_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_out_0_d_bits_denied  (_error_auto_in_d_bits_denied),
    .auto_out_0_d_bits_corrupt (_error_auto_in_d_bits_corrupt),
    .io_bypass                 (io_bypass),
    .auto_in_a_ready           (auto_node_in_in_a_ready),
    .auto_in_d_valid           (auto_node_in_in_d_valid),
    .auto_in_d_bits_denied     (auto_node_in_in_d_bits_denied),
    .auto_in_d_bits_data       (auto_node_in_in_d_bits_data),
    .auto_in_d_bits_corrupt    (auto_node_in_in_d_bits_corrupt),
    .auto_out_1_a_valid        (auto_node_out_out_a_valid),
    .auto_out_1_a_bits_opcode  (auto_node_out_out_a_bits_opcode),
    .auto_out_1_a_bits_address (auto_node_out_out_a_bits_address),
    .auto_out_1_a_bits_data    (auto_node_out_out_a_bits_data),
    .auto_out_1_d_ready        (auto_node_out_out_d_ready),
    .auto_out_0_a_valid        (_bar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_bar_auto_out_0_a_bits_opcode),
    .auto_out_0_d_ready        (_bar_auto_out_0_d_ready)
  );
  TLError_1 error (
    .clock                  (clock),
    .reset                  (reset),
    .auto_in_a_valid        (_bar_auto_out_0_a_valid),
    .auto_in_a_bits_opcode  (_bar_auto_out_0_a_bits_opcode),
    .auto_in_d_ready        (_bar_auto_out_0_d_ready),
    .auto_in_a_ready        (_error_auto_in_a_ready),
    .auto_in_d_valid        (_error_auto_in_d_valid),
    .auto_in_d_bits_opcode  (_error_auto_in_d_bits_opcode),
    .auto_in_d_bits_denied  (_error_auto_in_d_bits_denied),
    .auto_in_d_bits_corrupt (_error_auto_in_d_bits_corrupt)
  );
endmodule

module AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  reg sync_0;
  reg sync_1;
  reg sync_2;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      sync_0 <= 1'h0;
      sync_1 <= 1'h0;
      sync_2 <= 1'h0;
    end
    else begin
      sync_0 <= sync_1;
      sync_1 <= sync_2;
      sync_2 <= io_d;
    end
  end // always @(posedge, posedge)
  assign io_q = sync_0;
endmodule

module AsyncResetSynchronizerShiftReg_w1_d3_i0(
  input  clock,
         reset,
         io_d,
  output io_q
);

  AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module AsyncResetSynchronizerShiftReg_w1_d3_i0_1(
  input  clock,
         reset,
         io_d,
  output io_q
);

  AsyncResetSynchronizerPrimitiveShiftReg_d3_i0 output_chain (
    .clock (clock),
    .reset (reset),
    .io_d  (io_d),
    .io_q  (io_q)
  );
endmodule

module AsyncValidSync(
  input  io_in,
         clock,
         reset,
  output io_out
);

  AsyncResetSynchronizerShiftReg_w1_d3_i0_1 io_out_source_valid_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (io_in),
    .io_q  (io_out)
  );
endmodule

module AsyncQueueSource(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [8:0]  io_enq_bits_address,
  input  [31:0] io_enq_bits_data,
  input         io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n,
  output        io_enq_ready,
  output [2:0]  io_async_mem_0_opcode,
                io_async_mem_0_param,
  output [1:0]  io_async_mem_0_size,
  output        io_async_mem_0_source,
  output [8:0]  io_async_mem_0_address,
  output [3:0]  io_async_mem_0_mask,
  output [31:0] io_async_mem_0_data,
  output        io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n
);

  wire        _io_enq_ready_output;
  wire        _sink_valid_io_out;
  wire        _sink_extend_io_out;
  wire        _source_valid_0_io_out;
  wire        _ridx_ridx_gray_io_q;
  reg  [2:0]  mem_0_opcode;
  reg  [2:0]  mem_0_param;
  reg  [1:0]  mem_0_size;
  reg         mem_0_source;
  reg  [8:0]  mem_0_address;
  reg  [3:0]  mem_0_mask;
  reg  [31:0] mem_0_data;
  reg         mem_0_corrupt;
  wire        _T = _io_enq_ready_output & io_enq_valid;
  reg         widx_widx_bin;
  reg         ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg         widx_gray;
  always @(posedge clock) begin
    if (_T) begin
      mem_0_opcode <= io_enq_bits_opcode;
      mem_0_param <= 3'h0;
      mem_0_size <= 2'h2;
      mem_0_address <= io_enq_bits_address;
      mem_0_mask <= 4'hF;
      mem_0_data <= io_enq_bits_data;
    end
    mem_0_source <= ~_T & mem_0_source;
    mem_0_corrupt <= ~_T & mem_0_corrupt;
  end // always @(posedge)
  wire        widx_incremented = _sink_valid_io_out & widx_widx_bin + _T;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      widx_widx_bin <= widx_incremented;
      ready_reg <= _sink_valid_io_out & widx_incremented != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_opcode = mem_0_opcode;
  assign io_async_mem_0_param = mem_0_param;
  assign io_async_mem_0_size = mem_0_size;
  assign io_async_mem_0_source = mem_0_source;
  assign io_async_mem_0_address = mem_0_address;
  assign io_async_mem_0_mask = mem_0_mask;
  assign io_async_mem_0_data = mem_0_data;
  assign io_async_mem_0_corrupt = mem_0_corrupt;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module ClockCrossingReg_w43(
  input         clock,
  input  [42:0] io_d,
  input         io_en,
  output [42:0] io_q
);

  reg [42:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink(
  input         clock,
                reset,
                io_deq_ready,
  input  [2:0]  io_async_mem_0_opcode,
  input  [1:0]  io_async_mem_0_param,
                io_async_mem_0_size,
  input         io_async_mem_0_source,
                io_async_mem_0_sink,
                io_async_mem_0_denied,
  input  [31:0] io_async_mem_0_data,
  input         io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output        io_deq_bits_denied,
  output [31:0] io_deq_bits_data,
  output        io_deq_bits_corrupt,
                io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [42:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx_incremented =
    _source_valid_io_out & ridx_ridx_bin + (io_deq_ready & _io_deq_valid_output);
  wire        valid = _source_valid_io_out & ridx_incremented != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx_incremented;
      valid_reg <= valid;
      ridx_gray <= ridx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w43 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_opcode,
        io_async_mem_0_param,
        io_async_mem_0_size,
        io_async_mem_0_source,
        io_async_mem_0_sink,
        io_async_mem_0_denied,
        io_async_mem_0_data,
        io_async_mem_0_corrupt}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = _io_deq_bits_deq_bits_reg_io_q[42:40];
  assign io_deq_bits_denied = _io_deq_bits_deq_bits_reg_io_q[33];
  assign io_deq_bits_data = _io_deq_bits_deq_bits_reg_io_q[32:1];
  assign io_deq_bits_corrupt = _io_deq_bits_deq_bits_reg_io_q[0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module TLAsyncCrossingSource(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [8:0]  auto_in_a_bits_address,
  input  [31:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ridx,
                auto_out_a_safe_ridx_valid,
                auto_out_a_safe_sink_reset_n,
  input  [2:0]  auto_out_d_mem_0_opcode,
  input  [1:0]  auto_out_d_mem_0_param,
                auto_out_d_mem_0_size,
  input         auto_out_d_mem_0_source,
                auto_out_d_mem_0_sink,
                auto_out_d_mem_0_denied,
  input  [31:0] auto_out_d_mem_0_data,
  input         auto_out_d_mem_0_corrupt,
                auto_out_d_widx,
                auto_out_d_safe_widx_valid,
                auto_out_d_safe_source_reset_n,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output        auto_in_d_bits_denied,
  output [31:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
  output [2:0]  auto_out_a_mem_0_opcode,
                auto_out_a_mem_0_param,
  output [1:0]  auto_out_a_mem_0_size,
  output        auto_out_a_mem_0_source,
  output [8:0]  auto_out_a_mem_0_address,
  output [3:0]  auto_out_a_mem_0_mask,
  output [31:0] auto_out_a_mem_0_data,
  output        auto_out_a_mem_0_corrupt,
                auto_out_a_widx,
                auto_out_a_safe_widx_valid,
                auto_out_a_safe_source_reset_n,
                auto_out_d_ridx,
                auto_out_d_safe_ridx_valid,
                auto_out_d_safe_sink_reset_n
);

  AsyncQueueSource nodeOut_a_source (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_valid                 (auto_in_a_valid),
    .io_enq_bits_opcode           (auto_in_a_bits_opcode),
    .io_enq_bits_address          (auto_in_a_bits_address),
    .io_enq_bits_data             (auto_in_a_bits_data),
    .io_async_ridx                (auto_out_a_ridx),
    .io_async_safe_ridx_valid     (auto_out_a_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_out_a_safe_sink_reset_n),
    .io_enq_ready                 (auto_in_a_ready),
    .io_async_mem_0_opcode        (auto_out_a_mem_0_opcode),
    .io_async_mem_0_param         (auto_out_a_mem_0_param),
    .io_async_mem_0_size          (auto_out_a_mem_0_size),
    .io_async_mem_0_source        (auto_out_a_mem_0_source),
    .io_async_mem_0_address       (auto_out_a_mem_0_address),
    .io_async_mem_0_mask          (auto_out_a_mem_0_mask),
    .io_async_mem_0_data          (auto_out_a_mem_0_data),
    .io_async_mem_0_corrupt       (auto_out_a_mem_0_corrupt),
    .io_async_widx                (auto_out_a_widx),
    .io_async_safe_widx_valid     (auto_out_a_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_out_a_safe_source_reset_n)
  );
  AsyncQueueSink nodeIn_d_sink (
    .clock                        (clock),
    .reset                        (reset),
    .io_deq_ready                 (auto_in_d_ready),
    .io_async_mem_0_opcode        (auto_out_d_mem_0_opcode),
    .io_async_mem_0_param         (auto_out_d_mem_0_param),
    .io_async_mem_0_size          (auto_out_d_mem_0_size),
    .io_async_mem_0_source        (auto_out_d_mem_0_source),
    .io_async_mem_0_sink          (auto_out_d_mem_0_sink),
    .io_async_mem_0_denied        (auto_out_d_mem_0_denied),
    .io_async_mem_0_data          (auto_out_d_mem_0_data),
    .io_async_mem_0_corrupt       (auto_out_d_mem_0_corrupt),
    .io_async_widx                (auto_out_d_widx),
    .io_async_safe_widx_valid     (auto_out_d_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_out_d_safe_source_reset_n),
    .io_deq_valid                 (auto_in_d_valid),
    .io_deq_bits_opcode           (auto_in_d_bits_opcode),
    .io_deq_bits_denied           (auto_in_d_bits_denied),
    .io_deq_bits_data             (auto_in_d_bits_data),
    .io_deq_bits_corrupt          (auto_in_d_bits_corrupt),
    .io_async_ridx                (auto_out_d_ridx),
    .io_async_safe_ridx_valid     (auto_out_d_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_out_d_safe_sink_reset_n)
  );
endmodule

module AsyncQueueSource_1(
  input        clock,
               reset,
               io_enq_valid,
               io_enq_bits_resumereq,
               io_enq_bits_ackhavereset,
               io_enq_bits_hrmask_0,
               io_async_ridx,
               io_async_safe_ridx_valid,
               io_async_safe_sink_reset_n,
  output       io_enq_ready,
               io_async_mem_0_resumereq,
  output [9:0] io_async_mem_0_hartsel,
  output       io_async_mem_0_ackhavereset,
               io_async_mem_0_hasel,
               io_async_mem_0_hamask_0,
               io_async_mem_0_hrmask_0,
               io_async_widx,
               io_async_safe_widx_valid,
               io_async_safe_source_reset_n
);

  wire       _io_enq_ready_output;
  wire       _sink_valid_io_out;
  wire       _sink_extend_io_out;
  wire       _source_valid_0_io_out;
  wire       _ridx_ridx_gray_io_q;
  reg        mem_0_resumereq;
  reg  [9:0] mem_0_hartsel;
  reg        mem_0_ackhavereset;
  reg        mem_0_hasel;
  reg        mem_0_hamask_0;
  reg        mem_0_hrmask_0;
  wire       _T = _io_enq_ready_output & io_enq_valid;
  reg        widx_widx_bin;
  reg        ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg        widx_gray;
  always @(posedge clock) begin
    if (_T) begin
      mem_0_resumereq <= io_enq_bits_resumereq;
      mem_0_hartsel <= 10'h0;
      mem_0_ackhavereset <= io_enq_bits_ackhavereset;
      mem_0_hrmask_0 <= io_enq_bits_hrmask_0;
    end
    mem_0_hasel <= ~_T & mem_0_hasel;
    mem_0_hamask_0 <= ~_T & mem_0_hamask_0;
  end // always @(posedge)
  wire       widx_incremented = _sink_valid_io_out & widx_widx_bin + _T;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      widx_widx_bin <= widx_incremented;
      ready_reg <= _sink_valid_io_out & widx_incremented != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_resumereq = mem_0_resumereq;
  assign io_async_mem_0_hartsel = mem_0_hartsel;
  assign io_async_mem_0_ackhavereset = mem_0_ackhavereset;
  assign io_async_mem_0_hasel = mem_0_hasel;
  assign io_async_mem_0_hamask_0 = mem_0_hamask_0;
  assign io_async_mem_0_hrmask_0 = mem_0_hrmask_0;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module TLDebugModuleOuterAsync(
  input         auto_asource_out_a_ridx,
                auto_asource_out_a_safe_ridx_valid,
                auto_asource_out_a_safe_sink_reset_n,
  input  [2:0]  auto_asource_out_d_mem_0_opcode,
  input  [1:0]  auto_asource_out_d_mem_0_param,
                auto_asource_out_d_mem_0_size,
  input         auto_asource_out_d_mem_0_source,
                auto_asource_out_d_mem_0_sink,
                auto_asource_out_d_mem_0_denied,
  input  [31:0] auto_asource_out_d_mem_0_data,
  input         auto_asource_out_d_mem_0_corrupt,
                auto_asource_out_d_widx,
                auto_asource_out_d_safe_widx_valid,
                auto_asource_out_d_safe_source_reset_n,
                io_dmi_clock,
                io_dmi_reset,
                io_dmi_req_valid,
  input  [6:0]  io_dmi_req_bits_addr,
  input  [31:0] io_dmi_req_bits_data,
  input  [1:0]  io_dmi_req_bits_op,
  input         io_dmi_resp_ready,
                io_ctrl_dmactiveAck,
                io_innerCtrl_ridx,
                io_innerCtrl_safe_ridx_valid,
                io_innerCtrl_safe_sink_reset_n,
                io_hgDebugInt_0,
  output [2:0]  auto_asource_out_a_mem_0_opcode,
                auto_asource_out_a_mem_0_param,
  output [1:0]  auto_asource_out_a_mem_0_size,
  output        auto_asource_out_a_mem_0_source,
  output [8:0]  auto_asource_out_a_mem_0_address,
  output [3:0]  auto_asource_out_a_mem_0_mask,
  output [31:0] auto_asource_out_a_mem_0_data,
  output        auto_asource_out_a_mem_0_corrupt,
                auto_asource_out_a_widx,
                auto_asource_out_a_safe_widx_valid,
                auto_asource_out_a_safe_source_reset_n,
                auto_asource_out_d_ridx,
                auto_asource_out_d_safe_ridx_valid,
                auto_asource_out_d_safe_sink_reset_n,
                auto_intsource_out_sync_0,
                io_dmi_req_ready,
                io_dmi_resp_valid,
  output [31:0] io_dmi_resp_bits_data,
  output [1:0]  io_dmi_resp_bits_resp,
  output        io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_innerCtrl_mem_0_resumereq,
  output [9:0]  io_innerCtrl_mem_0_hartsel,
  output        io_innerCtrl_mem_0_ackhavereset,
                io_innerCtrl_mem_0_hasel,
                io_innerCtrl_mem_0_hamask_0,
                io_innerCtrl_mem_0_hrmask_0,
                io_innerCtrl_widx,
                io_innerCtrl_safe_widx_valid,
                io_innerCtrl_safe_source_reset_n
);

  wire        _io_innerCtrl_source_io_enq_ready;
  wire        _dmactiveAck_dmactiveAckSync_io_q;
  wire        _asource_auto_in_a_ready;
  wire        _asource_auto_in_d_valid;
  wire [2:0]  _asource_auto_in_d_bits_opcode;
  wire        _asource_auto_in_d_bits_denied;
  wire [31:0] _asource_auto_in_d_bits_data;
  wire        _asource_auto_in_d_bits_corrupt;
  wire        _dmiBypass_auto_node_out_out_a_valid;
  wire [2:0]  _dmiBypass_auto_node_out_out_a_bits_opcode;
  wire [8:0]  _dmiBypass_auto_node_out_out_a_bits_address;
  wire [31:0] _dmiBypass_auto_node_out_out_a_bits_data;
  wire        _dmiBypass_auto_node_out_out_d_ready;
  wire        _dmiBypass_auto_node_in_in_a_ready;
  wire        _dmiBypass_auto_node_in_in_d_valid;
  wire        _dmiBypass_auto_node_in_in_d_bits_denied;
  wire [31:0] _dmiBypass_auto_node_in_in_d_bits_data;
  wire        _dmiBypass_auto_node_in_in_d_bits_corrupt;
  wire        _dmOuter_auto_dmi_in_a_ready;
  wire        _dmOuter_auto_dmi_in_d_valid;
  wire [31:0] _dmOuter_auto_dmi_in_d_bits_data;
  wire        _dmOuter_auto_int_out_0;
  wire        _dmOuter_io_ctrl_dmactive;
  wire        _dmOuter_io_innerCtrl_valid;
  wire        _dmOuter_io_innerCtrl_bits_resumereq;
  wire        _dmOuter_io_innerCtrl_bits_ackhavereset;
  wire        _dmOuter_io_innerCtrl_bits_hrmask_0;
  wire        _dmi2tl_auto_out_a_valid;
  wire [2:0]  _dmi2tl_auto_out_a_bits_opcode;
  wire [8:0]  _dmi2tl_auto_out_a_bits_address;
  wire [31:0] _dmi2tl_auto_out_a_bits_data;
  wire        _dmi2tl_auto_out_d_ready;
  wire        _dmiXbar_auto_in_a_ready;
  wire        _dmiXbar_auto_in_d_valid;
  wire        _dmiXbar_auto_in_d_bits_denied;
  wire [31:0] _dmiXbar_auto_in_d_bits_data;
  wire        _dmiXbar_auto_in_d_bits_corrupt;
  wire        _dmiXbar_auto_out_1_a_valid;
  wire [2:0]  _dmiXbar_auto_out_1_a_bits_opcode;
  wire [6:0]  _dmiXbar_auto_out_1_a_bits_address;
  wire [31:0] _dmiXbar_auto_out_1_a_bits_data;
  wire        _dmiXbar_auto_out_1_d_ready;
  wire        _dmiXbar_auto_out_0_a_valid;
  wire [2:0]  _dmiXbar_auto_out_0_a_bits_opcode;
  wire [8:0]  _dmiXbar_auto_out_0_a_bits_address;
  wire [31:0] _dmiXbar_auto_out_0_a_bits_data;
  wire        _dmiXbar_auto_out_0_d_ready;
  TLXbar_10 dmiXbar (
    .clock                     (io_dmi_clock),
    .reset                     (io_dmi_reset),
    .auto_in_a_valid           (_dmi2tl_auto_out_a_valid),
    .auto_in_a_bits_opcode     (_dmi2tl_auto_out_a_bits_opcode),
    .auto_in_a_bits_address    (_dmi2tl_auto_out_a_bits_address),
    .auto_in_a_bits_data       (_dmi2tl_auto_out_a_bits_data),
    .auto_in_d_ready           (_dmi2tl_auto_out_d_ready),
    .auto_out_1_a_ready        (_dmOuter_auto_dmi_in_a_ready),
    .auto_out_1_d_valid        (_dmOuter_auto_dmi_in_d_valid),
    .auto_out_1_d_bits_data    (_dmOuter_auto_dmi_in_d_bits_data),
    .auto_out_0_a_ready        (_dmiBypass_auto_node_in_in_a_ready),
    .auto_out_0_d_valid        (_dmiBypass_auto_node_in_in_d_valid),
    .auto_out_0_d_bits_denied  (_dmiBypass_auto_node_in_in_d_bits_denied),
    .auto_out_0_d_bits_data    (_dmiBypass_auto_node_in_in_d_bits_data),
    .auto_out_0_d_bits_corrupt (_dmiBypass_auto_node_in_in_d_bits_corrupt),
    .auto_in_a_ready           (_dmiXbar_auto_in_a_ready),
    .auto_in_d_valid           (_dmiXbar_auto_in_d_valid),
    .auto_in_d_bits_denied     (_dmiXbar_auto_in_d_bits_denied),
    .auto_in_d_bits_data       (_dmiXbar_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt    (_dmiXbar_auto_in_d_bits_corrupt),
    .auto_out_1_a_valid        (_dmiXbar_auto_out_1_a_valid),
    .auto_out_1_a_bits_opcode  (_dmiXbar_auto_out_1_a_bits_opcode),
    .auto_out_1_a_bits_address (_dmiXbar_auto_out_1_a_bits_address),
    .auto_out_1_a_bits_data    (_dmiXbar_auto_out_1_a_bits_data),
    .auto_out_1_d_ready        (_dmiXbar_auto_out_1_d_ready),
    .auto_out_0_a_valid        (_dmiXbar_auto_out_0_a_valid),
    .auto_out_0_a_bits_opcode  (_dmiXbar_auto_out_0_a_bits_opcode),
    .auto_out_0_a_bits_address (_dmiXbar_auto_out_0_a_bits_address),
    .auto_out_0_a_bits_data    (_dmiXbar_auto_out_0_a_bits_data),
    .auto_out_0_d_ready        (_dmiXbar_auto_out_0_d_ready)
  );
  DMIToTL dmi2tl (
    .auto_out_a_ready        (_dmiXbar_auto_in_a_ready),
    .auto_out_d_valid        (_dmiXbar_auto_in_d_valid),
    .auto_out_d_bits_denied  (_dmiXbar_auto_in_d_bits_denied),
    .auto_out_d_bits_data    (_dmiXbar_auto_in_d_bits_data),
    .auto_out_d_bits_corrupt (_dmiXbar_auto_in_d_bits_corrupt),
    .io_dmi_req_valid        (io_dmi_req_valid),
    .io_dmi_req_bits_addr    (io_dmi_req_bits_addr),
    .io_dmi_req_bits_data    (io_dmi_req_bits_data),
    .io_dmi_req_bits_op      (io_dmi_req_bits_op),
    .io_dmi_resp_ready       (io_dmi_resp_ready),
    .auto_out_a_valid        (_dmi2tl_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_dmi2tl_auto_out_a_bits_opcode),
    .auto_out_a_bits_address (_dmi2tl_auto_out_a_bits_address),
    .auto_out_a_bits_data    (_dmi2tl_auto_out_a_bits_data),
    .auto_out_d_ready        (_dmi2tl_auto_out_d_ready),
    .io_dmi_req_ready        (io_dmi_req_ready),
    .io_dmi_resp_valid       (io_dmi_resp_valid),
    .io_dmi_resp_bits_data   (io_dmi_resp_bits_data),
    .io_dmi_resp_bits_resp   (io_dmi_resp_bits_resp)
  );
  TLDebugModuleOuter dmOuter (
    .clock                          (io_dmi_clock),
    .reset                          (io_dmi_reset),
    .auto_dmi_in_a_valid            (_dmiXbar_auto_out_1_a_valid),
    .auto_dmi_in_a_bits_opcode      (_dmiXbar_auto_out_1_a_bits_opcode),
    .auto_dmi_in_a_bits_address     (_dmiXbar_auto_out_1_a_bits_address),
    .auto_dmi_in_a_bits_data        (_dmiXbar_auto_out_1_a_bits_data),
    .auto_dmi_in_d_ready            (_dmiXbar_auto_out_1_d_ready),
    .io_ctrl_dmactiveAck            (_dmactiveAck_dmactiveAckSync_io_q),
    .io_innerCtrl_ready             (_io_innerCtrl_source_io_enq_ready),
    .io_hgDebugInt_0                (io_hgDebugInt_0),
    .auto_dmi_in_a_ready            (_dmOuter_auto_dmi_in_a_ready),
    .auto_dmi_in_d_valid            (_dmOuter_auto_dmi_in_d_valid),
    .auto_dmi_in_d_bits_data        (_dmOuter_auto_dmi_in_d_bits_data),
    .auto_int_out_0                 (_dmOuter_auto_int_out_0),
    .io_ctrl_ndreset                (io_ctrl_ndreset),
    .io_ctrl_dmactive               (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_valid             (_dmOuter_io_innerCtrl_valid),
    .io_innerCtrl_bits_resumereq    (_dmOuter_io_innerCtrl_bits_resumereq),
    .io_innerCtrl_bits_ackhavereset (_dmOuter_io_innerCtrl_bits_ackhavereset),
    .io_innerCtrl_bits_hrmask_0     (_dmOuter_io_innerCtrl_bits_hrmask_0)
  );
  IntSyncCrossingSource_4 intsource (
    .auto_in_0       (_dmOuter_auto_int_out_0),
    .auto_out_sync_0 (auto_intsource_out_sync_0)
  );
  TLBusBypass dmiBypass (
    .clock                            (io_dmi_clock),
    .reset                            (io_dmi_reset),
    .auto_node_out_out_a_ready        (_asource_auto_in_a_ready),
    .auto_node_out_out_d_valid        (_asource_auto_in_d_valid),
    .auto_node_out_out_d_bits_opcode  (_asource_auto_in_d_bits_opcode),
    .auto_node_out_out_d_bits_denied  (_asource_auto_in_d_bits_denied),
    .auto_node_out_out_d_bits_data    (_asource_auto_in_d_bits_data),
    .auto_node_out_out_d_bits_corrupt (_asource_auto_in_d_bits_corrupt),
    .auto_node_in_in_a_valid          (_dmiXbar_auto_out_0_a_valid),
    .auto_node_in_in_a_bits_opcode    (_dmiXbar_auto_out_0_a_bits_opcode),
    .auto_node_in_in_a_bits_address   (_dmiXbar_auto_out_0_a_bits_address),
    .auto_node_in_in_a_bits_data      (_dmiXbar_auto_out_0_a_bits_data),
    .auto_node_in_in_d_ready          (_dmiXbar_auto_out_0_d_ready),
    .io_bypass
      (~_dmOuter_io_ctrl_dmactive | ~_dmactiveAck_dmactiveAckSync_io_q),
    .auto_node_out_out_a_valid        (_dmiBypass_auto_node_out_out_a_valid),
    .auto_node_out_out_a_bits_opcode  (_dmiBypass_auto_node_out_out_a_bits_opcode),
    .auto_node_out_out_a_bits_address (_dmiBypass_auto_node_out_out_a_bits_address),
    .auto_node_out_out_a_bits_data    (_dmiBypass_auto_node_out_out_a_bits_data),
    .auto_node_out_out_d_ready        (_dmiBypass_auto_node_out_out_d_ready),
    .auto_node_in_in_a_ready          (_dmiBypass_auto_node_in_in_a_ready),
    .auto_node_in_in_d_valid          (_dmiBypass_auto_node_in_in_d_valid),
    .auto_node_in_in_d_bits_denied    (_dmiBypass_auto_node_in_in_d_bits_denied),
    .auto_node_in_in_d_bits_data      (_dmiBypass_auto_node_in_in_d_bits_data),
    .auto_node_in_in_d_bits_corrupt   (_dmiBypass_auto_node_in_in_d_bits_corrupt)
  );
  TLAsyncCrossingSource asource (
    .clock                          (io_dmi_clock),
    .reset                          (io_dmi_reset),
    .auto_in_a_valid                (_dmiBypass_auto_node_out_out_a_valid),
    .auto_in_a_bits_opcode          (_dmiBypass_auto_node_out_out_a_bits_opcode),
    .auto_in_a_bits_address         (_dmiBypass_auto_node_out_out_a_bits_address),
    .auto_in_a_bits_data            (_dmiBypass_auto_node_out_out_a_bits_data),
    .auto_in_d_ready                (_dmiBypass_auto_node_out_out_d_ready),
    .auto_out_a_ridx                (auto_asource_out_a_ridx),
    .auto_out_a_safe_ridx_valid     (auto_asource_out_a_safe_ridx_valid),
    .auto_out_a_safe_sink_reset_n   (auto_asource_out_a_safe_sink_reset_n),
    .auto_out_d_mem_0_opcode        (auto_asource_out_d_mem_0_opcode),
    .auto_out_d_mem_0_param         (auto_asource_out_d_mem_0_param),
    .auto_out_d_mem_0_size          (auto_asource_out_d_mem_0_size),
    .auto_out_d_mem_0_source        (auto_asource_out_d_mem_0_source),
    .auto_out_d_mem_0_sink          (auto_asource_out_d_mem_0_sink),
    .auto_out_d_mem_0_denied        (auto_asource_out_d_mem_0_denied),
    .auto_out_d_mem_0_data          (auto_asource_out_d_mem_0_data),
    .auto_out_d_mem_0_corrupt       (auto_asource_out_d_mem_0_corrupt),
    .auto_out_d_widx                (auto_asource_out_d_widx),
    .auto_out_d_safe_widx_valid     (auto_asource_out_d_safe_widx_valid),
    .auto_out_d_safe_source_reset_n (auto_asource_out_d_safe_source_reset_n),
    .auto_in_a_ready                (_asource_auto_in_a_ready),
    .auto_in_d_valid                (_asource_auto_in_d_valid),
    .auto_in_d_bits_opcode          (_asource_auto_in_d_bits_opcode),
    .auto_in_d_bits_denied          (_asource_auto_in_d_bits_denied),
    .auto_in_d_bits_data            (_asource_auto_in_d_bits_data),
    .auto_in_d_bits_corrupt         (_asource_auto_in_d_bits_corrupt),
    .auto_out_a_mem_0_opcode        (auto_asource_out_a_mem_0_opcode),
    .auto_out_a_mem_0_param         (auto_asource_out_a_mem_0_param),
    .auto_out_a_mem_0_size          (auto_asource_out_a_mem_0_size),
    .auto_out_a_mem_0_source        (auto_asource_out_a_mem_0_source),
    .auto_out_a_mem_0_address       (auto_asource_out_a_mem_0_address),
    .auto_out_a_mem_0_mask          (auto_asource_out_a_mem_0_mask),
    .auto_out_a_mem_0_data          (auto_asource_out_a_mem_0_data),
    .auto_out_a_mem_0_corrupt       (auto_asource_out_a_mem_0_corrupt),
    .auto_out_a_widx                (auto_asource_out_a_widx),
    .auto_out_a_safe_widx_valid     (auto_asource_out_a_safe_widx_valid),
    .auto_out_a_safe_source_reset_n (auto_asource_out_a_safe_source_reset_n),
    .auto_out_d_ridx                (auto_asource_out_d_ridx),
    .auto_out_d_safe_ridx_valid     (auto_asource_out_d_safe_ridx_valid),
    .auto_out_d_safe_sink_reset_n   (auto_asource_out_d_safe_sink_reset_n)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 dmactiveAck_dmactiveAckSync (
    .clock (io_dmi_clock),
    .reset (io_dmi_reset),
    .io_d  (io_ctrl_dmactiveAck),
    .io_q  (_dmactiveAck_dmactiveAckSync_io_q)
  );
  AsyncQueueSource_1 io_innerCtrl_source (
    .clock                        (io_dmi_clock),
    .reset                        (io_dmi_reset),
    .io_enq_valid                 (_dmOuter_io_innerCtrl_valid),
    .io_enq_bits_resumereq        (_dmOuter_io_innerCtrl_bits_resumereq),
    .io_enq_bits_ackhavereset     (_dmOuter_io_innerCtrl_bits_ackhavereset),
    .io_enq_bits_hrmask_0         (_dmOuter_io_innerCtrl_bits_hrmask_0),
    .io_async_ridx                (io_innerCtrl_ridx),
    .io_async_safe_ridx_valid     (io_innerCtrl_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (io_innerCtrl_safe_sink_reset_n),
    .io_enq_ready                 (_io_innerCtrl_source_io_enq_ready),
    .io_async_mem_0_resumereq     (io_innerCtrl_mem_0_resumereq),
    .io_async_mem_0_hartsel       (io_innerCtrl_mem_0_hartsel),
    .io_async_mem_0_ackhavereset  (io_innerCtrl_mem_0_ackhavereset),
    .io_async_mem_0_hasel         (io_innerCtrl_mem_0_hasel),
    .io_async_mem_0_hamask_0      (io_innerCtrl_mem_0_hamask_0),
    .io_async_mem_0_hrmask_0      (io_innerCtrl_mem_0_hrmask_0),
    .io_async_widx                (io_innerCtrl_widx),
    .io_async_safe_widx_valid     (io_innerCtrl_safe_widx_valid),
    .io_async_safe_source_reset_n (io_innerCtrl_safe_source_reset_n)
  );
  assign io_ctrl_dmactive = _dmOuter_io_ctrl_dmactive;
endmodule

module TLDebugModuleInner(
  input         clock,
                reset,
                auto_tl_in_a_valid,
  input  [2:0]  auto_tl_in_a_bits_opcode,
  input  [1:0]  auto_tl_in_a_bits_size,
  input  [9:0]  auto_tl_in_a_bits_source,
  input  [11:0] auto_tl_in_a_bits_address,
  input  [7:0]  auto_tl_in_a_bits_mask,
  input  [63:0] auto_tl_in_a_bits_data,
  input         auto_tl_in_d_ready,
                auto_dmi_in_a_valid,
  input  [2:0]  auto_dmi_in_a_bits_opcode,
  input  [1:0]  auto_dmi_in_a_bits_size,
  input         auto_dmi_in_a_bits_source,
  input  [8:0]  auto_dmi_in_a_bits_address,
  input  [3:0]  auto_dmi_in_a_bits_mask,
  input  [31:0] auto_dmi_in_a_bits_data,
  input         auto_dmi_in_d_ready,
                io_dmactive,
                io_innerCtrl_valid,
                io_innerCtrl_bits_resumereq,
  input  [9:0]  io_innerCtrl_bits_hartsel,
  input         io_innerCtrl_bits_ackhavereset,
                io_innerCtrl_bits_hrmask_0,
                io_hartIsInReset_0,
  output        auto_tl_in_a_ready,
                auto_tl_in_d_valid,
  output [2:0]  auto_tl_in_d_bits_opcode,
  output [1:0]  auto_tl_in_d_bits_size,
  output [9:0]  auto_tl_in_d_bits_source,
  output [63:0] auto_tl_in_d_bits_data,
  output        auto_dmi_in_a_ready,
                auto_dmi_in_d_valid,
  output [2:0]  auto_dmi_in_d_bits_opcode,
  output [1:0]  auto_dmi_in_d_bits_size,
  output        auto_dmi_in_d_bits_source,
  output [31:0] auto_dmi_in_d_bits_data,
  output        io_hgDebugInt_0
);

  wire        abstractCommandBusy;
  wire        out_woready_1_345;
  wire        out_woready_1_528;
  wire        out_woready_31;
  wire        out_woready_7;
  wire        out_woready_54;
  wire        out_woready_93;
  wire        out_woready_23;
  wire        out_woready_35;
  wire        out_woready_11;
  wire        out_woready_97;
  wire        out_woready_15;
  wire        out_woready_46;
  wire        out_woready_42;
  wire        out_woready_102;
  wire        out_woready_19;
  wire        out_woready_82;
  wire        out_woready_50;
  wire        out_woready_78;
  wire        out_woready_38;
  wire        out_woready_3;
  wire        out_woready_27;
  wire        _out_wofireMux_T_2;
  wire        out_roready_31;
  wire        out_roready_7;
  wire        out_roready_54;
  wire        out_roready_93;
  wire        out_roready_23;
  wire        out_roready_35;
  wire        out_roready_11;
  wire        out_roready_97;
  wire        out_roready_15;
  wire        out_roready_46;
  wire        out_roready_42;
  wire        out_roready_102;
  wire        out_roready_19;
  wire        out_roready_82;
  wire        out_roready_50;
  wire        out_roready_78;
  wire        out_roready_3;
  wire        out_roready_27;
  wire        out_backSel_7;
  wire        out_backSel_6;
  wire        _hartIsInResetSync_0_debug_hartReset_0_io_q;
  reg         casez_tmp;
  reg  [31:0] casez_tmp_0;
  reg         casez_tmp_1;
  reg  [63:0] casez_tmp_2;
  reg         haltedBitRegs;
  reg         resumeReqRegs;
  reg         haveResetBitRegs;
  wire        hamaskWrSel_0 = io_innerCtrl_bits_hartsel == 10'h0;
  reg         hrmaskReg_0;
  reg         hrDebugIntReg_0;
  wire        resumereq = io_innerCtrl_valid & io_innerCtrl_bits_resumereq;
  reg  [4:0]  ABSTRACTCSReg_progbufsize;
  reg  [2:0]  ABSTRACTCSReg_cmderr;
  reg  [3:0]  ABSTRACTCSReg_datacount;
  reg  [15:0] ABSTRACTAUTOReg_autoexecprogbuf;
  reg  [11:0] ABSTRACTAUTOReg_autoexecdata;
  reg  [7:0]  COMMANDReg_cmdtype;
  reg  [23:0] COMMANDReg_control;
  reg  [7:0]  abstractDataMem_0;
  reg  [7:0]  abstractDataMem_1;
  reg  [7:0]  abstractDataMem_2;
  reg  [7:0]  abstractDataMem_3;
  reg  [7:0]  abstractDataMem_4;
  reg  [7:0]  abstractDataMem_5;
  reg  [7:0]  abstractDataMem_6;
  reg  [7:0]  abstractDataMem_7;
  reg  [7:0]  programBufferMem_0;
  reg  [7:0]  programBufferMem_1;
  reg  [7:0]  programBufferMem_2;
  reg  [7:0]  programBufferMem_3;
  reg  [7:0]  programBufferMem_4;
  reg  [7:0]  programBufferMem_5;
  reg  [7:0]  programBufferMem_6;
  reg  [7:0]  programBufferMem_7;
  reg  [7:0]  programBufferMem_8;
  reg  [7:0]  programBufferMem_9;
  reg  [7:0]  programBufferMem_10;
  reg  [7:0]  programBufferMem_11;
  reg  [7:0]  programBufferMem_12;
  reg  [7:0]  programBufferMem_13;
  reg  [7:0]  programBufferMem_14;
  reg  [7:0]  programBufferMem_15;
  reg  [7:0]  programBufferMem_16;
  reg  [7:0]  programBufferMem_17;
  reg  [7:0]  programBufferMem_18;
  reg  [7:0]  programBufferMem_19;
  reg  [7:0]  programBufferMem_20;
  reg  [7:0]  programBufferMem_21;
  reg  [7:0]  programBufferMem_22;
  reg  [7:0]  programBufferMem_23;
  reg  [7:0]  programBufferMem_24;
  reg  [7:0]  programBufferMem_25;
  reg  [7:0]  programBufferMem_26;
  reg  [7:0]  programBufferMem_27;
  reg  [7:0]  programBufferMem_28;
  reg  [7:0]  programBufferMem_29;
  reg  [7:0]  programBufferMem_30;
  reg  [7:0]  programBufferMem_31;
  reg  [7:0]  programBufferMem_32;
  reg  [7:0]  programBufferMem_33;
  reg  [7:0]  programBufferMem_34;
  reg  [7:0]  programBufferMem_35;
  reg  [7:0]  programBufferMem_36;
  reg  [7:0]  programBufferMem_37;
  reg  [7:0]  programBufferMem_38;
  reg  [7:0]  programBufferMem_39;
  reg  [7:0]  programBufferMem_40;
  reg  [7:0]  programBufferMem_41;
  reg  [7:0]  programBufferMem_42;
  reg  [7:0]  programBufferMem_43;
  reg  [7:0]  programBufferMem_44;
  reg  [7:0]  programBufferMem_45;
  reg  [7:0]  programBufferMem_46;
  reg  [7:0]  programBufferMem_47;
  reg  [7:0]  programBufferMem_48;
  reg  [7:0]  programBufferMem_49;
  reg  [7:0]  programBufferMem_50;
  reg  [7:0]  programBufferMem_51;
  reg  [7:0]  programBufferMem_52;
  reg  [7:0]  programBufferMem_53;
  reg  [7:0]  programBufferMem_54;
  reg  [7:0]  programBufferMem_55;
  reg  [7:0]  programBufferMem_56;
  reg  [7:0]  programBufferMem_57;
  reg  [7:0]  programBufferMem_58;
  reg  [7:0]  programBufferMem_59;
  reg  [7:0]  programBufferMem_60;
  reg  [7:0]  programBufferMem_61;
  reg  [7:0]  programBufferMem_62;
  reg  [7:0]  programBufferMem_63;
  wire        out_front_bits_read = auto_dmi_in_a_bits_opcode == 3'h4;
  wire [1:0]  _GEN = {auto_dmi_in_a_bits_address[8], auto_dmi_in_a_bits_address[6]};
  wire        _out_out_bits_data_WIRE_31 = _GEN == 2'h0;
  wire        _out_out_bits_data_WIRE_8 = _GEN == 2'h1;
  wire [7:0]  _out_backMask_T_9 = {8{auto_dmi_in_a_bits_mask[2]}};
  wire [7:0]  _out_backMask_T_11 = {8{auto_dmi_in_a_bits_mask[3]}};
  wire        dmiAbstractDataWrEnMaybe_4 = out_woready_3 & auto_dmi_in_a_bits_mask[0];
  wire        dmiAbstractDataWrEnMaybe_5 = out_woready_3 & auto_dmi_in_a_bits_mask[1];
  wire        dmiAbstractDataWrEnMaybe_6 = out_woready_3 & auto_dmi_in_a_bits_mask[2];
  wire        dmiAbstractDataWrEnMaybe_7 = out_woready_3 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_56 = out_woready_7 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_57 = out_woready_7 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_58 = out_woready_7 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_59 = out_woready_7 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_36 = out_woready_11 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_37 = out_woready_11 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_38 = out_woready_11 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_39 = out_woready_11 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_28 = out_woready_15 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_29 = out_woready_15 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_30 = out_woready_15 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_31 = out_woready_15 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_12 = out_woready_19 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_13 = out_woready_19 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_14 = out_woready_19 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_15 = out_woready_19 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_44 = out_woready_23 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_45 = out_woready_23 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_46 = out_woready_23 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_47 = out_woready_23 & auto_dmi_in_a_bits_mask[3];
  wire        dmiAbstractDataWrEnMaybe_0 = out_woready_27 & auto_dmi_in_a_bits_mask[0];
  wire        dmiAbstractDataWrEnMaybe_1 = out_woready_27 & auto_dmi_in_a_bits_mask[1];
  wire        dmiAbstractDataWrEnMaybe_2 = out_woready_27 & auto_dmi_in_a_bits_mask[2];
  wire        dmiAbstractDataWrEnMaybe_3 = out_woready_27 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_60 = out_woready_31 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_61 = out_woready_31 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_62 = out_woready_31 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_63 = out_woready_31 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_40 = out_woready_35 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_41 = out_woready_35 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_42 = out_woready_35 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_43 = out_woready_35 & auto_dmi_in_a_bits_mask[3];
  wire        autoexecdataWrEnMaybe = out_woready_38 & auto_dmi_in_a_bits_mask[0];
  wire        autoexecprogbufWrEnMaybe =
    out_woready_38 & (&{_out_backMask_T_11, _out_backMask_T_9});
  wire        dmiProgramBufferWrEnMaybe_20 = out_woready_42 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_21 = out_woready_42 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_22 = out_woready_42 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_23 = out_woready_42 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_24 = out_woready_46 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_25 = out_woready_46 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_26 = out_woready_46 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_27 = out_woready_46 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_4 = out_woready_50 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_5 = out_woready_50 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_6 = out_woready_50 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_7 = out_woready_50 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_52 = out_woready_54 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_53 = out_woready_54 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_54 = out_woready_54 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_55 = out_woready_54 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_0 = out_woready_78 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_1 = out_woready_78 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_2 = out_woready_78 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_3 = out_woready_78 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_8 = out_woready_82 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_9 = out_woready_82 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_10 = out_woready_82 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_11 = out_woready_82 & auto_dmi_in_a_bits_mask[3];
  wire        ABSTRACTCSWrEnMaybe =
    _out_wofireMux_T_2 & out_backSel_6 & _out_out_bits_data_WIRE_8
    & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_48 = out_woready_93 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_49 = out_woready_93 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_50 = out_woready_93 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_51 = out_woready_93 & auto_dmi_in_a_bits_mask[3];
  wire        dmiProgramBufferWrEnMaybe_32 = out_woready_97 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_33 = out_woready_97 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_34 = out_woready_97 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_35 = out_woready_97 & auto_dmi_in_a_bits_mask[3];
  wire        COMMANDWrEnMaybe =
    _out_wofireMux_T_2 & out_backSel_7 & _out_out_bits_data_WIRE_8
    & (&{_out_backMask_T_11,
         _out_backMask_T_9,
         {8{auto_dmi_in_a_bits_mask[1]}},
         {8{auto_dmi_in_a_bits_mask[0]}}});
  wire [31:0] _COMMANDWrData_WIRE_1 = COMMANDWrEnMaybe ? auto_dmi_in_a_bits_data : 32'h0;
  wire        dmiProgramBufferWrEnMaybe_16 = out_woready_102 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferWrEnMaybe_17 = out_woready_102 & auto_dmi_in_a_bits_mask[1];
  wire        dmiProgramBufferWrEnMaybe_18 = out_woready_102 & auto_dmi_in_a_bits_mask[2];
  wire        dmiProgramBufferWrEnMaybe_19 = out_woready_102 & auto_dmi_in_a_bits_mask[3];
  wire [4:0]  out_oindex =
    {auto_dmi_in_a_bits_address[7], auto_dmi_in_a_bits_address[5:2]};
  wire [4:0]  _GEN_0 = {auto_dmi_in_a_bits_address[7], auto_dmi_in_a_bits_address[5:2]};
  wire        out_backSel_4 = _GEN_0 == 5'h4;
  wire        out_backSel_5 = _GEN_0 == 5'h5;
  assign out_backSel_6 = _GEN_0 == 5'h6;
  assign out_backSel_7 = _GEN_0 == 5'h7;
  wire        out_backSel_16 = _GEN_0 == 5'h10;
  wire        out_backSel_17 = _GEN_0 == 5'h11;
  wire        out_backSel_18 = _GEN_0 == 5'h12;
  wire        out_backSel_19 = _GEN_0 == 5'h13;
  wire        out_backSel_20 = _GEN_0 == 5'h14;
  wire        out_backSel_21 = _GEN_0 == 5'h15;
  wire        out_backSel_22 = _GEN_0 == 5'h16;
  wire        out_backSel_23 = _GEN_0 == 5'h17;
  wire        out_backSel_24 = _GEN_0 == 5'h18;
  wire        out_backSel_25 = _GEN_0 == 5'h19;
  wire        out_backSel_26 = _GEN_0 == 5'h1A;
  wire        out_backSel_27 = _GEN_0 == 5'h1B;
  wire        out_backSel_28 = _GEN_0 == 5'h1C;
  wire        out_backSel_29 = _GEN_0 == 5'h1D;
  wire        out_backSel_30 = _GEN_0 == 5'h1E;
  wire        _out_wofireMux_T = auto_dmi_in_a_valid & auto_dmi_in_d_ready;
  wire        _out_rofireMux_T_1 = _out_wofireMux_T & out_front_bits_read;
  assign out_roready_27 = _out_rofireMux_T_1 & out_backSel_4 & _out_out_bits_data_WIRE_31;
  assign out_roready_3 = _out_rofireMux_T_1 & out_backSel_5 & _out_out_bits_data_WIRE_31;
  assign out_roready_78 =
    _out_rofireMux_T_1 & out_backSel_16 & _out_out_bits_data_WIRE_31;
  assign out_roready_50 =
    _out_rofireMux_T_1 & out_backSel_17 & _out_out_bits_data_WIRE_31;
  assign out_roready_82 =
    _out_rofireMux_T_1 & out_backSel_18 & _out_out_bits_data_WIRE_31;
  assign out_roready_19 =
    _out_rofireMux_T_1 & out_backSel_19 & _out_out_bits_data_WIRE_31;
  assign out_roready_102 =
    _out_rofireMux_T_1 & out_backSel_20 & _out_out_bits_data_WIRE_31;
  assign out_roready_42 =
    _out_rofireMux_T_1 & out_backSel_21 & _out_out_bits_data_WIRE_31;
  assign out_roready_46 =
    _out_rofireMux_T_1 & out_backSel_22 & _out_out_bits_data_WIRE_31;
  assign out_roready_15 =
    _out_rofireMux_T_1 & out_backSel_23 & _out_out_bits_data_WIRE_31;
  assign out_roready_97 =
    _out_rofireMux_T_1 & out_backSel_24 & _out_out_bits_data_WIRE_31;
  assign out_roready_11 =
    _out_rofireMux_T_1 & out_backSel_25 & _out_out_bits_data_WIRE_31;
  assign out_roready_35 =
    _out_rofireMux_T_1 & out_backSel_26 & _out_out_bits_data_WIRE_31;
  assign out_roready_23 =
    _out_rofireMux_T_1 & out_backSel_27 & _out_out_bits_data_WIRE_31;
  assign out_roready_93 =
    _out_rofireMux_T_1 & out_backSel_28 & _out_out_bits_data_WIRE_31;
  assign out_roready_54 =
    _out_rofireMux_T_1 & out_backSel_29 & _out_out_bits_data_WIRE_31;
  assign out_roready_7 = _out_rofireMux_T_1 & out_backSel_30 & _out_out_bits_data_WIRE_31;
  assign out_roready_31 = _out_rofireMux_T_1 & (&_GEN_0) & _out_out_bits_data_WIRE_31;
  assign _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;
  assign out_woready_27 = _out_wofireMux_T_2 & out_backSel_4 & _out_out_bits_data_WIRE_31;
  assign out_woready_3 = _out_wofireMux_T_2 & out_backSel_5 & _out_out_bits_data_WIRE_31;
  assign out_woready_38 = _out_wofireMux_T_2 & _GEN_0 == 5'h8 & _out_out_bits_data_WIRE_8;
  assign out_woready_78 =
    _out_wofireMux_T_2 & out_backSel_16 & _out_out_bits_data_WIRE_31;
  assign out_woready_50 =
    _out_wofireMux_T_2 & out_backSel_17 & _out_out_bits_data_WIRE_31;
  assign out_woready_82 =
    _out_wofireMux_T_2 & out_backSel_18 & _out_out_bits_data_WIRE_31;
  assign out_woready_19 =
    _out_wofireMux_T_2 & out_backSel_19 & _out_out_bits_data_WIRE_31;
  assign out_woready_102 =
    _out_wofireMux_T_2 & out_backSel_20 & _out_out_bits_data_WIRE_31;
  assign out_woready_42 =
    _out_wofireMux_T_2 & out_backSel_21 & _out_out_bits_data_WIRE_31;
  assign out_woready_46 =
    _out_wofireMux_T_2 & out_backSel_22 & _out_out_bits_data_WIRE_31;
  assign out_woready_15 =
    _out_wofireMux_T_2 & out_backSel_23 & _out_out_bits_data_WIRE_31;
  assign out_woready_97 =
    _out_wofireMux_T_2 & out_backSel_24 & _out_out_bits_data_WIRE_31;
  assign out_woready_11 =
    _out_wofireMux_T_2 & out_backSel_25 & _out_out_bits_data_WIRE_31;
  assign out_woready_35 =
    _out_wofireMux_T_2 & out_backSel_26 & _out_out_bits_data_WIRE_31;
  assign out_woready_23 =
    _out_wofireMux_T_2 & out_backSel_27 & _out_out_bits_data_WIRE_31;
  assign out_woready_93 =
    _out_wofireMux_T_2 & out_backSel_28 & _out_out_bits_data_WIRE_31;
  assign out_woready_54 =
    _out_wofireMux_T_2 & out_backSel_29 & _out_out_bits_data_WIRE_31;
  assign out_woready_7 = _out_wofireMux_T_2 & out_backSel_30 & _out_out_bits_data_WIRE_31;
  assign out_woready_31 = _out_wofireMux_T_2 & (&_GEN_0) & _out_out_bits_data_WIRE_31;
  always @(*) begin
    casez (out_oindex)
      5'b00000:
        casez_tmp = _GEN == 2'h2;
      5'b00001:
        casez_tmp = _out_out_bits_data_WIRE_8;
      5'b00010:
        casez_tmp = 1'h1;
      5'b00011:
        casez_tmp = _out_out_bits_data_WIRE_8;
      5'b00100:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b00101:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b00110:
        casez_tmp = _out_out_bits_data_WIRE_8;
      5'b00111:
        casez_tmp = _out_out_bits_data_WIRE_8;
      5'b01000:
        casez_tmp = _out_out_bits_data_WIRE_8;
      5'b01001:
        casez_tmp = 1'h1;
      5'b01010:
        casez_tmp = 1'h1;
      5'b01011:
        casez_tmp = 1'h1;
      5'b01100:
        casez_tmp = 1'h1;
      5'b01101:
        casez_tmp = 1'h1;
      5'b01110:
        casez_tmp = 1'h1;
      5'b01111:
        casez_tmp = 1'h1;
      5'b10000:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10001:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10010:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10011:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10100:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10101:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10110:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b10111:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11000:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11001:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11010:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11011:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11100:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11101:
        casez_tmp = _out_out_bits_data_WIRE_31;
      5'b11110:
        casez_tmp = _out_out_bits_data_WIRE_31;
      default:
        casez_tmp = _out_out_bits_data_WIRE_31;
    endcase
  end // always @(*)
  always @(*) begin
    casez (out_oindex)
      5'b00000:
        casez_tmp_0 = {31'h0, haltedBitRegs};
      5'b00001:
        casez_tmp_0 =
          {12'h0,
           {2{haveResetBitRegs}},
           {2{resumereq ? ~resumeReqRegs & ~hamaskWrSel_0 : ~resumeReqRegs}},
           4'h0,
           ~haltedBitRegs,
           ~haltedBitRegs,
           {2{haltedBitRegs}},
           8'hA2};
      5'b00010:
        casez_tmp_0 = 32'h0;
      5'b00011:
        casez_tmp_0 = {31'h0, haltedBitRegs};
      5'b00100:
        casez_tmp_0 =
          {abstractDataMem_3, abstractDataMem_2, abstractDataMem_1, abstractDataMem_0};
      5'b00101:
        casez_tmp_0 =
          {abstractDataMem_7, abstractDataMem_6, abstractDataMem_5, abstractDataMem_4};
      5'b00110:
        casez_tmp_0 =
          {3'h0,
           ABSTRACTCSReg_progbufsize,
           11'h0,
           abstractCommandBusy,
           1'h0,
           ABSTRACTCSReg_cmderr,
           4'h0,
           ABSTRACTCSReg_datacount};
      5'b00111:
        casez_tmp_0 = {COMMANDReg_cmdtype, COMMANDReg_control};
      5'b01000:
        casez_tmp_0 =
          {ABSTRACTAUTOReg_autoexecprogbuf, 14'h0, ABSTRACTAUTOReg_autoexecdata[1:0]};
      5'b01001:
        casez_tmp_0 = 32'h0;
      5'b01010:
        casez_tmp_0 = 32'h0;
      5'b01011:
        casez_tmp_0 = 32'h0;
      5'b01100:
        casez_tmp_0 = 32'h0;
      5'b01101:
        casez_tmp_0 = 32'h0;
      5'b01110:
        casez_tmp_0 = 32'h0;
      5'b01111:
        casez_tmp_0 = 32'h0;
      5'b10000:
        casez_tmp_0 =
          {programBufferMem_3,
           programBufferMem_2,
           programBufferMem_1,
           programBufferMem_0};
      5'b10001:
        casez_tmp_0 =
          {programBufferMem_7,
           programBufferMem_6,
           programBufferMem_5,
           programBufferMem_4};
      5'b10010:
        casez_tmp_0 =
          {programBufferMem_11,
           programBufferMem_10,
           programBufferMem_9,
           programBufferMem_8};
      5'b10011:
        casez_tmp_0 =
          {programBufferMem_15,
           programBufferMem_14,
           programBufferMem_13,
           programBufferMem_12};
      5'b10100:
        casez_tmp_0 =
          {programBufferMem_19,
           programBufferMem_18,
           programBufferMem_17,
           programBufferMem_16};
      5'b10101:
        casez_tmp_0 =
          {programBufferMem_23,
           programBufferMem_22,
           programBufferMem_21,
           programBufferMem_20};
      5'b10110:
        casez_tmp_0 =
          {programBufferMem_27,
           programBufferMem_26,
           programBufferMem_25,
           programBufferMem_24};
      5'b10111:
        casez_tmp_0 =
          {programBufferMem_31,
           programBufferMem_30,
           programBufferMem_29,
           programBufferMem_28};
      5'b11000:
        casez_tmp_0 =
          {programBufferMem_35,
           programBufferMem_34,
           programBufferMem_33,
           programBufferMem_32};
      5'b11001:
        casez_tmp_0 =
          {programBufferMem_39,
           programBufferMem_38,
           programBufferMem_37,
           programBufferMem_36};
      5'b11010:
        casez_tmp_0 =
          {programBufferMem_43,
           programBufferMem_42,
           programBufferMem_41,
           programBufferMem_40};
      5'b11011:
        casez_tmp_0 =
          {programBufferMem_47,
           programBufferMem_46,
           programBufferMem_45,
           programBufferMem_44};
      5'b11100:
        casez_tmp_0 =
          {programBufferMem_51,
           programBufferMem_50,
           programBufferMem_49,
           programBufferMem_48};
      5'b11101:
        casez_tmp_0 =
          {programBufferMem_55,
           programBufferMem_54,
           programBufferMem_53,
           programBufferMem_52};
      5'b11110:
        casez_tmp_0 =
          {programBufferMem_59,
           programBufferMem_58,
           programBufferMem_57,
           programBufferMem_56};
      default:
        casez_tmp_0 =
          {programBufferMem_63,
           programBufferMem_62,
           programBufferMem_61,
           programBufferMem_60};
    endcase
  end // always @(*)
  reg         goReg;
  reg  [31:0] abstractGeneratedMem_0;
  reg  [31:0] abstractGeneratedMem_1;
  wire        out_front_1_bits_read = auto_tl_in_a_bits_opcode == 3'h4;
  wire [9:0]  _out_womask_T_631 =
    {{2{auto_tl_in_a_bits_mask[1]}}, {8{auto_tl_in_a_bits_mask[0]}}};
  wire        hartResumingWrEn = out_woready_1_345 & (&_out_womask_T_631);
  wire [9:0]  _out_womask_T_632 =
    {{2{auto_tl_in_a_bits_mask[5]}}, {8{auto_tl_in_a_bits_mask[4]}}};
  wire        hartExceptionWrEn = out_woready_1_345 & (&_out_womask_T_632);
  wire        hartHaltedWrEn = out_woready_1_528 & (&_out_womask_T_631);
  wire        hartGoingWrEn = out_woready_1_528 & (&_out_womask_T_632);
  wire        _out_wofireMux_T_134 =
    auto_tl_in_a_valid & auto_tl_in_d_ready & ~out_front_1_bits_read;
  assign out_woready_1_528 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h20
    & ~(auto_tl_in_a_bits_address[11]);
  assign out_woready_1_345 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h21
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_922 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h68
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_510 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h69
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_191 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6A
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_1074 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6B
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_722 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6C
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_442 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6D
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_111 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6E
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_1146 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h6F
    & ~(auto_tl_in_a_bits_address[11]);
  wire        out_woready_1_818 =
    _out_wofireMux_T_134 & auto_tl_in_a_bits_address[10:3] == 8'h70
    & ~(auto_tl_in_a_bits_address[11]);
  always @(*) begin
    casez (auto_tl_in_a_bits_address[10:3])
      8'b00000000:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000001:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000010:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000011:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000100:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000101:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000110:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00000111:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00001000:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00001001:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00001010:
        casez_tmp_1 = auto_tl_in_a_bits_address[11];
      8'b00001011:
        casez_tmp_1 = 1'h1;
      8'b00001100:
        casez_tmp_1 = 1'h1;
      8'b00001101:
        casez_tmp_1 = 1'h1;
      8'b00001110:
        casez_tmp_1 = 1'h1;
      8'b00001111:
        casez_tmp_1 = 1'h1;
      8'b00010000:
        casez_tmp_1 = 1'h1;
      8'b00010001:
        casez_tmp_1 = 1'h1;
      8'b00010010:
        casez_tmp_1 = 1'h1;
      8'b00010011:
        casez_tmp_1 = 1'h1;
      8'b00010100:
        casez_tmp_1 = 1'h1;
      8'b00010101:
        casez_tmp_1 = 1'h1;
      8'b00010110:
        casez_tmp_1 = 1'h1;
      8'b00010111:
        casez_tmp_1 = 1'h1;
      8'b00011000:
        casez_tmp_1 = 1'h1;
      8'b00011001:
        casez_tmp_1 = 1'h1;
      8'b00011010:
        casez_tmp_1 = 1'h1;
      8'b00011011:
        casez_tmp_1 = 1'h1;
      8'b00011100:
        casez_tmp_1 = 1'h1;
      8'b00011101:
        casez_tmp_1 = 1'h1;
      8'b00011110:
        casez_tmp_1 = 1'h1;
      8'b00011111:
        casez_tmp_1 = 1'h1;
      8'b00100000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b00100001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b00100010:
        casez_tmp_1 = 1'h1;
      8'b00100011:
        casez_tmp_1 = 1'h1;
      8'b00100100:
        casez_tmp_1 = 1'h1;
      8'b00100101:
        casez_tmp_1 = 1'h1;
      8'b00100110:
        casez_tmp_1 = 1'h1;
      8'b00100111:
        casez_tmp_1 = 1'h1;
      8'b00101000:
        casez_tmp_1 = 1'h1;
      8'b00101001:
        casez_tmp_1 = 1'h1;
      8'b00101010:
        casez_tmp_1 = 1'h1;
      8'b00101011:
        casez_tmp_1 = 1'h1;
      8'b00101100:
        casez_tmp_1 = 1'h1;
      8'b00101101:
        casez_tmp_1 = 1'h1;
      8'b00101110:
        casez_tmp_1 = 1'h1;
      8'b00101111:
        casez_tmp_1 = 1'h1;
      8'b00110000:
        casez_tmp_1 = 1'h1;
      8'b00110001:
        casez_tmp_1 = 1'h1;
      8'b00110010:
        casez_tmp_1 = 1'h1;
      8'b00110011:
        casez_tmp_1 = 1'h1;
      8'b00110100:
        casez_tmp_1 = 1'h1;
      8'b00110101:
        casez_tmp_1 = 1'h1;
      8'b00110110:
        casez_tmp_1 = 1'h1;
      8'b00110111:
        casez_tmp_1 = 1'h1;
      8'b00111000:
        casez_tmp_1 = 1'h1;
      8'b00111001:
        casez_tmp_1 = 1'h1;
      8'b00111010:
        casez_tmp_1 = 1'h1;
      8'b00111011:
        casez_tmp_1 = 1'h1;
      8'b00111100:
        casez_tmp_1 = 1'h1;
      8'b00111101:
        casez_tmp_1 = 1'h1;
      8'b00111110:
        casez_tmp_1 = 1'h1;
      8'b00111111:
        casez_tmp_1 = 1'h1;
      8'b01000000:
        casez_tmp_1 = 1'h1;
      8'b01000001:
        casez_tmp_1 = 1'h1;
      8'b01000010:
        casez_tmp_1 = 1'h1;
      8'b01000011:
        casez_tmp_1 = 1'h1;
      8'b01000100:
        casez_tmp_1 = 1'h1;
      8'b01000101:
        casez_tmp_1 = 1'h1;
      8'b01000110:
        casez_tmp_1 = 1'h1;
      8'b01000111:
        casez_tmp_1 = 1'h1;
      8'b01001000:
        casez_tmp_1 = 1'h1;
      8'b01001001:
        casez_tmp_1 = 1'h1;
      8'b01001010:
        casez_tmp_1 = 1'h1;
      8'b01001011:
        casez_tmp_1 = 1'h1;
      8'b01001100:
        casez_tmp_1 = 1'h1;
      8'b01001101:
        casez_tmp_1 = 1'h1;
      8'b01001110:
        casez_tmp_1 = 1'h1;
      8'b01001111:
        casez_tmp_1 = 1'h1;
      8'b01010000:
        casez_tmp_1 = 1'h1;
      8'b01010001:
        casez_tmp_1 = 1'h1;
      8'b01010010:
        casez_tmp_1 = 1'h1;
      8'b01010011:
        casez_tmp_1 = 1'h1;
      8'b01010100:
        casez_tmp_1 = 1'h1;
      8'b01010101:
        casez_tmp_1 = 1'h1;
      8'b01010110:
        casez_tmp_1 = 1'h1;
      8'b01010111:
        casez_tmp_1 = 1'h1;
      8'b01011000:
        casez_tmp_1 = 1'h1;
      8'b01011001:
        casez_tmp_1 = 1'h1;
      8'b01011010:
        casez_tmp_1 = 1'h1;
      8'b01011011:
        casez_tmp_1 = 1'h1;
      8'b01011100:
        casez_tmp_1 = 1'h1;
      8'b01011101:
        casez_tmp_1 = 1'h1;
      8'b01011110:
        casez_tmp_1 = 1'h1;
      8'b01011111:
        casez_tmp_1 = 1'h1;
      8'b01100000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01100001:
        casez_tmp_1 = 1'h1;
      8'b01100010:
        casez_tmp_1 = 1'h1;
      8'b01100011:
        casez_tmp_1 = 1'h1;
      8'b01100100:
        casez_tmp_1 = 1'h1;
      8'b01100101:
        casez_tmp_1 = 1'h1;
      8'b01100110:
        casez_tmp_1 = 1'h1;
      8'b01100111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01101111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01110000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b01110001:
        casez_tmp_1 = 1'h1;
      8'b01110010:
        casez_tmp_1 = 1'h1;
      8'b01110011:
        casez_tmp_1 = 1'h1;
      8'b01110100:
        casez_tmp_1 = 1'h1;
      8'b01110101:
        casez_tmp_1 = 1'h1;
      8'b01110110:
        casez_tmp_1 = 1'h1;
      8'b01110111:
        casez_tmp_1 = 1'h1;
      8'b01111000:
        casez_tmp_1 = 1'h1;
      8'b01111001:
        casez_tmp_1 = 1'h1;
      8'b01111010:
        casez_tmp_1 = 1'h1;
      8'b01111011:
        casez_tmp_1 = 1'h1;
      8'b01111100:
        casez_tmp_1 = 1'h1;
      8'b01111101:
        casez_tmp_1 = 1'h1;
      8'b01111110:
        casez_tmp_1 = 1'h1;
      8'b01111111:
        casez_tmp_1 = 1'h1;
      8'b10000000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10000111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10001111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10010111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10011111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10100111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10101111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10110111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b10111111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11000111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11001111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11010111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11011111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11100111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11101111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11110111:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111000:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111001:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111010:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111011:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111100:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111101:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      8'b11111110:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
      default:
        casez_tmp_1 = ~(auto_tl_in_a_bits_address[11]);
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_tl_in_a_bits_address[10:3])
      8'b00000000:
        casez_tmp_2 = 64'h380006F00C0006F;
      8'b00000001:
        casez_tmp_2 = 64'hFF0000F0440006F;
      8'b00000010:
        casez_tmp_2 = 64'hF14024737B241073;
      8'b00000011:
        casez_tmp_2 = 64'h4004440310802023;
      8'b00000100:
        casez_tmp_2 = 64'hFE0408E300347413;
      8'b00000101:
        casez_tmp_2 = 64'h4086300147413;
      8'b00000110:
        casez_tmp_2 = 64'h100022237B202473;
      8'b00000111:
        casez_tmp_2 = 64'hF140247330000067;
      8'b00001000:
        casez_tmp_2 = 64'h7B20247310802423;
      8'b00001001:
        casez_tmp_2 = 64'h100026237B200073;
      8'b00001010:
        casez_tmp_2 = 64'h100073;
      8'b00001011:
        casez_tmp_2 = 64'h0;
      8'b00001100:
        casez_tmp_2 = 64'h0;
      8'b00001101:
        casez_tmp_2 = 64'h0;
      8'b00001110:
        casez_tmp_2 = 64'h0;
      8'b00001111:
        casez_tmp_2 = 64'h0;
      8'b00010000:
        casez_tmp_2 = 64'h0;
      8'b00010001:
        casez_tmp_2 = 64'h0;
      8'b00010010:
        casez_tmp_2 = 64'h0;
      8'b00010011:
        casez_tmp_2 = 64'h0;
      8'b00010100:
        casez_tmp_2 = 64'h0;
      8'b00010101:
        casez_tmp_2 = 64'h0;
      8'b00010110:
        casez_tmp_2 = 64'h0;
      8'b00010111:
        casez_tmp_2 = 64'h0;
      8'b00011000:
        casez_tmp_2 = 64'h0;
      8'b00011001:
        casez_tmp_2 = 64'h0;
      8'b00011010:
        casez_tmp_2 = 64'h0;
      8'b00011011:
        casez_tmp_2 = 64'h0;
      8'b00011100:
        casez_tmp_2 = 64'h0;
      8'b00011101:
        casez_tmp_2 = 64'h0;
      8'b00011110:
        casez_tmp_2 = 64'h0;
      8'b00011111:
        casez_tmp_2 = 64'h0;
      8'b00100000:
        casez_tmp_2 = 64'h0;
      8'b00100001:
        casez_tmp_2 = 64'h0;
      8'b00100010:
        casez_tmp_2 = 64'h0;
      8'b00100011:
        casez_tmp_2 = 64'h0;
      8'b00100100:
        casez_tmp_2 = 64'h0;
      8'b00100101:
        casez_tmp_2 = 64'h0;
      8'b00100110:
        casez_tmp_2 = 64'h0;
      8'b00100111:
        casez_tmp_2 = 64'h0;
      8'b00101000:
        casez_tmp_2 = 64'h0;
      8'b00101001:
        casez_tmp_2 = 64'h0;
      8'b00101010:
        casez_tmp_2 = 64'h0;
      8'b00101011:
        casez_tmp_2 = 64'h0;
      8'b00101100:
        casez_tmp_2 = 64'h0;
      8'b00101101:
        casez_tmp_2 = 64'h0;
      8'b00101110:
        casez_tmp_2 = 64'h0;
      8'b00101111:
        casez_tmp_2 = 64'h0;
      8'b00110000:
        casez_tmp_2 = 64'h0;
      8'b00110001:
        casez_tmp_2 = 64'h0;
      8'b00110010:
        casez_tmp_2 = 64'h0;
      8'b00110011:
        casez_tmp_2 = 64'h0;
      8'b00110100:
        casez_tmp_2 = 64'h0;
      8'b00110101:
        casez_tmp_2 = 64'h0;
      8'b00110110:
        casez_tmp_2 = 64'h0;
      8'b00110111:
        casez_tmp_2 = 64'h0;
      8'b00111000:
        casez_tmp_2 = 64'h0;
      8'b00111001:
        casez_tmp_2 = 64'h0;
      8'b00111010:
        casez_tmp_2 = 64'h0;
      8'b00111011:
        casez_tmp_2 = 64'h0;
      8'b00111100:
        casez_tmp_2 = 64'h0;
      8'b00111101:
        casez_tmp_2 = 64'h0;
      8'b00111110:
        casez_tmp_2 = 64'h0;
      8'b00111111:
        casez_tmp_2 = 64'h0;
      8'b01000000:
        casez_tmp_2 = 64'h0;
      8'b01000001:
        casez_tmp_2 = 64'h0;
      8'b01000010:
        casez_tmp_2 = 64'h0;
      8'b01000011:
        casez_tmp_2 = 64'h0;
      8'b01000100:
        casez_tmp_2 = 64'h0;
      8'b01000101:
        casez_tmp_2 = 64'h0;
      8'b01000110:
        casez_tmp_2 = 64'h0;
      8'b01000111:
        casez_tmp_2 = 64'h0;
      8'b01001000:
        casez_tmp_2 = 64'h0;
      8'b01001001:
        casez_tmp_2 = 64'h0;
      8'b01001010:
        casez_tmp_2 = 64'h0;
      8'b01001011:
        casez_tmp_2 = 64'h0;
      8'b01001100:
        casez_tmp_2 = 64'h0;
      8'b01001101:
        casez_tmp_2 = 64'h0;
      8'b01001110:
        casez_tmp_2 = 64'h0;
      8'b01001111:
        casez_tmp_2 = 64'h0;
      8'b01010000:
        casez_tmp_2 = 64'h0;
      8'b01010001:
        casez_tmp_2 = 64'h0;
      8'b01010010:
        casez_tmp_2 = 64'h0;
      8'b01010011:
        casez_tmp_2 = 64'h0;
      8'b01010100:
        casez_tmp_2 = 64'h0;
      8'b01010101:
        casez_tmp_2 = 64'h0;
      8'b01010110:
        casez_tmp_2 = 64'h0;
      8'b01010111:
        casez_tmp_2 = 64'h0;
      8'b01011000:
        casez_tmp_2 = 64'h0;
      8'b01011001:
        casez_tmp_2 = 64'h0;
      8'b01011010:
        casez_tmp_2 = 64'h0;
      8'b01011011:
        casez_tmp_2 = 64'h0;
      8'b01011100:
        casez_tmp_2 = 64'h0;
      8'b01011101:
        casez_tmp_2 = 64'h0;
      8'b01011110:
        casez_tmp_2 = 64'h0;
      8'b01011111:
        casez_tmp_2 = 64'h0;
      8'b01100000:
        casez_tmp_2 = 64'h380006F;
      8'b01100001:
        casez_tmp_2 = 64'h0;
      8'b01100010:
        casez_tmp_2 = 64'h0;
      8'b01100011:
        casez_tmp_2 = 64'h0;
      8'b01100100:
        casez_tmp_2 = 64'h0;
      8'b01100101:
        casez_tmp_2 = 64'h0;
      8'b01100110:
        casez_tmp_2 = 64'h0;
      8'b01100111:
        casez_tmp_2 = {abstractGeneratedMem_1, abstractGeneratedMem_0};
      8'b01101000:
        casez_tmp_2 =
          {programBufferMem_7,
           programBufferMem_6,
           programBufferMem_5,
           programBufferMem_4,
           programBufferMem_3,
           programBufferMem_2,
           programBufferMem_1,
           programBufferMem_0};
      8'b01101001:
        casez_tmp_2 =
          {programBufferMem_15,
           programBufferMem_14,
           programBufferMem_13,
           programBufferMem_12,
           programBufferMem_11,
           programBufferMem_10,
           programBufferMem_9,
           programBufferMem_8};
      8'b01101010:
        casez_tmp_2 =
          {programBufferMem_23,
           programBufferMem_22,
           programBufferMem_21,
           programBufferMem_20,
           programBufferMem_19,
           programBufferMem_18,
           programBufferMem_17,
           programBufferMem_16};
      8'b01101011:
        casez_tmp_2 =
          {programBufferMem_31,
           programBufferMem_30,
           programBufferMem_29,
           programBufferMem_28,
           programBufferMem_27,
           programBufferMem_26,
           programBufferMem_25,
           programBufferMem_24};
      8'b01101100:
        casez_tmp_2 =
          {programBufferMem_39,
           programBufferMem_38,
           programBufferMem_37,
           programBufferMem_36,
           programBufferMem_35,
           programBufferMem_34,
           programBufferMem_33,
           programBufferMem_32};
      8'b01101101:
        casez_tmp_2 =
          {programBufferMem_47,
           programBufferMem_46,
           programBufferMem_45,
           programBufferMem_44,
           programBufferMem_43,
           programBufferMem_42,
           programBufferMem_41,
           programBufferMem_40};
      8'b01101110:
        casez_tmp_2 =
          {programBufferMem_55,
           programBufferMem_54,
           programBufferMem_53,
           programBufferMem_52,
           programBufferMem_51,
           programBufferMem_50,
           programBufferMem_49,
           programBufferMem_48};
      8'b01101111:
        casez_tmp_2 =
          {programBufferMem_63,
           programBufferMem_62,
           programBufferMem_61,
           programBufferMem_60,
           programBufferMem_59,
           programBufferMem_58,
           programBufferMem_57,
           programBufferMem_56};
      8'b01110000:
        casez_tmp_2 =
          {abstractDataMem_7,
           abstractDataMem_6,
           abstractDataMem_5,
           abstractDataMem_4,
           abstractDataMem_3,
           abstractDataMem_2,
           abstractDataMem_1,
           abstractDataMem_0};
      8'b01110001:
        casez_tmp_2 = 64'h0;
      8'b01110010:
        casez_tmp_2 = 64'h0;
      8'b01110011:
        casez_tmp_2 = 64'h0;
      8'b01110100:
        casez_tmp_2 = 64'h0;
      8'b01110101:
        casez_tmp_2 = 64'h0;
      8'b01110110:
        casez_tmp_2 = 64'h0;
      8'b01110111:
        casez_tmp_2 = 64'h0;
      8'b01111000:
        casez_tmp_2 = 64'h0;
      8'b01111001:
        casez_tmp_2 = 64'h0;
      8'b01111010:
        casez_tmp_2 = 64'h0;
      8'b01111011:
        casez_tmp_2 = 64'h0;
      8'b01111100:
        casez_tmp_2 = 64'h0;
      8'b01111101:
        casez_tmp_2 = 64'h0;
      8'b01111110:
        casez_tmp_2 = 64'h0;
      8'b01111111:
        casez_tmp_2 = 64'h0;
      8'b10000000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10000111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10001111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10010111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10011111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10100111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10101111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10110111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b10111111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11000111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11001111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11010111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11011111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11100111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11101111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11110111:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111000:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111001:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111010:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111011:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111100:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111101:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      8'b11111110:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
      default:
        casez_tmp_2 =
          {6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg,
           6'h0,
           resumeReqRegs,
           goReg};
    endcase
  end // always @(*)
  reg  [1:0]  ctrlStateReg;
  assign abstractCommandBusy = |ctrlStateReg;
  wire        commandRegIsAccessRegister = COMMANDReg_cmdtype == 8'h0;
  wire        _GEN_1 =
    commandRegIsAccessRegister
    & (~(COMMANDReg_control[17]) | (|(COMMANDReg_control[15:12]))
       & COMMANDReg_control[15:0] < 16'h1020
       & (COMMANDReg_control[22:20] == 3'h2 | COMMANDReg_control[22:20] == 3'h3));
  wire        commandRegBadHaltResume = _GEN_1 & ~haltedBitRegs;
  wire        _T_1399 = ctrlStateReg == 2'h1;
  wire        _GEN_2 = ~_GEN_1 | commandRegBadHaltResume;
  wire        goAbstract = (|ctrlStateReg) & _T_1399 & ~_GEN_2;
  wire        _T_1400 = ctrlStateReg == 2'h2;
  `ifndef SYNTHESIS
    wire _GEN_3 = (|ctrlStateReg) & ~_T_1399;
    always @(posedge clock) begin
      if (io_dmactive & ~goAbstract & hartGoingWrEn & ~reset
          & (|(auto_tl_in_a_bits_data[41:32]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected 'GOING' hart.\n    at Debug.scala:1499 assert(hartGoingId === 0.U, \"Unexpected 'GOING' hart.\")//Chisel3 #540 %%%%x, expected %%%%x\", hartGoingId, 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & _T_1400 & hartExceptionWrEn & ~reset
          & (|(auto_tl_in_a_bits_data[41:32]))) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected 'EXCEPTION' hart\n    at Debug.scala:1820 assert(hartExceptionId === 0.U, \"Unexpected 'EXCEPTION' hart\")//Chisel3 #540, %%%%x, expected %%%%x\", hartExceptionId, 0.U)\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (_GEN_3 & ~_T_1400 & (&ctrlStateReg) & ~reset) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Should not be in custom state unless we need it.\n    at Debug.scala:1825 assert(needCustom.B, \"Should not be in custom state unless we need it.\")\n");
        if (`STOP_COND_)
          $fatal;
      end
      if (~reset & ~(~io_dmactive | ~hartExceptionWrEn | ctrlStateReg == 2'h2)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Unexpected EXCEPTION write: should only get it in Debug Module EXEC state\n    at Debug.scala:1838 assert ((!io.dmactive || !hartExceptionWrEn || ctrlStateReg === CtrlState(Exec)),\n");
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        dmiAbstractDataAccessVec_0 =
    dmiAbstractDataWrEnMaybe_0 | out_roready_27 & auto_dmi_in_a_bits_mask[0];
  wire        dmiAbstractDataAccessVec_4 =
    dmiAbstractDataWrEnMaybe_4 | out_roready_3 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_0 =
    dmiProgramBufferWrEnMaybe_0 | out_roready_78 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_4 =
    dmiProgramBufferWrEnMaybe_4 | out_roready_50 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_8 =
    dmiProgramBufferWrEnMaybe_8 | out_roready_82 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_12 =
    dmiProgramBufferWrEnMaybe_12 | out_roready_19 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_16 =
    dmiProgramBufferWrEnMaybe_16 | out_roready_102 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_20 =
    dmiProgramBufferWrEnMaybe_20 | out_roready_42 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_24 =
    dmiProgramBufferWrEnMaybe_24 | out_roready_46 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_28 =
    dmiProgramBufferWrEnMaybe_28 | out_roready_15 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_32 =
    dmiProgramBufferWrEnMaybe_32 | out_roready_97 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_36 =
    dmiProgramBufferWrEnMaybe_36 | out_roready_11 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_40 =
    dmiProgramBufferWrEnMaybe_40 | out_roready_35 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_44 =
    dmiProgramBufferWrEnMaybe_44 | out_roready_23 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_48 =
    dmiProgramBufferWrEnMaybe_48 | out_roready_93 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_52 =
    dmiProgramBufferWrEnMaybe_52 | out_roready_54 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_56 =
    dmiProgramBufferWrEnMaybe_56 | out_roready_7 & auto_dmi_in_a_bits_mask[0];
  wire        dmiProgramBufferAccessVec_60 =
    dmiProgramBufferWrEnMaybe_60 | out_roready_31 & auto_dmi_in_a_bits_mask[0];
  wire        autoexec =
    dmiAbstractDataAccessVec_0 & ABSTRACTAUTOReg_autoexecdata[0]
    | dmiAbstractDataAccessVec_4 & ABSTRACTAUTOReg_autoexecdata[1]
    | dmiProgramBufferAccessVec_0 & ABSTRACTAUTOReg_autoexecprogbuf[0]
    | dmiProgramBufferAccessVec_4 & ABSTRACTAUTOReg_autoexecprogbuf[1]
    | dmiProgramBufferAccessVec_8 & ABSTRACTAUTOReg_autoexecprogbuf[2]
    | dmiProgramBufferAccessVec_12 & ABSTRACTAUTOReg_autoexecprogbuf[3]
    | dmiProgramBufferAccessVec_16 & ABSTRACTAUTOReg_autoexecprogbuf[4]
    | dmiProgramBufferAccessVec_20 & ABSTRACTAUTOReg_autoexecprogbuf[5]
    | dmiProgramBufferAccessVec_24 & ABSTRACTAUTOReg_autoexecprogbuf[6]
    | dmiProgramBufferAccessVec_28 & ABSTRACTAUTOReg_autoexecprogbuf[7]
    | dmiProgramBufferAccessVec_32 & ABSTRACTAUTOReg_autoexecprogbuf[8]
    | dmiProgramBufferAccessVec_36 & ABSTRACTAUTOReg_autoexecprogbuf[9]
    | dmiProgramBufferAccessVec_40 & ABSTRACTAUTOReg_autoexecprogbuf[10]
    | dmiProgramBufferAccessVec_44 & ABSTRACTAUTOReg_autoexecprogbuf[11]
    | dmiProgramBufferAccessVec_48 & ABSTRACTAUTOReg_autoexecprogbuf[12]
    | dmiProgramBufferAccessVec_52 & ABSTRACTAUTOReg_autoexecprogbuf[13]
    | dmiProgramBufferAccessVec_56 & ABSTRACTAUTOReg_autoexecprogbuf[14]
    | dmiProgramBufferAccessVec_60 & ABSTRACTAUTOReg_autoexecprogbuf[15];
  wire        COMMANDWrEn = COMMANDWrEnMaybe & ~(|ctrlStateReg);
  wire        _regAccessRegisterCommand_T_1 = ABSTRACTCSReg_cmderr == 3'h0;
  wire        _T_1397 =
    COMMANDWrEn & ~(|(_COMMANDWrData_WIRE_1[31:24])) & _regAccessRegisterCommand_T_1
    | autoexec & commandRegIsAccessRegister & _regAccessRegisterCommand_T_1;
  always @(posedge clock) begin
    haltedBitRegs <=
      io_dmactive & (hartHaltedWrEn | ~hartResumingWrEn & haltedBitRegs)
      & ~_hartIsInResetSync_0_debug_hartReset_0_io_q;
    resumeReqRegs <=
      io_dmactive
      & (resumereq
           ? (resumeReqRegs | hamaskWrSel_0)
             & ~_hartIsInResetSync_0_debug_hartReset_0_io_q
           : ~hartResumingWrEn & resumeReqRegs
             & ~_hartIsInResetSync_0_debug_hartReset_0_io_q);
    haveResetBitRegs <=
      io_dmactive
      & (io_innerCtrl_valid & io_innerCtrl_bits_ackhavereset
           ? haveResetBitRegs & ~hamaskWrSel_0
             | _hartIsInResetSync_0_debug_hartReset_0_io_q
           : haveResetBitRegs | _hartIsInResetSync_0_debug_hartReset_0_io_q);
    if (io_dmactive) begin
      if (ABSTRACTCSWrEnMaybe & (|ctrlStateReg) | autoexecdataWrEnMaybe & (|ctrlStateReg)
          | autoexecprogbufWrEnMaybe & (|ctrlStateReg) | COMMANDWrEnMaybe
          & (|ctrlStateReg)
          | (dmiAbstractDataAccessVec_0 | dmiAbstractDataWrEnMaybe_1 | out_roready_27
             & auto_dmi_in_a_bits_mask[1] | dmiAbstractDataWrEnMaybe_2 | out_roready_27
             & auto_dmi_in_a_bits_mask[2] | dmiAbstractDataWrEnMaybe_3 | out_roready_27
             & auto_dmi_in_a_bits_mask[3] | dmiAbstractDataAccessVec_4
             | dmiAbstractDataWrEnMaybe_5 | out_roready_3 & auto_dmi_in_a_bits_mask[1]
             | dmiAbstractDataWrEnMaybe_6 | out_roready_3 & auto_dmi_in_a_bits_mask[2]
             | dmiAbstractDataWrEnMaybe_7 | out_roready_3 & auto_dmi_in_a_bits_mask[3])
          & (|ctrlStateReg)
          | (dmiProgramBufferAccessVec_0 | dmiProgramBufferWrEnMaybe_1 | out_roready_78
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_2 | out_roready_78
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_3 | out_roready_78
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_4
             | dmiProgramBufferWrEnMaybe_5 | out_roready_50 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_6 | out_roready_50 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_7 | out_roready_50 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_8 | dmiProgramBufferWrEnMaybe_9 | out_roready_82
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_10 | out_roready_82
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_11 | out_roready_82
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_12
             | dmiProgramBufferWrEnMaybe_13 | out_roready_19 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_14 | out_roready_19 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_15 | out_roready_19 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_16 | dmiProgramBufferWrEnMaybe_17
             | out_roready_102 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_18
             | out_roready_102 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_19
             | out_roready_102 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_20
             | dmiProgramBufferWrEnMaybe_21 | out_roready_42 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_22 | out_roready_42 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_23 | out_roready_42 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_24 | dmiProgramBufferWrEnMaybe_25
             | out_roready_46 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_26
             | out_roready_46 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_27
             | out_roready_46 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_28
             | dmiProgramBufferWrEnMaybe_29 | out_roready_15 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_30 | out_roready_15 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_31 | out_roready_15 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_32 | dmiProgramBufferWrEnMaybe_33
             | out_roready_97 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_34
             | out_roready_97 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_35
             | out_roready_97 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_36
             | dmiProgramBufferWrEnMaybe_37 | out_roready_11 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_38 | out_roready_11 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_39 | out_roready_11 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_40 | dmiProgramBufferWrEnMaybe_41
             | out_roready_35 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_42
             | out_roready_35 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_43
             | out_roready_35 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_44
             | dmiProgramBufferWrEnMaybe_45 | out_roready_23 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_46 | out_roready_23 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_47 | out_roready_23 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_48 | dmiProgramBufferWrEnMaybe_49
             | out_roready_93 & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_50
             | out_roready_93 & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_51
             | out_roready_93 & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_52
             | dmiProgramBufferWrEnMaybe_53 | out_roready_54 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_54 | out_roready_54 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_55 | out_roready_54 & auto_dmi_in_a_bits_mask[3]
             | dmiProgramBufferAccessVec_56 | dmiProgramBufferWrEnMaybe_57 | out_roready_7
             & auto_dmi_in_a_bits_mask[1] | dmiProgramBufferWrEnMaybe_58 | out_roready_7
             & auto_dmi_in_a_bits_mask[2] | dmiProgramBufferWrEnMaybe_59 | out_roready_7
             & auto_dmi_in_a_bits_mask[3] | dmiProgramBufferAccessVec_60
             | dmiProgramBufferWrEnMaybe_61 | out_roready_31 & auto_dmi_in_a_bits_mask[1]
             | dmiProgramBufferWrEnMaybe_62 | out_roready_31 & auto_dmi_in_a_bits_mask[2]
             | dmiProgramBufferWrEnMaybe_63 | out_roready_31 & auto_dmi_in_a_bits_mask[3])
          & (|ctrlStateReg))
        ABSTRACTCSReg_cmderr <= 3'h1;
      else if (~(~(|ctrlStateReg) | _T_1399) & _T_1400 & hartExceptionWrEn)
        ABSTRACTCSReg_cmderr <= 3'h3;
      else if ((|ctrlStateReg)
                 ? _T_1399 & ~_GEN_1
                 : ~_T_1397
                   & (COMMANDWrEn & (|(_COMMANDWrData_WIRE_1[31:24])) | autoexec
                      & ~_GEN_1))
        ABSTRACTCSReg_cmderr <= 3'h2;
      else if ((|ctrlStateReg) & _T_1399 & _GEN_1 & commandRegBadHaltResume)
        ABSTRACTCSReg_cmderr <= 3'h4;
      else
        ABSTRACTCSReg_cmderr <=
          ({3{~(ABSTRACTCSWrEnMaybe & ~(|ctrlStateReg))}}
           | ~(auto_dmi_in_a_bits_data[10:8])) & ABSTRACTCSReg_cmderr;
      if (autoexecprogbufWrEnMaybe & ~(|ctrlStateReg))
        ABSTRACTAUTOReg_autoexecprogbuf <= auto_dmi_in_a_bits_data[31:16];
      if (autoexecdataWrEnMaybe & ~(|ctrlStateReg))
        ABSTRACTAUTOReg_autoexecdata <= {10'h0, auto_dmi_in_a_bits_data[1:0]};
      if (COMMANDWrEn) begin
        COMMANDReg_cmdtype <= _COMMANDWrData_WIRE_1[31:24];
        COMMANDReg_control <= _COMMANDWrData_WIRE_1[23:0];
      end
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[0])
        abstractDataMem_0 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiAbstractDataWrEnMaybe_0 & ~(|ctrlStateReg))
        abstractDataMem_0 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[1])
        abstractDataMem_1 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiAbstractDataWrEnMaybe_1 & ~(|ctrlStateReg))
        abstractDataMem_1 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[2])
        abstractDataMem_2 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiAbstractDataWrEnMaybe_2 & ~(|ctrlStateReg))
        abstractDataMem_2 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[3])
        abstractDataMem_3 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiAbstractDataWrEnMaybe_3 & ~(|ctrlStateReg))
        abstractDataMem_3 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[4])
        abstractDataMem_4 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiAbstractDataWrEnMaybe_4 & ~(|ctrlStateReg))
        abstractDataMem_4 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[5])
        abstractDataMem_5 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiAbstractDataWrEnMaybe_5 & ~(|ctrlStateReg))
        abstractDataMem_5 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[6])
        abstractDataMem_6 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiAbstractDataWrEnMaybe_6 & ~(|ctrlStateReg))
        abstractDataMem_6 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_818 & auto_tl_in_a_bits_mask[7])
        abstractDataMem_7 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiAbstractDataWrEnMaybe_7 & ~(|ctrlStateReg))
        abstractDataMem_7 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[0])
        programBufferMem_0 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_0 & ~(|ctrlStateReg))
        programBufferMem_0 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[1])
        programBufferMem_1 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_1 & ~(|ctrlStateReg))
        programBufferMem_1 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[2])
        programBufferMem_2 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_2 & ~(|ctrlStateReg))
        programBufferMem_2 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[3])
        programBufferMem_3 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_3 & ~(|ctrlStateReg))
        programBufferMem_3 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[4])
        programBufferMem_4 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_4 & ~(|ctrlStateReg))
        programBufferMem_4 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[5])
        programBufferMem_5 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_5 & ~(|ctrlStateReg))
        programBufferMem_5 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[6])
        programBufferMem_6 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_6 & ~(|ctrlStateReg))
        programBufferMem_6 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_922 & auto_tl_in_a_bits_mask[7])
        programBufferMem_7 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_7 & ~(|ctrlStateReg))
        programBufferMem_7 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[0])
        programBufferMem_8 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_8 & ~(|ctrlStateReg))
        programBufferMem_8 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[1])
        programBufferMem_9 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_9 & ~(|ctrlStateReg))
        programBufferMem_9 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[2])
        programBufferMem_10 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_10 & ~(|ctrlStateReg))
        programBufferMem_10 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[3])
        programBufferMem_11 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_11 & ~(|ctrlStateReg))
        programBufferMem_11 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[4])
        programBufferMem_12 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_12 & ~(|ctrlStateReg))
        programBufferMem_12 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[5])
        programBufferMem_13 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_13 & ~(|ctrlStateReg))
        programBufferMem_13 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[6])
        programBufferMem_14 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_14 & ~(|ctrlStateReg))
        programBufferMem_14 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_510 & auto_tl_in_a_bits_mask[7])
        programBufferMem_15 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_15 & ~(|ctrlStateReg))
        programBufferMem_15 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[0])
        programBufferMem_16 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_16 & ~(|ctrlStateReg))
        programBufferMem_16 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[1])
        programBufferMem_17 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_17 & ~(|ctrlStateReg))
        programBufferMem_17 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[2])
        programBufferMem_18 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_18 & ~(|ctrlStateReg))
        programBufferMem_18 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[3])
        programBufferMem_19 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_19 & ~(|ctrlStateReg))
        programBufferMem_19 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[4])
        programBufferMem_20 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_20 & ~(|ctrlStateReg))
        programBufferMem_20 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[5])
        programBufferMem_21 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_21 & ~(|ctrlStateReg))
        programBufferMem_21 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[6])
        programBufferMem_22 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_22 & ~(|ctrlStateReg))
        programBufferMem_22 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_191 & auto_tl_in_a_bits_mask[7])
        programBufferMem_23 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_23 & ~(|ctrlStateReg))
        programBufferMem_23 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[0])
        programBufferMem_24 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_24 & ~(|ctrlStateReg))
        programBufferMem_24 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[1])
        programBufferMem_25 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_25 & ~(|ctrlStateReg))
        programBufferMem_25 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[2])
        programBufferMem_26 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_26 & ~(|ctrlStateReg))
        programBufferMem_26 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[3])
        programBufferMem_27 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_27 & ~(|ctrlStateReg))
        programBufferMem_27 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[4])
        programBufferMem_28 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_28 & ~(|ctrlStateReg))
        programBufferMem_28 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[5])
        programBufferMem_29 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_29 & ~(|ctrlStateReg))
        programBufferMem_29 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[6])
        programBufferMem_30 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_30 & ~(|ctrlStateReg))
        programBufferMem_30 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1074 & auto_tl_in_a_bits_mask[7])
        programBufferMem_31 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_31 & ~(|ctrlStateReg))
        programBufferMem_31 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[0])
        programBufferMem_32 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_32 & ~(|ctrlStateReg))
        programBufferMem_32 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[1])
        programBufferMem_33 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_33 & ~(|ctrlStateReg))
        programBufferMem_33 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[2])
        programBufferMem_34 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_34 & ~(|ctrlStateReg))
        programBufferMem_34 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[3])
        programBufferMem_35 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_35 & ~(|ctrlStateReg))
        programBufferMem_35 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[4])
        programBufferMem_36 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_36 & ~(|ctrlStateReg))
        programBufferMem_36 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[5])
        programBufferMem_37 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_37 & ~(|ctrlStateReg))
        programBufferMem_37 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[6])
        programBufferMem_38 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_38 & ~(|ctrlStateReg))
        programBufferMem_38 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_722 & auto_tl_in_a_bits_mask[7])
        programBufferMem_39 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_39 & ~(|ctrlStateReg))
        programBufferMem_39 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[0])
        programBufferMem_40 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_40 & ~(|ctrlStateReg))
        programBufferMem_40 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[1])
        programBufferMem_41 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_41 & ~(|ctrlStateReg))
        programBufferMem_41 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[2])
        programBufferMem_42 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_42 & ~(|ctrlStateReg))
        programBufferMem_42 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[3])
        programBufferMem_43 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_43 & ~(|ctrlStateReg))
        programBufferMem_43 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[4])
        programBufferMem_44 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_44 & ~(|ctrlStateReg))
        programBufferMem_44 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[5])
        programBufferMem_45 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_45 & ~(|ctrlStateReg))
        programBufferMem_45 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[6])
        programBufferMem_46 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_46 & ~(|ctrlStateReg))
        programBufferMem_46 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_442 & auto_tl_in_a_bits_mask[7])
        programBufferMem_47 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_47 & ~(|ctrlStateReg))
        programBufferMem_47 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[0])
        programBufferMem_48 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_48 & ~(|ctrlStateReg))
        programBufferMem_48 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[1])
        programBufferMem_49 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_49 & ~(|ctrlStateReg))
        programBufferMem_49 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[2])
        programBufferMem_50 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_50 & ~(|ctrlStateReg))
        programBufferMem_50 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[3])
        programBufferMem_51 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_51 & ~(|ctrlStateReg))
        programBufferMem_51 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[4])
        programBufferMem_52 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_52 & ~(|ctrlStateReg))
        programBufferMem_52 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[5])
        programBufferMem_53 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_53 & ~(|ctrlStateReg))
        programBufferMem_53 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[6])
        programBufferMem_54 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_54 & ~(|ctrlStateReg))
        programBufferMem_54 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_111 & auto_tl_in_a_bits_mask[7])
        programBufferMem_55 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_55 & ~(|ctrlStateReg))
        programBufferMem_55 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[0])
        programBufferMem_56 <= auto_tl_in_a_bits_data[7:0];
      else if (dmiProgramBufferWrEnMaybe_56 & ~(|ctrlStateReg))
        programBufferMem_56 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[1])
        programBufferMem_57 <= auto_tl_in_a_bits_data[15:8];
      else if (dmiProgramBufferWrEnMaybe_57 & ~(|ctrlStateReg))
        programBufferMem_57 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[2])
        programBufferMem_58 <= auto_tl_in_a_bits_data[23:16];
      else if (dmiProgramBufferWrEnMaybe_58 & ~(|ctrlStateReg))
        programBufferMem_58 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[3])
        programBufferMem_59 <= auto_tl_in_a_bits_data[31:24];
      else if (dmiProgramBufferWrEnMaybe_59 & ~(|ctrlStateReg))
        programBufferMem_59 <= auto_dmi_in_a_bits_data[31:24];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[4])
        programBufferMem_60 <= auto_tl_in_a_bits_data[39:32];
      else if (dmiProgramBufferWrEnMaybe_60 & ~(|ctrlStateReg))
        programBufferMem_60 <= auto_dmi_in_a_bits_data[7:0];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[5])
        programBufferMem_61 <= auto_tl_in_a_bits_data[47:40];
      else if (dmiProgramBufferWrEnMaybe_61 & ~(|ctrlStateReg))
        programBufferMem_61 <= auto_dmi_in_a_bits_data[15:8];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[6])
        programBufferMem_62 <= auto_tl_in_a_bits_data[55:48];
      else if (dmiProgramBufferWrEnMaybe_62 & ~(|ctrlStateReg))
        programBufferMem_62 <= auto_dmi_in_a_bits_data[23:16];
      if (out_woready_1_1146 & auto_tl_in_a_bits_mask[7])
        programBufferMem_63 <= auto_tl_in_a_bits_data[63:56];
      else if (dmiProgramBufferWrEnMaybe_63 & ~(|ctrlStateReg))
        programBufferMem_63 <= auto_dmi_in_a_bits_data[31:24];
      if (|ctrlStateReg) begin
        if (_T_1399)
          ctrlStateReg <= {~_GEN_2, 1'h0};
        else if (_T_1400 & (hartExceptionWrEn | ~goReg & hartHaltedWrEn))
          ctrlStateReg <= 2'h0;
      end
      else if (_T_1397)
        ctrlStateReg <= 2'h1;
    end
    else begin
      ABSTRACTCSReg_progbufsize <= 5'h10;
      ABSTRACTCSReg_cmderr <= 3'h0;
      ABSTRACTCSReg_datacount <= 4'h2;
      ABSTRACTAUTOReg_autoexecprogbuf <= 16'h0;
      ABSTRACTAUTOReg_autoexecdata <= 12'h0;
      COMMANDReg_cmdtype <= 8'h0;
      COMMANDReg_control <= 24'h0;
      abstractDataMem_0 <= 8'h0;
      abstractDataMem_1 <= 8'h0;
      abstractDataMem_2 <= 8'h0;
      abstractDataMem_3 <= 8'h0;
      abstractDataMem_4 <= 8'h0;
      abstractDataMem_5 <= 8'h0;
      abstractDataMem_6 <= 8'h0;
      abstractDataMem_7 <= 8'h0;
      programBufferMem_0 <= 8'h0;
      programBufferMem_1 <= 8'h0;
      programBufferMem_2 <= 8'h0;
      programBufferMem_3 <= 8'h0;
      programBufferMem_4 <= 8'h0;
      programBufferMem_5 <= 8'h0;
      programBufferMem_6 <= 8'h0;
      programBufferMem_7 <= 8'h0;
      programBufferMem_8 <= 8'h0;
      programBufferMem_9 <= 8'h0;
      programBufferMem_10 <= 8'h0;
      programBufferMem_11 <= 8'h0;
      programBufferMem_12 <= 8'h0;
      programBufferMem_13 <= 8'h0;
      programBufferMem_14 <= 8'h0;
      programBufferMem_15 <= 8'h0;
      programBufferMem_16 <= 8'h0;
      programBufferMem_17 <= 8'h0;
      programBufferMem_18 <= 8'h0;
      programBufferMem_19 <= 8'h0;
      programBufferMem_20 <= 8'h0;
      programBufferMem_21 <= 8'h0;
      programBufferMem_22 <= 8'h0;
      programBufferMem_23 <= 8'h0;
      programBufferMem_24 <= 8'h0;
      programBufferMem_25 <= 8'h0;
      programBufferMem_26 <= 8'h0;
      programBufferMem_27 <= 8'h0;
      programBufferMem_28 <= 8'h0;
      programBufferMem_29 <= 8'h0;
      programBufferMem_30 <= 8'h0;
      programBufferMem_31 <= 8'h0;
      programBufferMem_32 <= 8'h0;
      programBufferMem_33 <= 8'h0;
      programBufferMem_34 <= 8'h0;
      programBufferMem_35 <= 8'h0;
      programBufferMem_36 <= 8'h0;
      programBufferMem_37 <= 8'h0;
      programBufferMem_38 <= 8'h0;
      programBufferMem_39 <= 8'h0;
      programBufferMem_40 <= 8'h0;
      programBufferMem_41 <= 8'h0;
      programBufferMem_42 <= 8'h0;
      programBufferMem_43 <= 8'h0;
      programBufferMem_44 <= 8'h0;
      programBufferMem_45 <= 8'h0;
      programBufferMem_46 <= 8'h0;
      programBufferMem_47 <= 8'h0;
      programBufferMem_48 <= 8'h0;
      programBufferMem_49 <= 8'h0;
      programBufferMem_50 <= 8'h0;
      programBufferMem_51 <= 8'h0;
      programBufferMem_52 <= 8'h0;
      programBufferMem_53 <= 8'h0;
      programBufferMem_54 <= 8'h0;
      programBufferMem_55 <= 8'h0;
      programBufferMem_56 <= 8'h0;
      programBufferMem_57 <= 8'h0;
      programBufferMem_58 <= 8'h0;
      programBufferMem_59 <= 8'h0;
      programBufferMem_60 <= 8'h0;
      programBufferMem_61 <= 8'h0;
      programBufferMem_62 <= 8'h0;
      programBufferMem_63 <= 8'h0;
      ctrlStateReg <= 2'h0;
    end
    goReg <= io_dmactive & (goAbstract | ~hartGoingWrEn & goReg);
    if (goAbstract) begin
      if (COMMANDReg_control[17]) begin
        if (COMMANDReg_control[16])
          abstractGeneratedMem_0 <=
            {17'h7000, COMMANDReg_control[22:20], COMMANDReg_control[4:0], 7'h3};
        else
          abstractGeneratedMem_0 <=
            {7'h1C, COMMANDReg_control[4:0], 5'h0, COMMANDReg_control[22:20], 12'h23};
      end
      else
        abstractGeneratedMem_0 <= 32'h13;
      if (COMMANDReg_control[18])
        abstractGeneratedMem_1 <= 32'h13;
      else
        abstractGeneratedMem_1 <= 32'h100073;
    end
    if (reset)
      hrmaskReg_0 <= 1'h0;
    else
      hrmaskReg_0 <=
        io_dmactive & (io_innerCtrl_valid ? io_innerCtrl_bits_hrmask_0 : hrmaskReg_0);
  end // always @(posedge)
  always @(posedge clock or posedge reset) begin
    if (reset)
      hrDebugIntReg_0 <= 1'h0;
    else
      hrDebugIntReg_0 <=
        io_dmactive & hrmaskReg_0
        & (_hartIsInResetSync_0_debug_hartReset_0_io_q | hrDebugIntReg_0
           & ~haltedBitRegs);
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 hartIsInResetSync_0_debug_hartReset_0 (
    .clock (clock),
    .reset (reset),
    .io_d  (io_hartIsInReset_0),
    .io_q  (_hartIsInResetSync_0_debug_hartReset_0_io_q)
  );
  assign auto_tl_in_a_ready = auto_tl_in_d_ready;
  assign auto_tl_in_d_valid = auto_tl_in_a_valid;
  assign auto_tl_in_d_bits_opcode = {2'h0, out_front_1_bits_read};
  assign auto_tl_in_d_bits_size = auto_tl_in_a_bits_size;
  assign auto_tl_in_d_bits_source = auto_tl_in_a_bits_source;
  assign auto_tl_in_d_bits_data = casez_tmp_1 ? casez_tmp_2 : 64'h0;
  assign auto_dmi_in_a_ready = auto_dmi_in_d_ready;
  assign auto_dmi_in_d_valid = auto_dmi_in_a_valid;
  assign auto_dmi_in_d_bits_opcode = {2'h0, out_front_bits_read};
  assign auto_dmi_in_d_bits_size = auto_dmi_in_a_bits_size;
  assign auto_dmi_in_d_bits_source = auto_dmi_in_a_bits_source;
  assign auto_dmi_in_d_bits_data = casez_tmp ? casez_tmp_0 : 32'h0;
  assign io_hgDebugInt_0 = hrDebugIntReg_0;
endmodule

module ClockCrossingReg_w55(
  input         clock,
  input  [54:0] io_d,
  input         io_en,
  output [54:0] io_q
);

  reg [54:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink_1(
  input         clock,
                reset,
                io_deq_ready,
  input  [2:0]  io_async_mem_0_opcode,
                io_async_mem_0_param,
  input  [1:0]  io_async_mem_0_size,
  input         io_async_mem_0_source,
  input  [8:0]  io_async_mem_0_address,
  input  [3:0]  io_async_mem_0_mask,
  input  [31:0] io_async_mem_0_data,
  input         io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n,
  output        io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_size,
  output        io_deq_bits_source,
  output [8:0]  io_deq_bits_address,
  output [3:0]  io_deq_bits_mask,
  output [31:0] io_deq_bits_data,
  output        io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [54:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx_incremented =
    _source_valid_io_out & ridx_ridx_bin + (io_deq_ready & _io_deq_valid_output);
  wire        valid = _source_valid_io_out & ridx_incremented != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx_incremented;
      valid_reg <= valid;
      ridx_gray <= ridx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w55 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_opcode,
        io_async_mem_0_param,
        io_async_mem_0_size,
        io_async_mem_0_source,
        io_async_mem_0_address,
        io_async_mem_0_mask,
        io_async_mem_0_data,
        io_async_mem_0_corrupt}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_opcode = _io_deq_bits_deq_bits_reg_io_q[54:52];
  assign io_deq_bits_size = _io_deq_bits_deq_bits_reg_io_q[48:47];
  assign io_deq_bits_source = _io_deq_bits_deq_bits_reg_io_q[46];
  assign io_deq_bits_address = _io_deq_bits_deq_bits_reg_io_q[45:37];
  assign io_deq_bits_mask = _io_deq_bits_deq_bits_reg_io_q[36:33];
  assign io_deq_bits_data = _io_deq_bits_deq_bits_reg_io_q[32:1];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module AsyncQueueSource_2(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_size,
  input         io_enq_bits_source,
  input  [31:0] io_enq_bits_data,
  input         io_async_ridx,
                io_async_safe_ridx_valid,
                io_async_safe_sink_reset_n,
  output        io_enq_ready,
  output [2:0]  io_async_mem_0_opcode,
  output [1:0]  io_async_mem_0_param,
                io_async_mem_0_size,
  output        io_async_mem_0_source,
                io_async_mem_0_sink,
                io_async_mem_0_denied,
  output [31:0] io_async_mem_0_data,
  output        io_async_mem_0_corrupt,
                io_async_widx,
                io_async_safe_widx_valid,
                io_async_safe_source_reset_n
);

  wire        _io_enq_ready_output;
  wire        _sink_valid_io_out;
  wire        _sink_extend_io_out;
  wire        _source_valid_0_io_out;
  wire        _ridx_ridx_gray_io_q;
  reg  [2:0]  mem_0_opcode;
  reg  [1:0]  mem_0_param;
  reg  [1:0]  mem_0_size;
  reg         mem_0_source;
  reg         mem_0_sink;
  reg         mem_0_denied;
  reg  [31:0] mem_0_data;
  reg         mem_0_corrupt;
  wire        _T = _io_enq_ready_output & io_enq_valid;
  reg         widx_widx_bin;
  reg         ready_reg;
  assign _io_enq_ready_output = ready_reg & _sink_valid_io_out;
  reg         widx_gray;
  always @(posedge clock) begin
    if (_T) begin
      mem_0_opcode <= io_enq_bits_opcode;
      mem_0_param <= 2'h0;
      mem_0_size <= io_enq_bits_size;
      mem_0_source <= io_enq_bits_source;
      mem_0_data <= io_enq_bits_data;
    end
    mem_0_sink <= ~_T & mem_0_sink;
    mem_0_denied <= ~_T & mem_0_denied;
    mem_0_corrupt <= ~_T & mem_0_corrupt;
  end // always @(posedge)
  wire        widx_incremented = _sink_valid_io_out & widx_widx_bin + _T;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      widx_widx_bin <= 1'h0;
      ready_reg <= 1'h0;
      widx_gray <= 1'h0;
    end
    else begin
      widx_widx_bin <= widx_incremented;
      ready_reg <= _sink_valid_io_out & widx_incremented != ~_ridx_ridx_gray_io_q;
      widx_gray <= widx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 ridx_ridx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_ridx),
    .io_q  (_ridx_ridx_gray_io_q)
  );
  AsyncValidSync source_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_source_valid_0_io_out)
  );
  AsyncValidSync source_valid_1 (
    .io_in  (_source_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (io_async_safe_widx_valid)
  );
  AsyncValidSync sink_extend (
    .io_in  (io_async_safe_ridx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_sink_reset_n),
    .io_out (_sink_extend_io_out)
  );
  AsyncValidSync sink_valid (
    .io_in  (_sink_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_sink_valid_io_out)
  );
  assign io_enq_ready = _io_enq_ready_output;
  assign io_async_mem_0_opcode = mem_0_opcode;
  assign io_async_mem_0_param = mem_0_param;
  assign io_async_mem_0_size = mem_0_size;
  assign io_async_mem_0_source = mem_0_source;
  assign io_async_mem_0_sink = mem_0_sink;
  assign io_async_mem_0_denied = mem_0_denied;
  assign io_async_mem_0_data = mem_0_data;
  assign io_async_mem_0_corrupt = mem_0_corrupt;
  assign io_async_widx = widx_gray;
  assign io_async_safe_source_reset_n = ~reset;
endmodule

module TLAsyncCrossingSink(
  input         clock,
                reset,
  input  [2:0]  auto_in_a_mem_0_opcode,
                auto_in_a_mem_0_param,
  input  [1:0]  auto_in_a_mem_0_size,
  input         auto_in_a_mem_0_source,
  input  [8:0]  auto_in_a_mem_0_address,
  input  [3:0]  auto_in_a_mem_0_mask,
  input  [31:0] auto_in_a_mem_0_data,
  input         auto_in_a_mem_0_corrupt,
                auto_in_a_widx,
                auto_in_a_safe_widx_valid,
                auto_in_a_safe_source_reset_n,
                auto_in_d_ridx,
                auto_in_d_safe_ridx_valid,
                auto_in_d_safe_sink_reset_n,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input         auto_out_d_bits_source,
  input  [31:0] auto_out_d_bits_data,
  output        auto_in_a_ridx,
                auto_in_a_safe_ridx_valid,
                auto_in_a_safe_sink_reset_n,
  output [2:0]  auto_in_d_mem_0_opcode,
  output [1:0]  auto_in_d_mem_0_param,
                auto_in_d_mem_0_size,
  output        auto_in_d_mem_0_source,
                auto_in_d_mem_0_sink,
                auto_in_d_mem_0_denied,
  output [31:0] auto_in_d_mem_0_data,
  output        auto_in_d_mem_0_corrupt,
                auto_in_d_widx,
                auto_in_d_safe_widx_valid,
                auto_in_d_safe_source_reset_n,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output        auto_out_a_bits_source,
  output [8:0]  auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  AsyncQueueSink_1 nodeOut_a_sink (
    .clock                        (clock),
    .reset                        (reset),
    .io_deq_ready                 (auto_out_a_ready),
    .io_async_mem_0_opcode        (auto_in_a_mem_0_opcode),
    .io_async_mem_0_param         (auto_in_a_mem_0_param),
    .io_async_mem_0_size          (auto_in_a_mem_0_size),
    .io_async_mem_0_source        (auto_in_a_mem_0_source),
    .io_async_mem_0_address       (auto_in_a_mem_0_address),
    .io_async_mem_0_mask          (auto_in_a_mem_0_mask),
    .io_async_mem_0_data          (auto_in_a_mem_0_data),
    .io_async_mem_0_corrupt       (auto_in_a_mem_0_corrupt),
    .io_async_widx                (auto_in_a_widx),
    .io_async_safe_widx_valid     (auto_in_a_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_in_a_safe_source_reset_n),
    .io_deq_valid                 (auto_out_a_valid),
    .io_deq_bits_opcode           (auto_out_a_bits_opcode),
    .io_deq_bits_size             (auto_out_a_bits_size),
    .io_deq_bits_source           (auto_out_a_bits_source),
    .io_deq_bits_address          (auto_out_a_bits_address),
    .io_deq_bits_mask             (auto_out_a_bits_mask),
    .io_deq_bits_data             (auto_out_a_bits_data),
    .io_async_ridx                (auto_in_a_ridx),
    .io_async_safe_ridx_valid     (auto_in_a_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_in_a_safe_sink_reset_n)
  );
  AsyncQueueSource_2 nodeIn_d_source (
    .clock                        (clock),
    .reset                        (reset),
    .io_enq_valid                 (auto_out_d_valid),
    .io_enq_bits_opcode           (auto_out_d_bits_opcode),
    .io_enq_bits_size             (auto_out_d_bits_size),
    .io_enq_bits_source           (auto_out_d_bits_source),
    .io_enq_bits_data             (auto_out_d_bits_data),
    .io_async_ridx                (auto_in_d_ridx),
    .io_async_safe_ridx_valid     (auto_in_d_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (auto_in_d_safe_sink_reset_n),
    .io_enq_ready                 (auto_out_d_ready),
    .io_async_mem_0_opcode        (auto_in_d_mem_0_opcode),
    .io_async_mem_0_param         (auto_in_d_mem_0_param),
    .io_async_mem_0_size          (auto_in_d_mem_0_size),
    .io_async_mem_0_source        (auto_in_d_mem_0_source),
    .io_async_mem_0_sink          (auto_in_d_mem_0_sink),
    .io_async_mem_0_denied        (auto_in_d_mem_0_denied),
    .io_async_mem_0_data          (auto_in_d_mem_0_data),
    .io_async_mem_0_corrupt       (auto_in_d_mem_0_corrupt),
    .io_async_widx                (auto_in_d_widx),
    .io_async_safe_widx_valid     (auto_in_d_safe_widx_valid),
    .io_async_safe_source_reset_n (auto_in_d_safe_source_reset_n)
  );
endmodule

module ClockCrossingReg_w15(
  input         clock,
  input  [14:0] io_d,
  input         io_en,
  output [14:0] io_q
);

  reg [14:0] cdc_reg;
  always @(posedge clock) begin
    if (io_en)
      cdc_reg <= io_d;
  end // always @(posedge)
  assign io_q = cdc_reg;
endmodule

module AsyncQueueSink_2(
  input        clock,
               reset,
               io_async_mem_0_resumereq,
  input  [9:0] io_async_mem_0_hartsel,
  input        io_async_mem_0_ackhavereset,
               io_async_mem_0_hasel,
               io_async_mem_0_hamask_0,
               io_async_mem_0_hrmask_0,
               io_async_widx,
               io_async_safe_widx_valid,
               io_async_safe_source_reset_n,
  output       io_deq_valid,
               io_deq_bits_resumereq,
  output [9:0] io_deq_bits_hartsel,
  output       io_deq_bits_ackhavereset,
               io_deq_bits_hrmask_0,
               io_async_ridx,
               io_async_safe_ridx_valid,
               io_async_safe_sink_reset_n
);

  wire        _io_deq_valid_output;
  wire        _source_valid_io_out;
  wire        _source_extend_io_out;
  wire        _sink_valid_0_io_out;
  wire [14:0] _io_deq_bits_deq_bits_reg_io_q;
  wire        _widx_widx_gray_io_q;
  reg         ridx_ridx_bin;
  wire        ridx_incremented =
    _source_valid_io_out & ridx_ridx_bin + _io_deq_valid_output;
  wire        valid = _source_valid_io_out & ridx_incremented != _widx_widx_gray_io_q;
  reg         valid_reg;
  assign _io_deq_valid_output = valid_reg & _source_valid_io_out;
  reg         ridx_gray;
  always @(posedge clock or posedge reset) begin
    if (reset) begin
      ridx_ridx_bin <= 1'h0;
      valid_reg <= 1'h0;
      ridx_gray <= 1'h0;
    end
    else begin
      ridx_ridx_bin <= ridx_incremented;
      valid_reg <= valid;
      ridx_gray <= ridx_incremented;
    end
  end // always @(posedge, posedge)
  AsyncResetSynchronizerShiftReg_w1_d3_i0 widx_widx_gray (
    .clock (clock),
    .reset (reset),
    .io_d  (io_async_widx),
    .io_q  (_widx_widx_gray_io_q)
  );
  ClockCrossingReg_w15 io_deq_bits_deq_bits_reg (
    .clock (clock),
    .io_d
      ({io_async_mem_0_resumereq,
        io_async_mem_0_hartsel,
        io_async_mem_0_ackhavereset,
        io_async_mem_0_hasel,
        io_async_mem_0_hamask_0,
        io_async_mem_0_hrmask_0}),
    .io_en (valid),
    .io_q  (_io_deq_bits_deq_bits_reg_io_q)
  );
  AsyncValidSync sink_valid_0 (
    .io_in  (1'h1),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_sink_valid_0_io_out)
  );
  AsyncValidSync sink_valid_1 (
    .io_in  (_sink_valid_0_io_out),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (io_async_safe_ridx_valid)
  );
  AsyncValidSync source_extend (
    .io_in  (io_async_safe_widx_valid),
    .clock  (clock),
    .reset  (reset | ~io_async_safe_source_reset_n),
    .io_out (_source_extend_io_out)
  );
  AsyncValidSync source_valid (
    .io_in  (_source_extend_io_out),
    .clock  (clock),
    .reset  (reset),
    .io_out (_source_valid_io_out)
  );
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_bits_resumereq = _io_deq_bits_deq_bits_reg_io_q[14];
  assign io_deq_bits_hartsel = _io_deq_bits_deq_bits_reg_io_q[13:4];
  assign io_deq_bits_ackhavereset = _io_deq_bits_deq_bits_reg_io_q[3];
  assign io_deq_bits_hrmask_0 = _io_deq_bits_deq_bits_reg_io_q[0];
  assign io_async_ridx = ridx_gray;
  assign io_async_safe_sink_reset_n = ~reset;
endmodule

module TLDebugModuleInnerAsync(
  input  [2:0]  auto_dmiXing_in_a_mem_0_opcode,
                auto_dmiXing_in_a_mem_0_param,
  input  [1:0]  auto_dmiXing_in_a_mem_0_size,
  input         auto_dmiXing_in_a_mem_0_source,
  input  [8:0]  auto_dmiXing_in_a_mem_0_address,
  input  [3:0]  auto_dmiXing_in_a_mem_0_mask,
  input  [31:0] auto_dmiXing_in_a_mem_0_data,
  input         auto_dmiXing_in_a_mem_0_corrupt,
                auto_dmiXing_in_a_widx,
                auto_dmiXing_in_a_safe_widx_valid,
                auto_dmiXing_in_a_safe_source_reset_n,
                auto_dmiXing_in_d_ridx,
                auto_dmiXing_in_d_safe_ridx_valid,
                auto_dmiXing_in_d_safe_sink_reset_n,
                auto_dmInner_tl_in_a_valid,
  input  [2:0]  auto_dmInner_tl_in_a_bits_opcode,
  input  [1:0]  auto_dmInner_tl_in_a_bits_size,
  input  [9:0]  auto_dmInner_tl_in_a_bits_source,
  input  [11:0] auto_dmInner_tl_in_a_bits_address,
  input  [7:0]  auto_dmInner_tl_in_a_bits_mask,
  input  [63:0] auto_dmInner_tl_in_a_bits_data,
  input         auto_dmInner_tl_in_d_ready,
                io_debug_clock,
                io_debug_reset,
                io_dmactive,
                io_innerCtrl_mem_0_resumereq,
  input  [9:0]  io_innerCtrl_mem_0_hartsel,
  input         io_innerCtrl_mem_0_ackhavereset,
                io_innerCtrl_mem_0_hasel,
                io_innerCtrl_mem_0_hamask_0,
                io_innerCtrl_mem_0_hrmask_0,
                io_innerCtrl_widx,
                io_innerCtrl_safe_widx_valid,
                io_innerCtrl_safe_source_reset_n,
                io_hartIsInReset_0,
  output        auto_dmiXing_in_a_ridx,
                auto_dmiXing_in_a_safe_ridx_valid,
                auto_dmiXing_in_a_safe_sink_reset_n,
  output [2:0]  auto_dmiXing_in_d_mem_0_opcode,
  output [1:0]  auto_dmiXing_in_d_mem_0_param,
                auto_dmiXing_in_d_mem_0_size,
  output        auto_dmiXing_in_d_mem_0_source,
                auto_dmiXing_in_d_mem_0_sink,
                auto_dmiXing_in_d_mem_0_denied,
  output [31:0] auto_dmiXing_in_d_mem_0_data,
  output        auto_dmiXing_in_d_mem_0_corrupt,
                auto_dmiXing_in_d_widx,
                auto_dmiXing_in_d_safe_widx_valid,
                auto_dmiXing_in_d_safe_source_reset_n,
                auto_dmInner_tl_in_a_ready,
                auto_dmInner_tl_in_d_valid,
  output [2:0]  auto_dmInner_tl_in_d_bits_opcode,
  output [1:0]  auto_dmInner_tl_in_d_bits_size,
  output [9:0]  auto_dmInner_tl_in_d_bits_source,
  output [63:0] auto_dmInner_tl_in_d_bits_data,
  output        io_innerCtrl_ridx,
                io_innerCtrl_safe_ridx_valid,
                io_innerCtrl_safe_sink_reset_n,
                io_hgDebugInt_0
);

  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq;
  wire [9:0]  _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset;
  wire        _dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0;
  wire        _dmactive_synced_dmactive_synced_dmactiveSync_io_q;
  wire        _dmiXing_auto_out_a_valid;
  wire [2:0]  _dmiXing_auto_out_a_bits_opcode;
  wire [1:0]  _dmiXing_auto_out_a_bits_size;
  wire        _dmiXing_auto_out_a_bits_source;
  wire [8:0]  _dmiXing_auto_out_a_bits_address;
  wire [3:0]  _dmiXing_auto_out_a_bits_mask;
  wire [31:0] _dmiXing_auto_out_a_bits_data;
  wire        _dmiXing_auto_out_d_ready;
  wire        _dmInner_auto_dmi_in_a_ready;
  wire        _dmInner_auto_dmi_in_d_valid;
  wire [2:0]  _dmInner_auto_dmi_in_d_bits_opcode;
  wire [1:0]  _dmInner_auto_dmi_in_d_bits_size;
  wire        _dmInner_auto_dmi_in_d_bits_source;
  wire [31:0] _dmInner_auto_dmi_in_d_bits_data;
  TLDebugModuleInner dmInner (
    .clock                          (io_debug_clock),
    .reset                          (io_debug_reset),
    .auto_tl_in_a_valid             (auto_dmInner_tl_in_a_valid),
    .auto_tl_in_a_bits_opcode       (auto_dmInner_tl_in_a_bits_opcode),
    .auto_tl_in_a_bits_size         (auto_dmInner_tl_in_a_bits_size),
    .auto_tl_in_a_bits_source       (auto_dmInner_tl_in_a_bits_source),
    .auto_tl_in_a_bits_address      (auto_dmInner_tl_in_a_bits_address),
    .auto_tl_in_a_bits_mask         (auto_dmInner_tl_in_a_bits_mask),
    .auto_tl_in_a_bits_data         (auto_dmInner_tl_in_a_bits_data),
    .auto_tl_in_d_ready             (auto_dmInner_tl_in_d_ready),
    .auto_dmi_in_a_valid            (_dmiXing_auto_out_a_valid),
    .auto_dmi_in_a_bits_opcode      (_dmiXing_auto_out_a_bits_opcode),
    .auto_dmi_in_a_bits_size        (_dmiXing_auto_out_a_bits_size),
    .auto_dmi_in_a_bits_source      (_dmiXing_auto_out_a_bits_source),
    .auto_dmi_in_a_bits_address     (_dmiXing_auto_out_a_bits_address),
    .auto_dmi_in_a_bits_mask        (_dmiXing_auto_out_a_bits_mask),
    .auto_dmi_in_a_bits_data        (_dmiXing_auto_out_a_bits_data),
    .auto_dmi_in_d_ready            (_dmiXing_auto_out_d_ready),
    .io_dmactive                    (_dmactive_synced_dmactive_synced_dmactiveSync_io_q),
    .io_innerCtrl_valid
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid),
    .io_innerCtrl_bits_resumereq
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq),
    .io_innerCtrl_bits_hartsel
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel),
    .io_innerCtrl_bits_ackhavereset
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset),
    .io_innerCtrl_bits_hrmask_0
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0),
    .io_hartIsInReset_0             (io_hartIsInReset_0),
    .auto_tl_in_a_ready             (auto_dmInner_tl_in_a_ready),
    .auto_tl_in_d_valid             (auto_dmInner_tl_in_d_valid),
    .auto_tl_in_d_bits_opcode       (auto_dmInner_tl_in_d_bits_opcode),
    .auto_tl_in_d_bits_size         (auto_dmInner_tl_in_d_bits_size),
    .auto_tl_in_d_bits_source       (auto_dmInner_tl_in_d_bits_source),
    .auto_tl_in_d_bits_data         (auto_dmInner_tl_in_d_bits_data),
    .auto_dmi_in_a_ready            (_dmInner_auto_dmi_in_a_ready),
    .auto_dmi_in_d_valid            (_dmInner_auto_dmi_in_d_valid),
    .auto_dmi_in_d_bits_opcode      (_dmInner_auto_dmi_in_d_bits_opcode),
    .auto_dmi_in_d_bits_size        (_dmInner_auto_dmi_in_d_bits_size),
    .auto_dmi_in_d_bits_source      (_dmInner_auto_dmi_in_d_bits_source),
    .auto_dmi_in_d_bits_data        (_dmInner_auto_dmi_in_d_bits_data),
    .io_hgDebugInt_0                (io_hgDebugInt_0)
  );
  TLAsyncCrossingSink dmiXing (
    .clock                         (io_debug_clock),
    .reset                         (io_debug_reset),
    .auto_in_a_mem_0_opcode        (auto_dmiXing_in_a_mem_0_opcode),
    .auto_in_a_mem_0_param         (auto_dmiXing_in_a_mem_0_param),
    .auto_in_a_mem_0_size          (auto_dmiXing_in_a_mem_0_size),
    .auto_in_a_mem_0_source        (auto_dmiXing_in_a_mem_0_source),
    .auto_in_a_mem_0_address       (auto_dmiXing_in_a_mem_0_address),
    .auto_in_a_mem_0_mask          (auto_dmiXing_in_a_mem_0_mask),
    .auto_in_a_mem_0_data          (auto_dmiXing_in_a_mem_0_data),
    .auto_in_a_mem_0_corrupt       (auto_dmiXing_in_a_mem_0_corrupt),
    .auto_in_a_widx                (auto_dmiXing_in_a_widx),
    .auto_in_a_safe_widx_valid     (auto_dmiXing_in_a_safe_widx_valid),
    .auto_in_a_safe_source_reset_n (auto_dmiXing_in_a_safe_source_reset_n),
    .auto_in_d_ridx                (auto_dmiXing_in_d_ridx),
    .auto_in_d_safe_ridx_valid     (auto_dmiXing_in_d_safe_ridx_valid),
    .auto_in_d_safe_sink_reset_n   (auto_dmiXing_in_d_safe_sink_reset_n),
    .auto_out_a_ready              (_dmInner_auto_dmi_in_a_ready),
    .auto_out_d_valid              (_dmInner_auto_dmi_in_d_valid),
    .auto_out_d_bits_opcode        (_dmInner_auto_dmi_in_d_bits_opcode),
    .auto_out_d_bits_size          (_dmInner_auto_dmi_in_d_bits_size),
    .auto_out_d_bits_source        (_dmInner_auto_dmi_in_d_bits_source),
    .auto_out_d_bits_data          (_dmInner_auto_dmi_in_d_bits_data),
    .auto_in_a_ridx                (auto_dmiXing_in_a_ridx),
    .auto_in_a_safe_ridx_valid     (auto_dmiXing_in_a_safe_ridx_valid),
    .auto_in_a_safe_sink_reset_n   (auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_in_d_mem_0_opcode        (auto_dmiXing_in_d_mem_0_opcode),
    .auto_in_d_mem_0_param         (auto_dmiXing_in_d_mem_0_param),
    .auto_in_d_mem_0_size          (auto_dmiXing_in_d_mem_0_size),
    .auto_in_d_mem_0_source        (auto_dmiXing_in_d_mem_0_source),
    .auto_in_d_mem_0_sink          (auto_dmiXing_in_d_mem_0_sink),
    .auto_in_d_mem_0_denied        (auto_dmiXing_in_d_mem_0_denied),
    .auto_in_d_mem_0_data          (auto_dmiXing_in_d_mem_0_data),
    .auto_in_d_mem_0_corrupt       (auto_dmiXing_in_d_mem_0_corrupt),
    .auto_in_d_widx                (auto_dmiXing_in_d_widx),
    .auto_in_d_safe_widx_valid     (auto_dmiXing_in_d_safe_widx_valid),
    .auto_in_d_safe_source_reset_n (auto_dmiXing_in_d_safe_source_reset_n),
    .auto_out_a_valid              (_dmiXing_auto_out_a_valid),
    .auto_out_a_bits_opcode        (_dmiXing_auto_out_a_bits_opcode),
    .auto_out_a_bits_size          (_dmiXing_auto_out_a_bits_size),
    .auto_out_a_bits_source        (_dmiXing_auto_out_a_bits_source),
    .auto_out_a_bits_address       (_dmiXing_auto_out_a_bits_address),
    .auto_out_a_bits_mask          (_dmiXing_auto_out_a_bits_mask),
    .auto_out_a_bits_data          (_dmiXing_auto_out_a_bits_data),
    .auto_out_d_ready              (_dmiXing_auto_out_d_ready)
  );
  AsyncResetSynchronizerShiftReg_w1_d3_i0 dmactive_synced_dmactive_synced_dmactiveSync (
    .clock (io_debug_clock),
    .reset (io_debug_reset),
    .io_d  (io_dmactive),
    .io_q  (_dmactive_synced_dmactive_synced_dmactiveSync_io_q)
  );
  AsyncQueueSink_2 dmactive_synced_dmInner_io_innerCtrl_sink (
    .clock                        (io_debug_clock),
    .reset                        (io_debug_reset),
    .io_async_mem_0_resumereq     (io_innerCtrl_mem_0_resumereq),
    .io_async_mem_0_hartsel       (io_innerCtrl_mem_0_hartsel),
    .io_async_mem_0_ackhavereset  (io_innerCtrl_mem_0_ackhavereset),
    .io_async_mem_0_hasel         (io_innerCtrl_mem_0_hasel),
    .io_async_mem_0_hamask_0      (io_innerCtrl_mem_0_hamask_0),
    .io_async_mem_0_hrmask_0      (io_innerCtrl_mem_0_hrmask_0),
    .io_async_widx                (io_innerCtrl_widx),
    .io_async_safe_widx_valid     (io_innerCtrl_safe_widx_valid),
    .io_async_safe_source_reset_n (io_innerCtrl_safe_source_reset_n),
    .io_deq_valid
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_valid),
    .io_deq_bits_resumereq
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_resumereq),
    .io_deq_bits_hartsel
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hartsel),
    .io_deq_bits_ackhavereset
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_ackhavereset),
    .io_deq_bits_hrmask_0
      (_dmactive_synced_dmInner_io_innerCtrl_sink_io_deq_bits_hrmask_0),
    .io_async_ridx                (io_innerCtrl_ridx),
    .io_async_safe_ridx_valid     (io_innerCtrl_safe_ridx_valid),
    .io_async_safe_sink_reset_n   (io_innerCtrl_safe_sink_reset_n)
  );
endmodule

module TLDebugModule(
  input         auto_dmInner_dmInner_tl_in_a_valid,
  input  [2:0]  auto_dmInner_dmInner_tl_in_a_bits_opcode,
  input  [1:0]  auto_dmInner_dmInner_tl_in_a_bits_size,
  input  [9:0]  auto_dmInner_dmInner_tl_in_a_bits_source,
  input  [11:0] auto_dmInner_dmInner_tl_in_a_bits_address,
  input  [7:0]  auto_dmInner_dmInner_tl_in_a_bits_mask,
  input  [63:0] auto_dmInner_dmInner_tl_in_a_bits_data,
  input         auto_dmInner_dmInner_tl_in_d_ready,
                io_debug_clock,
                io_debug_reset,
                io_ctrl_dmactiveAck,
                io_dmi_dmi_req_valid,
  input  [6:0]  io_dmi_dmi_req_bits_addr,
  input  [31:0] io_dmi_dmi_req_bits_data,
  input  [1:0]  io_dmi_dmi_req_bits_op,
  input         io_dmi_dmi_resp_ready,
                io_dmi_dmiClock,
                io_dmi_dmiReset,
                io_hartIsInReset_0,
  output        auto_dmInner_dmInner_tl_in_a_ready,
                auto_dmInner_dmInner_tl_in_d_valid,
  output [2:0]  auto_dmInner_dmInner_tl_in_d_bits_opcode,
  output [1:0]  auto_dmInner_dmInner_tl_in_d_bits_size,
  output [9:0]  auto_dmInner_dmInner_tl_in_d_bits_source,
  output [63:0] auto_dmInner_dmInner_tl_in_d_bits_data,
  output        auto_dmOuter_intsource_out_sync_0,
                io_ctrl_ndreset,
                io_ctrl_dmactive,
                io_dmi_dmi_req_ready,
                io_dmi_dmi_resp_valid,
  output [31:0] io_dmi_dmi_resp_bits_data,
  output [1:0]  io_dmi_dmi_resp_bits_resp
);

  wire        _dmInner_auto_dmiXing_in_a_ridx;
  wire        _dmInner_auto_dmiXing_in_a_safe_ridx_valid;
  wire        _dmInner_auto_dmiXing_in_a_safe_sink_reset_n;
  wire [2:0]  _dmInner_auto_dmiXing_in_d_mem_0_opcode;
  wire [1:0]  _dmInner_auto_dmiXing_in_d_mem_0_param;
  wire [1:0]  _dmInner_auto_dmiXing_in_d_mem_0_size;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_source;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_sink;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_denied;
  wire [31:0] _dmInner_auto_dmiXing_in_d_mem_0_data;
  wire        _dmInner_auto_dmiXing_in_d_mem_0_corrupt;
  wire        _dmInner_auto_dmiXing_in_d_widx;
  wire        _dmInner_auto_dmiXing_in_d_safe_widx_valid;
  wire        _dmInner_auto_dmiXing_in_d_safe_source_reset_n;
  wire        _dmInner_io_innerCtrl_ridx;
  wire        _dmInner_io_innerCtrl_safe_ridx_valid;
  wire        _dmInner_io_innerCtrl_safe_sink_reset_n;
  wire        _dmInner_io_hgDebugInt_0;
  wire [2:0]  _dmOuter_auto_asource_out_a_mem_0_opcode;
  wire [2:0]  _dmOuter_auto_asource_out_a_mem_0_param;
  wire [1:0]  _dmOuter_auto_asource_out_a_mem_0_size;
  wire        _dmOuter_auto_asource_out_a_mem_0_source;
  wire [8:0]  _dmOuter_auto_asource_out_a_mem_0_address;
  wire [3:0]  _dmOuter_auto_asource_out_a_mem_0_mask;
  wire [31:0] _dmOuter_auto_asource_out_a_mem_0_data;
  wire        _dmOuter_auto_asource_out_a_mem_0_corrupt;
  wire        _dmOuter_auto_asource_out_a_widx;
  wire        _dmOuter_auto_asource_out_a_safe_widx_valid;
  wire        _dmOuter_auto_asource_out_a_safe_source_reset_n;
  wire        _dmOuter_auto_asource_out_d_ridx;
  wire        _dmOuter_auto_asource_out_d_safe_ridx_valid;
  wire        _dmOuter_auto_asource_out_d_safe_sink_reset_n;
  wire        _dmOuter_io_ctrl_dmactive;
  wire        _dmOuter_io_innerCtrl_mem_0_resumereq;
  wire [9:0]  _dmOuter_io_innerCtrl_mem_0_hartsel;
  wire        _dmOuter_io_innerCtrl_mem_0_ackhavereset;
  wire        _dmOuter_io_innerCtrl_mem_0_hasel;
  wire        _dmOuter_io_innerCtrl_mem_0_hamask_0;
  wire        _dmOuter_io_innerCtrl_mem_0_hrmask_0;
  wire        _dmOuter_io_innerCtrl_widx;
  wire        _dmOuter_io_innerCtrl_safe_widx_valid;
  wire        _dmOuter_io_innerCtrl_safe_source_reset_n;
  TLDebugModuleOuterAsync dmOuter (
    .auto_asource_out_a_ridx                (_dmInner_auto_dmiXing_in_a_ridx),
    .auto_asource_out_a_safe_ridx_valid     (_dmInner_auto_dmiXing_in_a_safe_ridx_valid),
    .auto_asource_out_a_safe_sink_reset_n
      (_dmInner_auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_asource_out_d_mem_0_opcode        (_dmInner_auto_dmiXing_in_d_mem_0_opcode),
    .auto_asource_out_d_mem_0_param         (_dmInner_auto_dmiXing_in_d_mem_0_param),
    .auto_asource_out_d_mem_0_size          (_dmInner_auto_dmiXing_in_d_mem_0_size),
    .auto_asource_out_d_mem_0_source        (_dmInner_auto_dmiXing_in_d_mem_0_source),
    .auto_asource_out_d_mem_0_sink          (_dmInner_auto_dmiXing_in_d_mem_0_sink),
    .auto_asource_out_d_mem_0_denied        (_dmInner_auto_dmiXing_in_d_mem_0_denied),
    .auto_asource_out_d_mem_0_data          (_dmInner_auto_dmiXing_in_d_mem_0_data),
    .auto_asource_out_d_mem_0_corrupt       (_dmInner_auto_dmiXing_in_d_mem_0_corrupt),
    .auto_asource_out_d_widx                (_dmInner_auto_dmiXing_in_d_widx),
    .auto_asource_out_d_safe_widx_valid     (_dmInner_auto_dmiXing_in_d_safe_widx_valid),
    .auto_asource_out_d_safe_source_reset_n
      (_dmInner_auto_dmiXing_in_d_safe_source_reset_n),
    .io_dmi_clock                           (io_dmi_dmiClock),
    .io_dmi_reset                           (io_dmi_dmiReset),
    .io_dmi_req_valid                       (io_dmi_dmi_req_valid),
    .io_dmi_req_bits_addr                   (io_dmi_dmi_req_bits_addr),
    .io_dmi_req_bits_data                   (io_dmi_dmi_req_bits_data),
    .io_dmi_req_bits_op                     (io_dmi_dmi_req_bits_op),
    .io_dmi_resp_ready                      (io_dmi_dmi_resp_ready),
    .io_ctrl_dmactiveAck                    (io_ctrl_dmactiveAck),
    .io_innerCtrl_ridx                      (_dmInner_io_innerCtrl_ridx),
    .io_innerCtrl_safe_ridx_valid           (_dmInner_io_innerCtrl_safe_ridx_valid),
    .io_innerCtrl_safe_sink_reset_n         (_dmInner_io_innerCtrl_safe_sink_reset_n),
    .io_hgDebugInt_0                        (_dmInner_io_hgDebugInt_0),
    .auto_asource_out_a_mem_0_opcode        (_dmOuter_auto_asource_out_a_mem_0_opcode),
    .auto_asource_out_a_mem_0_param         (_dmOuter_auto_asource_out_a_mem_0_param),
    .auto_asource_out_a_mem_0_size          (_dmOuter_auto_asource_out_a_mem_0_size),
    .auto_asource_out_a_mem_0_source        (_dmOuter_auto_asource_out_a_mem_0_source),
    .auto_asource_out_a_mem_0_address       (_dmOuter_auto_asource_out_a_mem_0_address),
    .auto_asource_out_a_mem_0_mask          (_dmOuter_auto_asource_out_a_mem_0_mask),
    .auto_asource_out_a_mem_0_data          (_dmOuter_auto_asource_out_a_mem_0_data),
    .auto_asource_out_a_mem_0_corrupt       (_dmOuter_auto_asource_out_a_mem_0_corrupt),
    .auto_asource_out_a_widx                (_dmOuter_auto_asource_out_a_widx),
    .auto_asource_out_a_safe_widx_valid     (_dmOuter_auto_asource_out_a_safe_widx_valid),
    .auto_asource_out_a_safe_source_reset_n
      (_dmOuter_auto_asource_out_a_safe_source_reset_n),
    .auto_asource_out_d_ridx                (_dmOuter_auto_asource_out_d_ridx),
    .auto_asource_out_d_safe_ridx_valid     (_dmOuter_auto_asource_out_d_safe_ridx_valid),
    .auto_asource_out_d_safe_sink_reset_n
      (_dmOuter_auto_asource_out_d_safe_sink_reset_n),
    .auto_intsource_out_sync_0              (auto_dmOuter_intsource_out_sync_0),
    .io_dmi_req_ready                       (io_dmi_dmi_req_ready),
    .io_dmi_resp_valid                      (io_dmi_dmi_resp_valid),
    .io_dmi_resp_bits_data                  (io_dmi_dmi_resp_bits_data),
    .io_dmi_resp_bits_resp                  (io_dmi_dmi_resp_bits_resp),
    .io_ctrl_ndreset                        (io_ctrl_ndreset),
    .io_ctrl_dmactive                       (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_mem_0_resumereq           (_dmOuter_io_innerCtrl_mem_0_resumereq),
    .io_innerCtrl_mem_0_hartsel             (_dmOuter_io_innerCtrl_mem_0_hartsel),
    .io_innerCtrl_mem_0_ackhavereset        (_dmOuter_io_innerCtrl_mem_0_ackhavereset),
    .io_innerCtrl_mem_0_hasel               (_dmOuter_io_innerCtrl_mem_0_hasel),
    .io_innerCtrl_mem_0_hamask_0            (_dmOuter_io_innerCtrl_mem_0_hamask_0),
    .io_innerCtrl_mem_0_hrmask_0            (_dmOuter_io_innerCtrl_mem_0_hrmask_0),
    .io_innerCtrl_widx                      (_dmOuter_io_innerCtrl_widx),
    .io_innerCtrl_safe_widx_valid           (_dmOuter_io_innerCtrl_safe_widx_valid),
    .io_innerCtrl_safe_source_reset_n       (_dmOuter_io_innerCtrl_safe_source_reset_n)
  );
  TLDebugModuleInnerAsync dmInner (
    .auto_dmiXing_in_a_mem_0_opcode        (_dmOuter_auto_asource_out_a_mem_0_opcode),
    .auto_dmiXing_in_a_mem_0_param         (_dmOuter_auto_asource_out_a_mem_0_param),
    .auto_dmiXing_in_a_mem_0_size          (_dmOuter_auto_asource_out_a_mem_0_size),
    .auto_dmiXing_in_a_mem_0_source        (_dmOuter_auto_asource_out_a_mem_0_source),
    .auto_dmiXing_in_a_mem_0_address       (_dmOuter_auto_asource_out_a_mem_0_address),
    .auto_dmiXing_in_a_mem_0_mask          (_dmOuter_auto_asource_out_a_mem_0_mask),
    .auto_dmiXing_in_a_mem_0_data          (_dmOuter_auto_asource_out_a_mem_0_data),
    .auto_dmiXing_in_a_mem_0_corrupt       (_dmOuter_auto_asource_out_a_mem_0_corrupt),
    .auto_dmiXing_in_a_widx                (_dmOuter_auto_asource_out_a_widx),
    .auto_dmiXing_in_a_safe_widx_valid     (_dmOuter_auto_asource_out_a_safe_widx_valid),
    .auto_dmiXing_in_a_safe_source_reset_n
      (_dmOuter_auto_asource_out_a_safe_source_reset_n),
    .auto_dmiXing_in_d_ridx                (_dmOuter_auto_asource_out_d_ridx),
    .auto_dmiXing_in_d_safe_ridx_valid     (_dmOuter_auto_asource_out_d_safe_ridx_valid),
    .auto_dmiXing_in_d_safe_sink_reset_n
      (_dmOuter_auto_asource_out_d_safe_sink_reset_n),
    .auto_dmInner_tl_in_a_valid            (auto_dmInner_dmInner_tl_in_a_valid),
    .auto_dmInner_tl_in_a_bits_opcode      (auto_dmInner_dmInner_tl_in_a_bits_opcode),
    .auto_dmInner_tl_in_a_bits_size        (auto_dmInner_dmInner_tl_in_a_bits_size),
    .auto_dmInner_tl_in_a_bits_source      (auto_dmInner_dmInner_tl_in_a_bits_source),
    .auto_dmInner_tl_in_a_bits_address     (auto_dmInner_dmInner_tl_in_a_bits_address),
    .auto_dmInner_tl_in_a_bits_mask        (auto_dmInner_dmInner_tl_in_a_bits_mask),
    .auto_dmInner_tl_in_a_bits_data        (auto_dmInner_dmInner_tl_in_a_bits_data),
    .auto_dmInner_tl_in_d_ready            (auto_dmInner_dmInner_tl_in_d_ready),
    .io_debug_clock                        (io_debug_clock),
    .io_debug_reset                        (io_debug_reset),
    .io_dmactive                           (_dmOuter_io_ctrl_dmactive),
    .io_innerCtrl_mem_0_resumereq          (_dmOuter_io_innerCtrl_mem_0_resumereq),
    .io_innerCtrl_mem_0_hartsel            (_dmOuter_io_innerCtrl_mem_0_hartsel),
    .io_innerCtrl_mem_0_ackhavereset       (_dmOuter_io_innerCtrl_mem_0_ackhavereset),
    .io_innerCtrl_mem_0_hasel              (_dmOuter_io_innerCtrl_mem_0_hasel),
    .io_innerCtrl_mem_0_hamask_0           (_dmOuter_io_innerCtrl_mem_0_hamask_0),
    .io_innerCtrl_mem_0_hrmask_0           (_dmOuter_io_innerCtrl_mem_0_hrmask_0),
    .io_innerCtrl_widx                     (_dmOuter_io_innerCtrl_widx),
    .io_innerCtrl_safe_widx_valid          (_dmOuter_io_innerCtrl_safe_widx_valid),
    .io_innerCtrl_safe_source_reset_n      (_dmOuter_io_innerCtrl_safe_source_reset_n),
    .io_hartIsInReset_0                    (io_hartIsInReset_0),
    .auto_dmiXing_in_a_ridx                (_dmInner_auto_dmiXing_in_a_ridx),
    .auto_dmiXing_in_a_safe_ridx_valid     (_dmInner_auto_dmiXing_in_a_safe_ridx_valid),
    .auto_dmiXing_in_a_safe_sink_reset_n   (_dmInner_auto_dmiXing_in_a_safe_sink_reset_n),
    .auto_dmiXing_in_d_mem_0_opcode        (_dmInner_auto_dmiXing_in_d_mem_0_opcode),
    .auto_dmiXing_in_d_mem_0_param         (_dmInner_auto_dmiXing_in_d_mem_0_param),
    .auto_dmiXing_in_d_mem_0_size          (_dmInner_auto_dmiXing_in_d_mem_0_size),
    .auto_dmiXing_in_d_mem_0_source        (_dmInner_auto_dmiXing_in_d_mem_0_source),
    .auto_dmiXing_in_d_mem_0_sink          (_dmInner_auto_dmiXing_in_d_mem_0_sink),
    .auto_dmiXing_in_d_mem_0_denied        (_dmInner_auto_dmiXing_in_d_mem_0_denied),
    .auto_dmiXing_in_d_mem_0_data          (_dmInner_auto_dmiXing_in_d_mem_0_data),
    .auto_dmiXing_in_d_mem_0_corrupt       (_dmInner_auto_dmiXing_in_d_mem_0_corrupt),
    .auto_dmiXing_in_d_widx                (_dmInner_auto_dmiXing_in_d_widx),
    .auto_dmiXing_in_d_safe_widx_valid     (_dmInner_auto_dmiXing_in_d_safe_widx_valid),
    .auto_dmiXing_in_d_safe_source_reset_n
      (_dmInner_auto_dmiXing_in_d_safe_source_reset_n),
    .auto_dmInner_tl_in_a_ready            (auto_dmInner_dmInner_tl_in_a_ready),
    .auto_dmInner_tl_in_d_valid            (auto_dmInner_dmInner_tl_in_d_valid),
    .auto_dmInner_tl_in_d_bits_opcode      (auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_dmInner_tl_in_d_bits_size        (auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_dmInner_tl_in_d_bits_source      (auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_dmInner_tl_in_d_bits_data        (auto_dmInner_dmInner_tl_in_d_bits_data),
    .io_innerCtrl_ridx                     (_dmInner_io_innerCtrl_ridx),
    .io_innerCtrl_safe_ridx_valid          (_dmInner_io_innerCtrl_safe_ridx_valid),
    .io_innerCtrl_safe_sink_reset_n        (_dmInner_io_innerCtrl_safe_sink_reset_n),
    .io_hgDebugInt_0                       (_dmInner_io_hgDebugInt_0)
  );
  assign io_ctrl_dmactive = _dmOuter_io_ctrl_dmactive;
endmodule

module AsyncResetRegVec_w2_i0(
  input        clock,
               reset,
  input  [1:0] io_d,
  output [1:0] io_q
);

  reg [1:0] reg_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_0 <= 2'h0;
    else
      reg_0 <= io_d;
  end // always @(posedge, posedge)
  assign io_q = reg_0;
endmodule

module IntSyncCrossingSource_5(
  input  clock,
         reset,
         auto_in_0,
         auto_in_1,
  output auto_out_sync_0,
         auto_out_sync_1
);

  wire [1:0] _reg_io_q;
  AsyncResetRegVec_w2_i0 reg_0 (
    .clock (clock),
    .reset (reset),
    .io_d  ({auto_in_1, auto_in_0}),
    .io_q  (_reg_io_q)
  );
  assign auto_out_sync_0 = _reg_io_q[0];
  assign auto_out_sync_1 = _reg_io_q[1];
endmodule

module Queue_92(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_size,
  input  [9:0]  io_enq_bits_source,
  input  [28:0] io_enq_bits_address,
  input  [7:0]  io_enq_bits_mask,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_size,
  output [9:0]  io_deq_bits_source,
  output [28:0] io_deq_bits_address,
  output [7:0]  io_deq_bits_mask,
  output [63:0] io_deq_bits_data
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_burst_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_1 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_address_combMem ram_address_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_address),
    .R0_data (io_deq_bits_address)
  );
  ram_len_combMem ram_mask_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_mask),
    .R0_data (io_deq_bits_mask)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Queue_93(
  input         clock,
                reset,
                io_enq_valid,
  input  [2:0]  io_enq_bits_opcode,
  input  [1:0]  io_enq_bits_size,
  input  [9:0]  io_enq_bits_source,
  input  [63:0] io_enq_bits_data,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
  output [2:0]  io_deq_bits_opcode,
  output [1:0]  io_deq_bits_param,
                io_deq_bits_size,
  output [9:0]  io_deq_bits_source,
  output        io_deq_bits_sink,
                io_deq_bits_denied,
  output [63:0] io_deq_bits_data,
  output        io_deq_bits_corrupt
);

  reg  enq_ptr_value;
  reg  deq_ptr_value;
  reg  maybe_full;
  wire ptr_match = enq_ptr_value == deq_ptr_value;
  wire empty = ptr_match & ~maybe_full;
  wire full = ptr_match & maybe_full;
  wire do_enq = ~full & io_enq_valid;
  wire do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 1'h0;
      deq_ptr_value <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value - 1'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value - 1'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_size_combMem ram_opcode_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_opcode),
    .R0_data (io_deq_bits_opcode)
  );
  ram_burst_combMem_0 ram_param_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (2'h0),
    .R0_data (io_deq_bits_param)
  );
  ram_burst_combMem_0 ram_size_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_size),
    .R0_data (io_deq_bits_size)
  );
  ram_source_combMem_1 ram_source_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_source),
    .R0_data (io_deq_bits_source)
  );
  ram_lock_combMem ram_sink_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (1'h0),
    .R0_data (io_deq_bits_sink)
  );
  ram_lock_combMem ram_denied_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (1'h0),
    .R0_data (io_deq_bits_denied)
  );
  ram_data_combMem_0 ram_data_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits_data),
    .R0_data (io_deq_bits_data)
  );
  ram_lock_combMem ram_corrupt_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (1'h0),
    .R0_data (io_deq_bits_corrupt)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module TLBuffer_13(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [28:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_d_ready,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [2:0]  auto_out_d_bits_opcode,
  input  [1:0]  auto_out_d_bits_size,
  input  [9:0]  auto_out_d_bits_source,
  input  [63:0] auto_out_d_bits_data,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_param,
                auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output        auto_in_d_bits_sink,
                auto_in_d_bits_denied,
  output [63:0] auto_in_d_bits_data,
  output        auto_in_d_bits_corrupt,
                auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [1:0]  auto_out_a_bits_size,
  output [9:0]  auto_out_a_bits_source,
  output [28:0] auto_out_a_bits_address,
  output [7:0]  auto_out_a_bits_mask,
  output [63:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  Queue_92 nodeOut_a_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_in_a_valid),
    .io_enq_bits_opcode  (auto_in_a_bits_opcode),
    .io_enq_bits_size    (auto_in_a_bits_size),
    .io_enq_bits_source  (auto_in_a_bits_source),
    .io_enq_bits_address (auto_in_a_bits_address),
    .io_enq_bits_mask    (auto_in_a_bits_mask),
    .io_enq_bits_data    (auto_in_a_bits_data),
    .io_deq_ready        (auto_out_a_ready),
    .io_enq_ready        (auto_in_a_ready),
    .io_deq_valid        (auto_out_a_valid),
    .io_deq_bits_opcode  (auto_out_a_bits_opcode),
    .io_deq_bits_size    (auto_out_a_bits_size),
    .io_deq_bits_source  (auto_out_a_bits_source),
    .io_deq_bits_address (auto_out_a_bits_address),
    .io_deq_bits_mask    (auto_out_a_bits_mask),
    .io_deq_bits_data    (auto_out_a_bits_data)
  );
  Queue_93 nodeIn_d_q (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (auto_out_d_valid),
    .io_enq_bits_opcode  (auto_out_d_bits_opcode),
    .io_enq_bits_size    (auto_out_d_bits_size),
    .io_enq_bits_source  (auto_out_d_bits_source),
    .io_enq_bits_data    (auto_out_d_bits_data),
    .io_deq_ready        (auto_in_d_ready),
    .io_enq_ready        (auto_out_d_ready),
    .io_deq_valid        (auto_in_d_valid),
    .io_deq_bits_opcode  (auto_in_d_bits_opcode),
    .io_deq_bits_param   (auto_in_d_bits_param),
    .io_deq_bits_size    (auto_in_d_bits_size),
    .io_deq_bits_source  (auto_in_d_bits_source),
    .io_deq_bits_sink    (auto_in_d_bits_sink),
    .io_deq_bits_denied  (auto_in_d_bits_denied),
    .io_deq_bits_data    (auto_in_d_bits_data),
    .io_deq_bits_corrupt (auto_in_d_bits_corrupt)
  );
endmodule

module LiteGEMPhy(
  input         clock,
  input  [31:0] io_phy_id,
  input  [4:0]  io_phy_ad,
  input         io_status,
                io_mpe,
  input  [31:0] io_man_di,
  output [31:0] io_man_do,
  output        io_man_en,
                io_phy_rst
);

  reg  [15:0] casez_tmp;
  reg  [15:0] man_do;
  reg         man_en;
  wire [1:0]  rw = io_mpe ? io_man_di[29:28] : 2'h0;
  wire [4:0]  rega = io_mpe ? io_man_di[22:18] : 5'h0;
  wire        _T_5 =
    (io_mpe ? io_man_di[31:30] : 2'h0) == 2'h1
    & (io_mpe ? io_man_di[27:23] : 5'h0) == io_phy_ad & ~(rega[4]);
  always @(*) begin
    casez (rega[3:0])
      4'b0000:
        casez_tmp = 16'h140;
      4'b0001:
        casez_tmp = {13'h4, io_status, 2'h0};
      4'b0010:
        casez_tmp = io_phy_id[31:16];
      4'b0011:
        casez_tmp = io_phy_id[15:0];
      4'b0100:
        casez_tmp = 16'h0;
      4'b0101:
        casez_tmp = 16'h0;
      4'b0110:
        casez_tmp = 16'h0;
      4'b0111:
        casez_tmp = 16'h0;
      4'b1000:
        casez_tmp = 16'h0;
      4'b1001:
        casez_tmp = 16'h0;
      4'b1010:
        casez_tmp = 16'h3800;
      4'b1011:
        casez_tmp = 16'h0;
      4'b1100:
        casez_tmp = 16'h0;
      4'b1101:
        casez_tmp = 16'h0;
      4'b1110:
        casez_tmp = 16'h0;
      default:
        casez_tmp = 16'h0;
    endcase
  end // always @(*)
  wire        _T_6 = rw == 2'h2;
  always @(posedge clock) begin
    if (_T_5 & _T_6)
      man_do <= casez_tmp;
    else
      man_do <= 16'h0;
    man_en <= _T_5 & _T_6;
  end // always @(posedge)
  assign io_man_do = {16'h0, man_do};
  assign io_man_en = man_en;
  assign io_phy_rst = _T_5 & rw == 2'h1 & rega == 5'h0 & io_man_di[15];
endmodule

module LiteDMA(
  input         clock,
                reset,
                io_dma_do_0_ready,
                io_dma_do_1_ready,
                io_dma_di_0_valid,
                io_dma_di_0_last,
  input  [63:0] io_dma_di_0_data,
  input         io_dma_di_1_valid,
                io_dma_di_1_last,
  input  [63:0] io_dma_di_1_data,
  input  [31:0] io_dma_ad_0,
                io_dma_ad_1,
  input  [3:0]  io_dma_sz_0,
                io_dma_sz_1,
  input         io_dma_we_0,
                io_dma_we_1,
                io_dma_a_ready,
                io_dma_d_valid,
  input  [2:0]  io_dma_d_bits_opcode,
  input  [3:0]  io_dma_d_bits_size,
  input  [1:0]  io_dma_d_bits_source,
  input  [63:0] io_dma_d_bits_data,
  output        io_dma_do_0_valid,
                io_dma_do_0_last,
  output [63:0] io_dma_do_0_data,
  output        io_dma_do_1_valid,
                io_dma_do_1_last,
  output [63:0] io_dma_do_1_data,
  output        io_dma_di_0_ready,
                io_dma_di_1_ready,
                io_dma_a_valid,
  output [2:0]  io_dma_a_bits_opcode,
  output [3:0]  io_dma_a_bits_size,
  output [1:0]  io_dma_a_bits_source,
  output [31:0] io_dma_a_bits_address,
  output [63:0] io_dma_a_bits_data,
  output        io_dma_d_ready
);

  wire        rsp_fwd;
  wire [3:0]  req_msk;
  wire        req_qn0;
  wire [63:0] _rsp_mem_ext_R0_data;
  reg         casez_tmp;
  reg  [1:0]  casez_tmp_0;
  reg         casez_tmp_1;
  reg         casez_tmp_2;
  reg         casez_tmp_3;
  reg  [3:0]  casez_tmp_4;
  reg         req_sop;
  reg         req_qn1;
  wire        req_que = req_sop ? req_qn0 : req_qn1;
  reg         req_idx_0;
  reg         req_idx_1;
  reg         req_idx_2;
  reg         req_idx_3;
  reg         req_act_0;
  reg         req_act_1;
  reg         req_act_2;
  reg         req_act_3;
  wire [3:0]  _req_msk_T = {req_act_3, req_act_2, req_act_1, req_act_0};
  wire [1:0]  req_tg0;
  reg  [1:0]  req_tg1;
  reg         req_fw1;
  wire [1:0]  _GEN = ~{io_dma_di_1_valid | io_dma_di_0_valid, io_dma_di_0_valid} + 2'h1;
  assign req_qn0 = _GEN[1];
  wire [3:0]  _req_tg0_T_2 = req_msk | {req_msk[2:0], 1'h0};
  wire [3:0]  _GEN_0 = ~(_req_tg0_T_2 | {_req_tg0_T_2[1:0], 2'h0}) + 4'h1;
  assign req_tg0 = _GEN_0[3] ? 2'h3 : _GEN_0[2] ? 2'h2 : {1'h0, _GEN_0[1]};
  wire        _GEN_1 = req_que ? io_dma_di_1_valid : io_dma_di_0_valid;
  assign req_msk = ~_req_msk_T;
  wire        _req_fw1_T = _req_msk_T != 4'hF;
  wire        req_fwd = req_sop ? _req_fw1_T : req_fw1;
  wire        _io_dma_di_ready_T = req_fwd & io_dma_a_ready;
  wire [3:0]  _io_dma_a_bits_size_output = req_que ? io_dma_sz_1 : io_dma_sz_0;
  reg  [15:0] dma_d_cnt;
  wire [31:0] dma_d_tot = 32'h1 << io_dma_d_bits_size;
  wire [16:0] _GEN_2 = dma_d_tot[16:0] - {1'h0, dma_d_cnt};
  wire        dma_d_eop = _GEN_2[16];
  wire        dma_d_ack = io_dma_d_bits_opcode == 3'h0;
  wire        _T_9 = rsp_fwd & io_dma_d_valid;
  always @(*) begin
    casez (io_dma_d_bits_source)
      2'b00:
        casez_tmp = req_idx_0;
      2'b01:
        casez_tmp = req_idx_1;
      2'b10:
        casez_tmp = req_idx_2;
      default:
        casez_tmp = req_idx_3;
    endcase
  end // always @(*)
  wire        _GEN_3 = _T_9 & ~casez_tmp;
  wire        _GEN_4 = _GEN_3 & io_dma_d_valid;
  wire        _GEN_5 = _T_9 & casez_tmp;
  wire        _GEN_6 = _GEN_5 & io_dma_d_valid;
  wire [63:0] _GEN_7 = _GEN_3 ? io_dma_d_bits_data : 64'h0;
  wire [63:0] _GEN_8 = _GEN_5 ? io_dma_d_bits_data : 64'h0;
  wire        _io_dma_do_last_T = dma_d_eop | dma_d_ack;
  wire        _GEN_9 = _GEN_3 & _io_dma_do_last_T;
  wire        _GEN_10 = _GEN_5 & _io_dma_do_last_T;
  reg         rsp_rdy_0;
  reg         rsp_rdy_1;
  reg         rsp_rdy_2;
  reg         rsp_rdy_3;
  reg  [1:0]  rsp_tag_0;
  reg  [1:0]  rsp_tag_1;
  reg  [1:0]  rsp_tag_2;
  reg  [1:0]  rsp_tag_3;
  reg  [3:0]  rsp_cnt_0;
  reg  [3:0]  rsp_cnt_1;
  reg  [3:0]  rsp_cnt_2;
  reg  [3:0]  rsp_cnt_3;
  reg         rsp_ack_0;
  reg         rsp_ack_1;
  reg         rsp_ack_2;
  reg         rsp_ack_3;
  reg  [1:0]  rsp_ptr;
  reg  [1:0]  rsp_hdr;
  reg         rsp_fit;
  always @(*) begin
    casez (rsp_hdr)
      2'b00:
        casez_tmp_0 = rsp_tag_0;
      2'b01:
        casez_tmp_0 = rsp_tag_1;
      2'b10:
        casez_tmp_0 = rsp_tag_2;
      default:
        casez_tmp_0 = rsp_tag_3;
    endcase
  end // always @(*)
  wire        fit = io_dma_d_bits_source == casez_tmp_0;
  assign rsp_fwd = io_dma_d_valid ? fit : rsp_fit;
  always @(*) begin
    casez (casez_tmp_0)
      2'b00:
        casez_tmp_1 = req_idx_0;
      2'b01:
        casez_tmp_1 = req_idx_1;
      2'b10:
        casez_tmp_1 = req_idx_2;
      default:
        casez_tmp_1 = req_idx_3;
    endcase
  end // always @(*)
  reg  [3:0]  out_ptr;
  wire        _T_23 = ~rsp_fwd & io_dma_d_valid;
  wire        _io_dma_d_ready_output =
    _T_23 | _T_9 & (casez_tmp ? io_dma_do_1_ready : io_dma_do_0_ready);
  reg  [3:0]  out_hdr;
  always @(*) begin
    casez (casez_tmp_0)
      2'b00:
        casez_tmp_2 = rsp_rdy_0;
      2'b01:
        casez_tmp_2 = rsp_rdy_1;
      2'b10:
        casez_tmp_2 = rsp_rdy_2;
      default:
        casez_tmp_2 = rsp_rdy_3;
    endcase
  end // always @(*)
  wire        _T_26 = ~rsp_fwd & casez_tmp_2;
  always @(*) begin
    casez (rsp_hdr)
      2'b00:
        casez_tmp_3 = rsp_ack_0;
      2'b01:
        casez_tmp_3 = rsp_ack_1;
      2'b10:
        casez_tmp_3 = rsp_ack_2;
      default:
        casez_tmp_3 = rsp_ack_3;
    endcase
  end // always @(*)
  always @(*) begin
    casez (rsp_hdr)
      2'b00:
        casez_tmp_4 = rsp_cnt_0;
      2'b01:
        casez_tmp_4 = rsp_cnt_1;
      2'b10:
        casez_tmp_4 = rsp_cnt_2;
      default:
        casez_tmp_4 = rsp_cnt_3;
    endcase
  end // always @(*)
  wire        out_eop = casez_tmp_4 == out_hdr;
  wire        _io_dma_do_0_valid_output =
    _T_26
      ? (casez_tmp_3 ? ~casez_tmp_1 | _GEN_4 : casez_tmp_1 ? _GEN_4 : (|out_hdr))
      : _GEN_4;
  wire        _io_dma_do_1_valid_output =
    _T_26
      ? (casez_tmp_3 ? casez_tmp_1 | _GEN_6 : casez_tmp_1 ? (|out_hdr) : _GEN_6)
      : _GEN_6;
  wire        _io_dma_do_0_last_output =
    _T_26
      ? (casez_tmp_3 ? ~casez_tmp_1 | _GEN_9 : casez_tmp_1 ? _GEN_9 : out_eop)
      : _GEN_9;
  wire        _io_dma_do_1_last_output =
    _T_26
      ? (casez_tmp_3 ? casez_tmp_1 | _GEN_10 : casez_tmp_1 ? out_eop : _GEN_10)
      : _GEN_10;
  wire        _out_hdr_T = out_hdr == 4'h0;
  wire [63:0] _io_dma_do_data_T_4 = _out_hdr_T ? 64'h0 : _rsp_mem_ext_R0_data;
  wire        _T_5 = _GEN_1 & _io_dma_di_ready_T;
  wire        _GEN_11 = req_sop & _T_5 & req_tg0 == 2'h0;
  wire        _GEN_12 = req_sop & _T_5 & req_tg0 == 2'h1;
  wire        _GEN_13 = req_sop & _T_5 & req_tg0 == 2'h2;
  wire        _GEN_14 = req_sop & _T_5 & (&req_tg0);
  wire        _GEN_15 = _GEN_11 | req_act_0;
  wire        _GEN_16 = _GEN_12 | req_act_1;
  wire        _GEN_17 = _GEN_13 | req_act_2;
  wire        _GEN_18 = _GEN_14 | req_act_3;
  wire        _T_10 = _io_dma_d_ready_output & io_dma_d_valid;
  wire        _T_24 = dma_d_eop | dma_d_ack;
  wire        _T_13 = rsp_fwd & _T_10 & _T_24;
  wire        _GEN_19 = io_dma_d_bits_source == 2'h0;
  wire        _GEN_20 = _T_13 & _GEN_19;
  wire        _GEN_21 = io_dma_d_bits_source == 2'h1;
  wire        _GEN_22 = _T_13 & _GEN_21;
  wire        _GEN_23 = io_dma_d_bits_source == 2'h2;
  wire        _GEN_24 = _T_13 & _GEN_23;
  wire        _GEN_25 = _T_13 & (&io_dma_d_bits_source);
  wire        _T_19 =
    _GEN_1 & _io_dma_di_ready_T & (req_que ? io_dma_di_1_last : io_dma_di_0_last);
  wire [15:0] req_cnt = 16'h1 << _io_dma_a_bits_size_output - 4'h3;
  wire        _GEN_26 = casez_tmp_1 ? io_dma_do_1_ready : io_dma_do_0_ready;
  wire        _T_27 =
    (casez_tmp_1 ? _io_dma_do_1_valid_output : _io_dma_do_0_valid_output) & _GEN_26;
  wire        _GEN_27 = _T_23 & _T_24 & _GEN_19 | rsp_rdy_0;
  wire        _GEN_28 = _T_23 & _T_24 & _GEN_21 | rsp_rdy_1;
  wire        _GEN_29 = _T_23 & _T_24 & _GEN_23 | rsp_rdy_2;
  wire        _GEN_30 = _T_23 & _T_24 & (&io_dma_d_bits_source) | rsp_rdy_3;
  wire        _GEN_31 = casez_tmp_0 == 2'h0;
  wire        _GEN_32 = casez_tmp_0 == 2'h1;
  wire        _GEN_33 = casez_tmp_0 == 2'h2;
  always @(posedge clock) begin
    if (reset) begin
      req_sop <= 1'h1;
      req_idx_0 <= 1'h0;
      req_idx_1 <= 1'h0;
      req_idx_2 <= 1'h0;
      req_idx_3 <= 1'h0;
      req_act_0 <= 1'h0;
      req_act_1 <= 1'h0;
      req_act_2 <= 1'h0;
      req_act_3 <= 1'h0;
      req_tg1 <= 2'h0;
      req_fw1 <= 1'h1;
      dma_d_cnt <= 16'h9;
      rsp_rdy_0 <= 1'h0;
      rsp_rdy_1 <= 1'h0;
      rsp_rdy_2 <= 1'h0;
      rsp_rdy_3 <= 1'h0;
      rsp_tag_0 <= 2'h0;
      rsp_tag_1 <= 2'h0;
      rsp_tag_2 <= 2'h0;
      rsp_tag_3 <= 2'h0;
      rsp_cnt_0 <= 4'h0;
      rsp_cnt_1 <= 4'h0;
      rsp_cnt_2 <= 4'h0;
      rsp_cnt_3 <= 4'h0;
      rsp_ack_0 <= 1'h0;
      rsp_ack_1 <= 1'h0;
      rsp_ack_2 <= 1'h0;
      rsp_ack_3 <= 1'h0;
      rsp_ptr <= 2'h0;
      rsp_hdr <= 2'h0;
      rsp_fit <= 1'h0;
      out_ptr <= 4'h0;
      out_hdr <= 4'h0;
    end
    else begin
      if (_GEN_1 & _io_dma_di_ready_T) begin
        if (req_que)
          req_sop <= io_dma_di_1_last;
        else
          req_sop <= io_dma_di_0_last;
      end
      if (_GEN_11) begin
        if (req_sop)
          req_idx_0 <= req_qn0;
        else
          req_idx_0 <= req_qn1;
      end
      if (_GEN_12) begin
        if (req_sop)
          req_idx_1 <= req_qn0;
        else
          req_idx_1 <= req_qn1;
      end
      if (_GEN_13) begin
        if (req_sop)
          req_idx_2 <= req_qn0;
        else
          req_idx_2 <= req_qn1;
      end
      if (_GEN_14) begin
        if (req_sop)
          req_idx_3 <= req_qn0;
        else
          req_idx_3 <= req_qn1;
      end
      if (_T_26 & (casez_tmp_3 ? _GEN_26 : _T_27 & out_eop)) begin
        req_act_0 <= ~(_GEN_31 | _GEN_20) & _GEN_15;
        req_act_1 <= ~(_GEN_32 | _GEN_22) & _GEN_16;
        req_act_2 <= ~(_GEN_33 | _GEN_24) & _GEN_17;
        req_act_3 <= ~((&casez_tmp_0) | _GEN_25) & _GEN_18;
      end
      else begin
        req_act_0 <= ~_GEN_20 & _GEN_15;
        req_act_1 <= ~_GEN_22 & _GEN_16;
        req_act_2 <= ~_GEN_24 & _GEN_17;
        req_act_3 <= ~_GEN_25 & _GEN_18;
      end
      if (req_sop) begin
        req_tg1 <= req_tg0;
        req_fw1 <= _req_fw1_T;
      end
      if (_T_10) begin
        if (dma_d_eop)
          dma_d_cnt <= 16'h9;
        else
          dma_d_cnt <= dma_d_cnt + 16'h8;
      end
      if (_T_26) begin
        if (casez_tmp_3) begin
          rsp_rdy_0 <= ~(_GEN_26 & _GEN_31) & _GEN_27;
          rsp_rdy_1 <= ~(_GEN_26 & _GEN_32) & _GEN_28;
          rsp_rdy_2 <= ~(_GEN_26 & _GEN_33) & _GEN_29;
          rsp_rdy_3 <= ~(_GEN_26 & (&casez_tmp_0)) & _GEN_30;
        end
        else begin
          rsp_rdy_0 <= ~(_T_27 & out_eop & _GEN_31) & _GEN_27;
          rsp_rdy_1 <= ~(_T_27 & out_eop & _GEN_32) & _GEN_28;
          rsp_rdy_2 <= ~(_T_27 & out_eop & _GEN_33) & _GEN_29;
          rsp_rdy_3 <= ~(_T_27 & out_eop & (&casez_tmp_0)) & _GEN_30;
        end
      end
      else begin
        rsp_rdy_0 <= _GEN_27;
        rsp_rdy_1 <= _GEN_28;
        rsp_rdy_2 <= _GEN_29;
        rsp_rdy_3 <= _GEN_30;
      end
      if (_T_19 & rsp_ptr == 2'h0) begin
        if (req_sop)
          rsp_tag_0 <= req_tg0;
        else
          rsp_tag_0 <= req_tg1;
        rsp_cnt_0 <= req_cnt[3:0];
        if (req_que)
          rsp_ack_0 <= io_dma_we_1;
        else
          rsp_ack_0 <= io_dma_we_0;
      end
      if (_T_19 & rsp_ptr == 2'h1) begin
        if (req_sop)
          rsp_tag_1 <= req_tg0;
        else
          rsp_tag_1 <= req_tg1;
        rsp_cnt_1 <= req_cnt[3:0];
        if (req_que)
          rsp_ack_1 <= io_dma_we_1;
        else
          rsp_ack_1 <= io_dma_we_0;
      end
      if (_T_19 & rsp_ptr == 2'h2) begin
        if (req_sop)
          rsp_tag_2 <= req_tg0;
        else
          rsp_tag_2 <= req_tg1;
        rsp_cnt_2 <= req_cnt[3:0];
        if (req_que)
          rsp_ack_2 <= io_dma_we_1;
        else
          rsp_ack_2 <= io_dma_we_0;
      end
      if (_T_19 & (&rsp_ptr)) begin
        if (req_sop)
          rsp_tag_3 <= req_tg0;
        else
          rsp_tag_3 <= req_tg1;
        rsp_cnt_3 <= req_cnt[3:0];
        if (req_que)
          rsp_ack_3 <= io_dma_we_1;
        else
          rsp_ack_3 <= io_dma_we_0;
      end
      if (_T_19) begin
        if (&rsp_ptr)
          rsp_ptr <= 2'h0;
        else
          rsp_ptr <= rsp_ptr + 2'h1;
      end
      if (_T_27
          & (casez_tmp_1 ? _io_dma_do_1_last_output : _io_dma_do_0_last_output)) begin
        if (&rsp_hdr)
          rsp_hdr <= 2'h0;
        else
          rsp_hdr <= rsp_hdr + 2'h1;
      end
      if (io_dma_d_valid)
        rsp_fit <= ~(_io_dma_d_ready_output & dma_d_eop) & fit;
      if (_T_23) begin
        if (dma_d_eop)
          out_ptr <= 4'h0;
        else
          out_ptr <= out_ptr + 4'h1;
      end
      if (~_T_26 | casez_tmp_3) begin
      end
      else if (_T_27) begin
        if (out_eop)
          out_hdr <= 4'h0;
        else
          out_hdr <= out_hdr + 4'h1;
      end
      else if (_out_hdr_T)
        out_hdr <= 4'h1;
    end
    req_qn1 <= req_qn0;
  end // always @(posedge)
  rsp_mem_combMem rsp_mem_ext (
    .R0_addr ({casez_tmp_0, out_hdr}),
    .R0_en   (_T_26 & ~casez_tmp_3),
    .R0_clk  (clock),
    .W0_addr ({io_dma_d_bits_source, out_ptr}),
    .W0_en   (_T_23),
    .W0_clk  (clock),
    .W0_data (io_dma_d_bits_data),
    .R0_data (_rsp_mem_ext_R0_data)
  );
  assign io_dma_do_0_valid = _io_dma_do_0_valid_output;
  assign io_dma_do_0_last = _io_dma_do_0_last_output;
  assign io_dma_do_0_data =
    _T_26
      ? (casez_tmp_3
           ? (casez_tmp_1 & _GEN_3 ? io_dma_d_bits_data : 64'h0)
           : casez_tmp_1 ? _GEN_7 : _io_dma_do_data_T_4)
      : _GEN_7;
  assign io_dma_do_1_valid = _io_dma_do_1_valid_output;
  assign io_dma_do_1_last = _io_dma_do_1_last_output;
  assign io_dma_do_1_data =
    _T_26
      ? (casez_tmp_3
           ? (casez_tmp_1 | ~_GEN_5 ? 64'h0 : io_dma_d_bits_data)
           : casez_tmp_1 ? _io_dma_do_data_T_4 : _GEN_8)
      : _GEN_8;
  assign io_dma_di_0_ready = ~req_que & _io_dma_di_ready_T;
  assign io_dma_di_1_ready = req_que & _io_dma_di_ready_T;
  assign io_dma_a_valid = req_fwd & _GEN_1;
  assign io_dma_a_bits_opcode = {~(req_que ? io_dma_we_1 : io_dma_we_0), 2'h0};
  assign io_dma_a_bits_size = _io_dma_a_bits_size_output;
  assign io_dma_a_bits_source = req_sop ? req_tg0 : req_tg1;
  assign io_dma_a_bits_address = req_que ? io_dma_ad_1 : io_dma_ad_0;
  assign io_dma_a_bits_data = req_que ? io_dma_di_1_data : io_dma_di_0_data;
  assign io_dma_d_ready = _io_dma_d_ready_output;
endmodule

module PacketQueue(
  input         reset,
                io_enq_clk,
                io_deq_clk,
  input  [5:0]  io_enq_shr,
  input         io_enq_valid,
                io_enq_last,
  input  [63:0] io_enq_data,
  input  [2:0]  io_enq_empty,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_last,
  output [7:0]  io_deq_data
);

  wire         _io_deq_valid_output;
  reg  [8:0]   buf_e2r;
  wire         _io_enq_ready_T;
  reg  [8:0]   buf_h2w;
  reg  [6:0]   pkt_e2r;
  reg  [6:0]   pkt_h2w;
  wire [2:0]   _emp_mem_ext_R0_data;
  wire [64:0]  _buffer_ext_R0_data;
  wire [8:0]   buf_hq0 = buf_h2w ^ {1'h0, buf_h2w[8:1]};
  wire [8:0]   buf_eq0 = buf_e2r ^ {1'h0, buf_e2r[8:1]};
  wire [6:0]   pkt_hq0 = pkt_h2w ^ {2'h0, pkt_h2w[5:1]};
  wire [6:0]   pkt_eq0 = pkt_e2r ^ {2'h0, pkt_e2r[5:1]};
  reg  [6:0]   pkt_eq1;
  reg  [6:0]   pkt_eq2;
  wire         _T_10 = io_enq_valid & ~_io_enq_ready_T;
  reg  [6:0]   pkt_hq1;
  reg  [6:0]   pkt_hq2;
  reg          enq_sop_q;
  reg  [2:0]   shr_cnt_q;
  reg  [63:0]  shr_tmp;
  reg          enq_ext;
  wire         _T_5 = _T_10 & io_enq_last;
  wire [3:0]   _GEN = {1'h0, shr_cnt_q} + {1'h0, io_enq_empty};
  wire         _T_9 = (|shr_cnt_q) & ~(_GEN[3]);
  wire         enq_act =
    (|shr_cnt_q) ? enq_ext | _T_10 & (io_enq_last | ~enq_sop_q) : _T_10;
  wire [127:0] _enq_val_T_4 =
    (enq_sop_q & io_enq_valid & io_enq_last | shr_cnt_q == 3'h0
       ? {64'h0, io_enq_data}
       : {io_enq_data, shr_tmp}) >> {122'h0, shr_cnt_q, 3'h0};
  reg  [8:0]   buf_eq1;
  reg  [8:0]   buf_eq2;
  assign _io_enq_ready_T =
    buf_hq0 == {~(buf_eq2[8:7]), buf_eq2[6:0]}
    | pkt_hq0 == {~(pkt_eq2[6:5]), pkt_eq2[4:0]};
  reg  [8:0]   buf_hq1;
  reg  [8:0]   buf_hq2;
  reg  [2:0]   seg_cnt;
  reg  [63:0]  seg_buf;
  reg          seg_ep1;
  wire         _seg_buf_T = seg_cnt == 3'h0;
  wire         seg_eop = _seg_buf_T ? _buffer_ext_R0_data[64] : seg_ep1;
  wire         seg_eot =
    (io_deq_ready | ~_io_deq_valid_output)
    & ((&seg_cnt) | seg_eop & (&(seg_cnt + _emp_mem_ext_R0_data)));
  wire         _io_deq_last_output = seg_eop & seg_eot;
  assign _io_deq_valid_output = buf_eq0 != buf_hq2 & pkt_eq0 != pkt_hq2;
  always @(posedge io_enq_clk) begin
    if (reset) begin
      pkt_h2w <= 7'h0;
      enq_sop_q <= 1'h1;
      shr_cnt_q <= 3'h0;
      shr_tmp <= 64'h0;
      buf_h2w <= 9'h0;
      buf_eq1 <= 9'h0;
      buf_eq2 <= 9'h0;
    end
    else begin
      if (_T_10 & io_enq_last) begin
        if (&(pkt_h2w[5:0]))
          pkt_h2w <= {~(pkt_h2w[6]), 6'h0};
        else
          pkt_h2w <= pkt_h2w + 7'h1;
      end
      if (_T_10) begin
        enq_sop_q <= io_enq_last;
        shr_tmp <= io_enq_data;
      end
      shr_cnt_q <= enq_sop_q ? io_enq_shr[2:0] : shr_cnt_q;
      if (enq_act) begin
        if (&(buf_h2w[7:0]))
          buf_h2w <= {~(buf_h2w[8]), 8'h0};
        else
          buf_h2w <= buf_h2w + 9'h1;
      end
      buf_eq1 <= buf_eq0;
      buf_eq2 <= buf_eq1;
    end
    pkt_eq1 <= pkt_eq0;
    pkt_eq2 <= pkt_eq1;
    enq_ext <= _T_5 & _T_9;
  end // always @(posedge)
  wire         _T_19 = _io_deq_valid_output & io_deq_ready;
  always @(posedge io_deq_clk) begin
    if (reset) begin
      pkt_e2r <= 7'h0;
      buf_e2r <= 9'h0;
      buf_hq1 <= 9'h0;
      buf_hq2 <= 9'h0;
      seg_cnt <= 3'h0;
      seg_buf <= 64'h0;
    end
    else begin
      if (_T_19 & _io_deq_last_output) begin
        if (&(pkt_e2r[5:0]))
          pkt_e2r <= {~(pkt_e2r[6]), 6'h0};
        else
          pkt_e2r <= pkt_e2r + 7'h1;
      end
      if (_T_19 & seg_eot) begin
        if (&(buf_e2r[7:0]))
          buf_e2r <= {~(buf_e2r[8]), 8'h0};
        else
          buf_e2r <= buf_e2r + 9'h1;
      end
      buf_hq1 <= buf_hq0;
      buf_hq2 <= buf_hq1;
      if (_T_19) begin
        if (seg_eot)
          seg_cnt <= 3'h0;
        else
          seg_cnt <= seg_cnt + 3'h1;
        seg_buf <= {7'h0, _seg_buf_T ? _buffer_ext_R0_data[64:8] : {1'h0, seg_buf[63:8]}};
      end
    end
    pkt_hq1 <= pkt_hq0;
    pkt_hq2 <= pkt_hq1;
    if (_seg_buf_T)
      seg_ep1 <= _buffer_ext_R0_data[64];
  end // always @(posedge)
  buffer_combMem buffer_ext (
    .R0_addr (buf_e2r[7:0]),
    .R0_en   (1'h1),
    .R0_clk  (io_deq_clk),
    .W0_addr (buf_h2w[7:0]),
    .W0_en   (enq_act),
    .W0_clk  (io_enq_clk),
    .W0_data ({_T_5 ? ~_T_9 : enq_ext, _enq_val_T_4[63:0]}),
    .R0_data (_buffer_ext_R0_data)
  );
  emp_mem_combMem emp_mem_ext (
    .R0_addr (pkt_e2r[5:0]),
    .R0_en   (1'h1),
    .R0_clk  (io_deq_clk),
    .W0_addr (pkt_h2w[5:0]),
    .W0_en   (_T_10 & io_enq_last),
    .W0_clk  (io_enq_clk),
    .W0_data (io_enq_empty + shr_cnt_q),
    .R0_data (_emp_mem_ext_R0_data)
  );
  assign io_enq_ready = ~_io_enq_ready_T;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_last = _io_deq_last_output;
  assign io_deq_data = _seg_buf_T ? _buffer_ext_R0_data[7:0] : seg_buf[7:0];
endmodule

module GaloisLFSR(
  input  clock,
         reset,
         io_seed_valid,
         io_seed_bits_0,
         io_seed_bits_1,
         io_seed_bits_2,
         io_seed_bits_3,
         io_seed_bits_4,
         io_seed_bits_5,
         io_seed_bits_6,
         io_seed_bits_7,
         io_seed_bits_8,
         io_seed_bits_9,
         io_seed_bits_10,
         io_seed_bits_11,
         io_seed_bits_12,
         io_seed_bits_13,
         io_seed_bits_14,
         io_seed_bits_15,
         io_seed_bits_16,
         io_seed_bits_17,
         io_seed_bits_18,
         io_seed_bits_19,
         io_seed_bits_20,
         io_seed_bits_21,
         io_seed_bits_22,
         io_seed_bits_23,
         io_seed_bits_24,
         io_seed_bits_25,
         io_seed_bits_26,
         io_seed_bits_27,
         io_seed_bits_28,
         io_seed_bits_29,
         io_seed_bits_30,
         io_seed_bits_31,
  output io_out_0,
         io_out_1,
         io_out_2,
         io_out_3,
         io_out_4,
         io_out_5,
         io_out_6,
         io_out_7,
         io_out_8,
         io_out_9,
         io_out_10,
         io_out_11,
         io_out_12,
         io_out_13,
         io_out_14,
         io_out_15,
         io_out_16,
         io_out_17,
         io_out_18,
         io_out_19,
         io_out_20,
         io_out_21,
         io_out_22,
         io_out_23,
         io_out_24,
         io_out_25,
         io_out_26,
         io_out_27,
         io_out_28,
         io_out_29,
         io_out_30,
         io_out_31
);

  reg  state_0;
  reg  state_1;
  reg  state_2;
  reg  state_3;
  reg  state_4;
  reg  state_5;
  reg  state_6;
  reg  state_7;
  reg  state_8;
  reg  state_9;
  reg  state_10;
  reg  state_11;
  reg  state_12;
  reg  state_13;
  reg  state_14;
  reg  state_15;
  reg  state_16;
  reg  state_17;
  reg  state_18;
  reg  state_19;
  reg  state_20;
  reg  state_21;
  reg  state_22;
  reg  state_23;
  reg  state_24;
  reg  state_25;
  reg  state_26;
  reg  state_27;
  reg  state_28;
  reg  state_29;
  reg  state_30;
  reg  state_31;
  wire _T_104 = io_seed_bits_6 ^ io_seed_bits_0;
  wire _T_117 = io_seed_bits_7 ^ io_seed_bits_1;
  always @(posedge clock) begin
    if (reset) begin
      state_0 <= 1'h1;
      state_1 <= 1'h1;
      state_2 <= 1'h1;
      state_3 <= 1'h1;
      state_4 <= 1'h1;
      state_5 <= 1'h1;
      state_6 <= 1'h1;
      state_7 <= 1'h1;
      state_8 <= 1'h1;
      state_9 <= 1'h1;
      state_10 <= 1'h1;
      state_11 <= 1'h1;
      state_12 <= 1'h1;
      state_13 <= 1'h1;
      state_14 <= 1'h1;
      state_15 <= 1'h1;
      state_16 <= 1'h1;
      state_17 <= 1'h1;
      state_18 <= 1'h1;
      state_19 <= 1'h1;
      state_20 <= 1'h1;
      state_21 <= 1'h1;
      state_22 <= 1'h1;
      state_23 <= 1'h1;
      state_24 <= 1'h1;
      state_25 <= 1'h1;
      state_26 <= 1'h1;
      state_27 <= 1'h1;
      state_28 <= 1'h1;
      state_29 <= 1'h1;
      state_30 <= 1'h1;
      state_31 <= 1'h1;
    end
    else if (io_seed_valid) begin
      state_0 <= io_seed_bits_8 ^ io_seed_bits_2;
      state_1 <= io_seed_bits_9 ^ io_seed_bits_0 ^ io_seed_bits_3;
      state_2 <= io_seed_bits_10 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_4;
      state_3 <= io_seed_bits_11 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_5;
      state_4 <= io_seed_bits_12 ^ io_seed_bits_2 ^ io_seed_bits_3 ^ _T_104;
      state_5 <= io_seed_bits_13 ^ io_seed_bits_3 ^ io_seed_bits_4 ^ _T_117;
      state_6 <= io_seed_bits_14 ^ io_seed_bits_4 ^ io_seed_bits_5;
      state_7 <= io_seed_bits_15 ^ io_seed_bits_5 ^ _T_104;
      state_8 <= io_seed_bits_16 ^ io_seed_bits_0 ^ _T_104 ^ _T_117;
      state_9 <= io_seed_bits_17 ^ io_seed_bits_1 ^ _T_117;
      state_10 <= io_seed_bits_18 ^ io_seed_bits_2;
      state_11 <= io_seed_bits_19 ^ io_seed_bits_3;
      state_12 <= io_seed_bits_20 ^ io_seed_bits_0 ^ io_seed_bits_4;
      state_13 <= io_seed_bits_21 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_5;
      state_14 <=
        io_seed_bits_22 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ _T_104;
      state_15 <=
        io_seed_bits_23 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_3 ^ _T_117;
      state_16 <=
        io_seed_bits_24 ^ io_seed_bits_0 ^ io_seed_bits_2 ^ io_seed_bits_3
        ^ io_seed_bits_4;
      state_17 <=
        io_seed_bits_25 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_3
        ^ io_seed_bits_4 ^ io_seed_bits_5;
      state_18 <=
        io_seed_bits_26 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_4
        ^ io_seed_bits_5 ^ _T_104;
      state_19 <=
        io_seed_bits_27 ^ io_seed_bits_0 ^ io_seed_bits_2 ^ io_seed_bits_3
        ^ io_seed_bits_5 ^ _T_104 ^ _T_117;
      state_20 <=
        io_seed_bits_28 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_3
        ^ io_seed_bits_4 ^ _T_104 ^ _T_117;
      state_21 <=
        io_seed_bits_29 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_4
        ^ io_seed_bits_5 ^ _T_117;
      state_22 <=
        io_seed_bits_30 ^ io_seed_bits_0 ^ io_seed_bits_2 ^ io_seed_bits_3
        ^ io_seed_bits_5 ^ _T_104;
      state_23 <=
        io_seed_bits_31 ^ io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_3
        ^ io_seed_bits_4 ^ _T_104 ^ _T_117;
      state_24 <=
        io_seed_bits_0 ^ io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_4 ^ io_seed_bits_5
        ^ _T_117;
      state_25 <=
        io_seed_bits_1 ^ io_seed_bits_2 ^ io_seed_bits_3 ^ io_seed_bits_5 ^ _T_104;
      state_26 <= io_seed_bits_2 ^ io_seed_bits_3 ^ io_seed_bits_4 ^ _T_104 ^ _T_117;
      state_27 <= io_seed_bits_3 ^ io_seed_bits_4 ^ io_seed_bits_5 ^ _T_117;
      state_28 <= io_seed_bits_4 ^ io_seed_bits_5 ^ _T_104;
      state_29 <= io_seed_bits_5 ^ _T_104 ^ _T_117;
      state_30 <= _T_104 ^ _T_117;
      state_31 <= _T_117;
    end
  end // always @(posedge)
  assign io_out_0 = state_0;
  assign io_out_1 = state_1;
  assign io_out_2 = state_2;
  assign io_out_3 = state_3;
  assign io_out_4 = state_4;
  assign io_out_5 = state_5;
  assign io_out_6 = state_6;
  assign io_out_7 = state_7;
  assign io_out_8 = state_8;
  assign io_out_9 = state_9;
  assign io_out_10 = state_10;
  assign io_out_11 = state_11;
  assign io_out_12 = state_12;
  assign io_out_13 = state_13;
  assign io_out_14 = state_14;
  assign io_out_15 = state_15;
  assign io_out_16 = state_16;
  assign io_out_17 = state_17;
  assign io_out_18 = state_18;
  assign io_out_19 = state_19;
  assign io_out_20 = state_20;
  assign io_out_21 = state_21;
  assign io_out_22 = state_22;
  assign io_out_23 = state_23;
  assign io_out_24 = state_24;
  assign io_out_25 = state_25;
  assign io_out_26 = state_26;
  assign io_out_27 = state_27;
  assign io_out_28 = state_28;
  assign io_out_29 = state_29;
  assign io_out_30 = state_30;
  assign io_out_31 = state_31;
endmodule

module LiteGEMTxFCS(
  input        clock,
               reset,
               io_din_tx_en,
  input  [7:0] io_din_txd,
  output       io_din_hold,
               io_out_tx_en,
  output [7:0] io_out_txd
);

  wire        _lfsr_io_out_0;
  wire        _lfsr_io_out_1;
  wire        _lfsr_io_out_2;
  wire        _lfsr_io_out_3;
  wire        _lfsr_io_out_4;
  wire        _lfsr_io_out_5;
  wire        _lfsr_io_out_6;
  wire        _lfsr_io_out_7;
  wire        _lfsr_io_out_8;
  wire        _lfsr_io_out_9;
  wire        _lfsr_io_out_10;
  wire        _lfsr_io_out_11;
  wire        _lfsr_io_out_12;
  wire        _lfsr_io_out_13;
  wire        _lfsr_io_out_14;
  wire        _lfsr_io_out_15;
  wire        _lfsr_io_out_16;
  wire        _lfsr_io_out_17;
  wire        _lfsr_io_out_18;
  wire        _lfsr_io_out_19;
  wire        _lfsr_io_out_20;
  wire        _lfsr_io_out_21;
  wire        _lfsr_io_out_22;
  wire        _lfsr_io_out_23;
  wire        _lfsr_io_out_24;
  wire        _lfsr_io_out_25;
  wire        _lfsr_io_out_26;
  wire        _lfsr_io_out_27;
  wire        _lfsr_io_out_28;
  wire        _lfsr_io_out_29;
  wire        _lfsr_io_out_30;
  wire        _lfsr_io_out_31;
  reg  [7:0]  casez_tmp;
  reg         eth_ten;
  wire        eth_neg = eth_ten & ~io_din_tx_en;
  reg  [15:0] eth_cnt;
  wire [16:0] _GEN = 17'h43 - {1'h0, eth_cnt};
  reg  [2:0]  state;
  reg  [1:0]  fcs_cnt;
  reg  [3:0]  ipg_cnt;
  wire        _T = state == 3'h0;
  wire        _T_1 = state == 3'h1;
  wire        eth_out = _T ? io_din_tx_en : _T_1 & ~eth_neg;
  wire        _GEN_0 = eth_neg & _GEN[16];
  wire        _T_4 = state == 3'h2;
  wire        eth_pad = ~_T & (_T_1 ? eth_neg & ~(_GEN[16]) : _T_4 & ~(_GEN[16]));
  wire        _T_6 = state == 3'h3;
  wire        eth_fcs = ~_T & (_T_1 ? _GEN_0 : _T_4 ? _GEN[16] : _T_6);
  wire        _T_8 = state == 3'h4;
  wire        _GEN_1 = _T | _T_1 | _T_4 | _T_6;
  wire        _lfsr_io_seed_valid_T = eth_out | eth_pad;
  wire [31:0] crc_din =
    _lfsr_io_seed_valid_T
      ? (eth_cnt == 16'h8
           ? {24'hFFFFFF, ~io_din_txd}
           : (|(eth_cnt[15:3]))
               ? {32{~eth_pad}} & {24'h0, io_din_txd}
                 ^ {_lfsr_io_out_31,
                    _lfsr_io_out_30,
                    _lfsr_io_out_29,
                    _lfsr_io_out_28,
                    _lfsr_io_out_27,
                    _lfsr_io_out_26,
                    _lfsr_io_out_25,
                    _lfsr_io_out_24,
                    _lfsr_io_out_23,
                    _lfsr_io_out_22,
                    _lfsr_io_out_21,
                    _lfsr_io_out_20,
                    _lfsr_io_out_19,
                    _lfsr_io_out_18,
                    _lfsr_io_out_17,
                    _lfsr_io_out_16,
                    _lfsr_io_out_15,
                    _lfsr_io_out_14,
                    _lfsr_io_out_13,
                    _lfsr_io_out_12,
                    _lfsr_io_out_11,
                    _lfsr_io_out_10,
                    _lfsr_io_out_9,
                    _lfsr_io_out_8,
                    _lfsr_io_out_7,
                    _lfsr_io_out_6,
                    _lfsr_io_out_5,
                    _lfsr_io_out_4,
                    _lfsr_io_out_3,
                    _lfsr_io_out_2,
                    _lfsr_io_out_1,
                    _lfsr_io_out_0}
               : 32'h0)
      : 32'h0;
  always @(*) begin
    casez (fcs_cnt)
      2'b00:
        casez_tmp =
          ~{_lfsr_io_out_7,
            _lfsr_io_out_6,
            _lfsr_io_out_5,
            _lfsr_io_out_4,
            _lfsr_io_out_3,
            _lfsr_io_out_2,
            _lfsr_io_out_1,
            _lfsr_io_out_0};
      2'b01:
        casez_tmp =
          ~{_lfsr_io_out_15,
            _lfsr_io_out_14,
            _lfsr_io_out_13,
            _lfsr_io_out_12,
            _lfsr_io_out_11,
            _lfsr_io_out_10,
            _lfsr_io_out_9,
            _lfsr_io_out_8};
      2'b10:
        casez_tmp =
          ~{_lfsr_io_out_23,
            _lfsr_io_out_22,
            _lfsr_io_out_21,
            _lfsr_io_out_20,
            _lfsr_io_out_19,
            _lfsr_io_out_18,
            _lfsr_io_out_17,
            _lfsr_io_out_16};
      default:
        casez_tmp =
          ~{_lfsr_io_out_31,
            _lfsr_io_out_30,
            _lfsr_io_out_29,
            _lfsr_io_out_28,
            _lfsr_io_out_27,
            _lfsr_io_out_26,
            _lfsr_io_out_25,
            _lfsr_io_out_24};
    endcase
  end // always @(*)
  wire        _T_9 = ipg_cnt == 4'hB;
  always @(posedge clock) begin
    eth_ten <= io_din_tx_en;
    if (reset) begin
      eth_cnt <= 16'h0;
      state <= 3'h0;
      fcs_cnt <= 2'h0;
      ipg_cnt <= 4'h0;
    end
    else begin
      if (io_din_tx_en & eth_out | eth_pad)
        eth_cnt <= eth_cnt + 16'h1;
      else
        eth_cnt <= 16'h0;
      if (_T) begin
        if (io_din_tx_en)
          state <= 3'h1;
      end
      else if (_T_1) begin
        if (eth_neg)
          state <= {2'h1, _GEN[16]};
        if (_GEN_0)
          fcs_cnt <= 2'h1;
      end
      else if (_T_4) begin
        if (_GEN[16]) begin
          state <= 3'h3;
          fcs_cnt <= 2'h1;
        end
      end
      else if (_T_6) begin
        if (&fcs_cnt) begin
          state <= 3'h4;
          fcs_cnt <= 2'h0;
        end
        else
          fcs_cnt <= fcs_cnt + 2'h1;
      end
      else if (_T_8 & _T_9)
        state <= 3'h0;
      if (_GEN_1 | ~_T_8) begin
      end
      else if (_T_9)
        ipg_cnt <= 4'h0;
      else
        ipg_cnt <= ipg_cnt + 4'h1;
    end
  end // always @(posedge)
  GaloisLFSR lfsr (
    .clock           (clock),
    .reset           (reset),
    .io_seed_valid   (_lfsr_io_seed_valid_T),
    .io_seed_bits_0  (crc_din[0]),
    .io_seed_bits_1  (crc_din[1]),
    .io_seed_bits_2  (crc_din[2]),
    .io_seed_bits_3  (crc_din[3]),
    .io_seed_bits_4  (crc_din[4]),
    .io_seed_bits_5  (crc_din[5]),
    .io_seed_bits_6  (crc_din[6]),
    .io_seed_bits_7  (crc_din[7]),
    .io_seed_bits_8  (crc_din[8]),
    .io_seed_bits_9  (crc_din[9]),
    .io_seed_bits_10 (crc_din[10]),
    .io_seed_bits_11 (crc_din[11]),
    .io_seed_bits_12 (crc_din[12]),
    .io_seed_bits_13 (crc_din[13]),
    .io_seed_bits_14 (crc_din[14]),
    .io_seed_bits_15 (crc_din[15]),
    .io_seed_bits_16 (crc_din[16]),
    .io_seed_bits_17 (crc_din[17]),
    .io_seed_bits_18 (crc_din[18]),
    .io_seed_bits_19 (crc_din[19]),
    .io_seed_bits_20 (crc_din[20]),
    .io_seed_bits_21 (crc_din[21]),
    .io_seed_bits_22 (crc_din[22]),
    .io_seed_bits_23 (crc_din[23]),
    .io_seed_bits_24 (crc_din[24]),
    .io_seed_bits_25 (crc_din[25]),
    .io_seed_bits_26 (crc_din[26]),
    .io_seed_bits_27 (crc_din[27]),
    .io_seed_bits_28 (crc_din[28]),
    .io_seed_bits_29 (crc_din[29]),
    .io_seed_bits_30 (crc_din[30]),
    .io_seed_bits_31 (crc_din[31]),
    .io_out_0        (_lfsr_io_out_0),
    .io_out_1        (_lfsr_io_out_1),
    .io_out_2        (_lfsr_io_out_2),
    .io_out_3        (_lfsr_io_out_3),
    .io_out_4        (_lfsr_io_out_4),
    .io_out_5        (_lfsr_io_out_5),
    .io_out_6        (_lfsr_io_out_6),
    .io_out_7        (_lfsr_io_out_7),
    .io_out_8        (_lfsr_io_out_8),
    .io_out_9        (_lfsr_io_out_9),
    .io_out_10       (_lfsr_io_out_10),
    .io_out_11       (_lfsr_io_out_11),
    .io_out_12       (_lfsr_io_out_12),
    .io_out_13       (_lfsr_io_out_13),
    .io_out_14       (_lfsr_io_out_14),
    .io_out_15       (_lfsr_io_out_15),
    .io_out_16       (_lfsr_io_out_16),
    .io_out_17       (_lfsr_io_out_17),
    .io_out_18       (_lfsr_io_out_18),
    .io_out_19       (_lfsr_io_out_19),
    .io_out_20       (_lfsr_io_out_20),
    .io_out_21       (_lfsr_io_out_21),
    .io_out_22       (_lfsr_io_out_22),
    .io_out_23       (_lfsr_io_out_23),
    .io_out_24       (_lfsr_io_out_24),
    .io_out_25       (_lfsr_io_out_25),
    .io_out_26       (_lfsr_io_out_26),
    .io_out_27       (_lfsr_io_out_27),
    .io_out_28       (_lfsr_io_out_28),
    .io_out_29       (_lfsr_io_out_29),
    .io_out_30       (_lfsr_io_out_30),
    .io_out_31       (_lfsr_io_out_31)
  );
  assign io_din_hold = eth_pad | eth_fcs | ~_GEN_1 & _T_8;
  assign io_out_tx_en = eth_fcs | eth_pad | eth_out & io_din_tx_en;
  assign io_out_txd = eth_fcs ? casez_tmp : eth_pad | ~eth_out ? 8'h0 : io_din_txd;
endmodule

module LiteGEMTxQue(
  input         clock,
                reset,
                io_gtx_clk,
  input  [63:0] io_txq_ad,
  input         io_txq_en,
                io_dma_do_ready,
                io_dma_di_valid,
                io_dma_di_last,
  input  [63:0] io_dma_di_data,
  output        io_tx_clk,
  output [7:0]  io_txd,
  output        io_tx_en,
                io_txq_ok,
                io_dma_we,
  output [63:0] io_dma_ad,
  output [3:0]  io_dma_sz,
  output        io_dma_do_valid,
                io_dma_do_last,
  output [63:0] io_dma_do_data,
  output        io_dma_di_ready,
                io_tx_ubr
);

  wire         _io_dma_di_ready_output;
  wire         _txd_fcs_io_din_hold;
  wire         _fifo_io_enq_ready;
  wire         _fifo_io_deq_valid;
  wire         _fifo_io_deq_last;
  wire [7:0]   _fifo_io_deq_data;
  reg  [3:0]   casez_tmp;
  reg  [63:0]  casez_tmp_0;
  reg  [2:0]   casez_tmp_1;
  reg  [2:0]   state;
  reg  [7:0]   txq_ptr;
  reg          txq_ren;
  reg          txq_fwd;
  reg  [127:0] dsc_mem;
  reg  [6:0]   dsc_ptr;
  wire [190:0] _dsc_nxt_T = {127'h0, io_dma_di_data} << dsc_ptr;
  wire [92:0]  _GEN = dsc_mem[95:3] | {32'h0, _dsc_nxt_T[63:3]};
  wire [12:0]  pkt_tot = {1'h0, dsc_mem[43:32]} + {10'h0, dsc_mem[2:0]};
  reg  [63:0]  pkt_adr;
  reg  [3:0]   pkt_gap;
  reg  [11:0]  req_ptr;
  reg  [11:0]  rsp_ptr;
  wire [12:0]  _GEN_0 = pkt_tot - {1'h0, req_ptr};
  wire [12:0]  _GEN_1 = pkt_tot - {1'h0, rsp_ptr};
  wire         _T = state == 3'h0;
  wire         _T_1 = state == 3'h1;
  wire         _T_2 = state == 3'h2;
  wire         _T_6 = io_dma_di_valid & _io_dma_di_ready_output;
  wire         _T_7 = _T_6 & io_dma_di_last;
  wire         _GEN_2 = _T | _T_1;
  wire         _T_9 = state == 3'h3;
  wire         _T_12 = state == 3'h4;
  wire         _T_14 = io_dma_di_valid & _io_dma_di_ready_output & io_dma_di_last;
  wire         _GEN_3 = _T_14 & _GEN_1[12];
  wire         _T_15 = state == 3'h5;
  wire         _GEN_4 = ~_T & (_T_1 | ~_T_2 & (_T_9 | ~_T_12 & _T_15));
  wire [127:0] _io_dma_do_data_T = dsc_mem >> dsc_ptr;
  wire         _GEN_5 = _T_9 | _T_12;
  wire         _GEN_6 = _T | _T_1 | _T_2 | _GEN_5;
  wire         _GEN_7 = _T_12 | ~_T_15;
  wire [3:0]   _GEN_8 = _GEN_7 ? 4'h0 : 4'h3;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp = 4'h0;
      3'b001:
        casez_tmp = 4'h3;
      3'b010:
        casez_tmp = 4'h0;
      3'b011:
        casez_tmp = 4'h6;
      3'b100:
        casez_tmp = 4'h0;
      3'b101:
        casez_tmp = _GEN_8;
      3'b110:
        casez_tmp = _GEN_8;
      default:
        casez_tmp = _GEN_8;
    endcase
  end // always @(*)
  wire [63:0]  _GEN_9 = {56'h0, txq_ptr};
  wire [63:0]  _GEN_10 = _GEN_7 ? 64'h0 : io_txq_ad + _GEN_9;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_0 = 64'h0;
      3'b001:
        casez_tmp_0 = io_txq_ad + _GEN_9;
      3'b010:
        casez_tmp_0 = 64'h0;
      3'b011:
        casez_tmp_0 = pkt_adr;
      3'b100:
        casez_tmp_0 = 64'h0;
      3'b101:
        casez_tmp_0 = _GEN_10;
      3'b110:
        casez_tmp_0 = _GEN_10;
      default:
        casez_tmp_0 = _GEN_10;
    endcase
  end // always @(*)
  wire         _T_20 = io_dma_di_valid & _io_dma_di_ready_output & io_dma_di_last;
  wire         _T_22 = pkt_gap == 4'hC;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_1 = {2'h0, io_txq_en};
      3'b001:
        casez_tmp_1 = io_dma_do_ready ? 3'h2 : state;
      3'b010:
        casez_tmp_1 = _T_7 ? (_GEN[60] ? 3'h0 : 3'h3) : state;
      3'b011:
        casez_tmp_1 = io_dma_do_ready & _GEN_0[12] ? 3'h4 : state;
      3'b100:
        casez_tmp_1 = _GEN_3 ? 3'h5 : state;
      3'b101:
        casez_tmp_1 = io_dma_do_ready ? 3'h6 : state;
      3'b110:
        casez_tmp_1 = _T_20 ? 3'h7 : state;
      default:
        casez_tmp_1 = (&state) & _T_22 ? 3'h1 : state;
    endcase
  end // always @(*)
  reg  [11:0]  din_cnt;
  wire [12:0]  din_rem = {1'h0, din_cnt} - {1'h0, pkt_tot[11:0]};
  wire         eth_eop = _GEN_1[12] & dsc_mem[47];
  reg          eth_emp;
  assign _io_dma_di_ready_output = txq_fwd & _fifo_io_enq_ready | txq_ren | eth_emp;
  reg  [3:0]   txd_cnt;
  wire         _GEN_11 = txd_cnt[3] & ~_txd_fcs_io_din_hold;
  wire         _T_30 = _fifo_io_deq_valid & ~_txd_fcs_io_din_hold;
  wire         _GEN_12 = _T_9 & io_dma_do_ready;
  wire         _GEN_13 = _T | _T_1 | _T_2;
  wire         _GEN_14 = _T_12 & _GEN_3;
  wire         _T_18 = state == 3'h6;
  wire         _GEN_15 = _T_18 & _T_20;
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;
      txq_ptr <= 8'h0;
      txq_ren <= 1'h0;
      txq_fwd <= 1'h0;
      dsc_mem <= 128'h0;
      dsc_ptr <= 7'h0;
      pkt_adr <= 64'h0;
      pkt_gap <= 4'h0;
      req_ptr <= 12'h41;
      rsp_ptr <= 12'h41;
      din_cnt <= 12'h8;
      eth_emp <= 1'h0;
    end
    else begin
      state <= casez_tmp_1;
      if (_T | _T_1 | _T_2 | _T_9 | _T_12 | _T_15 | ~_GEN_15) begin
      end
      else if (dsc_mem[62])
        txq_ptr <= 8'h0;
      else
        txq_ptr <= txq_ptr + 8'h10;
      if (_T) begin
      end
      else begin
        txq_ren <=
          _T_1
          | (_T_2
               ? ~_T_7 & txq_ren
               : _GEN_5
                   ? txq_ren
                   : _T_15 ? io_dma_do_ready | txq_ren : ~_GEN_15 & txq_ren);
        if (_T_1) begin
          if (io_dma_do_ready)
            dsc_mem <= 128'h0;
        end
        else if (_T_2)
          dsc_mem <= {128{_T_6}} & {64'h0, _dsc_nxt_T[63:0]} | dsc_mem;
        else
          dsc_mem <= {128{~_T_9}} & {64'h0, _GEN_14, 63'h0} | dsc_mem;
      end
      if (_GEN_13) begin
      end
      else begin
        txq_fwd <= _T_9 | ~_GEN_14 & txq_fwd;
        if (_T_9) begin
          if (io_dma_di_valid & _io_dma_di_ready_output & io_dma_di_last)
            rsp_ptr <= rsp_ptr + 12'h40;
        end
        else if (_T_12 & _T_14) begin
          if (_GEN_1[12])
            rsp_ptr <= 12'h41;
          else
            rsp_ptr <= rsp_ptr + 12'h40;
        end
      end
      if (~_GEN_2) begin
        if (_T_2) begin
          if (_T_7) begin
            dsc_ptr <= 7'h0;
            pkt_adr <= {_GEN[92:61], _GEN[28:0], 3'h0};
          end
          else if (_T_6)
            dsc_ptr <= dsc_ptr - 7'h40;
        end
        else begin
          if (_GEN_5 | ~(_T_15 & io_dma_do_ready)) begin
          end
          else
            dsc_ptr <= 7'h0;
          if (_GEN_12)
            pkt_adr <= pkt_adr + 64'h40;
        end
      end
      if (_T | _T_1 | _T_2 | _T_9 | _T_12 | _T_15 | _T_18 | ~(&state)) begin
      end
      else if (_T_22)
        pkt_gap <= 4'h0;
      else
        pkt_gap <= pkt_gap + 4'h1;
      if (_GEN_13 | ~_GEN_12) begin
      end
      else if (_GEN_0[12])
        req_ptr <= 12'h41;
      else
        req_ptr <= req_ptr + 12'h40;
      if (io_dma_di_valid & _io_dma_di_ready_output) begin
        if (_GEN_1[12] & io_dma_di_last)
          din_cnt <= 12'h8;
        else if (txq_fwd)
          din_cnt <= din_cnt + 12'h8;
        eth_emp <= ~io_dma_di_last & (eth_eop & ~(din_rem[12]) | eth_emp);
      end
    end
  end // always @(posedge)
  always @(posedge io_gtx_clk) begin
    if (reset)
      txd_cnt <= 4'h0;
    else if (txd_cnt[3]) begin
      if (_fifo_io_deq_valid & _GEN_11 & _fifo_io_deq_last)
        txd_cnt <= 4'h0;
    end
    else if (_T_30)
      txd_cnt <= txd_cnt + 4'h1;
  end // always @(posedge)
  PacketQueue fifo (
    .reset        (reset),
    .io_enq_clk   (clock),
    .io_deq_clk   (io_gtx_clk),
    .io_enq_shr   (dsc_mem[5:0]),
    .io_enq_valid (txq_fwd & io_dma_di_valid & ~eth_emp),
    .io_enq_last  (eth_eop & ~(din_rem[12])),
    .io_enq_data  (io_dma_di_data),
    .io_enq_empty (din_rem[12] ? 3'h0 : din_rem[2:0]),
    .io_deq_ready (_GEN_11),
    .io_enq_ready (_fifo_io_enq_ready),
    .io_deq_valid (_fifo_io_deq_valid),
    .io_deq_last  (_fifo_io_deq_last),
    .io_deq_data  (_fifo_io_deq_data)
  );
  LiteGEMTxFCS txd_fcs (
    .clock        (io_gtx_clk),
    .reset        (reset),
    .io_din_tx_en (_fifo_io_deq_valid),
    .io_din_txd
      (txd_cnt[3] ? _fifo_io_deq_data : _T_30 ? {txd_cnt == 4'h7, 7'h55} : 8'h0),
    .io_din_hold  (_txd_fcs_io_din_hold),
    .io_out_tx_en (io_tx_en),
    .io_out_txd   (io_txd)
  );
  assign io_tx_clk = io_gtx_clk;
  assign io_txq_ok = ~_T & _T_1;
  assign io_dma_we = ~_GEN_6 & _T_15;
  assign io_dma_ad = casez_tmp_0;
  assign io_dma_sz = casez_tmp;
  assign io_dma_do_valid = _GEN_4;
  assign io_dma_do_last = _GEN_4;
  assign io_dma_do_data = _GEN_6 | ~_T_15 ? 64'h0 : _io_dma_do_data_T[63:0];
  assign io_dma_di_ready = _io_dma_di_ready_output;
  assign io_tx_ubr = ~_GEN_2 & _T_2 & _T_7 & _GEN[60];
endmodule

module PacketQueue_1(
  input         reset,
                io_enq_clk,
                io_deq_clk,
                io_enq_valid,
                io_enq_last,
  input  [7:0]  io_enq_data,
  input  [16:0] io_enq_meta,
  input         io_deq_ready,
  output        io_enq_ready,
                io_deq_valid,
                io_deq_last,
  output [63:0] io_deq_data,
  output [16:0] io_deq_meta
);

  wire        _io_deq_valid_output;
  reg  [8:0]  buf_e2r;
  wire        _io_enq_ready_T;
  reg  [8:0]  buf_h2w;
  reg  [6:0]  pkt_e2r;
  reg  [6:0]  pkt_h2w;
  wire [2:0]  _emp_mem_ext_R0_data;
  wire [16:0] _packets_ext_R0_data;
  wire [64:0] _buffer_ext_R0_data;
  wire [8:0]  buf_hq0 = buf_h2w ^ {1'h0, buf_h2w[8:1]};
  wire [8:0]  buf_eq0 = buf_e2r ^ {1'h0, buf_e2r[8:1]};
  wire [6:0]  pkt_hq0 = pkt_h2w ^ {2'h0, pkt_h2w[5:1]};
  wire [6:0]  pkt_eq0 = pkt_e2r ^ {2'h0, pkt_e2r[5:1]};
  reg  [6:0]  pkt_eq1;
  reg  [6:0]  pkt_eq2;
  wire        enq_act = io_enq_valid & ~_io_enq_ready_T;
  reg  [6:0]  pkt_hq1;
  reg  [6:0]  pkt_hq2;
  wire        enq_eop = enq_act & io_enq_last;
  reg  [2:0]  emp_cnt;
  reg  [8:0]  buf_eq1;
  reg  [8:0]  buf_eq2;
  assign _io_enq_ready_T =
    buf_hq0 == {~(buf_eq2[8:7]), buf_eq2[6:0]}
    | pkt_hq0 == {~(pkt_eq2[6:5]), pkt_eq2[4:0]};
  reg  [2:0]  seg_cnt;
  reg  [55:0] seg_buf;
  reg         seg_eop;
  wire        _T_19 = (&seg_cnt) | enq_eop;
  reg  [8:0]  buf_hq1;
  reg  [8:0]  buf_hq2;
  assign _io_deq_valid_output = buf_eq0 != buf_hq2 & pkt_eq0 != pkt_hq2;
  always @(posedge io_enq_clk) begin
    if (reset) begin
      pkt_h2w <= 7'h0;
      emp_cnt <= 3'h7;
      buf_h2w <= 9'h0;
      buf_eq1 <= 9'h0;
      buf_eq2 <= 9'h0;
      seg_cnt <= 3'h0;
      seg_buf <= 56'h0;
      seg_eop <= 1'h0;
    end
    else begin
      if (enq_act & io_enq_last) begin
        if (&(pkt_h2w[5:0]))
          pkt_h2w <= {~(pkt_h2w[6]), 6'h0};
        else
          pkt_h2w <= pkt_h2w + 7'h1;
      end
      if (enq_act) begin
        if (emp_cnt == 3'h0 | io_enq_last)
          emp_cnt <= 3'h7;
        else
          emp_cnt <= emp_cnt - 3'h1;
        if (enq_eop | (&seg_cnt))
          seg_cnt <= 3'h0;
        else
          seg_cnt <= seg_cnt + 3'h1;
        if (_T_19)
          seg_buf <= 56'h0;
        else
          seg_buf <= {io_enq_data, seg_buf[55:8]};
        seg_eop <= ~_T_19 & (seg_eop | enq_eop);
      end
      if (enq_act & _T_19) begin
        if (&(buf_h2w[7:0]))
          buf_h2w <= {~(buf_h2w[8]), 8'h0};
        else
          buf_h2w <= buf_h2w + 9'h1;
      end
      buf_eq1 <= buf_eq0;
      buf_eq2 <= buf_eq1;
    end
    pkt_eq1 <= pkt_eq0;
    pkt_eq2 <= pkt_eq1;
  end // always @(posedge)
  wire        _T_23 = _io_deq_valid_output & io_deq_ready;
  always @(posedge io_deq_clk) begin
    if (reset) begin
      pkt_e2r <= 7'h0;
      buf_e2r <= 9'h0;
      buf_hq1 <= 9'h0;
      buf_hq2 <= 9'h0;
    end
    else begin
      if (_T_23 & _buffer_ext_R0_data[64]) begin
        if (&(pkt_e2r[5:0]))
          pkt_e2r <= {~(pkt_e2r[6]), 6'h0};
        else
          pkt_e2r <= pkt_e2r + 7'h1;
      end
      if (_T_23) begin
        if (&(buf_e2r[7:0]))
          buf_e2r <= {~(buf_e2r[8]), 8'h0};
        else
          buf_e2r <= buf_e2r + 9'h1;
      end
      buf_hq1 <= buf_hq0;
      buf_hq2 <= buf_hq1;
    end
    pkt_hq1 <= pkt_hq0;
    pkt_hq2 <= pkt_hq1;
  end // always @(posedge)
  buffer_combMem buffer_ext (
    .R0_addr (buf_e2r[7:0]),
    .R0_en   (1'h1),
    .R0_clk  (io_deq_clk),
    .W0_addr (buf_h2w[7:0]),
    .W0_en   (enq_act & _T_19),
    .W0_clk  (io_enq_clk),
    .W0_data ({enq_eop | seg_eop, io_enq_data, seg_buf}),
    .R0_data (_buffer_ext_R0_data)
  );
  packets_combMem packets_ext (
    .R0_addr (pkt_e2r[5:0]),
    .R0_en   (1'h1),
    .R0_clk  (io_deq_clk),
    .W0_addr (pkt_h2w[5:0]),
    .W0_en   (enq_act),
    .W0_clk  (io_enq_clk),
    .W0_data (io_enq_meta),
    .R0_data (_packets_ext_R0_data)
  );
  emp_mem_combMem emp_mem_ext (
    .R0_addr (pkt_e2r[5:0]),
    .R0_en   (1'h1),
    .R0_clk  (io_deq_clk),
    .W0_addr (pkt_h2w[5:0]),
    .W0_en   (enq_act),
    .W0_clk  (io_enq_clk),
    .W0_data (emp_cnt),
    .R0_data (_emp_mem_ext_R0_data)
  );
  assign io_enq_ready = ~_io_enq_ready_T;
  assign io_deq_valid = _io_deq_valid_output;
  assign io_deq_last = _buffer_ext_R0_data[64];
  assign io_deq_data =
    _buffer_ext_R0_data[64]
      ? _buffer_ext_R0_data[63:0] >> {58'h0, _emp_mem_ext_R0_data, 3'h0}
      : _buffer_ext_R0_data[63:0];
  assign io_deq_meta = _io_deq_valid_output ? _packets_ext_R0_data : 17'h0;
endmodule

module LiteGEMRxQue(
  input         clock,
                reset,
                io_rx_clk,
  input  [7:0]  io_rxd,
  input         io_rx_dv,
  input  [63:0] io_rxq_ad,
  input         io_rxq_en,
  input  [1:0]  io_rxq_of,
  input         io_dma_do_ready,
                io_dma_di_valid,
                io_dma_di_last,
  input  [63:0] io_dma_di_data,
  output        io_dma_we,
  output [63:0] io_dma_ad,
  output [3:0]  io_dma_sz,
  output        io_dma_do_valid,
                io_dma_do_last,
  output [63:0] io_dma_do_data,
  output        io_dma_di_ready,
                io_rx_cmp
);

  wire         _fifo_io_enq_ready;
  wire         _fifo_io_deq_valid;
  wire         _fifo_io_deq_last;
  wire [63:0]  _fifo_io_deq_data;
  wire [16:0]  _fifo_io_deq_meta;
  reg  [127:0] casez_tmp;
  reg  [3:0]   casez_tmp_0;
  reg  [63:0]  casez_tmp_1;
  reg  [2:0]   casez_tmp_2;
  reg  [2:0]   rx_mod;
  reg  [1:0]   rxq_of_q1;
  reg  [1:0]   rxq_of_q2;
  reg  [63:0]  buffer;
  reg  [15:0]  rx_cnt;
  reg  [7:0]   fc_cnt;
  wire         _T_6 = rx_mod == 3'h1;
  wire [3:0]   _GEN = {2'h1, rxq_of_q2} + rx_cnt[3:0];
  wire         _T_10 = rx_mod == 3'h2;
  wire         _T_12 = rx_mod == 3'h3;
  wire         _T_14 = rx_mod == 3'h4;
  wire         fc_eop = fc_cnt == 8'h10;
  wire         _GEN_0 = (|rx_mod) & (_T_6 ? _GEN[3] : _T_10 | ~_T_12 & _T_14);
  wire [23:0]  _fifo_io_enq_data_T_2 = buffer[63:40] >> fc_cnt;
  wire         _GEN_1 = ~(|rx_mod) | _T_6 | _T_10 | _T_12;
  reg  [2:0]   state;
  reg  [8:0]   rxq_ptr;
  reg          rxq_ren;
  reg  [127:0] dsc_mem;
  reg  [6:0]   dsc_ptr;
  wire [190:0] _dsc_nxt_T = {127'h0, io_dma_di_data} << dsc_ptr;
  wire [95:0]  _GEN_2 = dsc_mem[95:0] | _dsc_nxt_T[95:0];
  reg  [63:0]  pkt_adr;
  reg  [11:0]  req_ptr;
  reg  [11:0]  rsp_ptr;
  reg  [11:0]  frg_ptr;
  wire         frg_eop = frg_ptr == 12'h38;
  reg  [15:0]  eth_tot;
  wire         _T_17 = state == 3'h0;
  wire         _T_18 = state == 3'h1;
  wire         _T_19 = state == 3'h2;
  wire         _T_23 = io_dma_di_valid & rxq_ren;
  wire         _T_24 = _T_23 & io_dma_di_last;
  wire         _T_25 = state == 3'h3;
  wire         _GEN_3 = _T_17 | _T_18 | _T_19;
  wire         _GEN_4 = io_dma_do_ready & frg_eop;
  wire         _GEN_5 = io_dma_do_ready & _fifo_io_deq_last;
  wire         _T_28 = state == 3'h4;
  wire         _T_31 = state == 3'h5;
  wire         _T_33 = io_dma_di_valid & rxq_ren & io_dma_di_last;
  wire [11:0]  _T_35 = rsp_ptr + 12'h40;
  wire         _T_36 = _T_35 == req_ptr;
  wire         _GEN_6 = _T_33 & _T_36;
  wire         _GEN_7 = _T_31 & _GEN_6;
  wire         _GEN_8 = _T_25 | _T_28;
  wire [127:0] _GEN_9 =
    _GEN_8 | ~_GEN_7
      ? dsc_mem
      : {64'h0,
         dsc_mem[63:44] | 20'hC,
         eth_tot[11:0] - {10'h0, io_rxq_of},
         dsc_mem[31:1],
         1'h1};
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp = dsc_mem;
      3'b001:
        casez_tmp = io_dma_do_ready ? 128'h0 : dsc_mem;
      3'b010:
        casez_tmp = {128{_T_23}} & _dsc_nxt_T[127:0] | dsc_mem;
      3'b011:
        casez_tmp = dsc_mem;
      3'b100:
        casez_tmp = dsc_mem;
      3'b101:
        casez_tmp = _GEN_9;
      3'b110:
        casez_tmp = _GEN_9;
      default:
        casez_tmp = _GEN_9;
    endcase
  end // always @(*)
  wire         _T_37 = state == 3'h6;
  wire         _GEN_10 = ~_T_31 & _T_37;
  wire [127:0] _io_dma_do_data_T = dsc_mem >> dsc_ptr;
  wire         _GEN_11 = _T_28 | _T_31;
  wire         _GEN_12 = _T_31 | ~_T_37;
  wire [3:0]   _GEN_13 = _GEN_12 ? 4'h0 : 4'h3;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_0 = 4'h0;
      3'b001:
        casez_tmp_0 = 4'h3;
      3'b010:
        casez_tmp_0 = 4'h0;
      3'b011:
        casez_tmp_0 = 4'h6;
      3'b100:
        casez_tmp_0 = 4'h6;
      3'b101:
        casez_tmp_0 = 4'h0;
      3'b110:
        casez_tmp_0 = _GEN_13;
      default:
        casez_tmp_0 = _GEN_13;
    endcase
  end // always @(*)
  wire [63:0]  _GEN_14 = {55'h0, rxq_ptr};
  wire [63:0]  _GEN_15 = _GEN_12 ? 64'h0 : io_rxq_ad + _GEN_14;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_1 = 64'h0;
      3'b001:
        casez_tmp_1 = io_rxq_ad + _GEN_14;
      3'b010:
        casez_tmp_1 = 64'h0;
      3'b011:
        casez_tmp_1 = pkt_adr;
      3'b100:
        casez_tmp_1 = pkt_adr;
      3'b101:
        casez_tmp_1 = 64'h0;
      3'b110:
        casez_tmp_1 = _GEN_15;
      default:
        casez_tmp_1 = _GEN_15;
    endcase
  end // always @(*)
  wire         _T_42 = io_dma_di_valid & rxq_ren & io_dma_di_last;
  wire         _GEN_16 = (&state) & _T_42;
  wire         _GEN_17 = _T_17 | _T_18 | _T_19 | _T_25 | _T_28 | _T_31 | _T_37;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp_2 = {2'h0, io_rxq_en};
      3'b001:
        casez_tmp_2 = io_dma_do_ready ? 3'h2 : state;
      3'b010:
        casez_tmp_2 = _T_24 ? (_GEN_2[0] ? 3'h0 : 3'h3) : state;
      3'b011:
        casez_tmp_2 = _GEN_5 ? {2'h2, frg_eop} : state;
      3'b100:
        casez_tmp_2 = _GEN_4 ? 3'h5 : state;
      3'b101:
        casez_tmp_2 = _GEN_6 ? 3'h6 : state;
      3'b110:
        casez_tmp_2 = io_dma_do_ready ? 3'h7 : state;
      default:
        casez_tmp_2 = _GEN_16 ? 3'h1 : state;
    endcase
  end // always @(*)
  wire         _T_16 = _GEN_0 & _fifo_io_enq_ready & fc_eop;
  wire         _GEN_18 = _T_14 & _T_16;
  always @(posedge io_rx_clk) begin
    if (reset) begin
      rx_mod <= 3'h0;
      buffer <= 64'h0;
      rx_cnt <= 16'h0;
      fc_cnt <= 8'h0;
    end
    else begin
      if (|rx_mod) begin
        if (_T_6) begin
          if (io_rx_dv) begin
            if (rx_cnt == 16'h3)
              rx_mod <= 3'h2;
          end
          else
            rx_mod <= 3'h0;
        end
        else if (_T_10) begin
          if (io_rx_dv) begin
          end
          else
            rx_mod <= 3'h4;
        end
        else if (_T_12) begin
          if (io_rx_dv) begin
          end
          else
            rx_mod <= 3'h0;
        end
        else if (_GEN_18)
          rx_mod <= 3'h0;
      end
      else if (io_rx_dv & io_rxd == 8'hD5 & buffer[63:8] == 56'h55555555555555)
        rx_mod <= 3'h1;
      if (io_rx_dv)
        buffer <= {io_rxd, buffer[63:8]};
      if (_GEN_1 | ~_GEN_18) begin
        if (io_rx_dv) begin
          if (|rx_mod)
            rx_cnt <= rx_cnt + 16'h1;
          else
            rx_cnt <= 16'h0;
        end
      end
      else
        rx_cnt <= 16'h0;
      if (_GEN_1 | ~_T_14) begin
      end
      else if (_T_16)
        fc_cnt <= 8'h0;
      else
        fc_cnt <= fc_cnt + 8'h8;
    end
    rxq_of_q1 <= io_rxq_of;
    rxq_of_q2 <= rxq_of_q1;
  end // always @(posedge)
  always @(posedge clock) begin
    if (reset) begin
      state <= 3'h0;
      rxq_ptr <= 9'h0;
      rxq_ren <= 1'h0;
      dsc_mem <= 128'h0;
      dsc_ptr <= 7'h0;
      pkt_adr <= 64'h0;
      req_ptr <= 12'h0;
      rsp_ptr <= 12'h0;
      frg_ptr <= 12'h0;
      eth_tot <= 16'h0;
    end
    else begin
      state <= casez_tmp_2;
      if (_GEN_17 | ~_GEN_16) begin
      end
      else if (dsc_mem[1])
        rxq_ptr <= 9'h0;
      else
        rxq_ptr <= rxq_ptr + 9'h10;
      if (_T_17) begin
      end
      else
        rxq_ren <=
          _T_18
          | (_T_19
               ? ~_T_24 & rxq_ren
               : _GEN_8
                 | (_T_31
                      ? rxq_ren
                      : _T_37 ? io_dma_do_ready | rxq_ren : ~_GEN_16 & rxq_ren));
      dsc_mem <= casez_tmp;
      if (~(_T_17 | _T_18)) begin
        if (_T_19) begin
          if (_T_24) begin
            dsc_ptr <= 7'h0;
            pkt_adr <= {_GEN_2[95:64], _GEN_2[31:0]};
          end
          else if (_T_23)
            dsc_ptr <= dsc_ptr - 7'h40;
        end
        else begin
          if (_T_25 | _GEN_11 | ~(_T_37 & io_dma_do_ready)) begin
          end
          else
            dsc_ptr <= 7'h0;
          if (_T_25) begin
            if (_GEN_4)
              pkt_adr <= pkt_adr + 64'h40;
          end
          else if (_T_28 & _GEN_4)
            pkt_adr <= pkt_adr + 64'h40;
        end
      end
      if (_GEN_3) begin
      end
      else if (_T_25) begin
        if (_GEN_4)
          req_ptr <= req_ptr + 12'h40;
        if (io_dma_di_valid & rxq_ren & io_dma_di_last)
          rsp_ptr <= rsp_ptr + 12'h40;
        if (io_dma_do_ready) begin
          if (frg_eop)
            frg_ptr <= 12'h0;
          else
            frg_ptr <= frg_ptr + 12'h8;
        end
      end
      else begin
        if (_T_28) begin
          if (_GEN_4)
            req_ptr <= req_ptr + 12'h40;
          if (io_dma_di_valid & rxq_ren & io_dma_di_last)
            rsp_ptr <= rsp_ptr + 12'h40;
        end
        else begin
          if (_GEN_7)
            req_ptr <= 12'h0;
          if (_T_31 & _T_33) begin
            if (_T_36)
              rsp_ptr <= 12'h0;
            else
              rsp_ptr <= _T_35;
          end
        end
        if (_T_28 & io_dma_do_ready) begin
          if (frg_eop)
            frg_ptr <= 12'h0;
          else
            frg_ptr <= frg_ptr + 12'h8;
        end
      end
      if (_GEN_3 | ~(_T_25 & _GEN_5)) begin
      end
      else
        eth_tot <= {4'h0, _fifo_io_deq_meta[11:0]};
    end
  end // always @(posedge)
  PacketQueue_1 fifo (
    .reset        (reset),
    .io_enq_clk   (io_rx_clk),
    .io_deq_clk   (clock),
    .io_enq_valid (_GEN_0),
    .io_enq_last  (~_GEN_1 & _T_14 & fc_eop),
    .io_enq_data
      (~(|rx_mod) | _T_6
         ? 8'h0
         : _T_10 ? buffer[39:32] : _T_12 | ~_T_14 ? 8'h0 : _fifo_io_enq_data_T_2[7:0]),
    .io_enq_meta  ({1'h0, rx_cnt}),
    .io_deq_ready (~_GEN_3 & _T_25 & io_dma_do_ready),
    .io_enq_ready (_fifo_io_enq_ready),
    .io_deq_valid (_fifo_io_deq_valid),
    .io_deq_last  (_fifo_io_deq_last),
    .io_deq_data  (_fifo_io_deq_data),
    .io_deq_meta  (_fifo_io_deq_meta)
  );
  assign io_dma_we = ~_GEN_3 & (_GEN_8 | _GEN_10);
  assign io_dma_ad = casez_tmp_1;
  assign io_dma_sz = casez_tmp_0;
  assign io_dma_do_valid =
    ~_T_17 & (_T_18 | ~_T_19 & (_T_25 ? _fifo_io_deq_valid : _T_28 | _GEN_10));
  assign io_dma_do_last = ~_T_17 & (_T_18 | ~_T_19 & (_GEN_8 ? frg_eop : _GEN_10));
  assign io_dma_do_data =
    _GEN_3
      ? 64'h0
      : _T_25 ? _fifo_io_deq_data : _GEN_11 | ~_T_37 ? 64'h0 : _io_dma_do_data_T[63:0];
  assign io_dma_di_ready = rxq_ren;
  assign io_rx_cmp = ~_GEN_17 & (&state) & _T_42;
endmodule

module LiteGEMAdapter(
  input         clock,
                reset,
                io_gtx_clk,
                io_port_rx_clk,
  input  [7:0]  io_port_rxd,
  input         io_port_rx_dv,
                io_port_status,
  input  [4:0]  io_port_phy_ad,
  input  [31:0] io_port_phy_id,
                io_ctl_in_NCR,
                io_ctl_in_NCFGR,
                io_ctl_in_RBQP,
                io_ctl_in_TBQP,
                io_ctl_in_MAN,
                io_ctl_in_TBQPH,
                io_ctl_in_RBQPH,
  input         io_dma_a_ready,
                io_dma_d_valid,
  input  [2:0]  io_dma_d_bits_opcode,
  input  [3:0]  io_dma_d_bits_size,
  input  [1:0]  io_dma_d_bits_source,
  input  [63:0] io_dma_d_bits_data,
  output [31:0] io_isr_value,
  output        io_port_tx_clk,
  output [7:0]  io_port_txd,
  output        io_port_tx_en,
  output [31:0] io_ctl_out_NSR,
  output        io_dma_a_valid,
  output [2:0]  io_dma_a_bits_opcode,
  output [3:0]  io_dma_a_bits_size,
  output [1:0]  io_dma_a_bits_source,
  output [31:0] io_dma_a_bits_address,
  output [63:0] io_dma_a_bits_data,
  output        io_dma_d_ready,
                io_man_en,
  output [31:0] io_man_do,
  output        io_ncr_en,
  output [31:0] io_ncr_do
);

  wire        _gem_rxq_io_dma_we;
  wire [63:0] _gem_rxq_io_dma_ad;
  wire [3:0]  _gem_rxq_io_dma_sz;
  wire        _gem_rxq_io_dma_do_valid;
  wire        _gem_rxq_io_dma_do_last;
  wire [63:0] _gem_rxq_io_dma_do_data;
  wire        _gem_rxq_io_dma_di_ready;
  wire        _gem_rxq_io_rx_cmp;
  wire        _gem_txq_io_txq_ok;
  wire        _gem_txq_io_dma_we;
  wire [63:0] _gem_txq_io_dma_ad;
  wire [3:0]  _gem_txq_io_dma_sz;
  wire        _gem_txq_io_dma_do_valid;
  wire        _gem_txq_io_dma_do_last;
  wire [63:0] _gem_txq_io_dma_do_data;
  wire        _gem_txq_io_dma_di_ready;
  wire        _gem_txq_io_tx_ubr;
  wire        _gem_dma_io_dma_do_0_valid;
  wire        _gem_dma_io_dma_do_0_last;
  wire [63:0] _gem_dma_io_dma_do_0_data;
  wire        _gem_dma_io_dma_do_1_valid;
  wire        _gem_dma_io_dma_do_1_last;
  wire [63:0] _gem_dma_io_dma_do_1_data;
  wire        _gem_dma_io_dma_di_0_ready;
  wire        _gem_dma_io_dma_di_1_ready;
  wire        _gem_phy_io_phy_rst;
  LiteGEMPhy gem_phy (
    .clock      (clock),
    .io_phy_id  (io_port_phy_id),
    .io_phy_ad  (io_port_phy_ad),
    .io_status  (io_port_status),
    .io_mpe     (io_ctl_in_NCR[4]),
    .io_man_di  (io_ctl_in_MAN),
    .io_man_do  (io_man_do),
    .io_man_en  (io_man_en),
    .io_phy_rst (_gem_phy_io_phy_rst)
  );
  LiteDMA gem_dma (
    .clock                 (clock),
    .reset                 (reset),
    .io_dma_do_0_ready     (_gem_txq_io_dma_di_ready),
    .io_dma_do_1_ready     (_gem_rxq_io_dma_di_ready),
    .io_dma_di_0_valid     (_gem_txq_io_dma_do_valid),
    .io_dma_di_0_last      (_gem_txq_io_dma_do_last),
    .io_dma_di_0_data      (_gem_txq_io_dma_do_data),
    .io_dma_di_1_valid     (_gem_rxq_io_dma_do_valid),
    .io_dma_di_1_last      (_gem_rxq_io_dma_do_last),
    .io_dma_di_1_data      (_gem_rxq_io_dma_do_data),
    .io_dma_ad_0           (_gem_txq_io_dma_ad[31:0]),
    .io_dma_ad_1           (_gem_rxq_io_dma_ad[31:0]),
    .io_dma_sz_0           (_gem_txq_io_dma_sz),
    .io_dma_sz_1           (_gem_rxq_io_dma_sz),
    .io_dma_we_0           (_gem_txq_io_dma_we),
    .io_dma_we_1           (_gem_rxq_io_dma_we),
    .io_dma_a_ready        (io_dma_a_ready),
    .io_dma_d_valid        (io_dma_d_valid),
    .io_dma_d_bits_opcode  (io_dma_d_bits_opcode),
    .io_dma_d_bits_size    (io_dma_d_bits_size),
    .io_dma_d_bits_source  (io_dma_d_bits_source),
    .io_dma_d_bits_data    (io_dma_d_bits_data),
    .io_dma_do_0_valid     (_gem_dma_io_dma_do_0_valid),
    .io_dma_do_0_last      (_gem_dma_io_dma_do_0_last),
    .io_dma_do_0_data      (_gem_dma_io_dma_do_0_data),
    .io_dma_do_1_valid     (_gem_dma_io_dma_do_1_valid),
    .io_dma_do_1_last      (_gem_dma_io_dma_do_1_last),
    .io_dma_do_1_data      (_gem_dma_io_dma_do_1_data),
    .io_dma_di_0_ready     (_gem_dma_io_dma_di_0_ready),
    .io_dma_di_1_ready     (_gem_dma_io_dma_di_1_ready),
    .io_dma_a_valid        (io_dma_a_valid),
    .io_dma_a_bits_opcode  (io_dma_a_bits_opcode),
    .io_dma_a_bits_size    (io_dma_a_bits_size),
    .io_dma_a_bits_source  (io_dma_a_bits_source),
    .io_dma_a_bits_address (io_dma_a_bits_address),
    .io_dma_a_bits_data    (io_dma_a_bits_data),
    .io_dma_d_ready        (io_dma_d_ready)
  );
  LiteGEMTxQue gem_txq (
    .clock           (clock),
    .reset           (reset | _gem_phy_io_phy_rst | io_ctl_in_NCR[5]),
    .io_gtx_clk      (io_gtx_clk),
    .io_txq_ad       ({io_ctl_in_TBQPH, io_ctl_in_TBQP}),
    .io_txq_en       (io_ctl_in_NCR[3] & io_ctl_in_NCR[9]),
    .io_dma_do_ready (_gem_dma_io_dma_di_0_ready),
    .io_dma_di_valid (_gem_dma_io_dma_do_0_valid),
    .io_dma_di_last  (_gem_dma_io_dma_do_0_last),
    .io_dma_di_data  (_gem_dma_io_dma_do_0_data),
    .io_tx_clk       (io_port_tx_clk),
    .io_txd          (io_port_txd),
    .io_tx_en        (io_port_tx_en),
    .io_txq_ok       (_gem_txq_io_txq_ok),
    .io_dma_we       (_gem_txq_io_dma_we),
    .io_dma_ad       (_gem_txq_io_dma_ad),
    .io_dma_sz       (_gem_txq_io_dma_sz),
    .io_dma_do_valid (_gem_txq_io_dma_do_valid),
    .io_dma_do_last  (_gem_txq_io_dma_do_last),
    .io_dma_do_data  (_gem_txq_io_dma_do_data),
    .io_dma_di_ready (_gem_txq_io_dma_di_ready),
    .io_tx_ubr       (_gem_txq_io_tx_ubr)
  );
  LiteGEMRxQue gem_rxq (
    .clock           (clock),
    .reset           (reset | _gem_phy_io_phy_rst | io_ctl_in_NCR[5]),
    .io_rx_clk       (io_port_rx_clk),
    .io_rxd          (io_port_rxd),
    .io_rx_dv        (io_port_rx_dv),
    .io_rxq_ad       ({io_ctl_in_RBQPH, io_ctl_in_RBQP}),
    .io_rxq_en       (io_ctl_in_NCR[2]),
    .io_rxq_of       (io_ctl_in_NCFGR[15:14]),
    .io_dma_do_ready (_gem_dma_io_dma_di_1_ready),
    .io_dma_di_valid (_gem_dma_io_dma_do_1_valid),
    .io_dma_di_last  (_gem_dma_io_dma_do_1_last),
    .io_dma_di_data  (_gem_dma_io_dma_do_1_data),
    .io_dma_we       (_gem_rxq_io_dma_we),
    .io_dma_ad       (_gem_rxq_io_dma_ad),
    .io_dma_sz       (_gem_rxq_io_dma_sz),
    .io_dma_do_valid (_gem_rxq_io_dma_do_valid),
    .io_dma_do_last  (_gem_rxq_io_dma_do_last),
    .io_dma_do_data  (_gem_rxq_io_dma_do_data),
    .io_dma_di_ready (_gem_rxq_io_dma_di_ready),
    .io_rx_cmp       (_gem_rxq_io_rx_cmp)
  );
  assign io_isr_value = {28'h0, _gem_txq_io_tx_ubr, 1'h0, _gem_rxq_io_rx_cmp, 1'h0};
  assign io_ctl_out_NSR = {29'h0, io_port_status, 2'h0};
  assign io_ncr_en = io_ctl_in_NCR[5] | _gem_txq_io_txq_ok;
  assign io_ncr_do =
    io_ctl_in_NCR[5]
      ? ~(~io_ctl_in_NCR | 32'h20)
      : _gem_txq_io_txq_ok ? ~(~io_ctl_in_NCR | 32'h200) : 32'h0;
endmodule

module LiteGEM(
  input         clock,
                reset,
                auto_control_xing_in_a_valid,
  input  [2:0]  auto_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_control_xing_in_a_bits_size,
  input  [9:0]  auto_control_xing_in_a_bits_source,
  input  [28:0] auto_control_xing_in_a_bits_address,
  input  [7:0]  auto_control_xing_in_a_bits_mask,
  input  [63:0] auto_control_xing_in_a_bits_data,
  input         auto_control_xing_in_d_ready,
                auto_dma_out_a_ready,
                auto_dma_out_d_valid,
  input  [2:0]  auto_dma_out_d_bits_opcode,
  input  [3:0]  auto_dma_out_d_bits_size,
  input  [1:0]  auto_dma_out_d_bits_source,
  input  [63:0] auto_dma_out_d_bits_data,
  input         auto_eth_clock_in_clock,
                auto_io_out_rx_clk,
  input  [7:0]  auto_io_out_rxd,
  input         auto_io_out_rx_dv,
                auto_io_out_status,
  input  [4:0]  auto_io_out_phy_ad,
  input  [31:0] auto_io_out_phy_id,
  output        auto_int_xing_out_sync_0,
                auto_control_xing_in_a_ready,
                auto_control_xing_in_d_valid,
  output [2:0]  auto_control_xing_in_d_bits_opcode,
  output [1:0]  auto_control_xing_in_d_bits_param,
                auto_control_xing_in_d_bits_size,
  output [9:0]  auto_control_xing_in_d_bits_source,
  output        auto_control_xing_in_d_bits_sink,
                auto_control_xing_in_d_bits_denied,
  output [63:0] auto_control_xing_in_d_bits_data,
  output        auto_control_xing_in_d_bits_corrupt,
                auto_dma_out_a_valid,
  output [2:0]  auto_dma_out_a_bits_opcode,
  output [3:0]  auto_dma_out_a_bits_size,
  output [1:0]  auto_dma_out_a_bits_source,
  output [31:0] auto_dma_out_a_bits_address,
  output [63:0] auto_dma_out_a_bits_data,
  output        auto_dma_out_d_ready,
                auto_io_out_tx_clk,
  output [7:0]  auto_io_out_txd,
  output        auto_io_out_tx_en
);

  wire [31:0] _eth_io_isr_value;
  wire [31:0] _eth_io_ctl_out_NSR;
  wire        _eth_io_man_en;
  wire [31:0] _eth_io_man_do;
  wire        _eth_io_ncr_en;
  wire [31:0] _eth_io_ncr_do;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [1:0]  _buffer_auto_out_a_bits_size;
  wire [9:0]  _buffer_auto_out_a_bits_source;
  wire [28:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_d_ready;
  reg  [31:0] output_NSR;
  reg  [31:0] output_ISR;
  reg  [31:0] output_IMR;
  reg  [31:0] inputs_NCR;
  reg  [31:0] inputs_NCFGR;
  reg  [31:0] inputs_USRIO;
  reg  [31:0] inputs_DMACFG;
  reg  [31:0] inputs_RBQP;
  reg  [31:0] inputs_TBQP;
  reg  [31:0] inputs_MAN;
  reg  [31:0] inputs_SA1B;
  reg  [31:0] inputs_SA1T;
  reg  [31:0] inputs_SA2B;
  reg  [31:0] inputs_SA2T;
  reg  [31:0] inputs_SA3B;
  reg  [31:0] inputs_SA3T;
  reg  [31:0] inputs_SA4B;
  reg  [31:0] inputs_SA4T;
  reg  [31:0] inputs_TBQPH;
  reg  [31:0] inputs_RBQPH;
  reg  [31:0] inputs_DCFG1;
  reg  [31:0] inputs_DCFG6;
  reg  [31:0] inputs_IER;
  reg  [31:0] inputs_IDR;
  wire        out_front_bits_read = _buffer_auto_out_a_bits_opcode == 3'h4;
  wire [2:0]  _GEN =
    {_buffer_auto_out_a_bits_address[11:10], _buffer_auto_out_a_bits_address[8]};
  wire        _out_T_31 = _GEN == 3'h0;
  wire        _out_T_21 = _GEN == 3'h2;
  wire [5:0]  out_oindex =
    {_buffer_auto_out_a_bits_address[9], _buffer_auto_out_a_bits_address[7:3]};
  wire [5:0]  _GEN_0 =
    {_buffer_auto_out_a_bits_address[9], _buffer_auto_out_a_bits_address[7:3]};
  wire        _out_wofireMux_T = _buffer_auto_out_a_valid & _buffer_auto_out_d_ready;
  wire        _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;
  wire        out_woready_1 = _out_wofireMux_T_2 & _GEN_0 == 6'h0 & _out_T_31;
  wire        out_woready_24 = _out_wofireMux_T_2 & _GEN_0 == 6'h3 & _out_T_31;
  wire        out_woready_3 = _out_wofireMux_T_2 & _GEN_0 == 6'h5 & _out_T_31;
  wire        out_woready_14 = _out_wofireMux_T_2 & _GEN_0 == 6'h11 & _out_T_31;
  wire        out_woready_16 = _out_wofireMux_T_2 & _GEN_0 == 6'h12 & _out_T_31;
  wire        out_woready_21 = _out_wofireMux_T_2 & _GEN_0 == 6'h13 & _out_T_31;
  wire        out_woready_6 = _out_wofireMux_T_2 & _GEN_0 == 6'h14 & _out_T_31;
  wire        _out_out_bits_data_T_16 = out_oindex == 6'h0;
  wire [31:0] isr_value = output_IMR & (output_ISR | _eth_io_isr_value);
  wire [31:0] _out_womask_T_25 =
    {{8{_buffer_auto_out_a_bits_mask[3]}},
     {8{_buffer_auto_out_a_bits_mask[2]}},
     {8{_buffer_auto_out_a_bits_mask[1]}},
     {8{_buffer_auto_out_a_bits_mask[0]}}};
  wire [31:0] _out_womask_T_24 =
    {{8{_buffer_auto_out_a_bits_mask[7]}},
     {8{_buffer_auto_out_a_bits_mask[6]}},
     {8{_buffer_auto_out_a_bits_mask[5]}},
     {8{_buffer_auto_out_a_bits_mask[4]}}};
  always @(posedge clock) begin
    output_NSR <= _eth_io_ctl_out_NSR;
    if (_out_wofireMux_T & out_front_bits_read & _GEN_0 == 6'h4 & _out_T_31
        & (|_out_womask_T_24))
      output_ISR <= 32'h0;
    else
      output_ISR <= isr_value;
    output_IMR <= (output_IMR | inputs_IER) & ~inputs_IDR;
    if (reset) begin
      inputs_NCR <= 32'h0;
      inputs_NCFGR <= 32'h0;
      inputs_USRIO <= 32'h0;
      inputs_DMACFG <= 32'h0;
      inputs_RBQP <= 32'h0;
      inputs_TBQP <= 32'h0;
      inputs_MAN <= 32'h0;
      inputs_SA1B <= 32'h0;
      inputs_SA1T <= 32'h0;
      inputs_SA2B <= 32'h0;
      inputs_SA2T <= 32'h0;
      inputs_SA3B <= 32'h0;
      inputs_SA3T <= 32'h0;
      inputs_SA4B <= 32'h0;
      inputs_SA4T <= 32'h0;
      inputs_TBQPH <= 32'h0;
      inputs_RBQPH <= 32'h0;
      inputs_DCFG1 <= 32'h0;
      inputs_DCFG6 <= 32'h800000;
      inputs_IER <= 32'h0;
      inputs_IDR <= 32'h0;
    end
    else begin
      if (_eth_io_ncr_en)
        inputs_NCR <= _eth_io_ncr_do;
      else if (out_woready_1 & (&_out_womask_T_25))
        inputs_NCR <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_1 & (&_out_womask_T_24))
        inputs_NCFGR <= _buffer_auto_out_a_bits_data[63:32];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h1 & _out_T_31 & (&_out_womask_T_24))
        inputs_USRIO <= _buffer_auto_out_a_bits_data[63:32];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h2 & _out_T_31 & (&_out_womask_T_25))
        inputs_DMACFG <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_24 & (&_out_womask_T_25))
        inputs_RBQP <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_24 & (&_out_womask_T_24))
        inputs_TBQP <= _buffer_auto_out_a_bits_data[63:32];
      if (_eth_io_man_en)
        inputs_MAN <= _eth_io_man_do;
      else if (_out_wofireMux_T_2 & _GEN_0 == 6'h6 & _out_T_31 & (&_out_womask_T_24))
        inputs_MAN <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_14 & (&_out_womask_T_25))
        inputs_SA1B <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_14 & (&_out_womask_T_24))
        inputs_SA1T <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_16 & (&_out_womask_T_25))
        inputs_SA2B <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_16 & (&_out_womask_T_24))
        inputs_SA2T <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_21 & (&_out_womask_T_25))
        inputs_SA3B <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_21 & (&_out_womask_T_24))
        inputs_SA3T <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_6 & (&_out_womask_T_25))
        inputs_SA4B <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_6 & (&_out_womask_T_24))
        inputs_SA4T <= _buffer_auto_out_a_bits_data[63:32];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h19 & _out_T_21 & (&_out_womask_T_25))
        inputs_TBQPH <= _buffer_auto_out_a_bits_data[31:0];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h1A & _out_T_21 & (&_out_womask_T_24))
        inputs_RBQPH <= _buffer_auto_out_a_bits_data[63:32];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h30 & _out_T_31 & (&_out_womask_T_25))
        inputs_DCFG1 <= _buffer_auto_out_a_bits_data[31:0];
      if (_out_wofireMux_T_2 & _GEN_0 == 6'h32 & _out_T_31 & (&_out_womask_T_24))
        inputs_DCFG6 <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_3 & (&_out_womask_T_25))
        inputs_IER <= _buffer_auto_out_a_bits_data[31:0];
      else
        inputs_IER <= 32'h0;
      if (out_woready_3 & (&_out_womask_T_24))
        inputs_IDR <= _buffer_auto_out_a_bits_data[63:32];
      else
        inputs_IDR <= 32'h0;
    end
  end // always @(posedge)
  TLBuffer_13 buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_control_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_control_xing_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_control_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_control_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_control_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_control_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_control_xing_in_a_bits_data),
    .auto_in_d_ready         (auto_control_xing_in_d_ready),
    .auto_out_a_ready        (_buffer_auto_out_d_ready),
    .auto_out_d_valid        (_buffer_auto_out_a_valid),
    .auto_out_d_bits_opcode  ({2'h0, out_front_bits_read}),
    .auto_out_d_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_d_bits_data
      ((_out_out_bits_data_T_16 | out_oindex == 6'h1 | out_oindex == 6'h2
        | out_oindex == 6'h3 | out_oindex == 6'h4 | out_oindex == 6'h5
        | out_oindex == 6'h6 | out_oindex == 6'h11 | out_oindex == 6'h12
        | out_oindex == 6'h13 | out_oindex == 6'h14
          ? _out_T_31
          : out_oindex == 6'h19 | out_oindex == 6'h1A
              ? _out_T_21
              : ~(out_oindex == 6'h1F | out_oindex == 6'h30 | out_oindex == 6'h32)
                | _out_T_31)
         ? (_out_out_bits_data_T_16
              ? {inputs_NCFGR, inputs_NCR}
              : out_oindex == 6'h1
                  ? {inputs_USRIO, output_NSR}
                  : out_oindex == 6'h2
                      ? {32'h0, inputs_DMACFG}
                      : out_oindex == 6'h3
                          ? {inputs_TBQP, inputs_RBQP}
                          : out_oindex == 6'h4
                              ? {output_ISR, 32'h0}
                              : out_oindex == 6'h5
                                  ? {inputs_IDR, inputs_IER}
                                  : out_oindex == 6'h6
                                      ? {inputs_MAN, output_IMR}
                                      : out_oindex == 6'h11
                                          ? {inputs_SA1T, inputs_SA1B}
                                          : out_oindex == 6'h12
                                              ? {inputs_SA2T, inputs_SA2B}
                                              : out_oindex == 6'h13
                                                  ? {inputs_SA3T, inputs_SA3B}
                                                  : out_oindex == 6'h14
                                                      ? {inputs_SA4T, inputs_SA4B}
                                                      : out_oindex == 6'h19
                                                          ? {32'h0, inputs_TBQPH}
                                                          : out_oindex == 6'h1A
                                                              ? {inputs_RBQPH, 32'h0}
                                                              : out_oindex == 6'h1F
                                                                  ? 64'h2000000000000
                                                                  : out_oindex == 6'h30
                                                                      ? {32'h0,
                                                                         inputs_DCFG1}
                                                                      : out_oindex == 6'h32
                                                                          ? {inputs_DCFG6,
                                                                             32'h0}
                                                                          : 64'h0)
         : 64'h0),
    .auto_in_a_ready         (auto_control_xing_in_a_ready),
    .auto_in_d_valid         (auto_control_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_control_xing_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_control_xing_in_d_bits_param),
    .auto_in_d_bits_size     (auto_control_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_control_xing_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_control_xing_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_control_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_control_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_control_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  IntSyncCrossingSource_1 intsource (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (output_ISR != isr_value & (|isr_value)),
    .auto_out_sync_0 (auto_int_xing_out_sync_0)
  );
  LiteGEMAdapter eth (
    .clock                 (clock),
    .reset                 (reset),
    .io_gtx_clk            (auto_eth_clock_in_clock),
    .io_port_rx_clk        (auto_io_out_rx_clk),
    .io_port_rxd           (auto_io_out_rxd),
    .io_port_rx_dv         (auto_io_out_rx_dv),
    .io_port_status        (auto_io_out_status),
    .io_port_phy_ad        (auto_io_out_phy_ad),
    .io_port_phy_id        ((|auto_io_out_phy_id) ? auto_io_out_phy_id : 32'h2000000),
    .io_ctl_in_NCR         (inputs_NCR),
    .io_ctl_in_NCFGR       (inputs_NCFGR),
    .io_ctl_in_RBQP        (inputs_RBQP),
    .io_ctl_in_TBQP        (inputs_TBQP),
    .io_ctl_in_MAN         (inputs_MAN),
    .io_ctl_in_TBQPH       (inputs_TBQPH),
    .io_ctl_in_RBQPH       (inputs_RBQPH),
    .io_dma_a_ready        (auto_dma_out_a_ready),
    .io_dma_d_valid        (auto_dma_out_d_valid),
    .io_dma_d_bits_opcode  (auto_dma_out_d_bits_opcode),
    .io_dma_d_bits_size    (auto_dma_out_d_bits_size),
    .io_dma_d_bits_source  (auto_dma_out_d_bits_source),
    .io_dma_d_bits_data    (auto_dma_out_d_bits_data),
    .io_isr_value          (_eth_io_isr_value),
    .io_port_tx_clk        (auto_io_out_tx_clk),
    .io_port_txd           (auto_io_out_txd),
    .io_port_tx_en         (auto_io_out_tx_en),
    .io_ctl_out_NSR        (_eth_io_ctl_out_NSR),
    .io_dma_a_valid        (auto_dma_out_a_valid),
    .io_dma_a_bits_opcode  (auto_dma_out_a_bits_opcode),
    .io_dma_a_bits_size    (auto_dma_out_a_bits_size),
    .io_dma_a_bits_source  (auto_dma_out_a_bits_source),
    .io_dma_a_bits_address (auto_dma_out_a_bits_address),
    .io_dma_a_bits_data    (auto_dma_out_a_bits_data),
    .io_dma_d_ready        (auto_dma_out_d_ready),
    .io_man_en             (_eth_io_man_en),
    .io_man_do             (_eth_io_man_do),
    .io_ncr_en             (_eth_io_ncr_en),
    .io_ncr_do             (_eth_io_ncr_do)
  );
endmodule

module ClockSinkDomain_1(
  input         auto_eth_0_control_xing_in_a_valid,
  input  [2:0]  auto_eth_0_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_eth_0_control_xing_in_a_bits_size,
  input  [9:0]  auto_eth_0_control_xing_in_a_bits_source,
  input  [28:0] auto_eth_0_control_xing_in_a_bits_address,
  input  [7:0]  auto_eth_0_control_xing_in_a_bits_mask,
  input  [63:0] auto_eth_0_control_xing_in_a_bits_data,
  input         auto_eth_0_control_xing_in_d_ready,
                auto_eth_0_dma_out_a_ready,
                auto_eth_0_dma_out_d_valid,
  input  [2:0]  auto_eth_0_dma_out_d_bits_opcode,
  input  [3:0]  auto_eth_0_dma_out_d_bits_size,
  input  [1:0]  auto_eth_0_dma_out_d_bits_source,
  input  [63:0] auto_eth_0_dma_out_d_bits_data,
  input         auto_eth_0_eth_clock_in_clock,
                auto_eth_0_io_out_rx_clk,
  input  [7:0]  auto_eth_0_io_out_rxd,
  input         auto_eth_0_io_out_rx_dv,
                auto_eth_0_io_out_status,
  input  [4:0]  auto_eth_0_io_out_phy_ad,
  input  [31:0] auto_eth_0_io_out_phy_id,
  input         auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_eth_0_int_xing_out_sync_0,
                auto_eth_0_control_xing_in_a_ready,
                auto_eth_0_control_xing_in_d_valid,
  output [2:0]  auto_eth_0_control_xing_in_d_bits_opcode,
  output [1:0]  auto_eth_0_control_xing_in_d_bits_param,
                auto_eth_0_control_xing_in_d_bits_size,
  output [9:0]  auto_eth_0_control_xing_in_d_bits_source,
  output        auto_eth_0_control_xing_in_d_bits_sink,
                auto_eth_0_control_xing_in_d_bits_denied,
  output [63:0] auto_eth_0_control_xing_in_d_bits_data,
  output        auto_eth_0_control_xing_in_d_bits_corrupt,
                auto_eth_0_dma_out_a_valid,
  output [2:0]  auto_eth_0_dma_out_a_bits_opcode,
  output [3:0]  auto_eth_0_dma_out_a_bits_size,
  output [1:0]  auto_eth_0_dma_out_a_bits_source,
  output [31:0] auto_eth_0_dma_out_a_bits_address,
  output [63:0] auto_eth_0_dma_out_a_bits_data,
  output        auto_eth_0_dma_out_d_ready,
                auto_eth_0_io_out_tx_clk,
  output [7:0]  auto_eth_0_io_out_txd,
  output        auto_eth_0_io_out_tx_en
);

  LiteGEM eth_0 (
    .clock                               (auto_clock_in_clock),
    .reset                               (auto_clock_in_reset),
    .auto_control_xing_in_a_valid        (auto_eth_0_control_xing_in_a_valid),
    .auto_control_xing_in_a_bits_opcode  (auto_eth_0_control_xing_in_a_bits_opcode),
    .auto_control_xing_in_a_bits_size    (auto_eth_0_control_xing_in_a_bits_size),
    .auto_control_xing_in_a_bits_source  (auto_eth_0_control_xing_in_a_bits_source),
    .auto_control_xing_in_a_bits_address (auto_eth_0_control_xing_in_a_bits_address),
    .auto_control_xing_in_a_bits_mask    (auto_eth_0_control_xing_in_a_bits_mask),
    .auto_control_xing_in_a_bits_data    (auto_eth_0_control_xing_in_a_bits_data),
    .auto_control_xing_in_d_ready        (auto_eth_0_control_xing_in_d_ready),
    .auto_dma_out_a_ready                (auto_eth_0_dma_out_a_ready),
    .auto_dma_out_d_valid                (auto_eth_0_dma_out_d_valid),
    .auto_dma_out_d_bits_opcode          (auto_eth_0_dma_out_d_bits_opcode),
    .auto_dma_out_d_bits_size            (auto_eth_0_dma_out_d_bits_size),
    .auto_dma_out_d_bits_source          (auto_eth_0_dma_out_d_bits_source),
    .auto_dma_out_d_bits_data            (auto_eth_0_dma_out_d_bits_data),
    .auto_eth_clock_in_clock             (auto_eth_0_eth_clock_in_clock),
    .auto_io_out_rx_clk                  (auto_eth_0_io_out_rx_clk),
    .auto_io_out_rxd                     (auto_eth_0_io_out_rxd),
    .auto_io_out_rx_dv                   (auto_eth_0_io_out_rx_dv),
    .auto_io_out_status                  (auto_eth_0_io_out_status),
    .auto_io_out_phy_ad                  (auto_eth_0_io_out_phy_ad),
    .auto_io_out_phy_id                  (auto_eth_0_io_out_phy_id),
    .auto_int_xing_out_sync_0            (auto_eth_0_int_xing_out_sync_0),
    .auto_control_xing_in_a_ready        (auto_eth_0_control_xing_in_a_ready),
    .auto_control_xing_in_d_valid        (auto_eth_0_control_xing_in_d_valid),
    .auto_control_xing_in_d_bits_opcode  (auto_eth_0_control_xing_in_d_bits_opcode),
    .auto_control_xing_in_d_bits_param   (auto_eth_0_control_xing_in_d_bits_param),
    .auto_control_xing_in_d_bits_size    (auto_eth_0_control_xing_in_d_bits_size),
    .auto_control_xing_in_d_bits_source  (auto_eth_0_control_xing_in_d_bits_source),
    .auto_control_xing_in_d_bits_sink    (auto_eth_0_control_xing_in_d_bits_sink),
    .auto_control_xing_in_d_bits_denied  (auto_eth_0_control_xing_in_d_bits_denied),
    .auto_control_xing_in_d_bits_data    (auto_eth_0_control_xing_in_d_bits_data),
    .auto_control_xing_in_d_bits_corrupt (auto_eth_0_control_xing_in_d_bits_corrupt),
    .auto_dma_out_a_valid                (auto_eth_0_dma_out_a_valid),
    .auto_dma_out_a_bits_opcode          (auto_eth_0_dma_out_a_bits_opcode),
    .auto_dma_out_a_bits_size            (auto_eth_0_dma_out_a_bits_size),
    .auto_dma_out_a_bits_source          (auto_eth_0_dma_out_a_bits_source),
    .auto_dma_out_a_bits_address         (auto_eth_0_dma_out_a_bits_address),
    .auto_dma_out_a_bits_data            (auto_eth_0_dma_out_a_bits_data),
    .auto_dma_out_d_ready                (auto_eth_0_dma_out_d_ready),
    .auto_io_out_tx_clk                  (auto_eth_0_io_out_tx_clk),
    .auto_io_out_txd                     (auto_eth_0_io_out_txd),
    .auto_io_out_tx_en                   (auto_eth_0_io_out_tx_en)
  );
endmodule

module LiteGEMFixedCLK(
  input  auto_io_out_clock,
  output auto_clock_out_clock
);

  assign auto_clock_out_clock = auto_io_out_clock;
endmodule

module AsyncResetRegVec_w3_i0(
  input        clock,
               reset,
  input  [2:0] io_d,
  output [2:0] io_q
);

  reg [2:0] reg_0;
  always @(posedge clock or posedge reset) begin
    if (reset)
      reg_0 <= 3'h0;
    else
      reg_0 <= io_d;
  end // always @(posedge, posedge)
  assign io_q = reg_0;
endmodule

module IntSyncCrossingSource_9(
  input  clock,
         reset,
         auto_in_0,
         auto_in_1,
         auto_in_2,
  output auto_out_sync_0,
         auto_out_sync_1,
         auto_out_sync_2
);

  wire [2:0] _reg_io_q;
  AsyncResetRegVec_w3_i0 reg_0 (
    .clock (clock),
    .reset (reset),
    .io_d  ({auto_in_2, auto_in_1, auto_in_0}),
    .io_q  (_reg_io_q)
  );
  assign auto_out_sync_0 = _reg_io_q[0];
  assign auto_out_sync_1 = _reg_io_q[1];
  assign auto_out_sync_2 = _reg_io_q[2];
endmodule

module LiteTimer(
  input         clock,
                reset,
                io_ext_clock,
  input  [6:0]  io_ctl_in_clock_ctl,
                io_ctl_in_count_ctl,
  input  [31:0] io_ctl_in_interval,
                io_ctl_in_match_1,
                io_ctl_in_match_2,
                io_ctl_in_match_3,
  input  [5:0]  io_ctl_in_interrupt_en,
  input         io_ctl_in_interrupt_ac,
  input  [2:0]  io_ctl_in_event_ctl,
  output        io_interrupt,
                io_waveform,
                io_n_waveform_oe,
  output [31:0] io_ctl_out_count_out,
                io_ctl_out_event_out,
  output [5:0]  io_ctl_out_interrupt_st
);

  reg  [6:0]  clk_ctl;
  reg  [6:0]  cnt_ctl;
  reg  [31:0] itv_num;
  reg  [31:0] match_1;
  reg  [31:0] match_2;
  reg  [31:0] match_3;
  reg  [2:0]  evt_ctl;
  reg  [3:0]  di_hold;
  wire        clk_src = clk_ctl[5] ? io_ext_clock : clock;
  reg  [6:0]  clk_ctl_q1;
  reg  [6:0]  clk_ctl_q2;
  reg  [6:0]  cnt_ctl_q1;
  reg  [6:0]  cnt_ctl_q2;
  reg  [31:0] itv_num_q1;
  reg  [31:0] itv_num_q2;
  reg  [2:0]  evt_ctl_q1;
  reg  [2:0]  evt_ctl_q2;
  reg  [3:0]  div_cnt;
  reg  [32:0] clk_cnt;
  reg         waveform;
  reg         waveform_oe;
  reg         evt_act;
  reg  [32:0] evt_cnt;
  reg  [31:0] evt_out_q0;
  reg  [31:0] cnt_out_q0;
  reg  [5:0]  isr_out_q0;
  reg  [3:0]  do_hold;
  reg  [31:0] evt_out_q1;
  reg  [31:0] evt_out_q2;
  reg  [31:0] cnt_out_q1;
  reg  [31:0] cnt_out_q2;
  reg  [5:0]  isr_out_q1;
  reg  [5:0]  isr_out_q2;
  reg  [5:0]  isr_val;
  wire [32:0] _GEN = {1'h0, clk_cnt[31:0]};
  wire [15:0] div_num = 16'h1 << clk_ctl_q2[4:1];
  wire [15:0] _GEN_0 = {12'h0, div_cnt};
  wire        clk_rst = cnt_ctl[1] & (|itv_num_q2) & clk_cnt == {1'h0, itv_num_q2};
  wire        clk_mat_0 = cnt_ctl_q2[3] & {1'h0, match_1} == clk_cnt;
  wire        clk_mat_1 = cnt_ctl_q2[3] & {1'h0, match_2} == clk_cnt;
  wire        clk_mat_2 = cnt_ctl_q2[3] & {1'h0, match_3} == clk_cnt;
  always @(posedge clk_src) begin
    clk_ctl_q1 <= clk_ctl;
    clk_ctl_q2 <= clk_ctl_q1;
    cnt_ctl_q1 <= cnt_ctl;
    cnt_ctl_q2 <= cnt_ctl_q1;
    itv_num_q1 <= itv_num;
    itv_num_q2 <= itv_num_q1;
    evt_ctl_q1 <= evt_ctl;
    evt_ctl_q2 <= evt_ctl_q1;
    if (reset) begin
      div_cnt <= 4'h1;
      clk_cnt <= 33'h0;
      waveform <= 1'h0;
      waveform_oe <= 1'h1;
      evt_act <= 1'h0;
      evt_cnt <= 33'h0;
      evt_out_q0 <= 32'h0;
      cnt_out_q0 <= 32'h0;
      isr_out_q0 <= 6'h0;
      do_hold <= 4'h0;
    end
    else begin
      if (_GEN_0 != div_num)
        div_cnt <= div_cnt + 4'h1;
      else
        div_cnt <= 4'h1;
      if (cnt_ctl_q2[4] | clk_rst)
        clk_cnt <= 33'h0;
      else if (_GEN_0 == div_num & ~(cnt_ctl_q2[0])) begin
        if (cnt_ctl[2])
          clk_cnt <= _GEN - 33'h1;
        else
          clk_cnt <= _GEN + 33'h1;
      end
      waveform <=
        cnt_ctl_q2[5]
        & (clk_rst ? cnt_ctl_q2[6] : clk_mat_0 ? ~(cnt_ctl_q2[6]) : waveform);
      waveform_oe <= ~(cnt_ctl_q2[5]);
      evt_act <= evt_ctl_q2[2] | (evt_ctl_q2[0] | ~(clk_cnt[32])) & evt_act;
      if (evt_ctl_q2[0])
        evt_cnt <= 33'h0;
      else if (evt_act)
        evt_cnt <= {1'h0, evt_cnt[31:0]} + {32'h0, evt_ctl[1] ^ io_ext_clock};
      if (do_hold == 4'h0) begin
        evt_out_q0 <= evt_cnt[31:0];
        cnt_out_q0 <= clk_cnt[31:0];
        isr_out_q0 <=
          {evt_cnt[32],
           clk_cnt[32],
           clk_mat_2,
           clk_mat_1,
           clk_mat_0,
           |{evt_cnt[32], clk_cnt[32], clk_mat_2, clk_mat_1, clk_mat_0}};
      end
      if (|do_hold)
        do_hold <= do_hold - 4'h1;
      else
        do_hold <= 4'h2;
    end
  end // always @(posedge)
  always @(posedge clock) begin
    if (reset) begin
      clk_ctl <= 7'h0;
      cnt_ctl <= 7'h0;
      itv_num <= 32'h0;
      match_1 <= 32'h0;
      match_2 <= 32'h0;
      match_3 <= 32'h0;
      evt_ctl <= 3'h0;
      di_hold <= 4'h0;
      isr_val <= 6'h0;
    end
    else begin
      if (di_hold == 4'h0) begin
        clk_ctl <= io_ctl_in_clock_ctl;
        cnt_ctl <= io_ctl_in_count_ctl;
        itv_num <= io_ctl_in_interval;
        match_1 <= io_ctl_in_match_1;
        match_2 <= io_ctl_in_match_2;
        match_3 <= io_ctl_in_match_3;
        evt_ctl <= io_ctl_in_event_ctl;
      end
      if (|di_hold)
        di_hold <= di_hold - 4'h1;
      else
        di_hold <= 4'h2;
      if (io_ctl_in_interrupt_ac)
        isr_val <= 6'h0;
      else
        isr_val <= (isr_val | isr_out_q2) & io_ctl_in_interrupt_en;
    end
    evt_out_q1 <= evt_out_q0;
    evt_out_q2 <= evt_out_q1;
    cnt_out_q1 <= cnt_out_q0;
    cnt_out_q2 <= cnt_out_q1;
    isr_out_q1 <= isr_out_q0;
    isr_out_q2 <= isr_out_q1;
  end // always @(posedge)
  assign io_interrupt = isr_val[0] & ~io_ctl_in_interrupt_ac;
  assign io_waveform = waveform;
  assign io_n_waveform_oe = waveform_oe;
  assign io_ctl_out_count_out = cnt_out_q2;
  assign io_ctl_out_event_out = evt_out_q2;
  assign io_ctl_out_interrupt_st = isr_val;
endmodule

module LiteTTC(
  input         clock,
                reset,
                auto_control_xing_in_a_valid,
  input  [2:0]  auto_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_control_xing_in_a_bits_size,
  input  [9:0]  auto_control_xing_in_a_bits_source,
  input  [28:0] auto_control_xing_in_a_bits_address,
  input  [7:0]  auto_control_xing_in_a_bits_mask,
  input  [63:0] auto_control_xing_in_a_bits_data,
  input         auto_control_xing_in_d_ready,
                auto_io_out_ext_clock_0,
                auto_io_out_ext_clock_1,
                auto_io_out_ext_clock_2,
  output        auto_int_xing_out_sync_0,
                auto_int_xing_out_sync_1,
                auto_int_xing_out_sync_2,
                auto_control_xing_in_a_ready,
                auto_control_xing_in_d_valid,
  output [2:0]  auto_control_xing_in_d_bits_opcode,
  output [1:0]  auto_control_xing_in_d_bits_param,
                auto_control_xing_in_d_bits_size,
  output [9:0]  auto_control_xing_in_d_bits_source,
  output        auto_control_xing_in_d_bits_sink,
                auto_control_xing_in_d_bits_denied,
  output [63:0] auto_control_xing_in_d_bits_data,
  output        auto_control_xing_in_d_bits_corrupt,
  output [2:0]  auto_io_out_waveform,
                auto_io_out_n_waveform_oe
);

  wire        _timer2_io_interrupt;
  wire        _timer2_io_waveform;
  wire        _timer2_io_n_waveform_oe;
  wire [31:0] _timer2_io_ctl_out_count_out;
  wire [31:0] _timer2_io_ctl_out_event_out;
  wire [5:0]  _timer2_io_ctl_out_interrupt_st;
  wire        _timer1_io_interrupt;
  wire        _timer1_io_waveform;
  wire        _timer1_io_n_waveform_oe;
  wire [31:0] _timer1_io_ctl_out_count_out;
  wire [31:0] _timer1_io_ctl_out_event_out;
  wire [5:0]  _timer1_io_ctl_out_interrupt_st;
  wire        _timer0_io_interrupt;
  wire        _timer0_io_waveform;
  wire        _timer0_io_n_waveform_oe;
  wire [31:0] _timer0_io_ctl_out_count_out;
  wire [31:0] _timer0_io_ctl_out_event_out;
  wire [5:0]  _timer0_io_ctl_out_interrupt_st;
  wire        _buffer_auto_out_a_valid;
  wire [2:0]  _buffer_auto_out_a_bits_opcode;
  wire [1:0]  _buffer_auto_out_a_bits_size;
  wire [9:0]  _buffer_auto_out_a_bits_source;
  wire [28:0] _buffer_auto_out_a_bits_address;
  wire [7:0]  _buffer_auto_out_a_bits_mask;
  wire [63:0] _buffer_auto_out_a_bits_data;
  wire        _buffer_auto_out_d_ready;
  reg         casez_tmp;
  reg  [63:0] casez_tmp_0;
  reg  [31:0] output_0_count_out;
  reg  [31:0] output_0_event_out;
  reg  [5:0]  output_0_interrupt_st;
  reg  [31:0] output_1_count_out;
  reg  [31:0] output_1_event_out;
  reg  [5:0]  output_1_interrupt_st;
  reg  [31:0] output_2_count_out;
  reg  [31:0] output_2_event_out;
  reg  [5:0]  output_2_interrupt_st;
  reg  [6:0]  inputs_0_clock_ctl;
  reg  [6:0]  inputs_0_count_ctl;
  reg  [31:0] inputs_0_interval;
  reg  [31:0] inputs_0_match_1;
  reg  [31:0] inputs_0_match_2;
  reg  [31:0] inputs_0_match_3;
  reg  [5:0]  inputs_0_interrupt_en;
  reg         inputs_0_interrupt_ac;
  reg  [2:0]  inputs_0_event_ctl;
  reg  [6:0]  inputs_1_clock_ctl;
  reg  [6:0]  inputs_1_count_ctl;
  reg  [31:0] inputs_1_interval;
  reg  [31:0] inputs_1_match_1;
  reg  [31:0] inputs_1_match_2;
  reg  [31:0] inputs_1_match_3;
  reg  [5:0]  inputs_1_interrupt_en;
  reg         inputs_1_interrupt_ac;
  reg  [2:0]  inputs_1_event_ctl;
  reg  [6:0]  inputs_2_clock_ctl;
  reg  [6:0]  inputs_2_count_ctl;
  reg  [31:0] inputs_2_interval;
  reg  [31:0] inputs_2_match_1;
  reg  [31:0] inputs_2_match_2;
  reg  [31:0] inputs_2_match_3;
  reg  [5:0]  inputs_2_interrupt_en;
  reg         inputs_2_interrupt_ac;
  reg  [2:0]  inputs_2_event_ctl;
  wire        out_front_bits_read = _buffer_auto_out_a_bits_opcode == 3'h4;
  wire        _out_out_bits_data_WIRE_16 = _buffer_auto_out_a_bits_address[11:8] == 4'h0;
  wire        out_backSel_10 = _buffer_auto_out_a_bits_address[7:3] == 5'hA;
  wire        _out_wofireMux_T = _buffer_auto_out_a_valid & _buffer_auto_out_d_ready;
  wire        _out_rofireMux_T_1 = _out_wofireMux_T & out_front_bits_read;
  wire        out_roready_26 =
    _out_rofireMux_T_1 & _buffer_auto_out_a_bits_address[7:3] == 5'hB
    & _out_out_bits_data_WIRE_16;
  wire        _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;
  wire        out_woready_1 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h0
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_9 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h1
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_17 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h2
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_3 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h5
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_11 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h6
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_21 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h7
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_28 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h8
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_13 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h9
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_19 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'hC
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_15 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'hD
    & _out_out_bits_data_WIRE_16;
  wire        out_woready_7 =
    _out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'hE
    & _out_out_bits_data_WIRE_16;
  always @(*) begin
    casez (_buffer_auto_out_a_bits_address[7:3])
      5'b00000:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00001:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00010:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00011:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00100:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00101:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00110:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b00111:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01000:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01001:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01010:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01011:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01100:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01101:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01110:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b01111:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b10000:
        casez_tmp = _out_out_bits_data_WIRE_16;
      5'b10001:
        casez_tmp = 1'h1;
      5'b10010:
        casez_tmp = 1'h1;
      5'b10011:
        casez_tmp = 1'h1;
      5'b10100:
        casez_tmp = 1'h1;
      5'b10101:
        casez_tmp = 1'h1;
      5'b10110:
        casez_tmp = 1'h1;
      5'b10111:
        casez_tmp = 1'h1;
      5'b11000:
        casez_tmp = 1'h1;
      5'b11001:
        casez_tmp = 1'h1;
      5'b11010:
        casez_tmp = 1'h1;
      5'b11011:
        casez_tmp = 1'h1;
      5'b11100:
        casez_tmp = 1'h1;
      5'b11101:
        casez_tmp = 1'h1;
      5'b11110:
        casez_tmp = 1'h1;
      default:
        casez_tmp = 1'h1;
    endcase
  end // always @(*)
  always @(*) begin
    casez (_buffer_auto_out_a_bits_address[7:3])
      5'b00000:
        casez_tmp_0 = {25'h0, inputs_1_clock_ctl, 25'h0, inputs_0_clock_ctl};
      5'b00001:
        casez_tmp_0 = {25'h0, inputs_0_count_ctl, 25'h0, inputs_2_clock_ctl};
      5'b00010:
        casez_tmp_0 = {25'h0, inputs_2_count_ctl, 25'h0, inputs_1_count_ctl};
      5'b00011:
        casez_tmp_0 = {output_1_count_out, output_0_count_out};
      5'b00100:
        casez_tmp_0 = {inputs_0_interval, output_2_count_out};
      5'b00101:
        casez_tmp_0 = {inputs_2_interval, inputs_1_interval};
      5'b00110:
        casez_tmp_0 = {inputs_1_match_1, inputs_0_match_1};
      5'b00111:
        casez_tmp_0 = {inputs_0_match_2, inputs_2_match_1};
      5'b01000:
        casez_tmp_0 = {inputs_2_match_2, inputs_1_match_2};
      5'b01001:
        casez_tmp_0 = {inputs_1_match_3, inputs_0_match_3};
      5'b01010:
        casez_tmp_0 = {26'h0, output_0_interrupt_st, inputs_2_match_3};
      5'b01011:
        casez_tmp_0 = {26'h0, output_2_interrupt_st, 26'h0, output_1_interrupt_st};
      5'b01100:
        casez_tmp_0 = {26'h0, inputs_1_interrupt_en, 26'h0, inputs_0_interrupt_en};
      5'b01101:
        casez_tmp_0 = {29'h0, inputs_0_event_ctl, 26'h0, inputs_2_interrupt_en};
      5'b01110:
        casez_tmp_0 = {29'h0, inputs_2_event_ctl, 29'h0, inputs_1_event_ctl};
      5'b01111:
        casez_tmp_0 = {output_1_event_out, output_0_event_out};
      5'b10000:
        casez_tmp_0 = {32'h0, output_2_event_out};
      5'b10001:
        casez_tmp_0 = 64'h0;
      5'b10010:
        casez_tmp_0 = 64'h0;
      5'b10011:
        casez_tmp_0 = 64'h0;
      5'b10100:
        casez_tmp_0 = 64'h0;
      5'b10101:
        casez_tmp_0 = 64'h0;
      5'b10110:
        casez_tmp_0 = 64'h0;
      5'b10111:
        casez_tmp_0 = 64'h0;
      5'b11000:
        casez_tmp_0 = 64'h0;
      5'b11001:
        casez_tmp_0 = 64'h0;
      5'b11010:
        casez_tmp_0 = 64'h0;
      5'b11011:
        casez_tmp_0 = 64'h0;
      5'b11100:
        casez_tmp_0 = 64'h0;
      5'b11101:
        casez_tmp_0 = 64'h0;
      5'b11110:
        casez_tmp_0 = 64'h0;
      default:
        casez_tmp_0 = 64'h0;
    endcase
  end // always @(*)
  wire [31:0] _out_womask_T_31 =
    {{8{_buffer_auto_out_a_bits_mask[3]}},
     {8{_buffer_auto_out_a_bits_mask[2]}},
     {8{_buffer_auto_out_a_bits_mask[1]}},
     {8{_buffer_auto_out_a_bits_mask[0]}}};
  wire [31:0] _out_womask_T_32 =
    {{8{_buffer_auto_out_a_bits_mask[7]}},
     {8{_buffer_auto_out_a_bits_mask[6]}},
     {8{_buffer_auto_out_a_bits_mask[5]}},
     {8{_buffer_auto_out_a_bits_mask[4]}}};
  always @(posedge clock) begin
    output_0_count_out <= _timer0_io_ctl_out_count_out;
    output_0_event_out <= _timer0_io_ctl_out_event_out;
    output_0_interrupt_st <= _timer0_io_ctl_out_interrupt_st;
    output_1_count_out <= _timer1_io_ctl_out_count_out;
    output_1_event_out <= _timer1_io_ctl_out_event_out;
    output_1_interrupt_st <= _timer1_io_ctl_out_interrupt_st;
    output_2_count_out <= _timer2_io_ctl_out_count_out;
    output_2_event_out <= _timer2_io_ctl_out_event_out;
    output_2_interrupt_st <= _timer2_io_ctl_out_interrupt_st;
    if (reset) begin
      inputs_0_clock_ctl <= 7'h0;
      inputs_0_count_ctl <= 7'h10;
      inputs_0_interval <= 32'h0;
      inputs_0_match_1 <= 32'h0;
      inputs_0_match_2 <= 32'h0;
      inputs_0_match_3 <= 32'h0;
      inputs_0_interrupt_en <= 6'h0;
      inputs_0_interrupt_ac <= 1'h0;
      inputs_0_event_ctl <= 3'h1;
      inputs_1_clock_ctl <= 7'h0;
      inputs_1_count_ctl <= 7'h10;
      inputs_1_interval <= 32'h0;
      inputs_1_match_1 <= 32'h0;
      inputs_1_match_2 <= 32'h0;
      inputs_1_match_3 <= 32'h0;
      inputs_1_interrupt_en <= 6'h0;
      inputs_1_interrupt_ac <= 1'h0;
      inputs_1_event_ctl <= 3'h1;
      inputs_2_clock_ctl <= 7'h0;
      inputs_2_count_ctl <= 7'h10;
      inputs_2_interval <= 32'h0;
      inputs_2_match_1 <= 32'h0;
      inputs_2_match_2 <= 32'h0;
      inputs_2_match_3 <= 32'h0;
      inputs_2_interrupt_en <= 6'h0;
      inputs_2_interrupt_ac <= 1'h0;
      inputs_2_event_ctl <= 3'h1;
    end
    else begin
      if (out_woready_1 & _buffer_auto_out_a_bits_mask[0])
        inputs_0_clock_ctl <= _buffer_auto_out_a_bits_data[6:0];
      if (out_woready_9 & _buffer_auto_out_a_bits_mask[4])
        inputs_0_count_ctl <= _buffer_auto_out_a_bits_data[38:32];
      else if (inputs_0_count_ctl[4])
        inputs_0_count_ctl <= ~(~inputs_0_count_ctl | 7'h10);
      if (_out_wofireMux_T_2 & _buffer_auto_out_a_bits_address[7:3] == 5'h4
          & _out_out_bits_data_WIRE_16 & (&_out_womask_T_32))
        inputs_0_interval <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_11 & (&_out_womask_T_31))
        inputs_0_match_1 <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_21 & (&_out_womask_T_32))
        inputs_0_match_2 <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_13 & (&_out_womask_T_31))
        inputs_0_match_3 <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_19 & _buffer_auto_out_a_bits_mask[0])
        inputs_0_interrupt_en <= _buffer_auto_out_a_bits_data[5:0];
      inputs_0_interrupt_ac <=
        _out_rofireMux_T_1 & out_backSel_10 & _out_out_bits_data_WIRE_16
        & _buffer_auto_out_a_bits_mask[4];
      if (out_woready_15 & _buffer_auto_out_a_bits_mask[4])
        inputs_0_event_ctl <= _buffer_auto_out_a_bits_data[34:32];
      if (out_woready_1 & _buffer_auto_out_a_bits_mask[4])
        inputs_1_clock_ctl <= _buffer_auto_out_a_bits_data[38:32];
      if (out_woready_17 & _buffer_auto_out_a_bits_mask[0])
        inputs_1_count_ctl <= _buffer_auto_out_a_bits_data[6:0];
      else if (inputs_1_count_ctl[4])
        inputs_1_count_ctl <= ~(~inputs_1_count_ctl | 7'h10);
      if (out_woready_3 & (&_out_womask_T_31))
        inputs_1_interval <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_11 & (&_out_womask_T_32))
        inputs_1_match_1 <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_28 & (&_out_womask_T_31))
        inputs_1_match_2 <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_13 & (&_out_womask_T_32))
        inputs_1_match_3 <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_19 & _buffer_auto_out_a_bits_mask[4])
        inputs_1_interrupt_en <= _buffer_auto_out_a_bits_data[37:32];
      inputs_1_interrupt_ac <= out_roready_26 & _buffer_auto_out_a_bits_mask[0];
      if (out_woready_7 & _buffer_auto_out_a_bits_mask[0])
        inputs_1_event_ctl <= _buffer_auto_out_a_bits_data[2:0];
      if (out_woready_9 & _buffer_auto_out_a_bits_mask[0])
        inputs_2_clock_ctl <= _buffer_auto_out_a_bits_data[6:0];
      if (out_woready_17 & _buffer_auto_out_a_bits_mask[4])
        inputs_2_count_ctl <= _buffer_auto_out_a_bits_data[38:32];
      else if (inputs_2_count_ctl[4])
        inputs_2_count_ctl <= ~(~inputs_2_count_ctl | 7'h10);
      if (out_woready_3 & (&_out_womask_T_32))
        inputs_2_interval <= _buffer_auto_out_a_bits_data[63:32];
      if (out_woready_21 & (&_out_womask_T_31))
        inputs_2_match_1 <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_28 & (&_out_womask_T_32))
        inputs_2_match_2 <= _buffer_auto_out_a_bits_data[63:32];
      if (_out_wofireMux_T_2 & out_backSel_10 & _out_out_bits_data_WIRE_16
          & (&_out_womask_T_31))
        inputs_2_match_3 <= _buffer_auto_out_a_bits_data[31:0];
      if (out_woready_15 & _buffer_auto_out_a_bits_mask[0])
        inputs_2_interrupt_en <= _buffer_auto_out_a_bits_data[5:0];
      inputs_2_interrupt_ac <= out_roready_26 & _buffer_auto_out_a_bits_mask[4];
      if (out_woready_7 & _buffer_auto_out_a_bits_mask[4])
        inputs_2_event_ctl <= _buffer_auto_out_a_bits_data[34:32];
    end
  end // always @(posedge)
  TLBuffer_13 buffer (
    .clock                   (clock),
    .reset                   (reset),
    .auto_in_a_valid         (auto_control_xing_in_a_valid),
    .auto_in_a_bits_opcode   (auto_control_xing_in_a_bits_opcode),
    .auto_in_a_bits_size     (auto_control_xing_in_a_bits_size),
    .auto_in_a_bits_source   (auto_control_xing_in_a_bits_source),
    .auto_in_a_bits_address  (auto_control_xing_in_a_bits_address),
    .auto_in_a_bits_mask     (auto_control_xing_in_a_bits_mask),
    .auto_in_a_bits_data     (auto_control_xing_in_a_bits_data),
    .auto_in_d_ready         (auto_control_xing_in_d_ready),
    .auto_out_a_ready        (_buffer_auto_out_d_ready),
    .auto_out_d_valid        (_buffer_auto_out_a_valid),
    .auto_out_d_bits_opcode  ({2'h0, out_front_bits_read}),
    .auto_out_d_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_d_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_d_bits_data    (casez_tmp ? casez_tmp_0 : 64'h0),
    .auto_in_a_ready         (auto_control_xing_in_a_ready),
    .auto_in_d_valid         (auto_control_xing_in_d_valid),
    .auto_in_d_bits_opcode   (auto_control_xing_in_d_bits_opcode),
    .auto_in_d_bits_param    (auto_control_xing_in_d_bits_param),
    .auto_in_d_bits_size     (auto_control_xing_in_d_bits_size),
    .auto_in_d_bits_source   (auto_control_xing_in_d_bits_source),
    .auto_in_d_bits_sink     (auto_control_xing_in_d_bits_sink),
    .auto_in_d_bits_denied   (auto_control_xing_in_d_bits_denied),
    .auto_in_d_bits_data     (auto_control_xing_in_d_bits_data),
    .auto_in_d_bits_corrupt  (auto_control_xing_in_d_bits_corrupt),
    .auto_out_a_valid        (_buffer_auto_out_a_valid),
    .auto_out_a_bits_opcode  (_buffer_auto_out_a_bits_opcode),
    .auto_out_a_bits_size    (_buffer_auto_out_a_bits_size),
    .auto_out_a_bits_source  (_buffer_auto_out_a_bits_source),
    .auto_out_a_bits_address (_buffer_auto_out_a_bits_address),
    .auto_out_a_bits_mask    (_buffer_auto_out_a_bits_mask),
    .auto_out_a_bits_data    (_buffer_auto_out_a_bits_data),
    .auto_out_d_ready        (_buffer_auto_out_d_ready)
  );
  IntSyncCrossingSource_9 intsource (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (_timer0_io_interrupt),
    .auto_in_1       (_timer1_io_interrupt),
    .auto_in_2       (_timer2_io_interrupt),
    .auto_out_sync_0 (auto_int_xing_out_sync_0),
    .auto_out_sync_1 (auto_int_xing_out_sync_1),
    .auto_out_sync_2 (auto_int_xing_out_sync_2)
  );
  LiteTimer timer0 (
    .clock                   (clock),
    .reset                   (reset),
    .io_ext_clock            (auto_io_out_ext_clock_0),
    .io_ctl_in_clock_ctl     (inputs_0_clock_ctl),
    .io_ctl_in_count_ctl     (inputs_0_count_ctl),
    .io_ctl_in_interval      (inputs_0_interval),
    .io_ctl_in_match_1       (inputs_0_match_1),
    .io_ctl_in_match_2       (inputs_0_match_2),
    .io_ctl_in_match_3       (inputs_0_match_3),
    .io_ctl_in_interrupt_en  (inputs_0_interrupt_en),
    .io_ctl_in_interrupt_ac  (inputs_0_interrupt_ac),
    .io_ctl_in_event_ctl     (inputs_0_event_ctl),
    .io_interrupt            (_timer0_io_interrupt),
    .io_waveform             (_timer0_io_waveform),
    .io_n_waveform_oe        (_timer0_io_n_waveform_oe),
    .io_ctl_out_count_out    (_timer0_io_ctl_out_count_out),
    .io_ctl_out_event_out    (_timer0_io_ctl_out_event_out),
    .io_ctl_out_interrupt_st (_timer0_io_ctl_out_interrupt_st)
  );
  LiteTimer timer1 (
    .clock                   (clock),
    .reset                   (reset),
    .io_ext_clock            (auto_io_out_ext_clock_1),
    .io_ctl_in_clock_ctl     (inputs_1_clock_ctl),
    .io_ctl_in_count_ctl     (inputs_1_count_ctl),
    .io_ctl_in_interval      (inputs_1_interval),
    .io_ctl_in_match_1       (inputs_1_match_1),
    .io_ctl_in_match_2       (inputs_1_match_2),
    .io_ctl_in_match_3       (inputs_1_match_3),
    .io_ctl_in_interrupt_en  (inputs_1_interrupt_en),
    .io_ctl_in_interrupt_ac  (inputs_1_interrupt_ac),
    .io_ctl_in_event_ctl     (inputs_1_event_ctl),
    .io_interrupt            (_timer1_io_interrupt),
    .io_waveform             (_timer1_io_waveform),
    .io_n_waveform_oe        (_timer1_io_n_waveform_oe),
    .io_ctl_out_count_out    (_timer1_io_ctl_out_count_out),
    .io_ctl_out_event_out    (_timer1_io_ctl_out_event_out),
    .io_ctl_out_interrupt_st (_timer1_io_ctl_out_interrupt_st)
  );
  LiteTimer timer2 (
    .clock                   (clock),
    .reset                   (reset),
    .io_ext_clock            (auto_io_out_ext_clock_2),
    .io_ctl_in_clock_ctl     (inputs_2_clock_ctl),
    .io_ctl_in_count_ctl     (inputs_2_count_ctl),
    .io_ctl_in_interval      (inputs_2_interval),
    .io_ctl_in_match_1       (inputs_2_match_1),
    .io_ctl_in_match_2       (inputs_2_match_2),
    .io_ctl_in_match_3       (inputs_2_match_3),
    .io_ctl_in_interrupt_en  (inputs_2_interrupt_en),
    .io_ctl_in_interrupt_ac  (inputs_2_interrupt_ac),
    .io_ctl_in_event_ctl     (inputs_2_event_ctl),
    .io_interrupt            (_timer2_io_interrupt),
    .io_waveform             (_timer2_io_waveform),
    .io_n_waveform_oe        (_timer2_io_n_waveform_oe),
    .io_ctl_out_count_out    (_timer2_io_ctl_out_count_out),
    .io_ctl_out_event_out    (_timer2_io_ctl_out_event_out),
    .io_ctl_out_interrupt_st (_timer2_io_ctl_out_interrupt_st)
  );
  assign auto_io_out_waveform =
    {_timer0_io_waveform, _timer1_io_waveform, _timer2_io_waveform};
  assign auto_io_out_n_waveform_oe =
    {_timer0_io_n_waveform_oe, _timer1_io_n_waveform_oe, _timer2_io_n_waveform_oe};
endmodule

module ClockSinkDomain_2(
  input         auto_ttc_0_control_xing_in_a_valid,
  input  [2:0]  auto_ttc_0_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_ttc_0_control_xing_in_a_bits_size,
  input  [9:0]  auto_ttc_0_control_xing_in_a_bits_source,
  input  [28:0] auto_ttc_0_control_xing_in_a_bits_address,
  input  [7:0]  auto_ttc_0_control_xing_in_a_bits_mask,
  input  [63:0] auto_ttc_0_control_xing_in_a_bits_data,
  input         auto_ttc_0_control_xing_in_d_ready,
                auto_ttc_0_io_out_ext_clock_0,
                auto_ttc_0_io_out_ext_clock_1,
                auto_ttc_0_io_out_ext_clock_2,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_ttc_0_int_xing_out_sync_0,
                auto_ttc_0_int_xing_out_sync_1,
                auto_ttc_0_int_xing_out_sync_2,
                auto_ttc_0_control_xing_in_a_ready,
                auto_ttc_0_control_xing_in_d_valid,
  output [2:0]  auto_ttc_0_control_xing_in_d_bits_opcode,
  output [1:0]  auto_ttc_0_control_xing_in_d_bits_param,
                auto_ttc_0_control_xing_in_d_bits_size,
  output [9:0]  auto_ttc_0_control_xing_in_d_bits_source,
  output        auto_ttc_0_control_xing_in_d_bits_sink,
                auto_ttc_0_control_xing_in_d_bits_denied,
  output [63:0] auto_ttc_0_control_xing_in_d_bits_data,
  output        auto_ttc_0_control_xing_in_d_bits_corrupt,
  output [2:0]  auto_ttc_0_io_out_waveform,
                auto_ttc_0_io_out_n_waveform_oe
);

  LiteTTC ttc_0 (
    .clock                               (auto_clock_in_clock),
    .reset                               (auto_clock_in_reset),
    .auto_control_xing_in_a_valid        (auto_ttc_0_control_xing_in_a_valid),
    .auto_control_xing_in_a_bits_opcode  (auto_ttc_0_control_xing_in_a_bits_opcode),
    .auto_control_xing_in_a_bits_size    (auto_ttc_0_control_xing_in_a_bits_size),
    .auto_control_xing_in_a_bits_source  (auto_ttc_0_control_xing_in_a_bits_source),
    .auto_control_xing_in_a_bits_address (auto_ttc_0_control_xing_in_a_bits_address),
    .auto_control_xing_in_a_bits_mask    (auto_ttc_0_control_xing_in_a_bits_mask),
    .auto_control_xing_in_a_bits_data    (auto_ttc_0_control_xing_in_a_bits_data),
    .auto_control_xing_in_d_ready        (auto_ttc_0_control_xing_in_d_ready),
    .auto_io_out_ext_clock_0             (auto_ttc_0_io_out_ext_clock_0),
    .auto_io_out_ext_clock_1             (auto_ttc_0_io_out_ext_clock_1),
    .auto_io_out_ext_clock_2             (auto_ttc_0_io_out_ext_clock_2),
    .auto_int_xing_out_sync_0            (auto_ttc_0_int_xing_out_sync_0),
    .auto_int_xing_out_sync_1            (auto_ttc_0_int_xing_out_sync_1),
    .auto_int_xing_out_sync_2            (auto_ttc_0_int_xing_out_sync_2),
    .auto_control_xing_in_a_ready        (auto_ttc_0_control_xing_in_a_ready),
    .auto_control_xing_in_d_valid        (auto_ttc_0_control_xing_in_d_valid),
    .auto_control_xing_in_d_bits_opcode  (auto_ttc_0_control_xing_in_d_bits_opcode),
    .auto_control_xing_in_d_bits_param   (auto_ttc_0_control_xing_in_d_bits_param),
    .auto_control_xing_in_d_bits_size    (auto_ttc_0_control_xing_in_d_bits_size),
    .auto_control_xing_in_d_bits_source  (auto_ttc_0_control_xing_in_d_bits_source),
    .auto_control_xing_in_d_bits_sink    (auto_ttc_0_control_xing_in_d_bits_sink),
    .auto_control_xing_in_d_bits_denied  (auto_ttc_0_control_xing_in_d_bits_denied),
    .auto_control_xing_in_d_bits_data    (auto_ttc_0_control_xing_in_d_bits_data),
    .auto_control_xing_in_d_bits_corrupt (auto_ttc_0_control_xing_in_d_bits_corrupt),
    .auto_io_out_waveform                (auto_ttc_0_io_out_waveform),
    .auto_io_out_n_waveform_oe           (auto_ttc_0_io_out_n_waveform_oe)
  );
endmodule

module IntSyncSyncCrossingSink_8(
  input  auto_in_sync_0,
         auto_in_sync_1,
         auto_in_sync_2,
  output auto_out_0,
         auto_out_1,
         auto_out_2
);

  assign auto_out_0 = auto_in_sync_0;
  assign auto_out_1 = auto_in_sync_1;
  assign auto_out_2 = auto_in_sync_2;
endmodule

module Queue_96(
  input        clock,
               reset,
               io_enq_valid,
  input  [7:0] io_enq_bits,
  input        io_deq_ready,
  output       io_enq_ready,
               io_deq_valid,
  output [7:0] io_deq_bits,
  output [3:0] io_count
);

  reg  [2:0] enq_ptr_value;
  reg  [2:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  wire       do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (do_enq != do_deq)
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_mask_combMem ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits),
    .R0_data (io_deq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_count = {full, enq_ptr_value - deq_ptr_value};
endmodule

module SPIFIFO(
  input        clock,
               reset,
  input  [1:0] io_ctrl_fmt_proto,
  input        io_ctrl_fmt_endian,
               io_ctrl_fmt_iodir,
  input  [3:0] io_ctrl_fmt_len,
  input  [1:0] io_ctrl_cs_mode,
  input  [3:0] io_ctrl_wm_tx,
               io_ctrl_wm_rx,
  input        io_link_tx_ready,
               io_link_rx_valid,
  input  [7:0] io_link_rx_bits,
  input        io_tx_valid,
  input  [7:0] io_tx_bits,
  input        io_rx_ready,
  output       io_link_tx_valid,
  output [7:0] io_link_tx_bits,
               io_link_cnt,
  output [1:0] io_link_fmt_proto,
  output       io_link_fmt_endian,
               io_link_fmt_iodir,
               io_link_cs_set,
               io_link_cs_clear,
               io_link_lock,
               io_tx_ready,
               io_rx_valid,
  output [7:0] io_rx_bits,
  output       io_ip_txwm,
               io_ip_rxwm
);

  wire       _rxq_io_enq_ready;
  wire [3:0] _rxq_io_count;
  wire       _txq_io_deq_valid;
  wire [3:0] _txq_io_count;
  wire       fire_tx = io_link_tx_ready & _txq_io_deq_valid;
  reg        rxen;
  wire       _T_1 = io_ctrl_fmt_proto == 2'h1;
  wire       _T_2 = io_ctrl_fmt_proto == 2'h2;
  wire [2:0] _cnt_quot_T_4 = _T_1 ? io_ctrl_fmt_len[3:1] : 3'h0;
  reg  [1:0] cs_mode;
  always @(posedge clock) begin
    if (reset) begin
      rxen <= 1'h0;
      cs_mode <= 2'h0;
    end
    else begin
      if (fire_tx)
        rxen <= ~io_ctrl_fmt_iodir;
      else
        rxen <= ~io_link_rx_valid & rxen;
      cs_mode <= io_ctrl_cs_mode;
    end
  end // always @(posedge)
  Queue_96 txq (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (io_tx_valid),
    .io_enq_bits  (io_tx_bits),
    .io_deq_ready (io_link_tx_ready),
    .io_enq_ready (io_tx_ready),
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (io_link_tx_bits),
    .io_count     (_txq_io_count)
  );
  Queue_96 rxq (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (io_link_rx_valid & rxen),
    .io_enq_bits  (io_link_rx_bits),
    .io_deq_ready (io_rx_ready),
    .io_enq_ready (_rxq_io_enq_ready),
    .io_deq_valid (io_rx_valid),
    .io_deq_bits  (io_rx_bits),
    .io_count     (_rxq_io_count)
  );
  assign io_link_tx_valid = _txq_io_deq_valid;
  assign io_link_cnt =
    {4'h0,
     ((io_ctrl_fmt_proto == 2'h0 ? io_ctrl_fmt_len : 4'h0)
      | {1'h0,
         _cnt_quot_T_4[2],
         _cnt_quot_T_4[1:0] | (_T_2 ? io_ctrl_fmt_len[3:2] : 2'h0)})
       + {3'h0, _T_1 & io_ctrl_fmt_len[0] | _T_2 & (|(io_ctrl_fmt_len[1:0]))}};
  assign io_link_fmt_proto = io_ctrl_fmt_proto;
  assign io_link_fmt_endian = io_ctrl_fmt_endian;
  assign io_link_fmt_iodir = io_ctrl_fmt_iodir;
  assign io_link_cs_set = ~(&cs_mode);
  assign io_link_cs_clear =
    cs_mode != io_ctrl_cs_mode | fire_tx & ~(cs_mode == 2'h2 | (&cs_mode));
  assign io_link_lock = _txq_io_deq_valid | rxen;
  assign io_ip_txwm = _txq_io_count < io_ctrl_wm_tx;
  assign io_ip_rxwm = _rxq_io_count > io_ctrl_wm_rx;
endmodule

module SPIPhysical(
  input         clock,
                reset,
                io_port_dq_0_i,
                io_port_dq_1_i,
                io_port_dq_2_i,
                io_port_dq_3_i,
  input  [11:0] io_ctrl_sck_div,
  input         io_ctrl_sck_pol,
                io_ctrl_sck_pha,
  input  [1:0]  io_ctrl_fmt_proto,
  input         io_ctrl_fmt_endian,
                io_ctrl_fmt_iodir,
  input  [11:0] io_ctrl_extradel_coarse,
  input  [4:0]  io_ctrl_sampledel_sd,
  input         io_op_valid,
                io_op_bits_fn,
                io_op_bits_stb,
  input  [7:0]  io_op_bits_cnt,
                io_op_bits_data,
  output        io_port_sck,
                io_port_dq_0_o,
                io_port_dq_0_ie,
                io_port_dq_0_oe,
                io_port_dq_1_o,
                io_port_dq_1_ie,
                io_port_dq_1_oe,
                io_port_dq_2_o,
                io_port_dq_2_ie,
                io_port_dq_2_oe,
                io_port_dq_3_o,
                io_port_dq_3_ie,
                io_port_dq_3_oe,
                io_op_ready,
                io_rx_valid,
  output [7:0]  io_rx_bits
);

  reg  [11:0] ctrl_sck_div;
  reg         ctrl_sck_pol;
  reg         ctrl_sck_pha;
  reg  [1:0]  ctrl_fmt_proto;
  reg         ctrl_fmt_endian;
  reg         ctrl_fmt_iodir;
  wire        proto_0 = ctrl_fmt_proto == 2'h0;
  wire        proto_1 = ctrl_fmt_proto == 2'h1;
  wire        proto_2 = ctrl_fmt_proto == 2'h2;
  reg         setup_d;
  reg  [7:0]  scnt;
  reg  [11:0] tcnt;
  wire        stop = scnt == 8'h0;
  wire        beat = tcnt == 12'h0;
  reg         sample_d;
  reg  [11:0] del_cntr;
  reg         last_d;
  reg  [11:0] del_cntr_last;
  reg         sck;
  reg         cref;
  reg  [7:0]  buffer;
  reg  [3:0]  txd;
  wire        txen_in_2 = proto_2 & ctrl_fmt_iodir;
  wire        txen_in_1 = proto_1 & ctrl_fmt_iodir | txen_in_2;
  reg         rdisableOE;
  wire        _io_port_dq_0_oe_output = ~rdisableOE & (proto_0 | txen_in_1);
  wire        _io_port_dq_1_oe_output = ~rdisableOE & txen_in_1;
  wire        _io_port_dq_3_oe_output = ~rdisableOE & txen_in_2;
  reg         done;
  reg         xfr;
  wire        _GEN = beat & xfr;
  wire        _T_18 = scnt == 8'h1;
  wire        _T_20 = beat & ~cref;
  wire        _GEN_0 = _T_18 & _T_20;
  wire        accept = _GEN_0 | stop;
  wire        _T_21 = accept & done;
  wire [1:0]  _txd_sel_T = accept ? io_ctrl_fmt_proto : ctrl_fmt_proto;
  wire        _sample_d_T = beat & ~stop & _GEN & cref;
  wire [11:0] totalCoarseDel = io_ctrl_extradel_coarse + {7'h0, io_ctrl_sampledel_sd};
  wire [11:0] decr = (beat ? {4'h0, scnt} : tcnt) - 12'h1;
  wire        cinv = ctrl_sck_pha ^ ctrl_sck_pol;
  wire        _sck_T = cref ^ cinv;
  wire        _GEN_1 = stop | ~_GEN;
  wire        _GEN_2 = _GEN & ~cref;
  wire        _GEN_3 = _T_21 & io_op_valid;
  wire        _GEN_4 = _T_21 & io_op_valid & ~io_op_bits_fn;
  wire        setup = _GEN_4 | (_T_18 ? ~(_T_20 | stop) & _GEN_2 : ~stop & _GEN_2);
  wire        _GEN_5 = io_op_bits_fn & io_op_bits_stb;
  wire        shift = (|totalCoarseDel) & sample_d & stop | setup_d;
  wire [3:0]  txd_in =
    accept
      ? (io_ctrl_fmt_endian
           ? {io_op_bits_data[0],
              io_op_bits_data[1],
              io_op_bits_data[2],
              io_op_bits_data[3]}
           : io_op_bits_data[7:4])
      : buffer[7:4];
  always @(posedge clock) begin
    if (_GEN_3 & io_op_bits_fn & _GEN_5) begin
      ctrl_sck_div <= io_ctrl_sck_div;
      ctrl_sck_pol <= io_ctrl_sck_pol;
      ctrl_sck_pha <= io_ctrl_sck_pha;
    end
    if (_T_21 & io_op_valid & io_op_bits_stb) begin
      ctrl_fmt_proto <= io_ctrl_fmt_proto;
      ctrl_fmt_endian <= io_ctrl_fmt_endian;
      ctrl_fmt_iodir <= io_ctrl_fmt_iodir;
    end
    setup_d <= setup;
    if (stop | beat)
      tcnt <= ctrl_sck_div;
    else
      tcnt <= decr;
    if (_GEN_3) begin
      if (io_op_bits_fn) begin
        if (_GEN_5)
          sck <= io_ctrl_sck_pol;
        else if (_GEN_0)
          sck <= ctrl_sck_pol;
        else if (_GEN_1) begin
        end
        else
          sck <= _sck_T;
      end
      else
        sck <= cinv;
      xfr <= ~io_op_bits_fn;
    end
    else if (_GEN_0)
      sck <= ctrl_sck_pol;
    else if (_GEN_1) begin
    end
    else
      sck <= _sck_T;
    if (_GEN_4) begin
      if (io_ctrl_fmt_endian)
        buffer <=
          {io_op_bits_data[0],
           io_op_bits_data[1],
           io_op_bits_data[2],
           io_op_bits_data[3],
           io_op_bits_data[4],
           io_op_bits_data[5],
           io_op_bits_data[6],
           io_op_bits_data[7]};
      else
        buffer <= io_op_bits_data;
    end
    else
      buffer <=
        (proto_0
           ? {shift ? buffer[6:0] : buffer[7:1], sample_d ? io_port_dq_1_i : buffer[0]}
           : 8'h0)
        | (proto_1
             ? {shift ? buffer[5:0] : buffer[7:2],
                sample_d ? {io_port_dq_1_i, io_port_dq_0_i} : buffer[1:0]}
             : 8'h0)
        | (proto_2
             ? {shift ? buffer[3:0] : buffer[7:4],
                sample_d
                  ? {io_port_dq_3_i, io_port_dq_2_i, io_port_dq_1_i, io_port_dq_0_i}
                  : buffer[3:0]}
             : 8'h0);
    rdisableOE <= ~_GEN_3 & rdisableOE;
    if (reset) begin
      scnt <= 8'h0;
      sample_d <= 1'h0;
      del_cntr <= 12'h0;
      last_d <= 1'h0;
      del_cntr_last <= 12'h0;
      cref <= 1'h1;
      txd <= 4'h0;
      done <= 1'h1;
    end
    else begin
      if (_GEN_3)
        scnt <= io_op_bits_cnt;
      else if (stop | ~(beat & ~cref)) begin
      end
      else
        scnt <= decr[7:0];
      if (totalCoarseDel == 12'h0)
        sample_d <= _sample_d_T;
      else
        sample_d <= del_cntr == 12'h1;
      if (_sample_d_T) begin
        if (|(totalCoarseDel[11:1]))
          del_cntr <= totalCoarseDel - 12'h1;
        else
          del_cntr <= 12'h1;
      end
      else if (|del_cntr)
        del_cntr <= del_cntr - 12'h1;
      last_d <= del_cntr_last == 12'h1;
      if (beat & _T_18 & cref & xfr) begin
        if (|(totalCoarseDel[11:1]))
          del_cntr_last <= totalCoarseDel - 12'h1;
        else
          del_cntr_last <= 12'h1;
      end
      else if (|del_cntr_last)
        del_cntr_last <= del_cntr_last - 12'h1;
      cref <= ~stop & beat ^ cref;
      if (setup)
        txd <=
          {2'h0,
           {1'h0, _txd_sel_T == 2'h0 & txd_in[3]}
             | (_txd_sel_T == 2'h1 ? txd_in[3:2] : 2'h0)}
          | (_txd_sel_T == 2'h2 ? txd_in : 4'h0);
      if (_GEN_4)
        done <= io_op_bits_cnt == 8'h0;
      else
        done <= done | last_d;
    end
  end // always @(posedge)
  assign io_port_sck = sck;
  assign io_port_dq_0_o = txd[0];
  assign io_port_dq_0_ie = ~_io_port_dq_0_oe_output;
  assign io_port_dq_0_oe = _io_port_dq_0_oe_output;
  assign io_port_dq_1_o = txd[1];
  assign io_port_dq_1_ie = ~_io_port_dq_1_oe_output;
  assign io_port_dq_1_oe = _io_port_dq_1_oe_output;
  assign io_port_dq_2_o = txd[2];
  assign io_port_dq_2_ie = ~_io_port_dq_3_oe_output;
  assign io_port_dq_2_oe = _io_port_dq_3_oe_output;
  assign io_port_dq_3_o = txd[3];
  assign io_port_dq_3_ie = ~_io_port_dq_3_oe_output;
  assign io_port_dq_3_oe = _io_port_dq_3_oe_output;
  assign io_op_ready = _T_21;
  assign io_rx_valid = done;
  assign io_rx_bits =
    ctrl_fmt_endian
      ? {buffer[0],
         buffer[1],
         buffer[2],
         buffer[3],
         buffer[4],
         buffer[5],
         buffer[6],
         buffer[7]}
      : buffer;
endmodule

module SPIMedia(
  input         clock,
                reset,
                io_port_dq_0_i,
                io_port_dq_1_i,
                io_port_dq_2_i,
                io_port_dq_3_i,
  input  [11:0] io_ctrl_sck_div,
  input         io_ctrl_sck_pol,
                io_ctrl_sck_pha,
  input  [7:0]  io_ctrl_dla_cssck,
                io_ctrl_dla_sckcs,
                io_ctrl_dla_intercs,
                io_ctrl_dla_interxfr,
  input         io_ctrl_cs_id,
                io_ctrl_cs_dflt_0,
  input  [11:0] io_ctrl_extradel_coarse,
  input  [4:0]  io_ctrl_sampledel_sd,
  input         io_link_tx_valid,
  input  [7:0]  io_link_tx_bits,
                io_link_cnt,
  input  [1:0]  io_link_fmt_proto,
  input         io_link_fmt_endian,
                io_link_fmt_iodir,
                io_link_cs_set,
                io_link_cs_clear,
                io_link_cs_hold,
  output        io_port_sck,
                io_port_dq_0_o,
                io_port_dq_0_ie,
                io_port_dq_0_oe,
                io_port_dq_1_o,
                io_port_dq_1_ie,
                io_port_dq_1_oe,
                io_port_dq_2_o,
                io_port_dq_2_ie,
                io_port_dq_2_oe,
                io_port_dq_3_o,
                io_port_dq_3_ie,
                io_port_dq_3_oe,
                io_port_cs_0,
                io_link_tx_ready,
                io_link_rx_valid,
  output [7:0]  io_link_rx_bits,
  output        io_link_active
);

  wire       _phy_io_op_ready;
  reg  [7:0] casez_tmp;
  reg        cs_id;
  reg        cs_dflt_0;
  reg        cs_set;
  wire [1:0] cs_active_mask = {1'h0, io_link_cs_set} << io_ctrl_cs_id;
  wire       cs_active_0 = io_ctrl_cs_dflt_0 ^ cs_active_mask[0];
  reg        clear;
  reg        cs_assert;
  wire       cs_deassert = clear | cs_active_0 != cs_dflt_0 & ~io_link_cs_hold;
  reg  [1:0] state;
  wire       _T = state == 2'h0;
  wire       _GEN = _T & cs_assert;
  wire       _T_2 = state == 2'h1;
  wire       _GEN_0 =
    _T ? ~cs_assert | cs_deassert | io_link_tx_valid : ~_T_2 | (|io_ctrl_dla_interxfr);
  wire       _T_4 = state == 2'h2;
  always @(*) begin
    casez (state)
      2'b00:
        casez_tmp =
          cs_assert
            ? (cs_deassert ? io_ctrl_dla_sckcs : io_link_cnt)
            : io_link_tx_valid ? io_ctrl_dla_cssck : 8'h0;
      2'b01:
        casez_tmp = io_ctrl_dla_interxfr;
      2'b10:
        casez_tmp = io_ctrl_dla_intercs;
      default:
        casez_tmp = io_link_cnt;
    endcase
  end // always @(*)
  wire [1:0] mask = {1'h0, cs_set} << cs_id;
  wire       _GEN_1 = io_link_tx_valid & _phy_io_op_ready;
  wire       _GEN_2 = _T_4 & _phy_io_op_ready;
  always @(posedge clock) begin
    if (~_T | cs_assert | io_link_tx_valid) begin
    end
    else
      cs_id <= io_ctrl_cs_id;
    if (_T) begin
      if (cs_assert) begin
      end
      else if (io_link_tx_valid) begin
        if (_phy_io_op_ready)
          cs_dflt_0 <= cs_active_0;
      end
      else
        cs_dflt_0 <= io_ctrl_cs_dflt_0;
    end
    else
      cs_dflt_0 <= ~_T_2 & _GEN_2 & mask[0] ^ cs_dflt_0;
    if (~_T | cs_assert | ~_GEN_1) begin
    end
    else
      cs_set <= io_link_cs_set;
    if (reset) begin
      clear <= 1'h0;
      cs_assert <= 1'h0;
      state <= 2'h0;
    end
    else begin
      clear <= (_T | _T_2 | ~_T_4) & (clear | io_link_cs_clear & cs_assert);
      if (_T) begin
        cs_assert <= ~cs_assert & _GEN_1 | cs_assert;
        if (cs_assert) begin
          if (cs_deassert) begin
            if (_phy_io_op_ready)
              state <= 2'h2;
          end
          else if (_phy_io_op_ready & _GEN_0)
            state <= 2'h1;
        end
      end
      else begin
        cs_assert <= (_T_2 | ~_T_4) & cs_assert;
        if (_T_2 ? _phy_io_op_ready | ~(|io_ctrl_dla_interxfr) : _GEN_2)
          state <= 2'h0;
      end
    end
  end // always @(posedge)
  SPIPhysical phy (
    .clock                   (clock),
    .reset                   (reset),
    .io_port_dq_0_i          (io_port_dq_0_i),
    .io_port_dq_1_i          (io_port_dq_1_i),
    .io_port_dq_2_i          (io_port_dq_2_i),
    .io_port_dq_3_i          (io_port_dq_3_i),
    .io_ctrl_sck_div         (io_ctrl_sck_div),
    .io_ctrl_sck_pol         (io_ctrl_sck_pol),
    .io_ctrl_sck_pha         (io_ctrl_sck_pha),
    .io_ctrl_fmt_proto       (io_link_fmt_proto),
    .io_ctrl_fmt_endian      (io_link_fmt_endian),
    .io_ctrl_fmt_iodir       (io_link_fmt_iodir),
    .io_ctrl_extradel_coarse (io_ctrl_extradel_coarse),
    .io_ctrl_sampledel_sd    (io_ctrl_sampledel_sd),
    .io_op_valid             (_GEN_0),
    .io_op_bits_fn           (~_GEN | cs_deassert),
    .io_op_bits_stb
      (_T ? (cs_assert ? ~cs_deassert : ~io_link_tx_valid) : ~_T_2 & _T_4),
    .io_op_bits_cnt          (casez_tmp),
    .io_op_bits_data         (io_link_tx_bits),
    .io_port_sck             (io_port_sck),
    .io_port_dq_0_o          (io_port_dq_0_o),
    .io_port_dq_0_ie         (io_port_dq_0_ie),
    .io_port_dq_0_oe         (io_port_dq_0_oe),
    .io_port_dq_1_o          (io_port_dq_1_o),
    .io_port_dq_1_ie         (io_port_dq_1_ie),
    .io_port_dq_1_oe         (io_port_dq_1_oe),
    .io_port_dq_2_o          (io_port_dq_2_o),
    .io_port_dq_2_ie         (io_port_dq_2_ie),
    .io_port_dq_2_oe         (io_port_dq_2_oe),
    .io_port_dq_3_o          (io_port_dq_3_o),
    .io_port_dq_3_ie         (io_port_dq_3_ie),
    .io_port_dq_3_oe         (io_port_dq_3_oe),
    .io_op_ready             (_phy_io_op_ready),
    .io_rx_valid             (io_link_rx_valid),
    .io_rx_bits              (io_link_rx_bits)
  );
  assign io_port_cs_0 = cs_dflt_0;
  assign io_link_tx_ready = _GEN & ~cs_deassert & _phy_io_op_ready;
  assign io_link_active = cs_assert;
endmodule

module SPIFlashMap(
  input         clock,
                reset,
                io_en,
  input  [1:0]  io_ctrl_insn_cmd_proto,
  input  [7:0]  io_ctrl_insn_cmd_code,
  input         io_ctrl_insn_cmd_en,
  input  [1:0]  io_ctrl_insn_addr_proto,
  input  [2:0]  io_ctrl_insn_addr_len,
  input  [7:0]  io_ctrl_insn_pad_code,
  input  [3:0]  io_ctrl_insn_pad_cnt,
  input  [1:0]  io_ctrl_insn_data_proto,
  input         io_ctrl_fmt_endian,
                io_addr_valid,
  input  [31:0] io_addr_bits_next,
                io_addr_bits_hold,
  input         io_data_ready,
                io_link_tx_ready,
                io_link_rx_valid,
  input  [7:0]  io_link_rx_bits,
  input         io_link_active,
  output        io_addr_ready,
                io_data_valid,
  output [7:0]  io_data_bits,
  output        io_link_tx_valid,
  output [7:0]  io_link_tx_bits,
                io_link_cnt,
  output [1:0]  io_link_fmt_proto,
  output        io_link_fmt_endian,
                io_link_fmt_iodir,
                io_link_cs_clear,
                io_link_lock
);

  wire [1:0] _io_link_fmt_proto_output;
  wire       cnt_en;
  reg  [2:0] casez_tmp;
  wire       merge = io_link_active & io_addr_bits_next == io_addr_bits_hold + 32'h1;
  reg  [3:0] cnt;
  wire       cnt_cmp_1 = cnt == 4'h1;
  reg  [2:0] state;
  wire       _T_1 = state == 3'h0;
  wire       _T_2 = state == 3'h1;
  wire       _T_3 = state == 3'h2;
  wire       _GEN = _T_1 | _T_2;
  assign cnt_en = ~_GEN & _T_3;
  wire       _T_4 = state == 3'h3;
  wire       _T_5 = state == 3'h4;
  wire       _GEN_0 = _T_3 | _T_4;
  assign _io_link_fmt_proto_output =
    _T_1
      ? io_ctrl_insn_addr_proto
      : _T_2
          ? io_ctrl_insn_cmd_proto
          : _GEN_0 | ~_T_5 ? io_ctrl_insn_addr_proto : io_ctrl_insn_data_proto;
  wire       _T_6 = state == 3'h5;
  wire       _GEN_1 = _T_2 | _T_3 | _T_4 | _T_5;
  wire       _io_link_tx_valid_output = ~_T_1 & (_GEN_1 | ~_T_6) & (~cnt_en | (|cnt));
  wire       _T_8 = state == 3'h6;
  wire       _io_data_valid_output = ~(_T_1 | _GEN_1) & (_T_6 ? io_link_rx_valid : _T_8);
  wire [2:0] _GEN_2 =
    (_T_6 ? io_data_ready & _io_data_valid_output : _T_8 & io_data_ready) ? 3'h0 : state;
  always @(*) begin
    casez (state)
      3'b000:
        casez_tmp =
          io_addr_valid
            ? (io_en ? (merge ? 3'h4 : io_ctrl_insn_cmd_en ? 3'h1 : 3'h2) : 3'h6)
            : state;
      3'b001:
        casez_tmp = io_link_tx_ready ? 3'h2 : state;
      3'b010:
        casez_tmp = cnt_cmp_1 & io_link_tx_ready | ~(|cnt) ? 3'h3 : state;
      3'b011:
        casez_tmp = io_link_tx_ready ? 3'h4 : state;
      3'b100:
        casez_tmp = io_link_tx_ready ? 3'h5 : state;
      3'b101:
        casez_tmp = _GEN_2;
      3'b110:
        casez_tmp = _GEN_2;
      default:
        casez_tmp = _GEN_2;
    endcase
  end // always @(*)
  always @(posedge clock) begin
    if (_T_1 | ~(_T_2 & io_link_tx_ready)) begin
      if (cnt_en & io_link_tx_ready & _io_link_tx_valid_output)
        cnt <= cnt - 4'h1;
    end
    else
      cnt <= {1'h0, io_ctrl_insn_addr_len};
    if (reset)
      state <= 3'h0;
    else
      state <= casez_tmp;
  end // always @(posedge)
  assign io_addr_ready = _T_1;
  assign io_data_valid = _io_data_valid_output;
  assign io_data_bits =
    _T_1 | _T_2 | _T_3 | _T_4 | _T_5 | _T_6 | ~_T_8 ? io_link_rx_bits : 8'h0;
  assign io_link_tx_valid = _io_link_tx_valid_output;
  assign io_link_tx_bits =
    _GEN
      ? io_ctrl_insn_cmd_code
      : _T_3
          ? (cnt_cmp_1 ? io_addr_bits_hold[7:0] : 8'h0)
            | (cnt == 4'h2 ? io_addr_bits_hold[15:8] : 8'h0)
            | (cnt == 4'h3 ? io_addr_bits_hold[23:16] : 8'h0)
            | (cnt == 4'h4 ? io_addr_bits_hold[31:24] : 8'h0)
          : _T_4 ? io_ctrl_insn_pad_code : io_ctrl_insn_cmd_code;
  assign io_link_cnt =
    {4'h0,
     _T_1 | _T_2 | _T_3 | ~_T_4
       ? {_io_link_fmt_proto_output == 2'h0,
          _io_link_fmt_proto_output == 2'h1,
          _io_link_fmt_proto_output == 2'h2,
          1'h0}
       : io_ctrl_insn_pad_cnt};
  assign io_link_fmt_proto = _io_link_fmt_proto_output;
  assign io_link_fmt_endian = io_ctrl_fmt_endian;
  assign io_link_fmt_iodir = _T_1 | _T_2 | _GEN_0 | ~_T_5;
  assign io_link_cs_clear = _T_1 & io_en & io_addr_valid & ~merge;
  assign io_link_lock = ~_T_1 | io_en & io_addr_valid;
endmodule

module SPIArbiter(
  input        clock,
               reset,
               io_inner_0_tx_valid,
  input  [7:0] io_inner_0_tx_bits,
               io_inner_0_cnt,
  input  [1:0] io_inner_0_fmt_proto,
  input        io_inner_0_fmt_endian,
               io_inner_0_fmt_iodir,
               io_inner_0_cs_clear,
               io_inner_0_lock,
               io_inner_1_tx_valid,
  input  [7:0] io_inner_1_tx_bits,
               io_inner_1_cnt,
  input  [1:0] io_inner_1_fmt_proto,
  input        io_inner_1_fmt_endian,
               io_inner_1_fmt_iodir,
               io_inner_1_cs_set,
               io_inner_1_cs_clear,
               io_inner_1_lock,
               io_outer_tx_ready,
               io_outer_rx_valid,
  input  [7:0] io_outer_rx_bits,
  input        io_outer_active,
               io_sel,
  output       io_inner_0_tx_ready,
               io_inner_0_rx_valid,
  output [7:0] io_inner_0_rx_bits,
  output       io_inner_0_active,
               io_inner_1_tx_ready,
               io_inner_1_rx_valid,
  output [7:0] io_inner_1_rx_bits,
  output       io_outer_tx_valid,
  output [7:0] io_outer_tx_bits,
               io_outer_cnt,
  output [1:0] io_outer_fmt_proto,
  output       io_outer_fmt_endian,
               io_outer_fmt_iodir,
               io_outer_cs_set,
               io_outer_cs_clear,
               io_outer_cs_hold
);

  reg  sel_0;
  reg  sel_1;
  wire lock = sel_0 & io_inner_0_lock | sel_1 & io_inner_1_lock;
  always @(posedge clock) begin
    if (reset) begin
      sel_0 <= 1'h1;
      sel_1 <= 1'h0;
    end
    else if (~lock) begin
      sel_0 <= ~io_sel;
      sel_1 <= io_sel;
    end
  end // always @(posedge)
  assign io_inner_0_tx_ready = io_outer_tx_ready & sel_0;
  assign io_inner_0_rx_valid = io_outer_rx_valid & sel_0;
  assign io_inner_0_rx_bits = io_outer_rx_bits;
  assign io_inner_0_active = io_outer_active & sel_0;
  assign io_inner_1_tx_ready = io_outer_tx_ready & sel_1;
  assign io_inner_1_rx_valid = io_outer_rx_valid & sel_1;
  assign io_inner_1_rx_bits = io_outer_rx_bits;
  assign io_outer_tx_valid = sel_0 & io_inner_0_tx_valid | sel_1 & io_inner_1_tx_valid;
  assign io_outer_tx_bits =
    (sel_0 ? io_inner_0_tx_bits : 8'h0) | (sel_1 ? io_inner_1_tx_bits : 8'h0);
  assign io_outer_cnt = (sel_0 ? io_inner_0_cnt : 8'h0) | (sel_1 ? io_inner_1_cnt : 8'h0);
  assign io_outer_fmt_proto =
    (sel_0 ? io_inner_0_fmt_proto : 2'h0) | (sel_1 ? io_inner_1_fmt_proto : 2'h0);
  assign io_outer_fmt_endian =
    sel_0 & io_inner_0_fmt_endian | sel_1 & io_inner_1_fmt_endian;
  assign io_outer_fmt_iodir = sel_0 & io_inner_0_fmt_iodir | sel_1 & io_inner_1_fmt_iodir;
  assign io_outer_cs_set = sel_0 | io_inner_1_cs_set;
  assign io_outer_cs_clear =
    ~lock & {sel_1, sel_0} != {io_sel, ~io_sel}
    | (sel_0 ? io_inner_0_cs_clear : io_inner_1_cs_clear);
  assign io_outer_cs_hold = sel_0;
endmodule

module TLSPIFlash(
  input         clock,
                reset,
                auto_mem_xing_in_a_valid,
                auto_mem_xing_in_a_bits_size,
  input  [12:0] auto_mem_xing_in_a_bits_source,
  input  [29:0] auto_mem_xing_in_a_bits_address,
  input         auto_mem_xing_in_d_ready,
                auto_control_xing_in_a_valid,
  input  [2:0]  auto_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_control_xing_in_a_bits_size,
  input  [9:0]  auto_control_xing_in_a_bits_source,
  input  [28:0] auto_control_xing_in_a_bits_address,
  input  [7:0]  auto_control_xing_in_a_bits_mask,
  input  [63:0] auto_control_xing_in_a_bits_data,
  input         auto_control_xing_in_d_ready,
                auto_io_out_dq_0_i,
                auto_io_out_dq_1_i,
                auto_io_out_dq_2_i,
                auto_io_out_dq_3_i,
  output        auto_int_xing_out_sync_0,
                auto_mem_xing_in_a_ready,
                auto_mem_xing_in_d_valid,
                auto_mem_xing_in_d_bits_size,
  output [12:0] auto_mem_xing_in_d_bits_source,
  output [7:0]  auto_mem_xing_in_d_bits_data,
  output        auto_control_xing_in_a_ready,
                auto_control_xing_in_d_valid,
  output [2:0]  auto_control_xing_in_d_bits_opcode,
  output [1:0]  auto_control_xing_in_d_bits_size,
  output [9:0]  auto_control_xing_in_d_bits_source,
  output [63:0] auto_control_xing_in_d_bits_data,
  output        auto_io_out_sck,
                auto_io_out_dq_0_o,
                auto_io_out_dq_0_ie,
                auto_io_out_dq_0_oe,
                auto_io_out_dq_1_o,
                auto_io_out_dq_1_ie,
                auto_io_out_dq_1_oe,
                auto_io_out_dq_2_o,
                auto_io_out_dq_2_ie,
                auto_io_out_dq_2_oe,
                auto_io_out_dq_3_o,
                auto_io_out_dq_3_ie,
                auto_io_out_dq_3_oe,
                auto_io_out_cs_0
);

  wire        out_woready_15;
  wire        _out_wofireMux_T;
  wire        out_backSel_9;
  wire        quash;
  wire        _arb_io_inner_0_tx_ready;
  wire        _arb_io_inner_0_rx_valid;
  wire [7:0]  _arb_io_inner_0_rx_bits;
  wire        _arb_io_inner_0_active;
  wire        _arb_io_inner_1_tx_ready;
  wire        _arb_io_inner_1_rx_valid;
  wire [7:0]  _arb_io_inner_1_rx_bits;
  wire        _arb_io_outer_tx_valid;
  wire [7:0]  _arb_io_outer_tx_bits;
  wire [7:0]  _arb_io_outer_cnt;
  wire [1:0]  _arb_io_outer_fmt_proto;
  wire        _arb_io_outer_fmt_endian;
  wire        _arb_io_outer_fmt_iodir;
  wire        _arb_io_outer_cs_set;
  wire        _arb_io_outer_cs_clear;
  wire        _arb_io_outer_cs_hold;
  wire        _flash_io_addr_ready;
  wire        _flash_io_link_tx_valid;
  wire [7:0]  _flash_io_link_tx_bits;
  wire [7:0]  _flash_io_link_cnt;
  wire [1:0]  _flash_io_link_fmt_proto;
  wire        _flash_io_link_fmt_endian;
  wire        _flash_io_link_fmt_iodir;
  wire        _flash_io_link_cs_clear;
  wire        _flash_io_link_lock;
  wire        _mac_io_link_tx_ready;
  wire        _mac_io_link_rx_valid;
  wire [7:0]  _mac_io_link_rx_bits;
  wire        _mac_io_link_active;
  wire        _fifo_io_link_tx_valid;
  wire [7:0]  _fifo_io_link_tx_bits;
  wire [7:0]  _fifo_io_link_cnt;
  wire [1:0]  _fifo_io_link_fmt_proto;
  wire        _fifo_io_link_fmt_endian;
  wire        _fifo_io_link_fmt_iodir;
  wire        _fifo_io_link_cs_set;
  wire        _fifo_io_link_cs_clear;
  wire        _fifo_io_link_lock;
  wire        _fifo_io_tx_ready;
  wire        _fifo_io_rx_valid;
  wire [7:0]  _fifo_io_rx_bits;
  wire        _fifo_io_ip_txwm;
  wire        _fifo_io_ip_rxwm;
  reg         casez_tmp;
  reg  [63:0] casez_tmp_0;
  reg  [1:0]  ctrl_fmt_proto;
  reg         ctrl_fmt_endian;
  reg         ctrl_fmt_iodir;
  reg  [3:0]  ctrl_fmt_len;
  reg  [11:0] ctrl_sck_div;
  reg         ctrl_sck_pol;
  reg         ctrl_sck_pha;
  reg         ctrl_cs_id;
  reg         ctrl_cs_dflt_0;
  reg  [1:0]  ctrl_cs_mode;
  reg  [7:0]  ctrl_dla_cssck;
  reg  [7:0]  ctrl_dla_sckcs;
  reg  [7:0]  ctrl_dla_intercs;
  reg  [7:0]  ctrl_dla_interxfr;
  reg  [3:0]  ctrl_wm_tx;
  reg  [3:0]  ctrl_wm_rx;
  reg  [11:0] ctrl_extradel_coarse;
  reg  [4:0]  ctrl_sampledel_sd;
  reg         ie_txwm;
  reg         ie_rxwm;
  reg         a_size;
  reg  [12:0] a_source;
  reg  [29:0] a_address;
  reg  [1:0]  insn_cmd_proto;
  reg  [7:0]  insn_cmd_code;
  reg         insn_cmd_en;
  reg  [1:0]  insn_addr_proto;
  reg  [2:0]  insn_addr_len;
  reg  [7:0]  insn_pad_code;
  reg  [3:0]  insn_pad_cnt;
  reg  [1:0]  insn_data_proto;
  reg         flash_en;
  wire        out_front_bits_read = auto_control_xing_in_a_bits_opcode == 3'h4;
  wire        _out_out_bits_data_WIRE_14 =
    auto_control_xing_in_a_bits_address[11:7] == 5'h0;
  assign quash =
    out_woready_15 & auto_control_xing_in_a_bits_mask[3]
    & auto_control_xing_in_a_bits_data[31];
  assign out_backSel_9 = auto_control_xing_in_a_bits_address[6:3] == 4'h9;
  assign _out_wofireMux_T = auto_control_xing_in_a_valid & auto_control_xing_in_d_ready;
  wire        _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;
  wire        out_woready_2 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h0
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_20 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h2
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_6 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h5
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_31 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h7
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_36 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h8
    & _out_out_bits_data_WIRE_14;
  assign out_woready_15 = _out_wofireMux_T_2 & out_backSel_9 & _out_out_bits_data_WIRE_14;
  wire        out_woready_8 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'hA
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_29 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'hC
    & _out_out_bits_data_WIRE_14;
  wire        out_woready_10 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'hE
    & _out_out_bits_data_WIRE_14;
  always @(*) begin
    casez (auto_control_xing_in_a_bits_address[6:3])
      4'b0000:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b0001:
        casez_tmp = 1'h1;
      4'b0010:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b0011:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b0100:
        casez_tmp = 1'h1;
      4'b0101:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b0110:
        casez_tmp = 1'h1;
      4'b0111:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b1000:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b1001:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b1010:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b1011:
        casez_tmp = 1'h1;
      4'b1100:
        casez_tmp = _out_out_bits_data_WIRE_14;
      4'b1101:
        casez_tmp = 1'h1;
      4'b1110:
        casez_tmp = _out_out_bits_data_WIRE_14;
      default:
        casez_tmp = 1'h1;
    endcase
  end // always @(*)
  always @(*) begin
    casez (auto_control_xing_in_a_bits_address[6:3])
      4'b0000:
        casez_tmp_0 = {30'h0, ctrl_sck_pol, ctrl_sck_pha, 20'h0, ctrl_sck_div};
      4'b0001:
        casez_tmp_0 = 64'h0;
      4'b0010:
        casez_tmp_0 = {31'h0, ctrl_cs_dflt_0, 31'h0, ctrl_cs_id};
      4'b0011:
        casez_tmp_0 = {62'h0, ctrl_cs_mode};
      4'b0100:
        casez_tmp_0 = 64'h0;
      4'b0101:
        casez_tmp_0 =
          {8'h0,
           ctrl_dla_interxfr,
           8'h0,
           ctrl_dla_intercs,
           8'h0,
           ctrl_dla_sckcs,
           8'h0,
           ctrl_dla_cssck};
      4'b0110:
        casez_tmp_0 = 64'h0;
      4'b0111:
        casez_tmp_0 = {27'h0, ctrl_sampledel_sd, 20'h0, ctrl_extradel_coarse};
      4'b1000:
        casez_tmp_0 =
          {44'h0, ctrl_fmt_len, 12'h0, ctrl_fmt_iodir, ctrl_fmt_endian, ctrl_fmt_proto};
      4'b1001:
        casez_tmp_0 =
          {~_fifo_io_rx_valid, 23'h0, _fifo_io_rx_bits, ~_fifo_io_tx_ready, 31'h0};
      4'b1010:
        casez_tmp_0 = {28'h0, ctrl_wm_rx, 28'h0, ctrl_wm_tx};
      4'b1011:
        casez_tmp_0 = 64'h0;
      4'b1100:
        casez_tmp_0 =
          {insn_pad_code,
           insn_cmd_code,
           2'h0,
           insn_data_proto,
           insn_addr_proto,
           insn_cmd_proto,
           insn_pad_cnt,
           insn_addr_len,
           insn_cmd_en,
           31'h0,
           flash_en};
      4'b1101:
        casez_tmp_0 = 64'h0;
      4'b1110:
        casez_tmp_0 =
          {30'h0, _fifo_io_ip_rxwm, _fifo_io_ip_txwm, 30'h0, ie_rxwm, ie_txwm};
      default:
        casez_tmp_0 = 64'h0;
    endcase
  end // always @(*)
  wire [11:0] _out_womask_T_30 =
    {{4{auto_control_xing_in_a_bits_mask[1]}}, {8{auto_control_xing_in_a_bits_mask[0]}}};
  always @(posedge clock) begin
    if (reset) begin
      ctrl_fmt_proto <= 2'h0;
      ctrl_fmt_endian <= 1'h0;
      ctrl_fmt_iodir <= 1'h0;
      ctrl_fmt_len <= 4'h8;
      ctrl_sck_div <= 12'h3;
      ctrl_sck_pol <= 1'h0;
      ctrl_sck_pha <= 1'h0;
      ctrl_cs_id <= 1'h0;
      ctrl_cs_dflt_0 <= 1'h1;
      ctrl_cs_mode <= 2'h0;
      ctrl_dla_cssck <= 8'h1;
      ctrl_dla_sckcs <= 8'h1;
      ctrl_dla_intercs <= 8'h1;
      ctrl_dla_interxfr <= 8'h0;
      ctrl_wm_tx <= 4'h0;
      ctrl_wm_rx <= 4'h0;
      ctrl_extradel_coarse <= 12'h0;
      ctrl_sampledel_sd <= 5'h0;
      ie_txwm <= 1'h0;
      ie_rxwm <= 1'h0;
      insn_cmd_proto <= 2'h0;
      insn_cmd_code <= 8'h3;
      insn_cmd_en <= 1'h1;
      insn_addr_proto <= 2'h0;
      insn_addr_len <= 3'h3;
      insn_pad_code <= 8'h0;
      insn_pad_cnt <= 4'h0;
      insn_data_proto <= 2'h0;
      flash_en <= 1'h1;
    end
    else begin
      if (out_woready_36 & auto_control_xing_in_a_bits_mask[0])
        ctrl_fmt_proto <= auto_control_xing_in_a_bits_data[1:0];
      if (out_woready_36 & auto_control_xing_in_a_bits_mask[0])
        ctrl_fmt_endian <= auto_control_xing_in_a_bits_data[2];
      if (out_woready_36 & auto_control_xing_in_a_bits_mask[0])
        ctrl_fmt_iodir <= auto_control_xing_in_a_bits_data[3];
      if (out_woready_36 & auto_control_xing_in_a_bits_mask[2])
        ctrl_fmt_len <= auto_control_xing_in_a_bits_data[19:16];
      if (out_woready_2 & (&_out_womask_T_30))
        ctrl_sck_div <= auto_control_xing_in_a_bits_data[11:0];
      if (out_woready_2 & auto_control_xing_in_a_bits_mask[4])
        ctrl_sck_pol <= auto_control_xing_in_a_bits_data[33];
      if (out_woready_2 & auto_control_xing_in_a_bits_mask[4])
        ctrl_sck_pha <= auto_control_xing_in_a_bits_data[32];
      if (out_woready_20 & auto_control_xing_in_a_bits_mask[0])
        ctrl_cs_id <= auto_control_xing_in_a_bits_data[0];
      if (out_woready_20 & auto_control_xing_in_a_bits_mask[4])
        ctrl_cs_dflt_0 <= auto_control_xing_in_a_bits_data[32];
      if (_out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[6:3] == 4'h3
          & _out_out_bits_data_WIRE_14 & auto_control_xing_in_a_bits_mask[0])
        ctrl_cs_mode <= auto_control_xing_in_a_bits_data[1:0];
      if (out_woready_6 & auto_control_xing_in_a_bits_mask[0])
        ctrl_dla_cssck <= auto_control_xing_in_a_bits_data[7:0];
      if (out_woready_6 & auto_control_xing_in_a_bits_mask[2])
        ctrl_dla_sckcs <= auto_control_xing_in_a_bits_data[23:16];
      if (out_woready_6 & auto_control_xing_in_a_bits_mask[4])
        ctrl_dla_intercs <= auto_control_xing_in_a_bits_data[39:32];
      if (out_woready_6 & auto_control_xing_in_a_bits_mask[6])
        ctrl_dla_interxfr <= auto_control_xing_in_a_bits_data[55:48];
      if (out_woready_8 & auto_control_xing_in_a_bits_mask[0])
        ctrl_wm_tx <= auto_control_xing_in_a_bits_data[3:0];
      if (out_woready_8 & auto_control_xing_in_a_bits_mask[4])
        ctrl_wm_rx <= auto_control_xing_in_a_bits_data[35:32];
      if (out_woready_31 & (&_out_womask_T_30))
        ctrl_extradel_coarse <= auto_control_xing_in_a_bits_data[11:0];
      if (out_woready_31 & auto_control_xing_in_a_bits_mask[4])
        ctrl_sampledel_sd <= auto_control_xing_in_a_bits_data[36:32];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[0])
        ie_txwm <= auto_control_xing_in_a_bits_data[0];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[0])
        ie_rxwm <= auto_control_xing_in_a_bits_data[1];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[5])
        insn_cmd_proto <= auto_control_xing_in_a_bits_data[41:40];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[6])
        insn_cmd_code <= auto_control_xing_in_a_bits_data[55:48];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[4])
        insn_cmd_en <= auto_control_xing_in_a_bits_data[32];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[5])
        insn_addr_proto <= auto_control_xing_in_a_bits_data[43:42];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[4])
        insn_addr_len <= auto_control_xing_in_a_bits_data[35:33];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[7])
        insn_pad_code <= auto_control_xing_in_a_bits_data[63:56];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[4])
        insn_pad_cnt <= auto_control_xing_in_a_bits_data[39:36];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[5])
        insn_data_proto <= auto_control_xing_in_a_bits_data[45:44];
      if (out_woready_29 & auto_control_xing_in_a_bits_mask[0])
        flash_en <= auto_control_xing_in_a_bits_data[0];
    end
    if (_flash_io_addr_ready & auto_mem_xing_in_a_valid) begin
      a_size <= auto_mem_xing_in_a_bits_size;
      a_source <= auto_mem_xing_in_a_bits_source;
      a_address <= auto_mem_xing_in_a_bits_address;
    end
  end // always @(posedge)
  IntSyncCrossingSource_1 intsource (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (_fifo_io_ip_txwm & ie_txwm | _fifo_io_ip_rxwm & ie_rxwm),
    .auto_out_sync_0 (auto_int_xing_out_sync_0)
  );
  SPIFIFO fifo (
    .clock              (clock),
    .reset              (reset),
    .io_ctrl_fmt_proto  (ctrl_fmt_proto),
    .io_ctrl_fmt_endian (ctrl_fmt_endian),
    .io_ctrl_fmt_iodir  (ctrl_fmt_iodir),
    .io_ctrl_fmt_len    (ctrl_fmt_len),
    .io_ctrl_cs_mode    (ctrl_cs_mode),
    .io_ctrl_wm_tx      (ctrl_wm_tx),
    .io_ctrl_wm_rx      (ctrl_wm_rx),
    .io_link_tx_ready   (_arb_io_inner_1_tx_ready),
    .io_link_rx_valid   (_arb_io_inner_1_rx_valid),
    .io_link_rx_bits    (_arb_io_inner_1_rx_bits),
    .io_tx_valid        (out_woready_15 & auto_control_xing_in_a_bits_mask[0] & ~quash),
    .io_tx_bits         (auto_control_xing_in_a_bits_data[7:0]),
    .io_rx_ready
      (_out_wofireMux_T & out_front_bits_read & out_backSel_9 & _out_out_bits_data_WIRE_14
       & auto_control_xing_in_a_bits_mask[4]),
    .io_link_tx_valid   (_fifo_io_link_tx_valid),
    .io_link_tx_bits    (_fifo_io_link_tx_bits),
    .io_link_cnt        (_fifo_io_link_cnt),
    .io_link_fmt_proto  (_fifo_io_link_fmt_proto),
    .io_link_fmt_endian (_fifo_io_link_fmt_endian),
    .io_link_fmt_iodir  (_fifo_io_link_fmt_iodir),
    .io_link_cs_set     (_fifo_io_link_cs_set),
    .io_link_cs_clear   (_fifo_io_link_cs_clear),
    .io_link_lock       (_fifo_io_link_lock),
    .io_tx_ready        (_fifo_io_tx_ready),
    .io_rx_valid        (_fifo_io_rx_valid),
    .io_rx_bits         (_fifo_io_rx_bits),
    .io_ip_txwm         (_fifo_io_ip_txwm),
    .io_ip_rxwm         (_fifo_io_ip_rxwm)
  );
  SPIMedia mac (
    .clock                   (clock),
    .reset                   (reset),
    .io_port_dq_0_i          (auto_io_out_dq_0_i),
    .io_port_dq_1_i          (auto_io_out_dq_1_i),
    .io_port_dq_2_i          (auto_io_out_dq_2_i),
    .io_port_dq_3_i          (auto_io_out_dq_3_i),
    .io_ctrl_sck_div         (ctrl_sck_div),
    .io_ctrl_sck_pol         (ctrl_sck_pol),
    .io_ctrl_sck_pha         (ctrl_sck_pha),
    .io_ctrl_dla_cssck       (ctrl_dla_cssck),
    .io_ctrl_dla_sckcs       (ctrl_dla_sckcs),
    .io_ctrl_dla_intercs     (ctrl_dla_intercs),
    .io_ctrl_dla_interxfr    (ctrl_dla_interxfr),
    .io_ctrl_cs_id           (ctrl_cs_id),
    .io_ctrl_cs_dflt_0       (ctrl_cs_dflt_0),
    .io_ctrl_extradel_coarse (ctrl_extradel_coarse),
    .io_ctrl_sampledel_sd    (ctrl_sampledel_sd),
    .io_link_tx_valid        (_arb_io_outer_tx_valid),
    .io_link_tx_bits         (_arb_io_outer_tx_bits),
    .io_link_cnt             (_arb_io_outer_cnt),
    .io_link_fmt_proto       (_arb_io_outer_fmt_proto),
    .io_link_fmt_endian      (_arb_io_outer_fmt_endian),
    .io_link_fmt_iodir       (_arb_io_outer_fmt_iodir),
    .io_link_cs_set          (_arb_io_outer_cs_set),
    .io_link_cs_clear        (_arb_io_outer_cs_clear),
    .io_link_cs_hold         (_arb_io_outer_cs_hold),
    .io_port_sck             (auto_io_out_sck),
    .io_port_dq_0_o          (auto_io_out_dq_0_o),
    .io_port_dq_0_ie         (auto_io_out_dq_0_ie),
    .io_port_dq_0_oe         (auto_io_out_dq_0_oe),
    .io_port_dq_1_o          (auto_io_out_dq_1_o),
    .io_port_dq_1_ie         (auto_io_out_dq_1_ie),
    .io_port_dq_1_oe         (auto_io_out_dq_1_oe),
    .io_port_dq_2_o          (auto_io_out_dq_2_o),
    .io_port_dq_2_ie         (auto_io_out_dq_2_ie),
    .io_port_dq_2_oe         (auto_io_out_dq_2_oe),
    .io_port_dq_3_o          (auto_io_out_dq_3_o),
    .io_port_dq_3_ie         (auto_io_out_dq_3_ie),
    .io_port_dq_3_oe         (auto_io_out_dq_3_oe),
    .io_port_cs_0            (auto_io_out_cs_0),
    .io_link_tx_ready        (_mac_io_link_tx_ready),
    .io_link_rx_valid        (_mac_io_link_rx_valid),
    .io_link_rx_bits         (_mac_io_link_rx_bits),
    .io_link_active          (_mac_io_link_active)
  );
  SPIFlashMap flash (
    .clock                   (clock),
    .reset                   (reset),
    .io_en                   (flash_en),
    .io_ctrl_insn_cmd_proto  (insn_cmd_proto),
    .io_ctrl_insn_cmd_code   (insn_cmd_code),
    .io_ctrl_insn_cmd_en     (insn_cmd_en),
    .io_ctrl_insn_addr_proto (insn_addr_proto),
    .io_ctrl_insn_addr_len   (insn_addr_len),
    .io_ctrl_insn_pad_code   (insn_pad_code),
    .io_ctrl_insn_pad_cnt    (insn_pad_cnt),
    .io_ctrl_insn_data_proto (insn_data_proto),
    .io_ctrl_fmt_endian      (ctrl_fmt_endian),
    .io_addr_valid           (auto_mem_xing_in_a_valid),
    .io_addr_bits_next       ({3'h0, auto_mem_xing_in_a_bits_address[28:0]}),
    .io_addr_bits_hold       ({3'h0, a_address[28:0]}),
    .io_data_ready           (auto_mem_xing_in_d_ready),
    .io_link_tx_ready        (_arb_io_inner_0_tx_ready),
    .io_link_rx_valid        (_arb_io_inner_0_rx_valid),
    .io_link_rx_bits         (_arb_io_inner_0_rx_bits),
    .io_link_active          (_arb_io_inner_0_active),
    .io_addr_ready           (_flash_io_addr_ready),
    .io_data_valid           (auto_mem_xing_in_d_valid),
    .io_data_bits            (auto_mem_xing_in_d_bits_data),
    .io_link_tx_valid        (_flash_io_link_tx_valid),
    .io_link_tx_bits         (_flash_io_link_tx_bits),
    .io_link_cnt             (_flash_io_link_cnt),
    .io_link_fmt_proto       (_flash_io_link_fmt_proto),
    .io_link_fmt_endian      (_flash_io_link_fmt_endian),
    .io_link_fmt_iodir       (_flash_io_link_fmt_iodir),
    .io_link_cs_clear        (_flash_io_link_cs_clear),
    .io_link_lock            (_flash_io_link_lock)
  );
  SPIArbiter arb (
    .clock                 (clock),
    .reset                 (reset),
    .io_inner_0_tx_valid   (_flash_io_link_tx_valid),
    .io_inner_0_tx_bits    (_flash_io_link_tx_bits),
    .io_inner_0_cnt        (_flash_io_link_cnt),
    .io_inner_0_fmt_proto  (_flash_io_link_fmt_proto),
    .io_inner_0_fmt_endian (_flash_io_link_fmt_endian),
    .io_inner_0_fmt_iodir  (_flash_io_link_fmt_iodir),
    .io_inner_0_cs_clear   (_flash_io_link_cs_clear),
    .io_inner_0_lock       (_flash_io_link_lock),
    .io_inner_1_tx_valid   (_fifo_io_link_tx_valid),
    .io_inner_1_tx_bits    (_fifo_io_link_tx_bits),
    .io_inner_1_cnt        (_fifo_io_link_cnt),
    .io_inner_1_fmt_proto  (_fifo_io_link_fmt_proto),
    .io_inner_1_fmt_endian (_fifo_io_link_fmt_endian),
    .io_inner_1_fmt_iodir  (_fifo_io_link_fmt_iodir),
    .io_inner_1_cs_set     (_fifo_io_link_cs_set),
    .io_inner_1_cs_clear   (_fifo_io_link_cs_clear),
    .io_inner_1_lock       (_fifo_io_link_lock),
    .io_outer_tx_ready     (_mac_io_link_tx_ready),
    .io_outer_rx_valid     (_mac_io_link_rx_valid),
    .io_outer_rx_bits      (_mac_io_link_rx_bits),
    .io_outer_active       (_mac_io_link_active),
    .io_sel                (~flash_en),
    .io_inner_0_tx_ready   (_arb_io_inner_0_tx_ready),
    .io_inner_0_rx_valid   (_arb_io_inner_0_rx_valid),
    .io_inner_0_rx_bits    (_arb_io_inner_0_rx_bits),
    .io_inner_0_active     (_arb_io_inner_0_active),
    .io_inner_1_tx_ready   (_arb_io_inner_1_tx_ready),
    .io_inner_1_rx_valid   (_arb_io_inner_1_rx_valid),
    .io_inner_1_rx_bits    (_arb_io_inner_1_rx_bits),
    .io_outer_tx_valid     (_arb_io_outer_tx_valid),
    .io_outer_tx_bits      (_arb_io_outer_tx_bits),
    .io_outer_cnt          (_arb_io_outer_cnt),
    .io_outer_fmt_proto    (_arb_io_outer_fmt_proto),
    .io_outer_fmt_endian   (_arb_io_outer_fmt_endian),
    .io_outer_fmt_iodir    (_arb_io_outer_fmt_iodir),
    .io_outer_cs_set       (_arb_io_outer_cs_set),
    .io_outer_cs_clear     (_arb_io_outer_cs_clear),
    .io_outer_cs_hold      (_arb_io_outer_cs_hold)
  );
  assign auto_mem_xing_in_a_ready = _flash_io_addr_ready;
  assign auto_mem_xing_in_d_bits_size = a_size;
  assign auto_mem_xing_in_d_bits_source = a_source;
  assign auto_control_xing_in_a_ready = auto_control_xing_in_d_ready;
  assign auto_control_xing_in_d_valid = auto_control_xing_in_a_valid;
  assign auto_control_xing_in_d_bits_opcode = {2'h0, out_front_bits_read};
  assign auto_control_xing_in_d_bits_size = auto_control_xing_in_a_bits_size;
  assign auto_control_xing_in_d_bits_source = auto_control_xing_in_a_bits_source;
  assign auto_control_xing_in_d_bits_data = casez_tmp ? casez_tmp_0 : 64'h0;
endmodule

module ClockSinkDomain_3(
  input         auto_qspi_0_mem_xing_in_a_valid,
                auto_qspi_0_mem_xing_in_a_bits_size,
  input  [12:0] auto_qspi_0_mem_xing_in_a_bits_source,
  input  [29:0] auto_qspi_0_mem_xing_in_a_bits_address,
  input         auto_qspi_0_mem_xing_in_d_ready,
                auto_qspi_0_control_xing_in_a_valid,
  input  [2:0]  auto_qspi_0_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_qspi_0_control_xing_in_a_bits_size,
  input  [9:0]  auto_qspi_0_control_xing_in_a_bits_source,
  input  [28:0] auto_qspi_0_control_xing_in_a_bits_address,
  input  [7:0]  auto_qspi_0_control_xing_in_a_bits_mask,
  input  [63:0] auto_qspi_0_control_xing_in_a_bits_data,
  input         auto_qspi_0_control_xing_in_d_ready,
                auto_qspi_0_io_out_dq_0_i,
                auto_qspi_0_io_out_dq_1_i,
                auto_qspi_0_io_out_dq_2_i,
                auto_qspi_0_io_out_dq_3_i,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_qspi_0_int_xing_out_sync_0,
                auto_qspi_0_mem_xing_in_a_ready,
                auto_qspi_0_mem_xing_in_d_valid,
                auto_qspi_0_mem_xing_in_d_bits_size,
  output [12:0] auto_qspi_0_mem_xing_in_d_bits_source,
  output [7:0]  auto_qspi_0_mem_xing_in_d_bits_data,
  output        auto_qspi_0_control_xing_in_a_ready,
                auto_qspi_0_control_xing_in_d_valid,
  output [2:0]  auto_qspi_0_control_xing_in_d_bits_opcode,
  output [1:0]  auto_qspi_0_control_xing_in_d_bits_size,
  output [9:0]  auto_qspi_0_control_xing_in_d_bits_source,
  output [63:0] auto_qspi_0_control_xing_in_d_bits_data,
  output        auto_qspi_0_io_out_sck,
                auto_qspi_0_io_out_dq_0_o,
                auto_qspi_0_io_out_dq_0_ie,
                auto_qspi_0_io_out_dq_0_oe,
                auto_qspi_0_io_out_dq_1_o,
                auto_qspi_0_io_out_dq_1_ie,
                auto_qspi_0_io_out_dq_1_oe,
                auto_qspi_0_io_out_dq_2_o,
                auto_qspi_0_io_out_dq_2_ie,
                auto_qspi_0_io_out_dq_2_oe,
                auto_qspi_0_io_out_dq_3_o,
                auto_qspi_0_io_out_dq_3_ie,
                auto_qspi_0_io_out_dq_3_oe,
                auto_qspi_0_io_out_cs_0
);

  TLSPIFlash qspi_0 (
    .clock                               (auto_clock_in_clock),
    .reset                               (auto_clock_in_reset),
    .auto_mem_xing_in_a_valid            (auto_qspi_0_mem_xing_in_a_valid),
    .auto_mem_xing_in_a_bits_size        (auto_qspi_0_mem_xing_in_a_bits_size),
    .auto_mem_xing_in_a_bits_source      (auto_qspi_0_mem_xing_in_a_bits_source),
    .auto_mem_xing_in_a_bits_address     (auto_qspi_0_mem_xing_in_a_bits_address),
    .auto_mem_xing_in_d_ready            (auto_qspi_0_mem_xing_in_d_ready),
    .auto_control_xing_in_a_valid        (auto_qspi_0_control_xing_in_a_valid),
    .auto_control_xing_in_a_bits_opcode  (auto_qspi_0_control_xing_in_a_bits_opcode),
    .auto_control_xing_in_a_bits_size    (auto_qspi_0_control_xing_in_a_bits_size),
    .auto_control_xing_in_a_bits_source  (auto_qspi_0_control_xing_in_a_bits_source),
    .auto_control_xing_in_a_bits_address (auto_qspi_0_control_xing_in_a_bits_address),
    .auto_control_xing_in_a_bits_mask    (auto_qspi_0_control_xing_in_a_bits_mask),
    .auto_control_xing_in_a_bits_data    (auto_qspi_0_control_xing_in_a_bits_data),
    .auto_control_xing_in_d_ready        (auto_qspi_0_control_xing_in_d_ready),
    .auto_io_out_dq_0_i                  (auto_qspi_0_io_out_dq_0_i),
    .auto_io_out_dq_1_i                  (auto_qspi_0_io_out_dq_1_i),
    .auto_io_out_dq_2_i                  (auto_qspi_0_io_out_dq_2_i),
    .auto_io_out_dq_3_i                  (auto_qspi_0_io_out_dq_3_i),
    .auto_int_xing_out_sync_0            (auto_qspi_0_int_xing_out_sync_0),
    .auto_mem_xing_in_a_ready            (auto_qspi_0_mem_xing_in_a_ready),
    .auto_mem_xing_in_d_valid            (auto_qspi_0_mem_xing_in_d_valid),
    .auto_mem_xing_in_d_bits_size        (auto_qspi_0_mem_xing_in_d_bits_size),
    .auto_mem_xing_in_d_bits_source      (auto_qspi_0_mem_xing_in_d_bits_source),
    .auto_mem_xing_in_d_bits_data        (auto_qspi_0_mem_xing_in_d_bits_data),
    .auto_control_xing_in_a_ready        (auto_qspi_0_control_xing_in_a_ready),
    .auto_control_xing_in_d_valid        (auto_qspi_0_control_xing_in_d_valid),
    .auto_control_xing_in_d_bits_opcode  (auto_qspi_0_control_xing_in_d_bits_opcode),
    .auto_control_xing_in_d_bits_size    (auto_qspi_0_control_xing_in_d_bits_size),
    .auto_control_xing_in_d_bits_source  (auto_qspi_0_control_xing_in_d_bits_source),
    .auto_control_xing_in_d_bits_data    (auto_qspi_0_control_xing_in_d_bits_data),
    .auto_io_out_sck                     (auto_qspi_0_io_out_sck),
    .auto_io_out_dq_0_o                  (auto_qspi_0_io_out_dq_0_o),
    .auto_io_out_dq_0_ie                 (auto_qspi_0_io_out_dq_0_ie),
    .auto_io_out_dq_0_oe                 (auto_qspi_0_io_out_dq_0_oe),
    .auto_io_out_dq_1_o                  (auto_qspi_0_io_out_dq_1_o),
    .auto_io_out_dq_1_ie                 (auto_qspi_0_io_out_dq_1_ie),
    .auto_io_out_dq_1_oe                 (auto_qspi_0_io_out_dq_1_oe),
    .auto_io_out_dq_2_o                  (auto_qspi_0_io_out_dq_2_o),
    .auto_io_out_dq_2_ie                 (auto_qspi_0_io_out_dq_2_ie),
    .auto_io_out_dq_2_oe                 (auto_qspi_0_io_out_dq_2_oe),
    .auto_io_out_dq_3_o                  (auto_qspi_0_io_out_dq_3_o),
    .auto_io_out_dq_3_ie                 (auto_qspi_0_io_out_dq_3_ie),
    .auto_io_out_dq_3_oe                 (auto_qspi_0_io_out_dq_3_oe),
    .auto_io_out_cs_0                    (auto_qspi_0_io_out_cs_0)
  );
endmodule

// external module plusarg_reader

// external module plusarg_reader

module UARTTx(
  input         clock,
                reset,
                io_en,
                io_in_valid,
  input  [7:0]  io_in_bits,
  input  [15:0] io_div,
  input         io_nstop,
  output        io_in_ready,
                io_out
);

  wire [31:0] _plusarg_reader_1_out;
  wire [31:0] _plusarg_reader_out;
  reg  [15:0] prescaler;
  reg  [3:0]  counter;
  reg  [8:0]  shifter;
  reg         out;
  wire        _io_in_ready_output = io_en & ~(|counter);
  wire        _T_4 = _io_in_ready_output & io_in_valid;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if ((`PRINTF_COND_) & _T_4 & (|_plusarg_reader_1_out) & ~reset)
        $fwrite(32'h80000002, "UART TX (%x): %c\n", io_in_bits, io_in_bits);
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        pulse = prescaler == 16'h0;
  wire        _T_5 = _T_4 & (|_plusarg_reader_out);
  wire        _T_6 = pulse & (|counter);
  always @(posedge clock) begin
    if (reset) begin
      prescaler <= 16'h0;
      counter <= 4'h0;
      out <= 1'h1;
    end
    else begin
      if (|counter) begin
        if (pulse)
          prescaler <= io_div;
        else
          prescaler <= prescaler - 16'h1;
      end
      if (_T_6) begin
        counter <= counter - 4'h1;
        out <= shifter[0];
      end
      else if (_T_5)
        counter <= (io_nstop ? 4'h0 : 4'hA) | (io_nstop ? 4'hB : 4'h0);
    end
    if (_T_6)
      shifter <= {1'h1, shifter[8:1]};
    else if (_T_5)
      shifter <= {io_in_bits, 1'h0};
  end // always @(posedge)
  plusarg_reader #(
    .DEFAULT(1),
    .FORMAT("uart_tx=%d"),
    .WIDTH(32)
  ) plusarg_reader (
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .DEFAULT(0),
    .FORMAT("uart_tx_printf=%d"),
    .WIDTH(32)
  ) plusarg_reader_1 (
    .out (_plusarg_reader_1_out)
  );
  assign io_in_ready = _io_in_ready_output;
  assign io_out = out;
endmodule

module UARTRx(
  input         clock,
                reset,
                io_en,
                io_in,
  input  [15:0] io_div,
  output        io_out_valid,
  output [7:0]  io_out_bits
);

  reg  [1:0]  debounce;
  reg  [12:0] prescaler;
  reg  [3:0]  data_count;
  reg  [3:0]  sample_count;
  reg  [2:0]  sample;
  reg  [7:0]  shifter;
  reg         valid;
  reg         state;
  wire [7:0]  _GEN = {data_count, sample_count} - 8'h1;
  wire        pulse = prescaler == 13'h0;
  wire        data_last = data_count == 4'h0;
  wire        sample_mid = sample_count == 4'h7;
  wire        _GEN_0 = ~io_in & (&debounce);
  wire        _GEN_1 = _GEN_0 | state;
  wire        _GEN_2 = state & pulse;
  wire        _GEN_3 = state & pulse & sample_mid;
  wire        restore = ~state & ~io_in & (&debounce) | pulse;
  always @(posedge clock) begin
    if (reset) begin
      debounce <= 2'h0;
      valid <= 1'h0;
      state <= 1'h0;
    end
    else begin
      if (io_en) begin
        if (state) begin
        end
        else if (io_in) begin
          if (io_in & (|debounce))
            debounce <= debounce - 2'h1;
        end
        else
          debounce <= debounce + 2'h1;
      end
      else
        debounce <= 2'h0;
      valid <= state & _GEN_3 & data_last;
      if (state)
        state <= ~(state & pulse & sample_mid & data_last) & state;
      else
        state <= _GEN_1;
    end
    if (_GEN_1)
      prescaler <=
        (restore ? {1'h0, io_div[15:4]} : prescaler)
        - {12'h0, ~(restore & sample_count < io_div[3:0])};
    if (state) begin
      if (_GEN_2) begin
        data_count <= _GEN[7:4];
        sample_count <= _GEN[3:0];
      end
    end
    else if (_GEN_0) begin
      data_count <= 4'h9;
      sample_count <= 4'hF;
    end
    if (state & _GEN_2)
      sample <= {sample[1:0], io_in};
    if (~state | ~_GEN_3 | data_last) begin
    end
    else
      shifter <=
        {sample[0] & sample[1] | sample[0] & sample[2] | sample[1] & sample[2],
         shifter[7:1]};
  end // always @(posedge)
  assign io_out_valid = valid;
  assign io_out_bits = shifter;
endmodule

module TLUART(
  input         clock,
                reset,
                auto_control_xing_in_a_valid,
  input  [2:0]  auto_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_control_xing_in_a_bits_size,
  input  [9:0]  auto_control_xing_in_a_bits_source,
  input  [28:0] auto_control_xing_in_a_bits_address,
  input  [7:0]  auto_control_xing_in_a_bits_mask,
  input  [63:0] auto_control_xing_in_a_bits_data,
  input         auto_control_xing_in_d_ready,
                auto_io_out_rxd,
  output        auto_int_xing_out_sync_0,
                auto_control_xing_in_a_ready,
                auto_control_xing_in_d_valid,
  output [2:0]  auto_control_xing_in_d_bits_opcode,
  output [1:0]  auto_control_xing_in_d_bits_size,
  output [9:0]  auto_control_xing_in_d_bits_source,
  output [63:0] auto_control_xing_in_d_bits_data,
  output        auto_io_out_txd
);

  wire        out_woready_2;
  wire        _out_wofireMux_T;
  wire        out_backSel_0;
  wire        quash;
  wire        _rxq_io_enq_ready;
  wire        _rxq_io_deq_valid;
  wire [7:0]  _rxq_io_deq_bits;
  wire [3:0]  _rxq_io_count;
  wire        _rxm_io_out_valid;
  wire [7:0]  _rxm_io_out_bits;
  wire        _txq_io_enq_ready;
  wire        _txq_io_deq_valid;
  wire [7:0]  _txq_io_deq_bits;
  wire [3:0]  _txq_io_count;
  wire        _txm_io_in_ready;
  reg  [63:0] casez_tmp;
  reg  [15:0] div;
  reg         txen;
  reg         rxen;
  reg  [3:0]  txwm;
  reg  [3:0]  rxwm;
  reg         nstop;
  reg         ie_rxwm;
  reg         ie_txwm;
  wire        ip_txwm = _txq_io_count < txwm;
  wire        ip_rxwm = _rxq_io_count > rxwm;
  wire        out_front_bits_read = auto_control_xing_in_a_bits_opcode == 3'h4;
  wire        _out_out_bits_data_WIRE_3 =
    auto_control_xing_in_a_bits_address[11:5] == 7'h0;
  assign quash =
    out_woready_2 & auto_control_xing_in_a_bits_mask[3]
    & auto_control_xing_in_a_bits_data[31];
  assign out_backSel_0 = auto_control_xing_in_a_bits_address[4:3] == 2'h0;
  assign _out_wofireMux_T = auto_control_xing_in_a_valid & auto_control_xing_in_d_ready;
  wire        _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;
  assign out_woready_2 = _out_wofireMux_T_2 & out_backSel_0 & _out_out_bits_data_WIRE_3;
  wire        out_woready_10 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[4:3] == 2'h1
    & _out_out_bits_data_WIRE_3;
  wire        out_woready_12 =
    _out_wofireMux_T_2 & auto_control_xing_in_a_bits_address[4:3] == 2'h2
    & _out_out_bits_data_WIRE_3;
  always @(*) begin
    casez (auto_control_xing_in_a_bits_address[4:3])
      2'b00:
        casez_tmp =
          {~_rxq_io_deq_valid, 23'h0, _rxq_io_deq_bits, ~_txq_io_enq_ready, 31'h0};
      2'b01:
        casez_tmp = {12'h0, rxwm, 15'h0, rxen, 12'h0, txwm, 14'h0, nstop, txen};
      2'b10:
        casez_tmp = {30'h0, ip_rxwm, ip_txwm, 30'h0, ie_rxwm, ie_txwm};
      default:
        casez_tmp = {48'h0, div};
    endcase
  end // always @(*)
  always @(posedge clock) begin
    if (reset) begin
      div <= 16'h364;
      txen <= 1'h0;
      rxen <= 1'h0;
      txwm <= 4'h0;
      rxwm <= 4'h0;
      nstop <= 1'h0;
      ie_rxwm <= 1'h0;
      ie_txwm <= 1'h0;
    end
    else begin
      if (_out_wofireMux_T_2 & (&(auto_control_xing_in_a_bits_address[4:3]))
          & _out_out_bits_data_WIRE_3
          & (&{{8{auto_control_xing_in_a_bits_mask[1]}},
               {8{auto_control_xing_in_a_bits_mask[0]}}}))
        div <= auto_control_xing_in_a_bits_data[15:0];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[0])
        txen <= auto_control_xing_in_a_bits_data[0];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[4])
        rxen <= auto_control_xing_in_a_bits_data[32];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[2])
        txwm <= auto_control_xing_in_a_bits_data[19:16];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[6])
        rxwm <= auto_control_xing_in_a_bits_data[51:48];
      if (out_woready_10 & auto_control_xing_in_a_bits_mask[0])
        nstop <= auto_control_xing_in_a_bits_data[1];
      if (out_woready_12 & auto_control_xing_in_a_bits_mask[0])
        ie_rxwm <= auto_control_xing_in_a_bits_data[1];
      if (out_woready_12 & auto_control_xing_in_a_bits_mask[0])
        ie_txwm <= auto_control_xing_in_a_bits_data[0];
    end
  end // always @(posedge)
  IntSyncCrossingSource_1 intsource (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (ip_txwm & ie_txwm | ip_rxwm & ie_rxwm),
    .auto_out_sync_0 (auto_int_xing_out_sync_0)
  );
  UARTTx txm (
    .clock       (clock),
    .reset       (reset),
    .io_en       (txen),
    .io_in_valid (_txq_io_deq_valid),
    .io_in_bits  (_txq_io_deq_bits),
    .io_div      (div),
    .io_nstop    (nstop),
    .io_in_ready (_txm_io_in_ready),
    .io_out      (auto_io_out_txd)
  );
  Queue_96 txq (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (out_woready_2 & auto_control_xing_in_a_bits_mask[0] & ~quash),
    .io_enq_bits  (auto_control_xing_in_a_bits_data[7:0]),
    .io_deq_ready (_txm_io_in_ready),
    .io_enq_ready (_txq_io_enq_ready),
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (_txq_io_deq_bits),
    .io_count     (_txq_io_count)
  );
  UARTRx rxm (
    .clock        (clock),
    .reset        (reset),
    .io_en        (rxen),
    .io_in        (auto_io_out_rxd),
    .io_div       (div),
    .io_out_valid (_rxm_io_out_valid),
    .io_out_bits  (_rxm_io_out_bits)
  );
  Queue_96 rxq (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_rxm_io_out_valid),
    .io_enq_bits  (_rxm_io_out_bits),
    .io_deq_ready
      (_out_wofireMux_T & out_front_bits_read & out_backSel_0 & _out_out_bits_data_WIRE_3
       & auto_control_xing_in_a_bits_mask[4]),
    .io_enq_ready (_rxq_io_enq_ready),
    .io_deq_valid (_rxq_io_deq_valid),
    .io_deq_bits  (_rxq_io_deq_bits),
    .io_count     (_rxq_io_count)
  );
  assign auto_control_xing_in_a_ready = auto_control_xing_in_d_ready;
  assign auto_control_xing_in_d_valid = auto_control_xing_in_a_valid;
  assign auto_control_xing_in_d_bits_opcode = {2'h0, out_front_bits_read};
  assign auto_control_xing_in_d_bits_size = auto_control_xing_in_a_bits_size;
  assign auto_control_xing_in_d_bits_source = auto_control_xing_in_a_bits_source;
  assign auto_control_xing_in_d_bits_data = _out_out_bits_data_WIRE_3 ? casez_tmp : 64'h0;
endmodule

module ClockSinkDomain_4(
  input         auto_uart_0_control_xing_in_a_valid,
  input  [2:0]  auto_uart_0_control_xing_in_a_bits_opcode,
  input  [1:0]  auto_uart_0_control_xing_in_a_bits_size,
  input  [9:0]  auto_uart_0_control_xing_in_a_bits_source,
  input  [28:0] auto_uart_0_control_xing_in_a_bits_address,
  input  [7:0]  auto_uart_0_control_xing_in_a_bits_mask,
  input  [63:0] auto_uart_0_control_xing_in_a_bits_data,
  input         auto_uart_0_control_xing_in_d_ready,
                auto_uart_0_io_out_rxd,
                auto_clock_in_clock,
                auto_clock_in_reset,
  output        auto_uart_0_int_xing_out_sync_0,
                auto_uart_0_control_xing_in_a_ready,
                auto_uart_0_control_xing_in_d_valid,
  output [2:0]  auto_uart_0_control_xing_in_d_bits_opcode,
  output [1:0]  auto_uart_0_control_xing_in_d_bits_size,
  output [9:0]  auto_uart_0_control_xing_in_d_bits_source,
  output [63:0] auto_uart_0_control_xing_in_d_bits_data,
  output        auto_uart_0_io_out_txd
);

  TLUART uart_0 (
    .clock                               (auto_clock_in_clock),
    .reset                               (auto_clock_in_reset),
    .auto_control_xing_in_a_valid        (auto_uart_0_control_xing_in_a_valid),
    .auto_control_xing_in_a_bits_opcode  (auto_uart_0_control_xing_in_a_bits_opcode),
    .auto_control_xing_in_a_bits_size    (auto_uart_0_control_xing_in_a_bits_size),
    .auto_control_xing_in_a_bits_source  (auto_uart_0_control_xing_in_a_bits_source),
    .auto_control_xing_in_a_bits_address (auto_uart_0_control_xing_in_a_bits_address),
    .auto_control_xing_in_a_bits_mask    (auto_uart_0_control_xing_in_a_bits_mask),
    .auto_control_xing_in_a_bits_data    (auto_uart_0_control_xing_in_a_bits_data),
    .auto_control_xing_in_d_ready        (auto_uart_0_control_xing_in_d_ready),
    .auto_io_out_rxd                     (auto_uart_0_io_out_rxd),
    .auto_int_xing_out_sync_0            (auto_uart_0_int_xing_out_sync_0),
    .auto_control_xing_in_a_ready        (auto_uart_0_control_xing_in_a_ready),
    .auto_control_xing_in_d_valid        (auto_uart_0_control_xing_in_d_valid),
    .auto_control_xing_in_d_bits_opcode  (auto_uart_0_control_xing_in_d_bits_opcode),
    .auto_control_xing_in_d_bits_size    (auto_uart_0_control_xing_in_d_bits_size),
    .auto_control_xing_in_d_bits_source  (auto_uart_0_control_xing_in_d_bits_source),
    .auto_control_xing_in_d_bits_data    (auto_uart_0_control_xing_in_d_bits_data),
    .auto_io_out_txd                     (auto_uart_0_io_out_txd)
  );
endmodule

module TLROM(
  input         auto_in_a_valid,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [16:0] auto_in_a_bits_address,
  input         auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  reg [63:0] casez_tmp;
  always @(*) begin
    casez (auto_in_a_bits_address[15:3])
      13'b0000000000000:
        casez_tmp = 64'h10041B7C105073;
      13'b0000000000001:
        casez_tmp = 64'hF597F1402573047E;
      13'b0000000000010:
        casez_tmp = 64'h6FFF2585930000;
      13'b0000000000011:
        casez_tmp = 64'h420;
      13'b0000000000100:
        casez_tmp = 64'h0;
      13'b0000000000101:
        casez_tmp = 64'h0;
      13'b0000000000110:
        casez_tmp = 64'h0;
      13'b0000000000111:
        casez_tmp = 64'h0;
      13'b0000000001000:
        casez_tmp = 64'hF14025737C105073;
      13'b0000000001001:
        casez_tmp = 64'hFB8585930000F597;
      13'b0000000001010:
        casez_tmp = 64'hBFF510500073A021;
      13'b0000000001011:
        casez_tmp = 64'hF12829B000852B7;
      13'b0000000001100:
        casez_tmp = 64'h3171002829302B2;
      13'b0000000001101:
        casez_tmp = 64'h39709A303130000;
      13'b0000000001110:
        casez_tmp = 64'h6E03F92383930001;
      13'b0000000001111:
        casez_tmp = 64'h29101C2A0230003;
      13'b0000000010000:
        casez_tmp = 64'h8396FE736AE30311;
      13'b0000000010001:
        casez_tmp = 64'hF13031B00085337;
      13'b0000000010010:
        casez_tmp = 64'h6E03100303130332;
      13'b0000000010011:
        casez_tmp = 64'hFE736DE303110003;
      13'b0000000010100:
        casez_tmp = 64'hF15051B00085537;
      13'b0000000010101:
        casez_tmp = 64'hF597100505130532;
      13'b0000000010110:
        casez_tmp = 64'h297F52585930000;
      13'b0000000010111:
        casez_tmp = 64'h85B304A282930000;
      13'b0000000011000:
        casez_tmp = 64'h850295AA4055;
      13'b0000000011001:
        casez_tmp = 64'h0;
      13'b0000000011010:
        casez_tmp = 64'h0;
      13'b0000000011011:
        casez_tmp = 64'h0;
      13'b0000000011100:
        casez_tmp = 64'h0;
      13'b0000000011101:
        casez_tmp = 64'h0;
      13'b0000000011110:
        casez_tmp = 64'h0;
      13'b0000000011111:
        casez_tmp = 64'h0;
      13'b0000000100000:
        casez_tmp = 64'h84AE822AF1402573;
      13'b0000000100001:
        casez_tmp = 64'hB29700000193;
      13'b0000000100010:
        casez_tmp = 64'h305290739EC2B283;
      13'b0000000100011:
        casez_tmp = 64'h4010029B30401073;
      13'b0000000100100:
        casez_tmp = 64'h8116FF02F29302D6;
      13'b0000000100101:
        casez_tmp = 64'h40628533033A4305;
      13'b0000000100110:
        casez_tmp = 64'hEF842A246010EF;
      13'b0000000100111:
        casez_tmp = 64'hB2830000B2971020;
      13'b0000000101000:
        casez_tmp = 64'h862A92F4305A162;
      13'b0000000101001:
        casez_tmp = 64'h10EF852200091F63;
      13'b0000000101010:
        casez_tmp = 64'hBC231691B0232340;
      13'b0000000101011:
        casez_tmp = 64'hB2830000B2971441;
      13'b0000000101100:
        casez_tmp = 64'h81A20A02A02F8FE2;
      13'b0000000101101:
        casez_tmp = 64'h8F02B2830000B297;
      13'b0000000101110:
        casez_tmp = 64'h1EE30C62A32F4305;
      13'b0000000101111:
        casez_tmp = 64'h4313334305FE03;
      13'b0000000110000:
        casez_tmp = 64'h63E3B31701B383;
      13'b0000000110001:
        casez_tmp = 64'hA02A02F1671B823;
      13'b0000000110010:
        casez_tmp = 64'h14A000EF04091863;
      13'b0000000110011:
        casez_tmp = 64'h513148000EF;
      13'b0000000110100:
        casez_tmp = 64'h968F3F030000BF17;
      13'b0000000110101:
        casez_tmp = 64'hB2830000B2979F02;
      13'b0000000110110:
        casez_tmp = 64'h33030000B31793E2;
      13'b0000000110111:
        casez_tmp = 64'hB023006287639063;
      13'b0000000111000:
        casez_tmp = 64'hFE62CDE302A10002;
      13'b0000000111001:
        casez_tmp = 64'h842AC5010DD000EF;
      13'b0000000111010:
        casez_tmp = 64'h51381A28122;
      13'b0000000111011:
        casez_tmp = 64'h71E0006F00000593;
      13'b0000000111100:
        casez_tmp = 64'h706FBFF510500073;
      13'b0000000111101:
        casez_tmp = 64'h70EFE40611417D60;
      13'b0000000111110:
        casez_tmp = 64'h301027F3E9157CE0;
      13'b0000000111111:
        casez_tmp = 64'hA0736799CB8D8BA1;
      13'b0000001000000:
        casez_tmp = 64'h27F3003050733007;
      13'b0000001000001:
        casez_tmp = 64'h546302B797133010;
      13'b0000001000010:
        casez_tmp = 64'h27F33063D0730007;
      13'b0000001000011:
        casez_tmp = 64'h546302D797133010;
      13'b0000001000100:
        casez_tmp = 64'h60A2180050730007;
      13'b0000001000101:
        casez_tmp = 64'h301027F380820141;
      13'b0000001000110:
        casez_tmp = 64'hBFC1F7E10207F793;
      13'b0000001000111:
        casez_tmp = 64'hE406711100008082;
      13'b0000001001000:
        casez_tmp = 64'hF416F012EC0EE80A;
      13'b0000001001001:
        casez_tmp = 64'hE4A6E0A2FC1EF81A;
      13'b0000001001010:
        casez_tmp = 64'hF4B6F0B2ECAEE8AA;
      13'b0000001001011:
        casez_tmp = 64'hE546E142FCBEF8BA;
      13'b0000001001100:
        casez_tmp = 64'hF556F152ED4EE94A;
      13'b0000001001101:
        casez_tmp = 64'hE5E6E1E2FD5EF95A;
      13'b0000001001110:
        casez_tmp = 64'hF5F6F1F2EDEEE9EA;
      13'b0000001001111:
        casez_tmp = 64'h34202573FDFEF9FA;
      13'b0000001010000:
        casez_tmp = 64'h34302673341025F3;
      13'b0000001010001:
        casez_tmp = 64'h1073166000EF868A;
      13'b0000001010010:
        casez_tmp = 64'h720261E260A23415;
      13'b0000001010011:
        casez_tmp = 64'h640673E2734272A2;
      13'b0000001010100:
        casez_tmp = 64'h760665E6654664A6;
      13'b0000001010101:
        casez_tmp = 64'h680A77E6774676A6;
      13'b0000001010110:
        casez_tmp = 64'h7A0A69EA694A68AA;
      13'b0000001010111:
        casez_tmp = 64'h6C0E7BEA7B4A7AAA;
      13'b0000001011000:
        casez_tmp = 64'h7E0E6DEE6D4E6CAE;
      13'b0000001011001:
        casez_tmp = 64'h61427FEE7F4E7EAE;
      13'b0000001011010:
        casez_tmp = 64'h100F302000736111;
      13'b0000001011011:
        casez_tmp = 64'h8082808280820000;
      13'b0000001011100:
        casez_tmp = 64'hEC26F02271798082;
      13'b0000001011101:
        casez_tmp = 64'h47BDE44EF406E84A;
      13'b0000001011110:
        casez_tmp = 64'hE56384B68932842E;
      13'b0000001011111:
        casez_tmp = 64'hA797050E0EA7;
      13'b0000001100000:
        casez_tmp = 64'h638C97AA89C78793;
      13'b0000001100001:
        casez_tmp = 64'hCF85051300008517;
      13'b0000001100010:
        casez_tmp = 64'h86CA649072F030EF;
      13'b0000001100011:
        casez_tmp = 64'h5130000851785A2;
      13'b0000001100100:
        casez_tmp = 64'h826371D030EFD265;
      13'b0000001100101:
        casez_tmp = 64'h8B050081B7030201;
      13'b0000001100110:
        casez_tmp = 64'h64900981B583CF09;
      13'b0000001100111:
        casez_tmp = 64'hD305051300008517;
      13'b0000001101000:
        casez_tmp = 64'h30EF40B405B38E0D;
      13'b0000001101001:
        casez_tmp = 64'h4578398796F90;
      13'b0000001101010:
        casez_tmp = 64'h93638B8D4905470D;
      13'b0000001101011:
        casez_tmp = 64'h8517490900E7;
      13'b0000001101100:
        casez_tmp = 64'h6DB030EFD3450513;
      13'b0000001101101:
        casez_tmp = 64'h8997FF040493;
      13'b0000001101110:
        casez_tmp = 64'h4D583D2C98993;
      13'b0000001101111:
        casez_tmp = 64'h6C3030EF0489854E;
      13'b0000001110000:
        casez_tmp = 64'h8517FE941AE3;
      13'b0000001110001:
        casez_tmp = 64'h6B3030EFD1C50513;
      13'b0000001110010:
        casez_tmp = 64'h8617000455834785;
      13'b0000001110011:
        casez_tmp = 64'h1663C62606130000;
      13'b0000001110100:
        casez_tmp = 64'h6130000961700F9;
      13'b0000001110101:
        casez_tmp = 64'h513000085174EE6;
      13'b0000001110110:
        casez_tmp = 64'h478968D030EFCFE5;
      13'b0000001110111:
        casez_tmp = 64'h24558300F91E63;
      13'b0000001111000:
        casez_tmp = 64'h4D06061300009617;
      13'b0000001111001:
        casez_tmp = 64'hCE05051300008517;
      13'b0000001111010:
        casez_tmp = 64'h951766F030EF;
      13'b0000001111011:
        casez_tmp = 64'h33F030EFFF450513;
      13'b0000001111100:
        casez_tmp = 64'h5130000851785AA;
      13'b0000001111101:
        casez_tmp = 64'h80828082B71DC3E5;
      13'b0000001111110:
        casez_tmp = 64'h5C63E022E4061141;
      13'b0000001111111:
        casez_tmp = 64'h88B6001517130405;
      13'b0000010000000:
        casez_tmp = 64'h563842E46A58305;
      13'b0000010000001:
        casez_tmp = 64'hEE63883287AA02D7;
      13'b0000010000010:
        casez_tmp = 64'h8F698305576D00E6;
      13'b0000010000011:
        casez_tmp = 64'h450102D716634695;
      13'b0000010000100:
        casez_tmp = 64'h6F8333030000A317;
      13'b0000010000101:
        casez_tmp = 64'hD71D6346ADA809;
      13'b0000010000110:
        casez_tmp = 64'h33030000A3174501;
      13'b0000010000111:
        casez_tmp = 64'h852260A293026363;
      13'b0000010001000:
        casez_tmp = 64'h86C6808201416402;
      13'b0000010001001:
        casez_tmp = 64'hF0EF853E85A28642;
      13'b0000010001010:
        casez_tmp = 64'h85171141E95F;
      13'b0000010001011:
        casez_tmp = 64'h30EFE406DDC50513;
      13'b0000010001100:
        casez_tmp = 64'h513000085175E10;
      13'b0000010001101:
        casez_tmp = 64'h30EF5D5030EFDDE5;
      13'b0000010001110:
        casez_tmp = 64'h1141808245017D40;
      13'b0000010001111:
        casez_tmp = 64'hC901410000EFE406;
      13'b0000010010000:
        casez_tmp = 64'h5130000851785AA;
      13'b0000010010001:
        casez_tmp = 64'h4581291030EFDDE5;
      13'b0000010010010:
        casez_tmp = 64'h5F2000EFD5BFF0EF;
      13'b0000010010011:
        casez_tmp = 64'h5C8333030000A317;
      13'b0000010010100:
        casez_tmp = 64'h8517C51185AA9302;
      13'b0000010010101:
        casez_tmp = 64'hBFF1DDA505130000;
      13'b0000010010110:
        casez_tmp = 64'h11018082014160A2;
      13'b0000010010111:
        casez_tmp = 64'h6D00710CE822EC06;
      13'b0000010011000:
        casez_tmp = 64'h65A2E15FF0EFE42E;
      13'b0000010011001:
        casez_tmp = 64'h94021581B503;
      13'b0000010011010:
        casez_tmp = 64'hE2F50106369382AA;
      13'b0000010011011:
        casez_tmp = 64'h8A639AE100728693;
      13'b0000010011100:
        casez_tmp = 64'h8023405687330056;
      13'b0000010011101:
        casez_tmp = 64'hFED2EDE3028500B2;
      13'b0000010011110:
        casez_tmp = 64'h96930FF5F5938E19;
      13'b0000010011111:
        casez_tmp = 64'h10596938DD50085;
      13'b0000010100000:
        casez_tmp = 64'h8DD5020596938DD5;
      13'b0000010100001:
        casez_tmp = 64'hE286B3FF867713;
      13'b0000010100010:
        casez_tmp = 64'h733CF110F877713;
      13'b0000010100011:
        casez_tmp = 64'h82B31007071340E0;
      13'b0000010100100:
        casez_tmp = 64'hB7830000A79740E2;
      13'b0000010100101:
        casez_tmp = 64'h878297BA830550E7;
      13'b0000010100110:
        casez_tmp = 64'hB2B42300B2B023;
      13'b0000010100111:
        casez_tmp = 64'hB2BC2300B2B823;
      13'b0000010101000:
        casez_tmp = 64'h2B2B42302B2B023;
      13'b0000010101001:
        casez_tmp = 64'h2B2BC2302B2B823;
      13'b0000010101010:
        casez_tmp = 64'h4B2B42304B2B023;
      13'b0000010101011:
        casez_tmp = 64'h4B2BC2304B2B823;
      13'b0000010101100:
        casez_tmp = 64'h6B2B42306B2B023;
      13'b0000010101101:
        casez_tmp = 64'h6B2BC2306B2B823;
      13'b0000010101110:
        casez_tmp = 64'h8B2B42308B2B023;
      13'b0000010101111:
        casez_tmp = 64'h8B2BC2308B2B823;
      13'b0000010110000:
        casez_tmp = 64'hAB2B4230AB2B023;
      13'b0000010110001:
        casez_tmp = 64'hAB2BC230AB2B823;
      13'b0000010110010:
        casez_tmp = 64'hCB2B4230CB2B023;
      13'b0000010110011:
        casez_tmp = 64'hCB2BC230CB2B823;
      13'b0000010110100:
        casez_tmp = 64'hEB2B4230EB2B023;
      13'b0000010110101:
        casez_tmp = 64'hEB2BC230EB2B823;
      13'b0000010110110:
        casez_tmp = 64'hF6D2EEE310028293;
      13'b0000010110111:
        casez_tmp = 64'hC286B3CA018A1D;
      13'b0000010111000:
        casez_tmp = 64'hEDE3028500B28023;
      13'b0000010111001:
        casez_tmp = 64'h8082FED2;
      13'b0000010111010:
        casez_tmp = 64'h0;
      13'b0000010111011:
        casez_tmp = 64'h0;
      13'b0000010111100:
        casez_tmp = 64'hC2E36340B502B3;
      13'b0000010111101:
        casez_tmp = 64'h95B2953282AAA061;
      13'b0000010111110:
        casez_tmp = 64'h761302D66B6346C1;
      13'b0000010111111:
        casez_tmp = 64'h15FD00C50A63FF85;
      13'b0000011000000:
        casez_tmp = 64'h23157D00058783;
      13'b0000011000001:
        casez_tmp = 64'hF693FEC51AE300F5;
      13'b0000011000010:
        casez_tmp = 64'hF863029DE69D0075;
      13'b0000011000011:
        casez_tmp = 64'h1561619C15E100A2;
      13'b0000011000100:
        casez_tmp = 64'h12E5FEA2ECE3E11C;
      13'b0000011000101:
        casez_tmp = 64'h878315FD00550A63;
      13'b0000011000110:
        casez_tmp = 64'hF50023157D0005;
      13'b0000011000111:
        casez_tmp = 64'h80828516FE551AE3;
      13'b0000011001000:
        casez_tmp = 64'h41C00EB300369E13;
      13'b0000011001001:
        casez_tmp = 64'h9733029D619C99E1;
      13'b0000011001010:
        casez_tmp = 64'hD633619C15E101D7;
      13'b0000011001011:
        casez_tmp = 64'hE11015618E5901C7;
      13'b0000011001100:
        casez_tmp = 64'h95B612E5FEA2E7E3;
      13'b0000011001101:
        casez_tmp = 64'hB7C1;
      13'b0000011001110:
        casez_tmp = 64'h2B38FAA0CB50863;
      13'b0000011001111:
        casez_tmp = 64'hAD6676346C100C5;
      13'b0000011010000:
        casez_tmp = 64'hA639A6100750613;
      13'b0000011010001:
        casez_tmp = 64'h5850005878300C5;
      13'b0000011010010:
        casez_tmp = 64'h1AE3050500F50023;
      13'b0000011010011:
        casez_tmp = 64'hE2D50075F693FEC5;
      13'b0000011010100:
        casez_tmp = 64'h6557863F8128293;
      13'b0000011010101:
        casez_tmp = 64'h6D9C699865946190;
      13'b0000011010110:
        casez_tmp = 64'h285B8830205B803;
      13'b0000011010111:
        casez_tmp = 64'h385B3830305B303;
      13'b0000011011000:
        casez_tmp = 64'h485BE830405BE03;
      13'b0000011011001:
        casez_tmp = 64'hE514E1100505BF03;
      13'b0000011011010:
        casez_tmp = 64'h3053023ED1CE918;
      13'b0000011011011:
        casez_tmp = 64'h265382303153423;
      13'b0000011011100:
        casez_tmp = 64'h5C5302302753C23;
      13'b0000011011101:
        casez_tmp = 64'h5E5382305D53423;
      13'b0000011011110:
        casez_tmp = 64'h79BC75B871B46DB0;
      13'b0000011011111:
        casez_tmp = 64'h80585930785B803;
      13'b0000011100000:
        casez_tmp = 64'hF93CF538F134ED30;
      13'b0000011100001:
        casez_tmp = 64'h805051307053C23;
      13'b0000011100010:
        casez_tmp = 64'h7828293F8556CE3;
      13'b0000011100011:
        casez_tmp = 64'h5A1619C00557863;
      13'b0000011100100:
        casez_tmp = 64'hFE556CE30521E11C;
      13'b0000011100101:
        casez_tmp = 64'h878300550A63029D;
      13'b0000011100110:
        casez_tmp = 64'hF5002305850005;
      13'b0000011100111:
        casez_tmp = 64'h857EFE551AE30505;
      13'b0000011101000:
        casez_tmp = 64'hEB300369E138082;
      13'b0000011101001:
        casez_tmp = 64'h12E5619C99E141C0;
      13'b0000011101010:
        casez_tmp = 64'h5A1659C01C7D733;
      13'b0000011101011:
        casez_tmp = 64'hE1108E5901D79633;
      13'b0000011101100:
        casez_tmp = 64'h29DFE5567E30521;
      13'b0000011101101:
        casez_tmp = 64'hB7C195B6;
      13'b0000011101110:
        casez_tmp = 64'h8082452100000000;
      13'b0000011101111:
        casez_tmp = 64'h5202380824501;
      13'b0000011110000:
        casez_tmp = 64'h114180821601B503;
      13'b0000011110001:
        casez_tmp = 64'h12E1B8236711E406;
      13'b0000011110010:
        casez_tmp = 64'h45E030EF1201BC23;
      13'b0000011110011:
        casez_tmp = 64'h141450560A2E511;
      13'b0000011110100:
        casez_tmp = 64'h14160A272F0406F;
      13'b0000011110101:
        casez_tmp = 64'h8082557D80828082;
      13'b0000011110110:
        casez_tmp = 64'h793808280824501;
      13'b0000011110111:
        casez_tmp = 64'h8082953E07D64090;
      13'b0000011111000:
        casez_tmp = 64'h842AE406E0221141;
      13'b0000011111001:
        casez_tmp = 64'hFFF50713FE5FF0EF;
      13'b0000011111010:
        casez_tmp = 64'h51300E7F56357F5;
      13'b0000011111011:
        casez_tmp = 64'h327B705564090;
      13'b0000011111100:
        casez_tmp = 64'hF4042347C5D81C;
      13'b0000011111101:
        casez_tmp = 64'hAB87879300008797;
      13'b0000011111110:
        casez_tmp = 64'h60A2E01CE808EC08;
      13'b0000011111111:
        casez_tmp = 64'h5529808201416402;
      13'b0000100000000:
        casez_tmp = 64'h4218808255298082;
      13'b0000100000001:
        casez_tmp = 64'h187581B00FF08B7;
      13'b0000100000010:
        casez_tmp = 64'h107E7B30187179B;
      13'b0000100000011:
        casez_tmp = 64'h11878330087181B;
      13'b0000100000100:
        casez_tmp = 64'h571B68410107E7B3;
      13'b0000100000101:
        casez_tmp = 64'h7733F00808130087;
      13'b0000100000110:
        casez_tmp = 64'h270527378FD90107;
      13'b0000100000111:
        casez_tmp = 64'h9863956707132781;
      13'b0000100001000:
        casez_tmp = 64'hA31785B200E7;
      13'b0000100001001:
        casez_tmp = 64'h1141830226C33303;
      13'b0000100001010:
        casez_tmp = 64'h4000693E406E022;
      13'b0000100001011:
        casez_tmp = 64'h230333030000A317;
      13'b0000100001100:
        casez_tmp = 64'h8522C5019302842A;
      13'b0000100001101:
        casez_tmp = 64'h640260A2F59FF0EF;
      13'b0000100001110:
        casez_tmp = 64'hB703808201414501;
      13'b0000100001111:
        casez_tmp = 64'h9717E7190001;
      13'b0000100010000:
        casez_tmp = 64'hE1B02339C70713;
      13'b0000100010001:
        casez_tmp = 64'hF0EFE40611418082;
      13'b0000100010010:
        casez_tmp = 64'h81B783E519EF9F;
      13'b0000100010011:
        casez_tmp = 64'hF1B4238FD566A1;
      13'b0000100010100:
        casez_tmp = 64'hB7838082014160A2;
      13'b0000100010101:
        casez_tmp = 64'h5A63030797130081;
      13'b0000100010110:
        casez_tmp = 64'h45010081B7830007;
      13'b0000100010111:
        casez_tmp = 64'hF1B4234007E793;
      13'b0000100011000:
        casez_tmp = 64'hF0EFE40611418082;
      13'b0000100011001:
        casez_tmp = 64'h81B783E901EC1F;
      13'b0000100011010:
        casez_tmp = 64'hB4234007E7934501;
      13'b0000100011011:
        casez_tmp = 64'h8082014160A200F1;
      13'b0000100011100:
        casez_tmp = 64'h842AE406E0221141;
      13'b0000100011101:
        casez_tmp = 64'h60A2C008E8DFF0EF;
      13'b0000100011110:
        casez_tmp = 64'h4501808201416402;
      13'b0000100011111:
        casez_tmp = 64'h1024EDA671518082;
      13'b0000100100000:
        casez_tmp = 64'h8593000075974651;
      13'b0000100100001:
        casez_tmp = 64'hF1A2F58685263565;
      13'b0000100100010:
        casez_tmp = 64'hFD56E1D2E5CEE9CA;
      13'b0000100100011:
        casez_tmp = 64'hED66F162F55EF95A;
      13'b0000100100100:
        casez_tmp = 64'hD4DFF0EFE56EE96A;
      13'b0000100100101:
        casez_tmp = 64'h841537F4FFF0EF;
      13'b0000100100110:
        casez_tmp = 64'h10EF0522008005B7;
      13'b0000100100111:
        casez_tmp = 64'hE6930081B7831D00;
      13'b0000100101000:
        casez_tmp = 64'hF79300D1B4232007;
      13'b0000100101001:
        casez_tmp = 64'hF5BFF0EFE7914007;
      13'b0000100101010:
        casez_tmp = 64'h30EF2F0030EFC119;
      13'b0000100101011:
        casez_tmp = 64'h613853E009C4DA0;
      13'b0000100101100:
        casez_tmp = 64'hC9B7E43E45810400;
      13'b0000100101101:
        casez_tmp = 64'h8993B67FF0EFDEAD;
      13'b0000100101110:
        casez_tmp = 64'hA3178526EEF9;
      13'b0000100101111:
        casez_tmp = 64'h9302D4CE0D433303;
      13'b0000100110000:
        casez_tmp = 64'h9E0707130000B717;
      13'b0000100110001:
        casez_tmp = 64'h9F0787930000B797;
      13'b0000100110010:
        casez_tmp = 64'hFAAAB7B740E78433;
      13'b0000100110011:
        casez_tmp = 64'h879307B2AAB78793;
      13'b0000100110100:
        casez_tmp = 64'hAAB7879307B2AAB7;
      13'b0000100110101:
        casez_tmp = 64'h840DAAB7879307B2;
      13'b0000100110110:
        casez_tmp = 64'hBA9747E102F4043B;
      13'b0000100110111:
        casez_tmp = 64'hB939AAA8A930000;
      13'b0000100111000:
        casez_tmp = 64'hC1300008C1703C1;
      13'b0000100111001:
        casez_tmp = 64'hBC830000AC978FEC;
      13'b0000100111010:
        casez_tmp = 64'hD1300008D17156C;
      13'b0000100111011:
        casez_tmp = 64'hAD9701810B138D6D;
      13'b0000100111100:
        casez_tmp = 64'h4330BADBD830000;
      13'b0000100111101:
        casez_tmp = 64'h4AA03945602F4;
      13'b0000100111110:
        casez_tmp = 64'hA08D8956073A0963;
      13'b0000100111111:
        casez_tmp = 64'h5471D6300892703;
      13'b0000101000000:
        casez_tmp = 64'h9C82855204090863;
      13'b0000101000001:
        casez_tmp = 64'h93583E11985AA;
      13'b0000101000010:
        casez_tmp = 64'h270302D030EF856A;
      13'b0000101000011:
        casez_tmp = 64'hCC3A6522F0020089;
      13'b0000101000100:
        casez_tmp = 64'h970285DA01093703;
      13'b0000101000101:
        casez_tmp = 64'h9D8285DA6522E51D;
      13'b0000101000110:
        casez_tmp = 64'hA3176522E11D;
      13'b0000101000111:
        casez_tmp = 64'h9302D4D20DC33303;
      13'b0000101001000:
        casez_tmp = 64'h156347ED04814703;
      13'b0000101001001:
        casez_tmp = 64'h608000EF652202F7;
      13'b0000101001010:
        casez_tmp = 64'h961004010EF8562;
      13'b0000101001011:
        casez_tmp = 64'h97E30491FA8910E3;
      13'b0000101001100:
        casez_tmp = 64'h51300008517F974;
      13'b0000101001101:
        casez_tmp = 64'hB5D57ED000EF87E5;
      13'b0000101001110:
        casez_tmp = 64'hD8333030000A317;
      13'b0000101001111:
        casez_tmp = 64'hA31765229302;
      13'b0000101010000:
        casez_tmp = 64'h11419302FF433303;
      13'b0000101010001:
        casez_tmp = 64'h20078793E40667F1;
      13'b0000101010010:
        casez_tmp = 64'h4D1050EF00F1A823;
      13'b0000101010011:
        casez_tmp = 64'h60A202F1BC234785;
      13'b0000101010100:
        casez_tmp = 64'h8082450180820141;
      13'b0000101010101:
        casez_tmp = 64'hFC06F04AF4267139;
      13'b0000101010110:
        casez_tmp = 64'h862E8932EC4EF822;
      13'b0000101010111:
        casez_tmp = 64'h7484B66108494C;
      13'b0000101011000:
        casez_tmp = 64'h842AC11D1F6020EF;
      13'b0000101011001:
        casez_tmp = 64'hE088012995634981;
      13'b0000101011010:
        casez_tmp = 64'h30EF4581A8294501;
      13'b0000101011011:
        casez_tmp = 64'h733050547B22440;
      13'b0000101011100:
        casez_tmp = 64'h298500F75C634085;
      13'b0000101011101:
        casez_tmp = 64'h744270E25529B7CD;
      13'b0000101011110:
        casez_tmp = 64'h612169E2790274A2;
      13'b0000101011111:
        casez_tmp = 64'h7179BFC555658082;
      13'b0000101100000:
        casez_tmp = 64'hEC26F406F0220034;
      13'b0000101100001:
        casez_tmp = 64'hE115F9FFF0EF842A;
      13'b0000101100010:
        casez_tmp = 64'h86266008480C64A2;
      13'b0000101100011:
        casez_tmp = 64'h55B63032020EF;
      13'b0000101100100:
        casez_tmp = 64'h751785A6862A;
      13'b0000101100101:
        casez_tmp = 64'h712030EF7EC50513;
      13'b0000101100110:
        casez_tmp = 64'h64E2740270A25529;
      13'b0000101100111:
        casez_tmp = 64'hE122717580826145;
      13'b0000101101000:
        casez_tmp = 64'hE8DAECD6F0D2FCA6;
      13'b0000101101001:
        casez_tmp = 64'hE4DEF4CEF8CAE506;
      13'b0000101101010:
        casez_tmp = 64'h8B2E8AAA00063983;
      13'b0000101101011:
        casez_tmp = 64'h854E103085B68432;
      13'b0000101101100:
        casez_tmp = 64'h151000EF8A3A84B6;
      13'b0000101101101:
        casez_tmp = 64'hEB9D010A3783CD1D;
      13'b0000101101110:
        casez_tmp = 64'h10EF854E85A64601;
      13'b0000101101111:
        casez_tmp = 64'h751785AA6E30;
      13'b0000101110000:
        casez_tmp = 64'h6BA030EF7BC50513;
      13'b0000101110001:
        casez_tmp = 64'h640A60AAF9700793;
      13'b0000101110010:
        casez_tmp = 64'h7A0679A6794674E6;
      13'b0000101110011:
        casez_tmp = 64'h853E6BA66B466AE6;
      13'b0000101110100:
        casez_tmp = 64'h830F43E80826149;
      13'b0000101110101:
        casez_tmp = 64'hEFE432854E85A6;
      13'b0000101110110:
        casez_tmp = 64'h85A66622C9191A10;
      13'b0000101110111:
        casez_tmp = 64'hED15147000EF854E;
      13'b0000101111000:
        casez_tmp = 64'hCC3E9FB9641847E2;
      13'b0000101111001:
        casez_tmp = 64'hEF854E85A60870;
      13'b0000101111010:
        casez_tmp = 64'hE2294672E1291CF0;
      13'b0000101111011:
        casez_tmp = 64'h67D010EF854E85A6;
      13'b0000101111100:
        casez_tmp = 64'h859300007597862A;
      13'b0000101111101:
        casez_tmp = 64'h513000075170A65;
      13'b0000101111110:
        casez_tmp = 64'h478164C030EF77E5;
      13'b0000101111111:
        casez_tmp = 64'h85A618101014BF51;
      13'b0000110000000:
        casez_tmp = 64'hCD490CB000EF854E;
      13'b0000110000001:
        casez_tmp = 64'h7885051300007517;
      13'b0000110000010:
        casez_tmp = 64'hBF9D57F9647000EF;
      13'b0000110000011:
        casez_tmp = 64'hF032018AB7037922;
      13'b0000110000100:
        casez_tmp = 64'h791345E203F90913;
      13'b0000110000101:
        casez_tmp = 64'h3F5FB93CB39FC09;
      13'b0000110000110:
        casez_tmp = 64'h20AB7830176043B;
      13'b0000110000111:
        casez_tmp = 64'h95DAFC05F593CF39;
      13'b0000110001000:
        casez_tmp = 64'h97828556862286CA;
      13'b0000110001001:
        casez_tmp = 64'h1FE3017905B357ED;
      13'b0000110001010:
        casez_tmp = 64'hF0EF75227602F2A4;
      13'b0000110001011:
        casez_tmp = 64'h77A2F80A0EE3A1BF;
      13'b0000110001100:
        casez_tmp = 64'hFA382385A61830;
      13'b0000110001101:
        casez_tmp = 64'h2FA2823854E7782;
      13'b0000110001110:
        casez_tmp = 64'hE11157FD051000EF;
      13'b0000110001111:
        casez_tmp = 64'hBFA500FA3C2377E2;
      13'b0000110010000:
        casez_tmp = 64'h2F5EBBB010AA783;
      13'b0000110010001:
        casez_tmp = 64'h367D9E3D0176063B;
      13'b0000110010010:
        casez_tmp = 64'hA703B74502F6443B;
      13'b0000110010011:
        casez_tmp = 64'hB74502E5C5BB010A;
      13'b0000110010100:
        casez_tmp = 64'hF0A27159BF4575C2;
      13'b0000110010101:
        casez_tmp = 64'hF486E0D2E4CEECA6;
      13'b0000110010110:
        casez_tmp = 64'h691C03056903E8CA;
      13'b0000110010111:
        casez_tmp = 64'h993E8A3289AE842A;
      13'b0000110011000:
        casez_tmp = 64'h8593000075974601;
      13'b0000110011001:
        casez_tmp = 64'hE84A84B685366EE5;
      13'b0000110011010:
        casez_tmp = 64'h4055963E2FFF0EF;
      13'b0000110011011:
        casez_tmp = 64'h41DCCDB10D81B583;
      13'b0000110011100:
        casez_tmp = 64'hD71B854A00FF06B7;
      13'b0000110011101:
        casez_tmp = 64'h8E590187961B0187;
      13'b0000110011110:
        casez_tmp = 64'h8E598F750087971B;
      13'b0000110011111:
        casez_tmp = 64'h7130087D79B6741;
      13'b0000110100000:
        casez_tmp = 64'h16028E5D8FF9F007;
      13'b0000110100001:
        casez_tmp = 64'h6542967FF0EF9201;
      13'b0000110100010:
        casez_tmp = 64'h70A67406F0086589;
      13'b0000110100011:
        casez_tmp = 64'h6A0669A6694664E6;
      13'b0000110100100:
        casez_tmp = 64'h86AA3E90006F6165;
      13'b0000110100101:
        casez_tmp = 64'h854E85D28626870A;
      13'b0000110100110:
        casez_tmp = 64'hFC055DE3E0DFF0EF;
      13'b0000110100111:
        casez_tmp = 64'h694664E6740670A6;
      13'b0000110101000:
        casez_tmp = 64'h808261656A0669A6;
      13'b0000110101001:
        casez_tmp = 64'h843BE02211418082;
      13'b0000110101010:
        casez_tmp = 64'hE4060400051302C5;
      13'b0000110101011:
        casez_tmp = 64'hFC05F59303F40593;
      13'b0000110101100:
        casez_tmp = 64'h85A2E5055CE010EF;
      13'b0000110101101:
        casez_tmp = 64'h6505051300007517;
      13'b0000110101110:
        casez_tmp = 64'h75174CE030EF;
      13'b0000110101111:
        casez_tmp = 64'h4C2030EF66C50513;
      13'b0000110110000:
        casez_tmp = 64'h450160A2640285A2;
      13'b0000110110001:
        casez_tmp = 64'h640260A2B4350141;
      13'b0000110110010:
        casez_tmp = 64'h8082450180820141;
      13'b0000110110011:
        casez_tmp = 64'hEE26F22271698082;
      13'b0000110110100:
        casez_tmp = 64'hE252E64EF606EA4A;
      13'b0000110110101:
        casez_tmp = 64'hF1E2F5DEF9DAFDD6;
      13'b0000110110110:
        casez_tmp = 64'h42D8E5EEE9EAEDE6;
      13'b0000110110111:
        casez_tmp = 64'h569B00FF0637EC32;
      13'b0000110111000:
        casez_tmp = 64'h8FD50187179B0187;
      13'b0000110111001:
        casez_tmp = 64'h8FD58EF10087169B;
      13'b0000110111010:
        casez_tmp = 64'h571BF006869366C1;
      13'b0000110111011:
        casez_tmp = 64'h4505842A8F750087;
      13'b0000110111100:
        casez_tmp = 64'h1571278D15028FD9;
      13'b0000110111101:
        casez_tmp = 64'h33030000A3178D7D;
      13'b0000110111110:
        casez_tmp = 64'h7939302892ECDE3;
      13'b0000110111111:
        casez_tmp = 64'h3783F8BE9BF10035;
      13'b0000111000000:
        casez_tmp = 64'h49B010926030189;
      13'b0000111000001:
        casez_tmp = 64'h34FD9CB1E7890005;
      13'b0000111000010:
        casez_tmp = 64'hA31785A602C4C4BB;
      13'b0000111000011:
        casez_tmp = 64'h9302CDA333030000;
      13'b0000111000100:
        casez_tmp = 64'h89AA65E202093783;
      13'b0000111000101:
        casez_tmp = 64'h9782854A862686AA;
      13'b0000111000110:
        casez_tmp = 64'hA317C5155AEDF4CE;
      13'b0000111000111:
        casez_tmp = 64'h9302C72333030000;
      13'b0000111001000:
        casez_tmp = 64'hA317854E20051863;
      13'b0000111001001:
        casez_tmp = 64'h9302C7A333030000;
      13'b0000111001010:
        casez_tmp = 64'h796000EFF4AA89AA;
      13'b0000111001011:
        casez_tmp = 64'h5AA902055363DEAA;
      13'b0000111001100:
        casez_tmp = 64'h695264F2741270B2;
      13'b0000111001101:
        casez_tmp = 64'h7BAE7B4E6A1269B2;
      13'b0000111001110:
        casez_tmp = 64'h6DAE6D4E6CEE7C0E;
      13'b0000111001111:
        casez_tmp = 64'h808261557AEE8556;
      13'b0000111010000:
        casez_tmp = 64'h5885859300007597;
      13'b0000111010001:
        casez_tmp = 64'hDCAA7B7010EF854E;
      13'b0000111010010:
        casez_tmp = 64'h460110BCFC0547E3;
      13'b0000111010011:
        casez_tmp = 64'h5785859300007597;
      13'b0000111010100:
        casez_tmp = 64'hC5BFF0EFE83E853E;
      13'b0000111010101:
        casez_tmp = 64'h55F634A0184AA;
      13'b0000111010110:
        casez_tmp = 64'h759746016542;
      13'b0000111010111:
        casez_tmp = 64'hC43FF0EF56C58593;
      13'b0000111011000:
        casez_tmp = 64'hF8054EE35AFD84AA;
      13'b0000111011001:
        casez_tmp = 64'h872265E266424A05;
      13'b0000111011010:
        casez_tmp = 64'hC69FF0EF854A86A6;
      13'b0000111011011:
        casez_tmp = 64'h840613F1598AAA;
      13'b0000111011100:
        casez_tmp = 64'h59A000EF854E85A6;
      13'b0000111011101:
        casez_tmp = 64'hF4042347C5C11D;
      13'b0000111011110:
        casez_tmp = 64'h852285CA666266C2;
      13'b0000111011111:
        casez_tmp = 64'h5D638AAADADFF0EF;
      13'b0000111100000:
        casez_tmp = 64'h47C5008447030005;
      13'b0000111100001:
        casez_tmp = 64'h4703A031F4F71CE3;
      13'b0000111100010:
        casez_tmp = 64'hFCF70EE347C50084;
      13'b0000111100011:
        casez_tmp = 64'h5F10C93F03E011C;
      13'b0000111100100:
        casez_tmp = 64'h6010D935B7D4D45;
      13'b0000111100101:
        casez_tmp = 64'h759786526542;
      13'b0000111100110:
        casez_tmp = 64'h4010FA34F458593;
      13'b0000111100111:
        casez_tmp = 64'h4E638BAABC7FF0EF;
      13'b0000111101000:
        casez_tmp = 64'h2A0500A494630E05;
      13'b0000111101001:
        casez_tmp = 64'h65E266427702B7C5;
      13'b0000111101010:
        casez_tmp = 64'hF0EFE902854A86AA;
      13'b0000111101011:
        casez_tmp = 64'h55F638AAABE7F;
      13'b0000111101100:
        casez_tmp = 64'h7597865286AA;
      13'b0000111101101:
        casez_tmp = 64'h7517D3C58593;
      13'b0000111101110:
        casez_tmp = 64'h2CA030EF4C450513;
      13'b0000111101111:
        casez_tmp = 64'h854E85DE8666B5E5;
      13'b0000111110000:
        casez_tmp = 64'h5F147834FE000EF;
      13'b0000111110001:
        casez_tmp = 64'h666266C201A79A63;
      13'b0000111110010:
        casez_tmp = 64'hD11FF0EF85CA7502;
      13'b0000111110011:
        casez_tmp = 64'h96636C1CF01C778A;
      13'b0000111110100:
        casez_tmp = 64'h167836367EA0167;
      13'b0000111110101:
        casez_tmp = 64'h8CE302043A83EC1C;
      13'b0000111110110:
        casez_tmp = 64'h865286EE6542F80A;
      13'b0000111110111:
        casez_tmp = 64'h4685859300007597;
      13'b0000111111000:
        casez_tmp = 64'hF80541E3AE9FF0EF;
      13'b0000111111001:
        casez_tmp = 64'h759786526542;
      13'b0000111111010:
        casez_tmp = 64'hB2BFF0EF45458593;
      13'b0000111111011:
        casez_tmp = 64'hF42A85AA67EA574A;
      13'b0000111111100:
        casez_tmp = 64'h613000076174681;
      13'b0000111111101:
        casez_tmp = 64'hE0BEE4BA854E4866;
      13'b0000111111110:
        casez_tmp = 64'h4C3010EF6C4A7B86;
      13'b0000111111111:
        casez_tmp = 64'h76174681FC2A75A2;
      13'b0001000000000:
        casez_tmp = 64'h854E472606130000;
      13'b0001000000001:
        casez_tmp = 64'h75C24AD010EFF82E;
      13'b0001000000010:
        casez_tmp = 64'h76174681F42A;
      13'b0001000000011:
        casez_tmp = 64'h10EF854E46460613;
      13'b0001000000100:
        casez_tmp = 64'h6786786278A24990;
      13'b0001000000101:
        casez_tmp = 64'h865E86E2E02A6726;
      13'b0001000000110:
        casez_tmp = 64'h6DC000EF855685D2;
      13'b0001000000111:
        casez_tmp = 64'h17FD57756C1CB739;
      13'b0001000001000:
        casez_tmp = 64'hEC1C681C00F77463;
      13'b0001000001001:
        casez_tmp = 64'hD85C0027E793585C;
      13'b0001000001010:
        casez_tmp = 64'hE486715DB5394A81;
      13'b0001000001011:
        casez_tmp = 64'hF44EF84AFC26E0A2;
      13'b0001000001100:
        casez_tmp = 64'h7517E8897104;
      13'b0001000001101:
        casez_tmp = 64'h1D2030EF41C50513;
      13'b0001000001110:
        casez_tmp = 64'h75973D3020EF;
      13'b0001000001111:
        casez_tmp = 64'h8526842A43458593;
      13'b0001000010000:
        casez_tmp = 64'h5A6385AA5C1010EF;
      13'b0001000010001:
        casez_tmp = 64'h751755B50005;
      13'b0001000010010:
        casez_tmp = 64'h1AA030EF42C50513;
      13'b0001000010011:
        casez_tmp = 64'h6B2010EF8526BFE1;
      13'b0001000010100:
        casez_tmp = 64'h9130000791785AA;
      13'b0001000010101:
        casez_tmp = 64'hFC05CFE349C53CE9;
      13'b0001000010110:
        casez_tmp = 64'hE02E8526864A4681;
      13'b0001000010111:
        casez_tmp = 64'h86365823FF010EF;
      13'b0001000011000:
        casez_tmp = 64'h6582320000EF1405;
      13'b0001000011001:
        casez_tmp = 64'h830700815351363;
      13'b0001000011010:
        casez_tmp = 64'h65823EE000EFE432;
      13'b0001000011011:
        casez_tmp = 64'hEF7008C5016622;
      13'b0001000011100:
        casez_tmp = 64'h36030000A6173D60;
      13'b0001000011101:
        casez_tmp = 64'h2304F007939566;
      13'b0001000011110:
        casez_tmp = 64'hA30530079300F6;
      13'b0001000011111:
        casez_tmp = 64'h1230420079300F6;
      13'b0001000100000:
        casez_tmp = 64'h1A30490079300F6;
      13'b0001000100001:
        casez_tmp = 64'h423470967E200F6;
      13'b0001000100010:
        casez_tmp = 64'h8A30087D69300E6;
      13'b0001000100011:
        casez_tmp = 64'h9230107D69300D6;
      13'b0001000100100:
        casez_tmp = 64'h9A30187D69B00D6;
      13'b0001000100101:
        casez_tmp = 64'hA230207D69300D6;
      13'b0001000100110:
        casez_tmp = 64'h8230287D69300D6;
      13'b0001000100111:
        casez_tmp = 64'hD69300D60AA300F6;
      13'b0001000101000:
        casez_tmp = 64'hF60BA393E10307;
      13'b0001000101001:
        casez_tmp = 64'h22300F60C234785;
      13'b0001000101010:
        casez_tmp = 64'h323000602A30006;
      13'b0001000101011:
        casez_tmp = 64'h4A3000603A30006;
      13'b0001000101100:
        casez_tmp = 64'h5A3000605230006;
      13'b0001000101101:
        casez_tmp = 64'h6A3000606230006;
      13'b0001000101110:
        casez_tmp = 64'h7A3000607230006;
      13'b0001000101111:
        casez_tmp = 64'hCA300D60B230006;
      13'b0001000110000:
        casez_tmp = 64'hDA300060D230006;
      13'b0001000110001:
        casez_tmp = 64'hEA300060E230006;
      13'b0001000110010:
        casez_tmp = 64'hFA300060F230006;
      13'b0001000110011:
        casez_tmp = 64'h231581B7830006;
      13'b0001000110100:
        casez_tmp = 64'hD713020600A302E6;
      13'b0001000110101:
        casez_tmp = 64'hD71302E604A30087;
      13'b0001000110110:
        casez_tmp = 64'hD71B02E605230107;
      13'b0001000110111:
        casez_tmp = 64'hD71302E605A30187;
      13'b0001000111000:
        casez_tmp = 64'hD71302E606230207;
      13'b0001000111001:
        casez_tmp = 64'h6A302F604230287;
      13'b0001000111010:
        casez_tmp = 64'h93E10307D71302E6;
      13'b0001000111011:
        casez_tmp = 64'h20601A302060123;
      13'b0001000111100:
        casez_tmp = 64'h20602A302060223;
      13'b0001000111101:
        casez_tmp = 64'h20603A302060323;
      13'b0001000111110:
        casez_tmp = 64'h2F607A302E60723;
      13'b0001000111111:
        casez_tmp = 64'h700C8DCFF0EF6C04;
      13'b0001001000000:
        casez_tmp = 64'hA6171581B503;
      13'b0001001000001:
        casez_tmp = 64'h8526948283463603;
      13'b0001001000010:
        casez_tmp = 64'hBD5985AA55E010EF;
      13'b0001001000011:
        casez_tmp = 64'h611CE406E0221141;
      13'b0001001000100:
        casez_tmp = 64'h1907B50384322581;
      13'b0001001000101:
        casez_tmp = 64'h4401C11169D040EF;
      13'b0001001000110:
        casez_tmp = 64'h1416402852260A2;
      13'b0001001000111:
        casez_tmp = 64'h8082010005378082;
      13'b0001001001000:
        casez_tmp = 64'h8082450180824501;
      13'b0001001001001:
        casez_tmp = 64'hE4A6E8A2EC86711D;
      13'b0001001001010:
        casez_tmp = 64'h9317F852E0CAFC4E;
      13'b0001001001011:
        casez_tmp = 64'h89AE7FA333030000;
      13'b0001001001100:
        casez_tmp = 64'hA3179302842A;
      13'b0001001001101:
        casez_tmp = 64'h5049B8DC33303;
      13'b0001001001110:
        casez_tmp = 64'h59B000F46379302;
      13'b0001001001111:
        casez_tmp = 64'h2406061346810005;
      13'b0001001010000:
        casez_tmp = 64'hE10564B040EF8526;
      13'b0001001010001:
        casez_tmp = 64'h2505051300007517;
      13'b0001001010010:
        casez_tmp = 64'h60E655357C6000EF;
      13'b0001001010011:
        casez_tmp = 64'h79E2690664A66446;
      13'b0001001010100:
        casez_tmp = 64'h9317808261257A42;
      13'b0001001010101:
        casez_tmp = 64'h84AA7EA333030000;
      13'b0001001010110:
        casez_tmp = 64'h5930005091B9302;
      13'b0001001010111:
        casez_tmp = 64'hF0EFFC0005130400;
      13'b0001001011000:
        casez_tmp = 64'h75178A2A85CACF8F;
      13'b0001001011001:
        casez_tmp = 64'h40EF22A505130000;
      13'b0001001011010:
        casez_tmp = 64'hB5030005091B5C10;
      13'b0001001011011:
        casez_tmp = 64'h400061386D21904;
      13'b0001001011100:
        casez_tmp = 64'hF9455E3040EF85CA;
      13'b0001001011101:
        casez_tmp = 64'hFF0637000A2703;
      13'b0001001011110:
        casez_tmp = 64'h187179B0187569B;
      13'b0001001011111:
        casez_tmp = 64'h8EF10087169B8FD5;
      13'b0001001100000:
        casez_tmp = 64'h87571B66C18FD5;
      13'b0001001100001:
        casez_tmp = 64'h8FD98F75F0068693;
      13'b0001001100010:
        casez_tmp = 64'h7132781D00E0737;
      13'b0001001100011:
        casez_tmp = 64'h478502E79563EED7;
      13'b0001001100100:
        casez_tmp = 64'h86D2CC3E02091613;
      13'b0001001100101:
        casez_tmp = 64'hEF07879300000797;
      13'b0001001100110:
        casez_tmp = 64'hE4268522002C9201;
      13'b0001001100111:
        casez_tmp = 64'hF0EFF43EF002E802;
      13'b0001001101000:
        casez_tmp = 64'h85CE8652BF91A5DF;
      13'b0001001101001:
        casez_tmp = 64'hF521CBCFF0EF8522;
      13'b0001001101010:
        casez_tmp = 64'h30466036814544C;
      13'b0001001101011:
        casez_tmp = 64'h60E61904B5036446;
      13'b0001001101100:
        casez_tmp = 64'h85BB7A4279E264A6;
      13'b0001001101101:
        casez_tmp = 64'h406F612569060125;
      13'b0001001101110:
        casez_tmp = 64'h77F1808281AA5570;
      13'b0001001101111:
        casez_tmp = 64'h9941953EE7878793;
      13'b0001001110000:
        casez_tmp = 64'h1880061311418082;
      13'b0001001110001:
        casez_tmp = 64'h842AE022E4064581;
      13'b0001001110010:
        casez_tmp = 64'h93178522940FF0EF;
      13'b0001001110011:
        casez_tmp = 64'h930273A333030000;
      13'b0001001110100:
        casez_tmp = 64'h1281B42319040413;
      13'b0001001110101:
        casez_tmp = 64'h80820141640260A2;
      13'b0001001110110:
        casez_tmp = 64'hEC06E426E8221101;
      13'b0001001110111:
        casez_tmp = 64'hD463401C84B2842A;
      13'b0001001111000:
        casez_tmp = 64'h6408A801557D0007;
      13'b0001001111001:
        casez_tmp = 64'hF7020EF85A6C919;
      13'b0001001111010:
        casez_tmp = 64'h644260E24008E519;
      13'b0001001111011:
        casez_tmp = 64'h4618082610564A2;
      13'b0001001111100:
        casez_tmp = 64'h8597862ABFF1;
      13'b0001001111101:
        casez_tmp = 64'h951790458593;
      13'b0001001111110:
        casez_tmp = 64'h7179BF7589C50513;
      13'b0001001111111:
        casez_tmp = 64'hF022007484B6EC26;
      13'b0001010000000:
        casez_tmp = 64'hB3010EF8432F406;
      13'b0001010000001:
        casez_tmp = 64'h4781664148B2C91D;
      13'b0001010000010:
        casez_tmp = 64'hE37537D4028D693;
      13'b0001010000011:
        casez_tmp = 64'h36FDF006061300FF;
      13'b0001010000100:
        casez_tmp = 64'h7963472102669563;
      13'b0001010000101:
        casez_tmp = 64'hC7290207D7130517;
      13'b0001010000110:
        casez_tmp = 64'h5130000851785A2;
      13'b0001010000111:
        casez_tmp = 64'h557D605020EFB9E5;
      13'b0001010001000:
        casez_tmp = 64'h614564E2740270A2;
      13'b0001010001001:
        casez_tmp = 64'h207981341188082;
      13'b0001010001010:
        casez_tmp = 64'h179B0187559B0511;
      13'b0001010001011:
        casez_tmp = 64'h87159B8FCD0187;
      13'b0001010001100:
        casez_tmp = 64'h87571B01C5F5B3;
      13'b0001010001101:
        casez_tmp = 64'h17828FD98F718FCD;
      13'b0001010001110:
        casez_tmp = 64'hB7650107E7B39381;
      13'b0001010001111:
        casez_tmp = 64'h1101B7D14501E09C;
      13'b0001010010000:
        casez_tmp = 64'h761784320074E822;
      13'b0001010010001:
        casez_tmp = 64'hEC06FEA606130000;
      13'b0001010010010:
        casez_tmp = 64'hF0EFCD01027010EF;
      13'b0001010010011:
        casez_tmp = 64'h45010FF57793F4DF;
      13'b0001010010100:
        casez_tmp = 64'h644260E200F40023;
      13'b0001010010101:
        casez_tmp = 64'hFF0079380826105;
      13'b0001010010110:
        casez_tmp = 64'h861786B2B7FD557D;
      13'b0001010010111:
        casez_tmp = 64'hBF25B3A606130000;
      13'b0001010011000:
        casez_tmp = 64'h6130000861786B2;
      13'b0001010011001:
        casez_tmp = 64'hF0227179B735B366;
      13'b0001010011010:
        casez_tmp = 64'h7484B28436EC26;
      13'b0001010011011:
        casez_tmp = 64'hB286061300008617;
      13'b0001010011100:
        casez_tmp = 64'hE0887D4010EFF406;
      13'b0001010011101:
        casez_tmp = 64'hE01C450147B2C909;
      13'b0001010011110:
        casez_tmp = 64'h614564E2740270A2;
      13'b0001010011111:
        casez_tmp = 64'hBFC5557D47818082;
      13'b0001010100000:
        casez_tmp = 64'h84324681E0221141;
      13'b0001010100001:
        casez_tmp = 64'hB006061300008617;
      13'b0001010100010:
        casez_tmp = 64'hC9157A4010EFE406;
      13'b0001010100011:
        casez_tmp = 64'h450100FF0637411C;
      13'b0001010100100:
        casez_tmp = 64'h187971B0187D69B;
      13'b0001010100101:
        casez_tmp = 64'h8EF10087969B8F55;
      13'b0001010100110:
        casez_tmp = 64'h87D79B66C18F55;
      13'b0001010100111:
        casez_tmp = 64'h8FD98FF5F0068693;
      13'b0001010101000:
        casez_tmp = 64'h141640260A2C01C;
      13'b0001010101001:
        casez_tmp = 64'h1141BFDD55798082;
      13'b0001010101010:
        casez_tmp = 64'h861784324681E022;
      13'b0001010101011:
        casez_tmp = 64'hE406AC2606130000;
      13'b0001010101100:
        casez_tmp = 64'h411CC915756010EF;
      13'b0001010101101:
        casez_tmp = 64'hD69B450100FF0637;
      13'b0001010101110:
        casez_tmp = 64'h8F550187971B0187;
      13'b0001010101111:
        casez_tmp = 64'h8F558EF10087969B;
      13'b0001010110000:
        casez_tmp = 64'h86930087D79B66C1;
      13'b0001010110001:
        casez_tmp = 64'hC01C8FD98FF5F006;
      13'b0001010110010:
        casez_tmp = 64'h80820141640260A2;
      13'b0001010110011:
        casez_tmp = 64'hE0221141BFDD5579;
      13'b0001010110100:
        casez_tmp = 64'h861784324681;
      13'b0001010110101:
        casez_tmp = 64'h10EFE406A8460613;
      13'b0001010110110:
        casez_tmp = 64'h637411CC9157080;
      13'b0001010110111:
        casez_tmp = 64'h187D69B450100FF;
      13'b0001010111000:
        casez_tmp = 64'h969B8F550187971B;
      13'b0001010111001:
        casez_tmp = 64'h66C18F558EF10087;
      13'b0001010111010:
        casez_tmp = 64'hF00686930087D79B;
      13'b0001010111011:
        casez_tmp = 64'h60A2C01C8FD98FF5;
      13'b0001010111100:
        casez_tmp = 64'h5579808201416402;
      13'b0001010111101:
        casez_tmp = 64'h85977159BFDD;
      13'b0001010111110:
        casez_tmp = 64'hF486ECA6A4C58593;
      13'b0001010111111:
        casez_tmp = 64'hE0D2E4CEE8CAF0A2;
      13'b0001011000000:
        casez_tmp = 64'h84AAF45EF85AFC56;
      13'b0001011000001:
        casez_tmp = 64'h6054163039010EF;
      13'b0001011000010:
        casez_tmp = 64'h86D685AA01C10A93;
      13'b0001011000011:
        casez_tmp = 64'hA306061300008617;
      13'b0001011000100:
        casez_tmp = 64'h692010EF8526E42A;
      13'b0001011000101:
        casez_tmp = 64'h10EF852689AA65A2;
      13'b0001011000110:
        casez_tmp = 64'h8B175979842A1200;
      13'b0001011000111:
        casez_tmp = 64'h9B97A1AB0B130000;
      13'b0001011001000:
        casez_tmp = 64'h45634FABBB830000;
      13'b0001011001001:
        casez_tmp = 64'h85A2865A86D60204;
      13'b0001011001010:
        casez_tmp = 64'h8A2A664010EF8526;
      13'b0001011001011:
        casez_tmp = 64'h859300006597E905;
      13'b0001011001100:
        casez_tmp = 64'h513000085176165;
      13'b0001011001101:
        casez_tmp = 64'h59293D5020EF9FE5;
      13'b0001011001110:
        casez_tmp = 64'h69A664E6740670A6;
      13'b0001011001111:
        casez_tmp = 64'h7BA27B427AE26A06;
      13'b0001011010000:
        casez_tmp = 64'h808261656946854A;
      13'b0001011010001:
        casez_tmp = 64'h460185A200098D63;
      13'b0001011010010:
        casez_tmp = 64'h85AA3C6010EF8526;
      13'b0001011010011:
        casez_tmp = 64'hE111640020EF854E;
      13'b0001011010100:
        casez_tmp = 64'hC5199B8285528922;
      13'b0001011010101:
        casez_tmp = 64'hC2010EF852685A2;
      13'b0001011010110:
        casez_tmp = 64'hBF6D8922BF51842A;
      13'b0001011010111:
        casez_tmp = 64'hE44EE84AEC267179;
      13'b0001011011000:
        casez_tmp = 64'h89AE892AF022F406;
      13'b0001011011001:
        casez_tmp = 64'h57FD480010EF84B2;
      13'b0001011011010:
        casez_tmp = 64'h85CE862600F51763;
      13'b0001011011011:
        casez_tmp = 64'h842A05A020EF854A;
      13'b0001011011100:
        casez_tmp = 64'h81010EF02055063;
      13'b0001011011101:
        casez_tmp = 64'h6597862686AA;
      13'b0001011011110:
        casez_tmp = 64'h85175E458593;
      13'b0001011011111:
        casez_tmp = 64'h343020EF99450513;
      13'b0001011100000:
        casez_tmp = 64'h64E27402852270A2;
      13'b0001011100001:
        casez_tmp = 64'h8082614569A26942;
      13'b0001011100010:
        casez_tmp = 64'hE4CEE8CAECA67159;
      13'b0001011100011:
        casez_tmp = 64'hF45EF85AFC56E0D2;
      13'b0001011100100:
        casez_tmp = 64'h892AF062F0A2F486;
      13'b0001011100101:
        casez_tmp = 64'h84BE89BA8B368BB2;
      13'b0001011100110:
        casez_tmp = 64'h599000EF8A468AC2;
      13'b0001011100111:
        casez_tmp = 64'h10EF842A02055D63;
      13'b0001011101000:
        casez_tmp = 64'h6597862A0270;
      13'b0001011101001:
        casez_tmp = 64'h851757458593;
      13'b0001011101010:
        casez_tmp = 64'h2EB020EF9A450513;
      13'b0001011101011:
        casez_tmp = 64'h64E67406852270A6;
      13'b0001011101100:
        casez_tmp = 64'h7AE26A0669A66946;
      13'b0001011101101:
        casez_tmp = 64'h61657C027BA27B42;
      13'b0001011101110:
        casez_tmp = 64'h613000086178082;
      13'b0001011101111:
        casez_tmp = 64'hF0EF854A45819C66;
      13'b0001011110000:
        casez_tmp = 64'hFC054AE3842AF3BF;
      13'b0001011110001:
        casez_tmp = 64'hF0EF854A865E85AA;
      13'b0001011110010:
        casez_tmp = 64'hFC0542E3842AF2BF;
      13'b0001011110011:
        casez_tmp = 64'h18B179B018B571B;
      13'b0001011110100:
        casez_tmp = 64'h171B00FF0BB78FD9;
      13'b0001011110101:
        casez_tmp = 64'h7733420B5693008B;
      13'b0001011110110:
        casez_tmp = 64'h8FD90186D61B0177;
      13'b0001011110111:
        casez_tmp = 64'h6C418F510186971B;
      13'b0001011111000:
        casez_tmp = 64'hF00C0C130086961B;
      13'b0001011111001:
        casez_tmp = 64'h86D69B01767633;
      13'b0001011111010:
        casez_tmp = 64'h5B1B0186F6B38F51;
      13'b0001011111011:
        casez_tmp = 64'h18B7B338F55008B;
      13'b0001011111100:
        casez_tmp = 64'h930117020167E7B3;
      13'b0001011111101:
        casez_tmp = 64'h85AA08348FD91782;
      13'b0001011111110:
        casez_tmp = 64'h613000076174721;
      13'b0001011111111:
        casez_tmp = 64'hE436EC3E854A7FE6;
      13'b0001100000000:
        casez_tmp = 64'h66A257FD62D010EF;
      13'b0001100000001:
        casez_tmp = 64'h184D71B06F48163;
      13'b0001100000010:
        casez_tmp = 64'h971B8FD90184979B;
      13'b0001100000011:
        casez_tmp = 64'h77334204D6130084;
      13'b0001100000100:
        casez_tmp = 64'h8FD90186559B0177;
      13'b0001100000101:
        casez_tmp = 64'h159B8F4D0186171B;
      13'b0001100000110:
        casez_tmp = 64'h561B0175F5B30086;
      13'b0001100000111:
        casez_tmp = 64'h18676338F4D0086;
      13'b0001100001000:
        casez_tmp = 64'hF4B38F510084D49B;
      13'b0001100001001:
        casez_tmp = 64'h930117028FC50184;
      13'b0001100001010:
        casez_tmp = 64'h76178FD91782;
      13'b0001100001011:
        casez_tmp = 64'h85A247217A460613;
      13'b0001100001100:
        casez_tmp = 64'h5C9010EFEC3E854A;
      13'b0001100001101:
        casez_tmp = 64'h979B0189D71B66A2;
      13'b0001100001110:
        casez_tmp = 64'hFF06378FD90189;
      13'b0001100001111:
        casez_tmp = 64'h8FD98F710089971B;
      13'b0001100010000:
        casez_tmp = 64'hD99BF00707136741;
      13'b0001100010001:
        casez_tmp = 64'hE7B300E9F9B30089;
      13'b0001100010010:
        casez_tmp = 64'h861747110137;
      13'b0001100010011:
        casez_tmp = 64'h854A85A226C60613;
      13'b0001100010100:
        casez_tmp = 64'h806358B010EFCC3E;
      13'b0001100010101:
        casez_tmp = 64'h486020EF8556020A;
      13'b0001100010110:
        casez_tmp = 64'h761786D60015071B;
      13'b0001100010111:
        casez_tmp = 64'h85A2BB2606130000;
      13'b0001100011000:
        casez_tmp = 64'h6356B010EF854A;
      13'b0001100011001:
        casez_tmp = 64'h466020EF8552020A;
      13'b0001100011010:
        casez_tmp = 64'h761786D20015071B;
      13'b0001100011011:
        casez_tmp = 64'h85A2B9A606130000;
      13'b0001100011100:
        casez_tmp = 64'h77C654B010EF854A;
      13'b0001100011101:
        casez_tmp = 64'h20EF853EE60788E3;
      13'b0001100011110:
        casez_tmp = 64'h15071B76C64440;
      13'b0001100011111:
        casez_tmp = 64'hB806061300007617;
      13'b0001100100000:
        casez_tmp = 64'h529010EF854A85A2;
      13'b0001100100001:
        casez_tmp = 64'h715D0E050B63BD81;
      13'b0001100100010:
        casez_tmp = 64'hF44EF84AFC26E0A2;
      13'b0001100100011:
        casez_tmp = 64'h84AAE486842EF052;
      13'b0001100100100:
        casez_tmp = 64'h4581892A0B2010EF;
      13'b0001100100101:
        casez_tmp = 64'h1010A1301810993;
      13'b0001100100110:
        casez_tmp = 64'hA83946010125C463;
      13'b0001100100111:
        casez_tmp = 64'hE42E8526865286CE;
      13'b0001100101000:
        casez_tmp = 64'h65A267C27DD000EF;
      13'b0001100101001:
        casez_tmp = 64'h10EF85260AF49063;
      13'b0001100101010:
        casez_tmp = 64'h83744D846053C10;
      13'b0001100101011:
        casez_tmp = 64'h187559B509C00FF;
      13'b0001100101100:
        casez_tmp = 64'h159B8ECD0187169B;
      13'b0001100101101:
        casez_tmp = 64'h8ECD0105F5B30087;
      13'b0001100101110:
        casez_tmp = 64'h571BF005859365C1;
      13'b0001100101111:
        casez_tmp = 64'h66858F558F6D0087;
      13'b0001100110000:
        casez_tmp = 64'h344951304F6869B;
      13'b0001100110001:
        casez_tmp = 64'hD69B9C299C359151;
      13'b0001100110010:
        casez_tmp = 64'h187971B9C390187;
      13'b0001100110011:
        casez_tmp = 64'hF6B30087969B8F55;
      13'b0001100110100:
        casez_tmp = 64'h8F550087D79B0106;
      13'b0001100110101:
        casez_tmp = 64'h77FD9C3D8FD98FED;
      13'b0001100110110:
        casez_tmp = 64'h184571B9C098C7D;
      13'b0001100110111:
        casez_tmp = 64'h171B8FD90184179B;
      13'b0001100111000:
        casez_tmp = 64'h8FD9010777330084;
      13'b0001100111001:
        casez_tmp = 64'h8FD98F6D0084571B;
      13'b0001100111010:
        casez_tmp = 64'h4051BEE09C0DC;
      13'b0001100111011:
        casez_tmp = 64'h794274E2640660A6;
      13'b0001100111100:
        casez_tmp = 64'h808261617A0279A2;
      13'b0001100111101:
        casez_tmp = 64'h2041613B7992585;
      13'b0001100111110:
        casez_tmp = 64'h10EF852685A69201;
      13'b0001100111111:
        casez_tmp = 64'hBFE9FC055DE32130;
      13'b0001101000000:
        casez_tmp = 64'hEB63478980824501;
      13'b0001101000001:
        casez_tmp = 64'h9797050E00A7;
      13'b0001101000010:
        casez_tmp = 64'h638897AA0F47B783;
      13'b0001101000011:
        casez_tmp = 64'h85AA808287827D1C;
      13'b0001101000100:
        casez_tmp = 64'h381B70300018D63;
      13'b0001101000101:
        casez_tmp = 64'h8B890081B783CB09;
      13'b0001101000110:
        casez_tmp = 64'h406FBFC14505C399;
      13'b0001101000111:
        casez_tmp = 64'hEB63478980824B50;
      13'b0001101001000:
        casez_tmp = 64'h9797050E00A7;
      13'b0001101001001:
        casez_tmp = 64'h638897AA0BC7B783;
      13'b0001101001010:
        casez_tmp = 64'h85AA80828782613C;
      13'b0001101001011:
        casez_tmp = 64'h381B70300018D63;
      13'b0001101001100:
        casez_tmp = 64'h8B890081B783CB09;
      13'b0001101001101:
        casez_tmp = 64'h406FBFC14505C399;
      13'b0001101001110:
        casez_tmp = 64'hEC634789808248B0;
      13'b0001101001111:
        casez_tmp = 64'h9797050E00A7;
      13'b0001101010000:
        casez_tmp = 64'h638897AA0847B783;
      13'b0001101010001:
        casez_tmp = 64'h80828782C391653C;
      13'b0001101010010:
        casez_tmp = 64'h381B70300018D63;
      13'b0001101010011:
        casez_tmp = 64'h8B890081B783CB09;
      13'b0001101010100:
        casez_tmp = 64'h406FBFC14505C399;
      13'b0001101010101:
        casez_tmp = 64'hE8221101808247D0;
      13'b0001101010110:
        casez_tmp = 64'h9917E426EC06E04A;
      13'b0001101010111:
        casez_tmp = 64'h3483072939030000;
      13'b0001101011000:
        casez_tmp = 64'h5863009504330009;
      13'b0001101011001:
        casez_tmp = 64'h458140A006330005;
      13'b0001101011010:
        casez_tmp = 64'h97979FFFE0EF8522;
      13'b0001101011011:
        casez_tmp = 64'h639C0027B7830000;
      13'b0001101011100:
        casez_tmp = 64'h979700F46C63557D;
      13'b0001101011101:
        casez_tmp = 64'h639CF9A7B7830000;
      13'b0001101011110:
        casez_tmp = 64'h8930230087E563;
      13'b0001101011111:
        casez_tmp = 64'h64A2644260E28526;
      13'b0001101100000:
        casez_tmp = 64'h9717808261056902;
      13'b0001101100001:
        casez_tmp = 64'hE308FD2737030000;
      13'b0001101100010:
        casez_tmp = 64'h971700B506B3;
      13'b0001101100011:
        casez_tmp = 64'h862EE314F6C73703;
      13'b0001101100100:
        casez_tmp = 64'h87370300009717;
      13'b0001101100101:
        casez_tmp = 64'h9A5FE06FE3084581;
      13'b0001101100110:
        casez_tmp = 64'hEC06E04AE8221101;
      13'b0001101100111:
        casez_tmp = 64'h91300008917E426;
      13'b0001101101000:
        casez_tmp = 64'h6705010937832AE9;
      13'b0001101101001:
        casez_tmp = 64'hFDF7879367856784;
      13'b0001101101010:
        casez_tmp = 64'hD4138F8997A698F1;
      13'b0001101101011:
        casez_tmp = 64'h47630432147D00C7;
      13'b0001101101100:
        casez_tmp = 64'hF49FF0EF450104E4;
      13'b0001101101101:
        casez_tmp = 64'h1F6397A601093783;
      13'b0001101101110:
        casez_tmp = 64'hF0EF4080053302F5;
      13'b0001101101111:
        casez_tmp = 64'h2F51F6357FDF37F;
      13'b0001101110000:
        casez_tmp = 64'h3703F2BFF0EF4501;
      13'b0001101110001:
        casez_tmp = 64'h40E507B346FD0109;
      13'b0001101110010:
        casez_tmp = 64'h869700F6DE63;
      13'b0001101110011:
        casez_tmp = 64'hE7938D152446B683;
      13'b0001101110100:
        casez_tmp = 64'hA723FEF0D6970017;
      13'b0001101110101:
        casez_tmp = 64'h60E24501E71C48A6;
      13'b0001101110110:
        casez_tmp = 64'h6105690264A26442;
      13'b0001101110111:
        casez_tmp = 64'h8C81010937838082;
      13'b0001101111000:
        casez_tmp = 64'h47070713FEF0D717;
      13'b0001101111001:
        casez_tmp = 64'h431CE7840014E493;
      13'b0001101111010:
        casez_tmp = 64'hBFE1C31C9F814505;
      13'b0001101111011:
        casez_tmp = 64'h2007F7930081B783;
      13'b0001101111100:
        casez_tmp = 64'h1405056314078763;
      13'b0001101111101:
        casez_tmp = 64'hFF050693FF853803;
      13'b0001101111110:
        casez_tmp = 64'h1F86061300008617;
      13'b0001101111111:
        casez_tmp = 64'hF685B3FFE87793;
      13'b0001110000000:
        casez_tmp = 64'h7813010638836598;
      13'b0001110000001:
        casez_tmp = 64'h3159C639B710018;
      13'b0001110000010:
        casez_tmp = 64'h378300081A63973E;
      13'b0001110000011:
        casez_tmp = 64'h973E6A8C8E9DFF05;
      13'b0001110000100:
        casez_tmp = 64'h6793EB8CED9C6E9C;
      13'b0001110000101:
        casez_tmp = 64'h8797EA14E69C0017;
      13'b0001110000110:
        casez_tmp = 64'h6C631B27B7830000;
      13'b0001110000111:
        casez_tmp = 64'h3503FEF0D5170EF7;
      13'b0001110001000:
        casez_tmp = 64'h4881E598B5FD42E5;
      13'b0001110001001:
        casez_tmp = 64'hFF05350302081363;
      13'b0001110001010:
        casez_tmp = 64'h1A88081300008817;
      13'b0001110001011:
        casez_tmp = 64'h636A8897AA8E89;
      13'b0001110001100:
        casez_tmp = 64'h3C230186B8030905;
      13'b0001110001101:
        casez_tmp = 64'h853300A838230105;
      13'b0001110001110:
        casez_tmp = 64'hE1058905650800E5;
      13'b0001110001111:
        casez_tmp = 64'h6089363699897BA;
      13'b0001110010000:
        casez_tmp = 64'h1785051300008517;
      13'b0001110010001:
        casez_tmp = 64'hF214F61404A71D63;
      13'b0001110010010:
        casez_tmp = 64'hE7134885EA98EE98;
      13'b0001110010011:
        casez_tmp = 64'hF68733E6980017;
      13'b0001110010100:
        casez_tmp = 64'h71308089663E31C;
      13'b0001110010101:
        casez_tmp = 64'h838D04F760631FF0;
      13'b0001110010110:
        casez_tmp = 64'h173B47054027D59B;
      13'b0001110010111:
        casez_tmp = 64'h27851702660C00B7;
      13'b0001110011000:
        casez_tmp = 64'h8F4D0017979B9301;
      13'b0001110011001:
        casez_tmp = 64'h639897B2E618078E;
      13'b0001110011010:
        casez_tmp = 64'hEA98EE90FF078613;
      13'b0001110011011:
        casez_tmp = 64'h48858082EF14E394;
      13'b0001110011100:
        casez_tmp = 64'hE998EF0C6D8CB779;
      13'b0001110011101:
        casez_tmp = 64'h47110097D593B77D;
      13'b0001110011110:
        casez_tmp = 64'h67D71304B76063;
      13'b0001110011111:
        casez_tmp = 64'h17059B0387071B;
      13'b0001110100000:
        casez_tmp = 64'h95B2058E0015959B;
      13'b0001110100001:
        casez_tmp = 64'h1763618CFF058513;
      13'b0001110100010:
        casez_tmp = 64'h47854027571B06B5;
      13'b0001110100011:
        casez_tmp = 64'h1782661800E797BB;
      13'b0001110100100:
        casez_tmp = 64'hEE88E61C8FD99381;
      13'b0001110100101:
        casez_tmp = 64'h8082ED94E914EA8C;
      13'b0001110100110:
        casez_tmp = 64'h871B00B765634751;
      13'b0001110100111:
        casez_tmp = 64'h5400713B7C905B5;
      13'b0001110101000:
        casez_tmp = 64'hC7D71300B76763;
      13'b0001110101001:
        casez_tmp = 64'h713BF4506E7071B;
      13'b0001110101010:
        casez_tmp = 64'hD71300B767631540;
      13'b0001110101011:
        casez_tmp = 64'hBF790777071B00F7;
      13'b0001110101100:
        casez_tmp = 64'h7E0071355400513;
      13'b0001110101101:
        casez_tmp = 64'h127D713F8B56AE3;
      13'b0001110101110:
        casez_tmp = 64'h698CB76107C7071B;
      13'b0001110101111:
        casez_tmp = 64'h9B71659800B50663;
      13'b0001110110000:
        casez_tmp = 64'hB7456D88FEE7EBE3;
      13'b0001110110001:
        casez_tmp = 64'h200777130081B703;
      13'b0001110110010:
        casez_tmp = 64'h9717A71DE311;
      13'b0001110110011:
        casez_tmp = 64'h9697D4473703;
      13'b0001110110100:
        casez_tmp = 64'h62946318CE46B683;
      13'b0001110110101:
        casez_tmp = 64'h80824501E3198F55;
      13'b0001110110110:
        casez_tmp = 64'hF84A715DFE054EE3;
      13'b0001110110111:
        casez_tmp = 64'hF44EFC26E0A2E486;
      13'b0001110111000:
        casez_tmp = 64'hE45EE85AEC56F052;
      13'b0001110111001:
        casez_tmp = 64'h71301750793E062;
      13'b0001110111010:
        casez_tmp = 64'h9130000891702E0;
      13'b0001110111011:
        casez_tmp = 64'hF49304F755630169;
      13'b0001110111100:
        casez_tmp = 64'hEF631F700793FF07;
      13'b0001110111101:
        casez_tmp = 64'h79B0034D7130897;
      13'b0001110111110:
        casez_tmp = 64'h17171B27050007;
      13'b0001110111111:
        casez_tmp = 64'h6936708974A070E;
      13'b0001111000000:
        casez_tmp = 64'h6F0800D51563FF07;
      13'b0001111000001:
        casez_tmp = 64'h6D18651C02A70163;
      13'b0001111000010:
        casez_tmp = 64'hEE9897AA9BF16914;
      13'b0001111000011:
        casez_tmp = 64'h1767136798EB14;
      13'b0001111000100:
        casez_tmp = 64'h2000493A0A1E798;
      13'b0001111000101:
        casez_tmp = 64'h20935032789B7C9;
      13'b0001111000110:
        casez_tmp = 64'hFC85859300008597;
      13'b0001111000111:
        casez_tmp = 64'h46FD651812B50F63;
      13'b0001111001000:
        casez_tmp = 64'hDE63409706339B71;
      13'b0001111001001:
        casez_tmp = 64'hE51C0014E7930CC6;
      13'b0001111001010:
        casez_tmp = 64'h2D93423009506B3;
      13'b0001111001011:
        casez_tmp = 64'h16679302D93023;
      13'b0001111001100:
        casez_tmp = 64'h972AE69CEA8CEE8C;
      13'b0001111001101:
        casez_tmp = 64'h640660A60541E310;
      13'b0001111001110:
        casez_tmp = 64'h7A0279A2794274E2;
      13'b0001111001111:
        casez_tmp = 64'h6C026BA26B426AE2;
      13'b0001111010000:
        casez_tmp = 64'h94D71380826161;
      13'b0001111010001:
        casez_tmp = 64'h4791CB0103F00793;
      13'b0001111010010:
        casez_tmp = 64'h64D79302E7EB63;
      13'b0001111010011:
        casez_tmp = 64'h17871B0387879B;
      13'b0001111010100:
        casez_tmp = 64'h974A070E0017171B;
      13'b0001111010101:
        casez_tmp = 64'h487DFF0705936708;
      13'b0001111010110:
        casez_tmp = 64'h9B71651800B50963;
      13'b0001111010111:
        casez_tmp = 64'h4C8586340970633;
      13'b0001111011000:
        casez_tmp = 64'h47D1B7A5278537FD;
      13'b0001111011001:
        casez_tmp = 64'h5B7079B00E7E563;
      13'b0001111011010:
        casez_tmp = 64'hE76305400793B7F1;
      13'b0001111011011:
        casez_tmp = 64'h879B00C4D79300E7;
      13'b0001111011100:
        casez_tmp = 64'h15400793BF6D06E7;
      13'b0001111011101:
        casez_tmp = 64'hF4D79300E7E763;
      13'b0001111011110:
        casez_tmp = 64'h693B7650777879B;
      13'b0001111011111:
        casez_tmp = 64'hEFE307E007935540;
      13'b0001111100000:
        casez_tmp = 64'h879B0124D793F8E6;
      13'b0001111100001:
        casez_tmp = 64'h48636D14BF4907C7;
      13'b0001111100010:
        casez_tmp = 64'hEA9CEF94691C0006;
      13'b0001111100011:
        casez_tmp = 64'h8536BDFD00E507B3;
      13'b0001111100100:
        casez_tmp = 64'h302302B93423BF41;
      13'b0001111100101:
        casez_tmp = 64'h972A0006486302B9;
      13'b0001111100110:
        casez_tmp = 64'hE71C0017E793671C;
      13'b0001111100111:
        casez_tmp = 64'h38831FF00693BF0D;
      13'b0001111101000:
        casez_tmp = 64'h830D14E6E1630089;
      13'b0001111101001:
        casez_tmp = 64'h96BB46854027561B;
      13'b0001111101010:
        casez_tmp = 64'h92812705168200C6;
      13'b0001111101011:
        casez_tmp = 64'h116E6B30017171B;
      13'b0001111101100:
        casez_tmp = 64'hD93423974A070E;
      13'b0001111101101:
        casez_tmp = 64'hED10FF0706136314;
      13'b0001111101110:
        casez_tmp = 64'hD69BEE88E308E914;
      13'b0001111101111:
        casez_tmp = 64'hD7173B47054027;
      13'b0001111110000:
        casez_tmp = 64'h89370302071313;
      13'b0001111110001:
        casez_tmp = 64'h667606302035313;
      13'b0001111110010:
        casez_tmp = 64'h9BF1E699006776B3;
      13'b0001111110011:
        casez_tmp = 64'h2791006776B30306;
      13'b0001111110100:
        casez_tmp = 64'h17871B4E7DDEE5;
      13'b0001111110101:
        casez_tmp = 64'h1741070E0017171B;
      13'b0001111110110:
        casez_tmp = 64'h3503863E883A974A;
      13'b0001111110111:
        casez_tmp = 64'h2605170518630188;
      13'b0001111111000:
        casez_tmp = 64'hFAE5084100367693;
      13'b0001111111001:
        casez_tmp = 64'h1A0699630037F693;
      13'b0001111111010:
        casez_tmp = 64'hFFF3471300893783;
      13'b0001111111011:
        casez_tmp = 64'h368300F934238FF9;
      13'b0001111111100:
        casez_tmp = 64'h66E46303060089;
      13'b0001111111101:
        casez_tmp = 64'h1093A831A031763;
      13'b0001111111110:
        casez_tmp = 64'h7A13008ABA0347FD;
      13'b0001111111111:
        casez_tmp = 64'hC063409A0733FFCA;
      13'b0010000000000:
        casez_tmp = 64'hC1300008C1722E7;
      13'b0010000000001:
        casez_tmp = 64'hD417000C3703DD6C;
      13'b0010000000010:
        casez_tmp = 64'h57FD05A43403FEF0;
      13'b0010000000011:
        casez_tmp = 64'h1E639426014A8B33;
      13'b0010000000100:
        casez_tmp = 64'h85220204041316F7;
      13'b0010000000101:
        casez_tmp = 64'h89AA57FDA85FF0EF;
      13'b0010000000110:
        casez_tmp = 64'h16574631CF50E63;
      13'b0010000000111:
        casez_tmp = 64'hFEF0DB971D2A9A63;
      13'b0010000001000:
        casez_tmp = 64'hBA783FF4B8B93;
      13'b0010000001001:
        casez_tmp = 64'h1C6300FBA0239FA1;
      13'b0010000001010:
        casez_tmp = 64'h945201093783153B;
      13'b0010000001011:
        casez_tmp = 64'hD717E78000146413;
      13'b0010000001100:
        casez_tmp = 64'hA78300270713FEF0;
      13'b0010000001101:
        casez_tmp = 64'hF6F3636314000B;
      13'b0010000001110:
        casez_tmp = 64'h713FEF0D717E31C;
      13'b0010000001111:
        casez_tmp = 64'h18F6F8636314FE67;
      13'b0010000010000:
        casez_tmp = 64'h975613A269E31C;
      13'b0010000010001:
        casez_tmp = 64'h569304C6E3634691;
      13'b0010000010010:
        casez_tmp = 64'h861B0386869B0067;
      13'b0010000010011:
        casez_tmp = 64'h60E0016161B0016;
      13'b0010000010100:
        casez_tmp = 64'h6210FF060813964A;
      13'b0010000010101:
        casez_tmp = 64'h4026D69B06C81A63;
      13'b0010000010110:
        casez_tmp = 64'h170200D7173B4705;
      13'b0010000010111:
        casez_tmp = 64'h3423011767339301;
      13'b0010000011000:
        casez_tmp = 64'hE91001053C2300E9;
      13'b0010000011001:
        casez_tmp = 64'hB565EE0800A83823;
      13'b0010000011010:
        casez_tmp = 64'h69B00C6E56346D1;
      13'b0010000011011:
        casez_tmp = 64'h5400693BF7505B6;
      13'b0010000011100:
        casez_tmp = 64'hC7569300C6E763;
      13'b0010000011101:
        casez_tmp = 64'h693B76D06E6869B;
      13'b0010000011110:
        casez_tmp = 64'h569300C6E7631540;
      13'b0010000011111:
        casez_tmp = 64'hBF610776869B00F7;
      13'b0010000100000:
        casez_tmp = 64'h7E0069355400813;
      13'b0010000100001:
        casez_tmp = 64'h1275693F8C867E3;
      13'b0010000100010:
        casez_tmp = 64'h6A10B74907C6869B;
      13'b0010000100011:
        casez_tmp = 64'h9AF1661400C80663;
      13'b0010000100100:
        casez_tmp = 64'h1863803FED76BE3;
      13'b0010000100101:
        casez_tmp = 64'h88B39AF16514BF69;
      13'b0010000100110:
        casez_tmp = 64'hE793031E58634096;
      13'b0010000100111:
        casez_tmp = 64'h6D1C6910E51C0014;
      13'b0010000101000:
        casez_tmp = 64'hEE1C96AA00950733;
      13'b0010000101001:
        casez_tmp = 64'h302302E93423EB90;
      13'b0010000101010:
        casez_tmp = 64'hEF0C0018E79302E9;
      13'b0010000101011:
        casez_tmp = 64'h116B023E71CEB0C;
      13'b0010000101100:
        casez_tmp = 64'h96AA0008CC63B329;
      13'b0010000101101:
        casez_tmp = 64'hE69C0017E793669C;
      13'b0010000101110:
        casez_tmp = 64'hEB98EF1C69186D1C;
      13'b0010000101111:
        casez_tmp = 64'h6314BD3D6D08B9CD;
      13'b0010000110000:
        casez_tmp = 64'hE4E682E337FD1741;
      13'b0010000110001:
        casez_tmp = 64'hF73303062791BD99;
      13'b0010000110010:
        casez_tmp = 64'h87B2BD01DF650066;
      13'b0010000110011:
        casez_tmp = 64'h943E07FD6785BFDD;
      13'b0010000110100:
        casez_tmp = 64'h3683B5498C7D77FD;
      13'b0010000110101:
        casez_tmp = 64'h8E69363577D000C;
      13'b0010000110110:
        casez_tmp = 64'hF9F793013C3023;
      13'b0010000110111:
        casez_tmp = 64'h40F707B34741C789;
      13'b0010000111000:
        casez_tmp = 64'h177D944E670599BE;
      13'b0010000111001:
        casez_tmp = 64'h8C79777D943A8F81;
      13'b0010000111010:
        casez_tmp = 64'h8D9FF0EF8522943E;
      13'b0010000111011:
        casez_tmp = 64'hA78302F5096357FD;
      13'b0010000111100:
        casez_tmp = 64'h952241350533000B;
      13'b0010000111101:
        casez_tmp = 64'h6513013938239FA1;
      13'b0010000111110:
        casez_tmp = 64'hB42300FBA0230015;
      13'b0010000111111:
        casez_tmp = 64'h477DE72A82E300A9;
      13'b0010001000000:
        casez_tmp = 64'h109378305476063;
      13'b0010001000001:
        casez_tmp = 64'h1093783E7984705;
      13'b0010001000010:
        casez_tmp = 64'h9B7147FD67984501;
      13'b0010001000011:
        casez_tmp = 64'h3503C4E7D9E38F05;
      13'b0010001000100:
        casez_tmp = 64'hE51C0014E7930109;
      13'b0010001000101:
        casez_tmp = 64'hF93823009507B3;
      13'b0010001000110:
        casez_tmp = 64'hB3B41698B33B6F5;
      13'b0010001000111:
        casez_tmp = 64'hBF9D016BA02300FB;
      13'b0010001001000:
        casez_tmp = 64'h7A131A21008AB783;
      13'b0010001001001:
        casez_tmp = 64'h147E7B38B85FF0A;
      13'b0010001001010:
        casez_tmp = 64'h87B346A500FAB423;
      13'b0010001001011:
        casez_tmp = 64'h70E3EB94E794014A;
      13'b0010001001100:
        casez_tmp = 64'hF0EF010A8513E147;
      13'b0010001001101:
        casez_tmp = 64'h2B50633BBD5973F;
      13'b0010001001110:
        casez_tmp = 64'hEC4EF04AF8227139;
      13'b0010001001111:
        casez_tmp = 64'h8997F426FC06;
      13'b0010001010000:
        casez_tmp = 64'hB483892AB7C9B983;
      13'b0010001010001:
        casez_tmp = 64'h4401E43285320089;
      13'b0010001010010:
        casez_tmp = 64'h6094163AF9FF0EF;
      13'b0010001010011:
        casez_tmp = 64'h81B783CD31842A;
      13'b0010001010100:
        casez_tmp = 64'h2007F79345816622;
      13'b0010001010101:
        casez_tmp = 64'h793FF853603C3C1;
      13'b0010001010110:
        casez_tmp = 64'hF997639A71FF05;
      13'b0010001010111:
        casez_tmp = 64'hC7F363FFC4F793;
      13'b0010001011000:
        casez_tmp = 64'h48007131661863E;
      13'b0010001011001:
        casez_tmp = 64'h270069304C76E63;
      13'b0010001011010:
        casez_tmp = 64'h302300C6FC6387A2;
      13'b0010001011011:
        casez_tmp = 64'h793000434230004;
      13'b0010001011100:
        casez_tmp = 64'h79302C7E2630370;
      13'b0010001011101:
        casez_tmp = 64'hB4230007B0230104;
      13'b0010001011110:
        casez_tmp = 64'h70E20007B8230007;
      13'b0010001011111:
        casez_tmp = 64'h790274A274428522;
      13'b0010001100000:
        casez_tmp = 64'h38238082612169E2;
      13'b0010001100001:
        casez_tmp = 64'h79300043C230004;
      13'b0010001100010:
        casez_tmp = 64'h3023FCE61CE30204;
      13'b0010001100011:
        casez_tmp = 64'h3423030407930204;
      13'b0010001100100:
        casez_tmp = 64'h85224581B7E10204;
      13'b0010001100101:
        casez_tmp = 64'h7179B7E99A8FE0EF;
      13'b0010001100110:
        casez_tmp = 64'hE84AEC26F022F406;
      13'b0010001100111:
        casez_tmp = 64'h805CF63E052E44E;
      13'b0010001101000:
        casez_tmp = 64'h2007F7930081B783;
      13'b0010001101001:
        casez_tmp = 64'h64E270A27402EB89;
      13'b0010001101010:
        casez_tmp = 64'h61456A0269A26942;
      13'b0010001101011:
        casez_tmp = 64'h892E84AA47C1A295;
      13'b0010001101100:
        casez_tmp = 64'h70A2740200A7EC63;
      13'b0010001101101:
        casez_tmp = 64'h6A0269A2694264E2;
      13'b0010001101110:
        casez_tmp = 64'hA15FF06F6145852E;
      13'b0010001101111:
        casez_tmp = 64'hF5746302000793;
      13'b0010001110000:
        casez_tmp = 64'h179079302000493;
      13'b0010001110001:
        casez_tmp = 64'h200099302E00713;
      13'b0010001110010:
        casez_tmp = 64'hFF07F99300F75463;
      13'b0010001110011:
        casez_tmp = 64'hF0EF954E02048513;
      13'b0010001110100:
        casez_tmp = 64'h854AE52987AA9EBF;
      13'b0010001110101:
        casez_tmp = 64'h2957A339E1FF0EF;
      13'b0010001110110:
        casez_tmp = 64'hF0EF020A0563842A;
      13'b0010001110111:
        casez_tmp = 64'h53341448A33823F;
      13'b0010001111000:
        casez_tmp = 64'h87AA9C7FF0EF0149;
      13'b0010001111001:
        casez_tmp = 64'h873302957733C909;
      13'b0010001111010:
        casez_tmp = 64'hF0EF00EA7E6340E4;
      13'b0010001111011:
        casez_tmp = 64'h852270A24401803F;
      13'b0010001111100:
        casez_tmp = 64'h69A2694264E27402;
      13'b0010001111101:
        casez_tmp = 64'hF733808261456A02;
      13'b0010001111110:
        casez_tmp = 64'hCB21FF0784130297;
      13'b0010001111111:
        casez_tmp = 64'h4090073BFFF48913;
      13'b0010010000000:
        casez_tmp = 64'h194100E97933993E;
      13'b0010010000001:
        casez_tmp = 64'h6363477D408906B3;
      13'b0010010000010:
        casez_tmp = 64'hFF87B703992600D7;
      13'b0010010000011:
        casez_tmp = 64'h9B71853E40890433;
      13'b0010010000100:
        casez_tmp = 64'h3423001766938F01;
      13'b0010010000101:
        casez_tmp = 64'hE6936714974A00D9;
      13'b0010010000110:
        casez_tmp = 64'hFF87B703E7140016;
      13'b0010010000111:
        casez_tmp = 64'hFEE7BC238F418B05;
      13'b0010010001000:
        casez_tmp = 64'h641C844AF98FF0EF;
      13'b0010010001001:
        casez_tmp = 64'h413787B39BF1477D;
      13'b0010010001010:
        casez_tmp = 64'h134053300F75F63;
      13'b0010010001011:
        casez_tmp = 64'h641CE51C0017E793;
      13'b0010010001100:
        casez_tmp = 64'h137E7B38B850541;
      13'b0010010001101:
        casez_tmp = 64'h441F6EFF0EFE41C;
      13'b0010010001110:
        casez_tmp = 64'hB7831281B703B7B5;
      13'b0010010001111:
        casez_tmp = 64'h8D191301B6031381;
      13'b0010010010000:
        casez_tmp = 64'h5B397AE17FD97BA;
      13'b0010010010001:
        casez_tmp = 64'hF507338FED40B0;
      13'b0010010010010:
        casez_tmp = 64'h7517114100E67E63;
      13'b0010010010011:
        casez_tmp = 64'hE406CB2505130000;
      13'b0010010010100:
        casez_tmp = 64'h450160A259F010EF;
      13'b0010010010101:
        casez_tmp = 64'h9B61071D80820141;
      13'b0010010010110:
        casez_tmp = 64'h808212E1BC23853E;
      13'b0010010010111:
        casez_tmp = 64'h59B87AEBF654585;
      13'b0010010011000:
        casez_tmp = 64'h513B77D853E0005;
      13'b0010010011001:
        casez_tmp = 64'h637411880820280;
      13'b0010010011010:
        casez_tmp = 64'h579B0187169B00FF;
      13'b0010010011011:
        casez_tmp = 64'h87169B8FD50187;
      13'b0010010011100:
        casez_tmp = 64'h571B66C18FD58EF1;
      13'b0010010011101:
        casez_tmp = 64'h8F75F00686930087;
      13'b0010010011110:
        casez_tmp = 64'h2781D00E07378FD9;
      13'b0010010011111:
        casez_tmp = 64'hE79A63EED70713;
      13'b0010010100000:
        casez_tmp = 64'hFC3FF0EFE4061141;
      13'b0010010100001:
        casez_tmp = 64'h80820141450160A2;
      13'b0010010100010:
        casez_tmp = 64'h879B86AA8082555D;
      13'b0010010100011:
        casez_tmp = 64'h9E3D0605C5630005;
      13'b0010010100100:
        casez_tmp = 64'h52D806F662634501;
      13'b0010010100101:
        casez_tmp = 64'h551B684100FF08B7;
      13'b0010010100110:
        casez_tmp = 64'h8FC90187179B0187;
      13'b0010010100111:
        casez_tmp = 64'h11575330087151B;
      13'b0010010101000:
        casez_tmp = 64'hF00808130087571B;
      13'b0010010101001:
        casez_tmp = 64'h8FD9010777338FC9;
      13'b0010010101010:
        casez_tmp = 64'h2C7E96345012781;
      13'b0010010101011:
        casez_tmp = 64'h179B0187561B4698;
      13'b0010010101100:
        casez_tmp = 64'h87161B8FD10187;
      13'b0010010101101:
        casez_tmp = 64'h87571B01167633;
      13'b0010010101110:
        casez_tmp = 64'h8FD9010777338FD1;
      13'b0010010101111:
        casez_tmp = 64'h853395BE93811782;
      13'b0010010110000:
        casez_tmp = 64'h80824501808200B6;
      13'b0010010110001:
        casez_tmp = 64'hE84AEC26F0227179;
      13'b0010010110010:
        casez_tmp = 64'hE052F40657E1E44E;
      13'b0010010110011:
        casez_tmp = 64'h89AA461184B2C21C;
      13'b0010010110100:
        casez_tmp = 64'h4118F73FF0EF842E;
      13'b0010010110101:
        casez_tmp = 64'h187569B00FF0637;
      13'b0010010110110:
        casez_tmp = 64'h169B8FD50187179B;
      13'b0010010110111:
        casez_tmp = 64'h66C18FD58EF10087;
      13'b0010010111000:
        casez_tmp = 64'h87571BF0068693;
      13'b0010010111001:
        casez_tmp = 64'h7891B8FD98F75;
      13'b0010010111010:
        casez_tmp = 64'h869BC09837FD5755;
      13'b0010010111011:
        casez_tmp = 64'h8D7636347210007;
      13'b0010010111100:
        casez_tmp = 64'h1E7579302079713;
      13'b0010010111101:
        casez_tmp = 64'h5647071300007717;
      13'b0010010111110:
        casez_tmp = 64'h40A1B439C97BA;
      13'b0010010111111:
        casez_tmp = 64'h85A2878297BA2411;
      13'b0010011000000:
        casez_tmp = 64'hF0EF2405854E4605;
      13'b0010011000001:
        casez_tmp = 64'h54783C501F0FF;
      13'b0010011000010:
        casez_tmp = 64'hC0809871240DF7FD;
      13'b0010011000011:
        casez_tmp = 64'h69A264E2740270A2;
      13'b0010011000100:
        casez_tmp = 64'h61456942854A6A02;
      13'b0010011000101:
        casez_tmp = 64'h854E461185A28082;
      13'b0010011000110:
        casez_tmp = 64'h6B7411CEE5FF0EF;
      13'b0010011000111:
        casez_tmp = 64'h187D71B2A3100FF;
      13'b0010011001000:
        casez_tmp = 64'h971B8C590187941B;
      13'b0010011001001:
        casez_tmp = 64'h67418C598F750087;
      13'b0010011001010:
        casez_tmp = 64'hF00707130087D79B;
      13'b0010011001011:
        casez_tmp = 64'h8A043B8C5D8FF9;
      13'b0010011001100:
        casez_tmp = 64'h1101BF554925BF4D;
      13'b0010011001101:
        casez_tmp = 64'h5D663C62EEC06;
      13'b0010011001110:
        casez_tmp = 64'h8082610560E25571;
      13'b0010011001111:
        casez_tmp = 64'h70FBF50035F793;
      13'b0010011010000:
        casez_tmp = 64'h47852501F09FF0EF;
      13'b0010011010001:
        casez_tmp = 64'hB7D54532FEF514E3;
      13'b0010011010010:
        casez_tmp = 64'hD663C62EEC061101;
      13'b0010011010011:
        casez_tmp = 64'h610560E255710005;
      13'b0010011010100:
        casez_tmp = 64'hFBF50035F7938082;
      13'b0010011010101:
        casez_tmp = 64'h2501EDFFF0EF0070;
      13'b0010011010110:
        casez_tmp = 64'h4532FEF514E3478D;
      13'b0010011010111:
        casez_tmp = 64'hF84AFC26715DB7D5;
      13'b0010011011000:
        casez_tmp = 64'hF052F44EE0A2E486;
      13'b0010011011001:
        casez_tmp = 64'h892AC602E85AEC56;
      13'b0010011011010:
        casez_tmp = 64'h9930205DA6384B2;
      13'b0010011011011:
        casez_tmp = 64'h4B054AA54A0900C1;
      13'b0010011011100:
        casez_tmp = 64'h85A2854A864E4432;
      13'b0010011011101:
        casez_tmp = 64'h5079BEA1FF0EF;
      13'b0010011011110:
        casez_tmp = 64'h557846303478C63;
      13'b0010011011111:
        casez_tmp = 64'h409CC899FF6794E3;
      13'b0010011100000:
        casez_tmp = 64'hF0EFA039C09C2785;
      13'b0010011100001:
        casez_tmp = 64'h54E3842AC62AF61F;
      13'b0010011100010:
        casez_tmp = 64'h6406852260A6FC05;
      13'b0010011100011:
        casez_tmp = 64'h7A0279A2794274E2;
      13'b0010011100100:
        casez_tmp = 64'h808261616B426AE2;
      13'b0010011100101:
        casez_tmp = 64'hC09C37FD409CDCC5;
      13'b0010011100110:
        casez_tmp = 64'hFA0756E302079713;
      13'b0010011100111:
        casez_tmp = 64'h56634432BFE14432;
      13'b0010011101000:
        casez_tmp = 64'hFCF417E357E10004;
      13'b0010011101001:
        casez_tmp = 64'h1101B7D9547DF4E9;
      13'b0010011101010:
        casez_tmp = 64'hF0EFC602EC060070;
      13'b0010011101011:
        casez_tmp = 64'h473200054663F65F;
      13'b0010011101100:
        casez_tmp = 64'h557D00F703634785;
      13'b0010011101101:
        casez_tmp = 64'h71798082610560E2;
      13'b0010011101110:
        casez_tmp = 64'hE84AEC26F0224785;
      13'b0010011101111:
        casez_tmp = 64'h913C63E842AF406;
      13'b0010011110000:
        casez_tmp = 64'h8522864A448500C1;
      13'b0010011110001:
        casez_tmp = 64'h4E6385AAF33FF0EF;
      13'b0010011110010:
        casez_tmp = 64'hF05B6347B20005;
      13'b0010011110011:
        casez_tmp = 64'h740270A2FE9796E3;
      13'b0010011110100:
        casez_tmp = 64'h6145852E694264E2;
      13'b0010011110101:
        casez_tmp = 64'h7179BFC555FD8082;
      13'b0010011110110:
        casez_tmp = 64'hEC268532842AF022;
      13'b0010011110111:
        casez_tmp = 64'hF40684AEE44EE84A;
      13'b0010011111000:
        casez_tmp = 64'h91B570010EF89B2;
      13'b0010011111001:
        casez_tmp = 64'h94A2412484B30015;
      13'b0010011111010:
        casez_tmp = 64'h70A244010084FB63;
      13'b0010011111011:
        casez_tmp = 64'h694264E274028522;
      13'b0010011111100:
        casez_tmp = 64'h864A8082614569A2;
      13'b0010011111101:
        casez_tmp = 64'h59C010EF852285CE;
      13'b0010011111110:
        casez_tmp = 64'h4918BFF10405D17D;
      13'b0010011111111:
        casez_tmp = 64'h569B059200FF0637;
      13'b0010100000000:
        casez_tmp = 64'h8FD50187179B0187;
      13'b0010100000001:
        casez_tmp = 64'h8FD58EF10087169B;
      13'b0010100000010:
        casez_tmp = 64'h571BF006869366C1;
      13'b0010100000011:
        casez_tmp = 64'h17828FD98F750087;
      13'b0010100000100:
        casez_tmp = 64'h8082953E97AE9381;
      13'b0010100000101:
        casez_tmp = 64'h569B00FF08374518;
      13'b0010100000110:
        casez_tmp = 64'h8FD50187179B0187;
      13'b0010100000111:
        casez_tmp = 64'h106F6B30087169B;
      13'b0010100001000:
        casez_tmp = 64'h87571B66C18FD5;
      13'b0010100001001:
        casez_tmp = 64'h8FD98F75F0068693;
      13'b0010100001010:
        casez_tmp = 64'h953E97AE93811782;
      13'b0010100001011:
        casez_tmp = 64'h187D59B415CC20D;
      13'b0010100001100:
        casez_tmp = 64'h959B8F4D0187971B;
      13'b0010100001101:
        casez_tmp = 64'hD79B0105F5B30087;
      13'b0010100001110:
        casez_tmp = 64'h8FD98FF58F4D0087;
      13'b0010100001111:
        casez_tmp = 64'hF82271398082C21C;
      13'b0010100010000:
        casez_tmp = 64'hFC06EC4EF04AF426;
      13'b0010100010001:
        casez_tmp = 64'hC10913842E84AA;
      13'b0010100010010:
        casez_tmp = 64'h852685A2864A498D;
      13'b0010100010011:
        casez_tmp = 64'h5079BCF1FF0EF;
      13'b0010100010100:
        casez_tmp = 64'h4432472501378963;
      13'b0010100010101:
        casez_tmp = 64'h4436300E79D63;
      13'b0010100010110:
        casez_tmp = 64'h7442852270E25455;
      13'b0010100010111:
        casez_tmp = 64'h612169E2790274A2;
      13'b0010100011000:
        casez_tmp = 64'hFCE787E347118082;
      13'b0010100011001:
        casez_tmp = 64'hE8221101B7E5547D;
      13'b0010100011010:
        casez_tmp = 64'h84B24558EC06E426;
      13'b0010100011011:
        casez_tmp = 64'h187569B00FF0637;
      13'b0010100011100:
        casez_tmp = 64'h169B8FD50187179B;
      13'b0010100011101:
        casez_tmp = 64'h66C18FD58EF10087;
      13'b0010100011110:
        casez_tmp = 64'hF00686930087571B;
      13'b0010100011111:
        casez_tmp = 64'h938117828FD98F75;
      13'b0010100100000:
        casez_tmp = 64'hC48900F5043397AE;
      13'b0010100100001:
        casez_tmp = 64'hC088428010EF8522;
      13'b0010100100010:
        casez_tmp = 64'h64A26442852260E2;
      13'b0010100100011:
        casez_tmp = 64'hE822110180826105;
      13'b0010100100100:
        casez_tmp = 64'h843684B2EC06E426;
      13'b0010100100101:
        casez_tmp = 64'h8376118ECFFF0EF;
      13'b0010100100110:
        casez_tmp = 64'h187561B65C100FF;
      13'b0010100100111:
        casez_tmp = 64'h161B8FD10187179B;
      13'b0010100101000:
        casez_tmp = 64'h8593420756930087;
      13'b0010100101001:
        casez_tmp = 64'h571B01067633F005;
      13'b0010100101010:
        casez_tmp = 64'hD61B8F6D8FD10087;
      13'b0010100101011:
        casez_tmp = 64'h186971B8FD90186;
      13'b0010100101100:
        casez_tmp = 64'h76330086961B8F51;
      13'b0010100101101:
        casez_tmp = 64'h8F510086D69B0106;
      13'b0010100101110:
        casez_tmp = 64'h930117028F558EED;
      13'b0010100101111:
        casez_tmp = 64'h6518E09C8FD91782;
      13'b0010100110000:
        casez_tmp = 64'h179B0187561B4501;
      13'b0010100110001:
        casez_tmp = 64'h87161B8FD10187;
      13'b0010100110010:
        casez_tmp = 64'h106763342075693;
      13'b0010100110011:
        casez_tmp = 64'h8F6D8FD10087571B;
      13'b0010100110100:
        casez_tmp = 64'h971B8FD90186D61B;
      13'b0010100110101:
        casez_tmp = 64'h86961B8F510186;
      13'b0010100110110:
        casez_tmp = 64'h86D69B01067633;
      13'b0010100110111:
        casez_tmp = 64'h17028F558EED8F51;
      13'b0010100111000:
        casez_tmp = 64'hE01C8FD993011782;
      13'b0010100111001:
        casez_tmp = 64'h610564A2644260E2;
      13'b0010100111010:
        casez_tmp = 64'h6941E84A71798082;
      13'b0010100111011:
        casez_tmp = 64'hF406E44EEC26F022;
      13'b0010100111100:
        casez_tmp = 64'hFF09B74481842A;
      13'b0010100111101:
        casez_tmp = 64'h852285A6F0090913;
      13'b0010100111110:
        casez_tmp = 64'h54E1E911E07FF0EF;
      13'b0010100111111:
        casez_tmp = 64'h69A26942740270A2;
      13'b0010101000000:
        casez_tmp = 64'h8082614564E28526;
      13'b0010101000001:
        casez_tmp = 64'h179B0187561B6518;
      13'b0010101000010:
        casez_tmp = 64'h87161B8FD10187;
      13'b0010101000011:
        casez_tmp = 64'h136763342075693;
      13'b0010101000100:
        casez_tmp = 64'h77338FD10087571B;
      13'b0010101000101:
        casez_tmp = 64'h8FD90186D61B0127;
      13'b0010101000110:
        casez_tmp = 64'h961B8F510186971B;
      13'b0010101000111:
        casez_tmp = 64'hD69B013676330086;
      13'b0010101001000:
        casez_tmp = 64'h126F6B38F510086;
      13'b0010101001001:
        casez_tmp = 64'h9301178217028F55;
      13'b0010101001010:
        casez_tmp = 64'hBF592485D3DD8FD9;
      13'b0010101001011:
        casez_tmp = 64'hEC06E426E8221101;
      13'b0010101001100:
        casez_tmp = 64'hFF063784B24518;
      13'b0010101001101:
        casez_tmp = 64'h187179B0187569B;
      13'b0010101001110:
        casez_tmp = 64'h8EF10087169B8FD5;
      13'b0010101001111:
        casez_tmp = 64'h87571B66C18FD5;
      13'b0010101010000:
        casez_tmp = 64'h8FD98F75F0068693;
      13'b0010101010001:
        casez_tmp = 64'h953E97AE93811782;
      13'b0010101010010:
        casez_tmp = 64'h8522C48900450413;
      13'b0010101010011:
        casez_tmp = 64'h60E2C08829A010EF;
      13'b0010101010100:
        casez_tmp = 64'h610564A264428522;
      13'b0010101010101:
        casez_tmp = 64'hE0CAE8A2711D8082;
      13'b0010101010110:
        casez_tmp = 64'hF05AF456F852FC4E;
      13'b0010101010111:
        casez_tmp = 64'h89AAE4A6EC86EC5E;
      13'b0010101011000:
        casez_tmp = 64'h842EC40289368A32;
      13'b0010101011001:
        casez_tmp = 64'hB9300C10B134A85;
      13'b0010101011010:
        casez_tmp = 64'hF4673347A20081;
      13'b0010101011011:
        casez_tmp = 64'h206D16302071693;
      13'b0010101011100:
        casez_tmp = 64'h60E6547D0007D363;
      13'b0010101011101:
        casez_tmp = 64'h690664A664468522;
      13'b0010101011110:
        casez_tmp = 64'h7B027AA27A4279E2;
      13'b0010101011111:
        casez_tmp = 64'h9F63808261256BE2;
      13'b0010101100000:
        casez_tmp = 64'h854E85A2865A0357;
      13'b0010101100001:
        casez_tmp = 64'hC51D84AAF51FF0EF;
      13'b0010101100010:
        casez_tmp = 64'h274010EF85D2864A;
      13'b0010101100011:
        casez_tmp = 64'h4C78394CAE115;
      13'b0010101100100:
        casez_tmp = 64'h4000593864AD3F9;
      13'b0010101100101:
        casez_tmp = 64'hE519284010EF8552;
      13'b0010101100110:
        casez_tmp = 64'h40007930004C703;
      13'b0010101100111:
        casez_tmp = 64'h865E85A2FAF707E3;
      13'b0010101101000:
        casez_tmp = 64'h842AB79FF0EF854E;
      13'b0010101101001:
        casez_tmp = 64'h842AE8221101B769;
      13'b0010101101010:
        casez_tmp = 64'hE032E42EEC068532;
      13'b0010101101011:
        casez_tmp = 64'h5069B1DA010EF;
      13'b0010101101100:
        casez_tmp = 64'h65A2660264428522;
      13'b0010101101101:
        casez_tmp = 64'h1141BF3D610560E2;
      13'b0010101101110:
        casez_tmp = 64'hF0EF842AE406E022;
      13'b0010101101111:
        casez_tmp = 64'h85AA00054863AF1F;
      13'b0010101110000:
        casez_tmp = 64'h14160A264028522;
      13'b0010101110001:
        casez_tmp = 64'h141640260A2B9D5;
      13'b0010101110010:
        casez_tmp = 64'hE406E02211418082;
      13'b0010101110011:
        casez_tmp = 64'h4863AF7FF0EF842A;
      13'b0010101110100:
        casez_tmp = 64'h6402852285AA0005;
      13'b0010101110101:
        casez_tmp = 64'h60A2B9C1014160A2;
      13'b0010101110110:
        casez_tmp = 64'h7159808201416402;
      13'b0010101110111:
        casez_tmp = 64'hE4CEE8CAECA6F0A2;
      13'b0010101111000:
        casez_tmp = 64'hF45EF85AFC56E0D2;
      13'b0010101111001:
        casez_tmp = 64'h892AEC66F486F062;
      13'b0010101111010:
        casez_tmp = 64'h8A3E84BA89B68AB2;
      13'b0010101111011:
        casez_tmp = 64'h842AF95FF0EF6B41;
      13'b0010101111100:
        casez_tmp = 64'hFF0C3700C10B93;
      13'b0010101111101:
        casez_tmp = 64'h45563F00B0B13;
      13'b0010101111110:
        casez_tmp = 64'h8626A08D4C81E0C9;
      13'b0010101111111:
        casez_tmp = 64'hC2DFF0EF854A85A2;
      13'b0010110000000:
        casez_tmp = 64'h865E8CAA00852803;
      13'b0010110000001:
        casez_tmp = 64'h188159B0188579B;
      13'b0010110000010:
        casez_tmp = 64'hF7B30088179B8DDD;
      13'b0010110000011:
        casez_tmp = 64'h8DDD0088581B0187;
      13'b0010110000100:
        casez_tmp = 64'h105E5B301687833;
      13'b0010110000101:
        casez_tmp = 64'hCA1FF0EF854A2581;
      13'b0010110000110:
        casez_tmp = 64'h137886347B2C501;
      13'b0010110000111:
        casez_tmp = 64'hF57FF0EF854A85A2;
      13'b0010110001000:
        casez_tmp = 64'h85D6864EB76D842A;
      13'b0010110001001:
        casez_tmp = 64'h463F575140010EF;
      13'b0010110001010:
        casez_tmp = 64'h70A6008A2023000A;
      13'b0010110001011:
        casez_tmp = 64'h69A6694664E67406;
      13'b0010110001100:
        casez_tmp = 64'h7BA27B427AE26A06;
      13'b0010110001101:
        casez_tmp = 64'h61656CE285667C02;
      13'b0010110001110:
        casez_tmp = 64'h4781BFBDC0808082;
      13'b0010110001111:
        casez_tmp = 64'h842AF0227179BF3D;
      13'b0010110010000:
        casez_tmp = 64'hE836EC2EF4068532;
      13'b0010110010001:
        casez_tmp = 64'h69B0A8010EFE432;
      13'b0010110010010:
        casez_tmp = 64'h6742740285220005;
      13'b0010110010011:
        casez_tmp = 64'h614570A265E26622;
      13'b0010110010100:
        casez_tmp = 64'hEC06007C1101BFD9;
      13'b0010110010101:
        casez_tmp = 64'h531C111F0FFF0EF;
      13'b0010110010110:
        casez_tmp = 64'h71798082610560E2;
      13'b0010110010111:
        casez_tmp = 64'hF4068532842AF022;
      13'b0010110011000:
        casez_tmp = 64'h10EFE432E836EC2E;
      13'b0010110011001:
        casez_tmp = 64'h85220005069B06C0;
      13'b0010110011010:
        casez_tmp = 64'h65E2662267427402;
      13'b0010110011011:
        casez_tmp = 64'h7139B7D9614570A2;
      13'b0010110011100:
        casez_tmp = 64'h613000066170874;
      13'b0010110011101:
        casez_tmp = 64'hE436F426F82247E6;
      13'b0010110011110:
        casez_tmp = 64'hF0EF84AE842AFC06;
      13'b0010110011111:
        casez_tmp = 64'h4672C51166A2FC1F;
      13'b0010110100000:
        casez_tmp = 64'h2E6016387AA4711;
      13'b0010110100001:
        casez_tmp = 64'h4606061300006617;
      13'b0010110100010:
        casez_tmp = 64'hFA3FF0EF852285A6;
      13'b0010110100011:
        casez_tmp = 64'h46F2CB8D450187AA;
      13'b0010110100100:
        casez_tmp = 64'h439C02E696634711;
      13'b0010110100101:
        casez_tmp = 64'h187D71B00FF06B7;
      13'b0010110100110:
        casez_tmp = 64'h971B8D590187951B;
      13'b0010110100111:
        casez_tmp = 64'h67418D598F750087;
      13'b0010110101000:
        casez_tmp = 64'hF00707130087D79B;
      13'b0010110101001:
        casez_tmp = 64'h70E225018D5D8FF9;
      13'b0010110101010:
        casez_tmp = 64'h8082612174A27442;
      13'b0010110101011:
        casez_tmp = 64'h659784AEEC267179;
      13'b0010110101100:
        casez_tmp = 64'hF02241A585930000;
      13'b0010110101101:
        casez_tmp = 64'hEFE432842AF406;
      13'b0010110101110:
        casez_tmp = 64'h85AA00054C630D20;
      13'b0010110101111:
        casez_tmp = 64'h70A266A274028522;
      13'b0010110110000:
        casez_tmp = 64'h6145470164E28626;
      13'b0010110110001:
        casez_tmp = 64'h64E2740270A2BF29;
      13'b0010110110010:
        casez_tmp = 64'h7139808261454501;
      13'b0010110110011:
        casez_tmp = 64'hE852EC4EF426F822;
      13'b0010110110100:
        casez_tmp = 64'hC703E456F04AFC06;
      13'b0010110110101:
        casez_tmp = 64'h8A2A02F007930005;
      13'b0010110110110:
        casez_tmp = 64'h448100C589B3842E;
      13'b0010110110111:
        casez_tmp = 64'h2F0059302F70863;
      13'b0010110111000:
        casez_tmp = 64'h892A7ED000EF8522;
      13'b0010110111001:
        casez_tmp = 64'h63B85A2894EE111;
      13'b0010110111010:
        casez_tmp = 64'hF85FF0EF85524089;
      13'b0010110111011:
        casez_tmp = 64'h8552CD0154ED85AA;
      13'b0010110111100:
        casez_tmp = 64'h844A84AA060000EF;
      13'b0010110111101:
        casez_tmp = 64'h905A0B902F00A93;
      13'b0010110111110:
        casez_tmp = 64'h744270E201299D63;
      13'b0010110111111:
        casez_tmp = 64'h6AA26A4269E27902;
      13'b0010111000000:
        casez_tmp = 64'h8082612174A28526;
      13'b0010111000001:
        casez_tmp = 64'h80E3000947838922;
      13'b0010111000010:
        casez_tmp = 64'h59341298633FF57;
      13'b0010111000011:
        casez_tmp = 64'h793000EF854A02F0;
      13'b0010111000100:
        casez_tmp = 64'h85A6844EE111842A;
      13'b0010111000101:
        casez_tmp = 64'h8552864A412406BB;
      13'b0010111000110:
        casez_tmp = 64'h4FE384AAC7BFF0EF;
      13'b0010111000111:
        casez_tmp = 64'hBF5DFD3467E3FA05;
      13'b0010111001000:
        casez_tmp = 64'h852E842AE8221101;
      13'b0010111001001:
        casez_tmp = 64'h6E7000EFE42EEC06;
      13'b0010111001010:
        casez_tmp = 64'h644285220005061B;
      13'b0010111001011:
        casez_tmp = 64'hBF25610560E265A2;
      13'b0010111001100:
        casez_tmp = 64'h8082557D00065463;
      13'b0010111001101:
        casez_tmp = 64'hE486F44EE0A2715D;
      13'b0010111001110:
        casez_tmp = 64'hEC56F052F84AFC26;
      13'b0010111001111:
        casez_tmp = 64'h4501842E89AAC602;
      13'b0010111010000:
        casez_tmp = 64'h893684B20205C563;
      13'b0010111010001:
        casez_tmp = 64'h47B200C10A935A4D;
      13'b0010111010010:
        casez_tmp = 64'h13638A2A00979363;
      13'b0010111010011:
        casez_tmp = 64'h20230009046302A4;
      13'b0010111010100:
        casez_tmp = 64'h97D363855200F9;
      13'b0010111010101:
        casez_tmp = 64'h74E2640660A6557D;
      13'b0010111010110:
        casez_tmp = 64'h6AE27A0279A27942;
      13'b0010111010111:
        casez_tmp = 64'h865685AA80826161;
      13'b0010111011000:
        casez_tmp = 64'h42E3FF8FF0EF854E;
      13'b0010111011001:
        casez_tmp = 64'hBFF1FCA452E3FE05;
      13'b0010111011010:
        casez_tmp = 64'hEC06460100741101;
      13'b0010111011011:
        casez_tmp = 64'h4532E111F89FF0EF;
      13'b0010111011100:
        casez_tmp = 64'h11018082610560E2;
      13'b0010111011101:
        casez_tmp = 64'h842AEC06E426E822;
      13'b0010111011110:
        casez_tmp = 64'h4C63FDFFF0EF84AE;
      13'b0010111011111:
        casez_tmp = 64'h8522FFF5061B0005;
      13'b0010111100000:
        casez_tmp = 64'h64A285A660E26442;
      13'b0010111100001:
        casez_tmp = 64'h60E2BF9161054681;
      13'b0010111100010:
        casez_tmp = 64'h8082610564A26442;
      13'b0010111100011:
        casez_tmp = 64'hE06357F5FFF5871B;
      13'b0010111100100:
        casez_tmp = 64'hEC26F022717904E7;
      13'b0010111100101:
        casez_tmp = 64'h4601842A84AEF406;
      13'b0010111100110:
        casez_tmp = 64'h85AAF88FF0EF55FD;
      13'b0010111100111:
        casez_tmp = 64'h740270A200055863;
      13'b0010111101000:
        casez_tmp = 64'h80826145852E64E2;
      13'b0010111101001:
        casez_tmp = 64'hD93FF0EFE42E8522;
      13'b0010111101010:
        casez_tmp = 64'hFE9504E365A22501;
      13'b0010111101011:
        casez_tmp = 64'h55E9BFD985224601;
      13'b0010111101100:
        casez_tmp = 64'h4D6387AA8082852E;
      13'b0010111101101:
        casez_tmp = 64'h5130000651702A0;
      13'b0010111101110:
        casez_tmp = 64'h65175739CB9D2365;
      13'b0010111101111:
        casez_tmp = 64'hC56323A505130000;
      13'b0010111110000:
        casez_tmp = 64'h78E40F007BB02E7;
      13'b0010111110001:
        casez_tmp = 64'h6707071300007717;
      13'b0010111110010:
        casez_tmp = 64'h6517E911638897BA;
      13'b0010111110011:
        casez_tmp = 64'h808221A505130000;
      13'b0010111110100:
        casez_tmp = 64'h1E85051300006517;
      13'b0010111110101:
        casez_tmp = 64'h280300C528838082;
      13'b0010111110110:
        casez_tmp = 64'h188979B832E0205;
      13'b0010111110111:
        casez_tmp = 64'hF378FCD0188D59B;
      13'b0010111111000:
        casez_tmp = 64'hF5B30088959B00FF;
      13'b0010111111001:
        casez_tmp = 64'h551B8FCD872A01E5;
      13'b0010111111010:
        casez_tmp = 64'h8DC90188159B0188;
      13'b0010111111011:
        casez_tmp = 64'hE130088151B6E41;
      13'b0010111111100:
        casez_tmp = 64'h75330088D89BF00E;
      13'b0010111111101:
        casez_tmp = 64'hF8B30088581B01E5;
      13'b0010111111110:
        casez_tmp = 64'h1C878338DC901C8;
      13'b0010111111111:
        casez_tmp = 64'h105E5B30117E7B3;
      13'b0011000000000:
        casez_tmp = 64'h606476397BA9FAD;
      13'b0011000000001:
        casez_tmp = 64'hE463557100C305B3;
      13'b0011000000010:
        casez_tmp = 64'h8EB306E3626306B7;
      13'b0011000000011:
        casez_tmp = 64'h4EEED639EBE40C6;
      13'b0011000000100:
        casez_tmp = 64'h188D51B00472883;
      13'b0011000000101:
        casez_tmp = 64'hA868330188981B;
      13'b0011000000110:
        casez_tmp = 64'h1E575330088951B;
      13'b0011000000111:
        casez_tmp = 64'hA868330088D89B;
      13'b0011000001000:
        casez_tmp = 64'h118683301C8F8B3;
      13'b0011000001001:
        casez_tmp = 64'h9742020858131802;
      13'b0011000001010:
        casez_tmp = 64'h87B303D762635575;
      13'b0011000001011:
        casez_tmp = 64'h40C7863311414067;
      13'b0011000001100:
        casez_tmp = 64'hD0EFE40600D30533;
      13'b0011000001101:
        casez_tmp = 64'h141450160A2D7AF;
      13'b0011000001110:
        casez_tmp = 64'h8082808255718082;
      13'b0011000001111:
        casez_tmp = 64'h84B6E04AE4261101;
      13'b0011000010000:
        casez_tmp = 64'h161B0046969B8932;
      13'b0011000010001:
        casez_tmp = 64'h842AEC06E8220046;
      13'b0011000010010:
        casez_tmp = 64'h4418E941F1BFF0EF;
      13'b0011000010011:
        casez_tmp = 64'h569B65C100FF0837;
      13'b0011000010100:
        casez_tmp = 64'h8FD50187179B0187;
      13'b0011000010101:
        casez_tmp = 64'hF00585930087169B;
      13'b0011000010110:
        casez_tmp = 64'h87571B0106F6B3;
      13'b0011000010111:
        casez_tmp = 64'h412484BB8F6D8FD5;
      13'b0011000011000:
        casez_tmp = 64'h9FA58FD90044949B;
      13'b0011000011001:
        casez_tmp = 64'h187971B0187D69B;
      13'b0011000011010:
        casez_tmp = 64'hF6B30087969B8F55;
      13'b0011000011011:
        casez_tmp = 64'h8F550087D79B0106;
      13'b0011000011100:
        casez_tmp = 64'hC41C44588FD98FED;
      13'b0011000011101:
        casez_tmp = 64'h187179B0187569B;
      13'b0011000011110:
        casez_tmp = 64'hF6B30087169B8FD5;
      13'b0011000011111:
        casez_tmp = 64'h8FD50087571B0106;
      13'b0011000100000:
        casez_tmp = 64'hD69B9FA58FD98F6D;
      13'b0011000100001:
        casez_tmp = 64'h8F550187971B0187;
      13'b0011000100010:
        casez_tmp = 64'h106F6B30087969B;
      13'b0011000100011:
        casez_tmp = 64'h8FED8F550087D79B;
      13'b0011000100100:
        casez_tmp = 64'h644260E2C45C8FD9;
      13'b0011000100101:
        casez_tmp = 64'h80826105690264A2;
      13'b0011000100110:
        casez_tmp = 64'hE04AE426E8221101;
      13'b0011000100111:
        casez_tmp = 64'h893684B2842AEC06;
      13'b0011000101000:
        casez_tmp = 64'h5058E551E6BFF0EF;
      13'b0011000101001:
        casez_tmp = 64'h569B65C100FF0837;
      13'b0011000101010:
        casez_tmp = 64'h8FD50187179B0187;
      13'b0011000101011:
        casez_tmp = 64'hF00585930087169B;
      13'b0011000101100:
        casez_tmp = 64'h87571B0106F6B3;
      13'b0011000101101:
        casez_tmp = 64'h4099063B8F6D8FD5;
      13'b0011000101110:
        casez_tmp = 64'h187D69B9FB18FD9;
      13'b0011000101111:
        casez_tmp = 64'h969B8F550187971B;
      13'b0011000110000:
        casez_tmp = 64'hD79B0106F6B30087;
      13'b0011000110001:
        casez_tmp = 64'h8FD98FED8F550087;
      13'b0011000110010:
        casez_tmp = 64'h187D71B445CD05C;
      13'b0011000110011:
        casez_tmp = 64'h971B8ED90187969B;
      13'b0011000110100:
        casez_tmp = 64'hD79B010777330087;
      13'b0011000110101:
        casez_tmp = 64'h8EDD8FED8ED90087;
      13'b0011000110110:
        casez_tmp = 64'h979B0186D71B9EB1;
      13'b0011000110111:
        casez_tmp = 64'h86971B8FD90186;
      13'b0011000111000:
        casez_tmp = 64'h86D69B01077733;
      13'b0011000111001:
        casez_tmp = 64'hC45C8FD58EED8FD9;
      13'b0011000111010:
        casez_tmp = 64'h690264A2644260E2;
      13'b0011000111011:
        casez_tmp = 64'hF8A2711980826105;
      13'b0011000111100:
        casez_tmp = 64'hF862E8D2ECCEF0CA;
      13'b0011000111101:
        casez_tmp = 64'hE0DAE4D6F4A6FC86;
      13'b0011000111110:
        casez_tmp = 64'hEC6EF06AF466FC5E;
      13'b0011000111111:
        casez_tmp = 64'h89BA8936E4328C2A;
      13'b0011001000000:
        casez_tmp = 64'h842A8A2AC66FF0EF;
      13'b0011001000001:
        casez_tmp = 64'hCC27830C054263;
      13'b0011001000010:
        casez_tmp = 64'hD71B652200FF0DB7;
      13'b0011001000011:
        casez_tmp = 64'h8CD90187949B0187;
      13'b0011001000100:
        casez_tmp = 64'h77330087971B6D41;
      13'b0011001000101:
        casez_tmp = 64'hD79BF00D0D1301B7;
      13'b0011001000110:
        casez_tmp = 64'h1A7F7B38CD90087;
      13'b0011001000111:
        casez_tmp = 64'h27832F9000EF8CDD;
      13'b0011001001000:
        casez_tmp = 64'hD71B90811482020C;
      13'b0011001001001:
        casez_tmp = 64'h8DD90187959B0187;
      13'b0011001001010:
        casez_tmp = 64'h1B777330087971B;
      13'b0011001001011:
        casez_tmp = 64'hF7B38DD90087D79B;
      13'b0011001001100:
        casez_tmp = 64'h8DDD94E2662201A7;
      13'b0011001001101:
        casez_tmp = 64'hF0EF852625818AAA;
      13'b0011001001110:
        casez_tmp = 64'h4095043BCD2DD40F;
      13'b0011001001111:
        casez_tmp = 64'h8C278304044A63;
      13'b0011001010000:
        casez_tmp = 64'hD71B6AC100FF0B37;
      13'b0011001010001:
        casez_tmp = 64'h8DD90187959B0187;
      13'b0011001010010:
        casez_tmp = 64'h16777330087971B;
      13'b0011001010011:
        casez_tmp = 64'hF00A8A930087D79B;
      13'b0011001010100:
        casez_tmp = 64'h8DDD0157F7B38DD9;
      13'b0011001010101:
        casez_tmp = 64'h69B95D291811582;
      13'b0011001010110:
        casez_tmp = 64'hB0239AF195E20039;
      13'b0011001010111:
        casez_tmp = 64'h8562460126B100B9;
      13'b0011001011000:
        casez_tmp = 64'hE6DFF0EF0009049B;
      13'b0011001011001:
        casez_tmp = 64'h852270E6842AC575;
      13'b0011001011010:
        casez_tmp = 64'h69E6790674A67446;
      13'b0011001011011:
        casez_tmp = 64'h7BE26B066AA66A46;
      13'b0011001011100:
        casez_tmp = 64'h6DE27D027CA27C42;
      13'b0011001011101:
        casez_tmp = 64'h20C278380826109;
      13'b0011001011110:
        casez_tmp = 64'hD69B4601001A8B9B;
      13'b0011001011111:
        casez_tmp = 64'hECB301879C9B0187;
      13'b0011001100000:
        casez_tmp = 64'hF6B30087969B00DC;
      13'b0011001100001:
        casez_tmp = 64'hECB30087D79B01B6;
      13'b0011001100010:
        casez_tmp = 64'hECB301A7F7B300DC;
      13'b0011001100011:
        casez_tmp = 64'h8B1B00CC278300FC;
      13'b0011001100100:
        casez_tmp = 64'h187D69B1C82000C;
      13'b0011001100101:
        casez_tmp = 64'h969B8DD50187959B;
      13'b0011001100110:
        casez_tmp = 64'hD79B01B6F6B30087;
      13'b0011001100111:
        casez_tmp = 64'h1A7F7B38DD50087;
      13'b0011001101000:
        casez_tmp = 64'h20CDC9315828DDD;
      13'b0011001101001:
        casez_tmp = 64'h95E286DE95E69181;
      13'b0011001101010:
        casez_tmp = 64'h842AC59FF0EF8562;
      13'b0011001101011:
        casez_tmp = 64'h65A2020C2683F105;
      13'b0011001101100:
        casez_tmp = 64'h186D61B01948533;
      13'b0011001101101:
        casez_tmp = 64'h961B8FD10186979B;
      13'b0011001101110:
        casez_tmp = 64'hD69B01B676330086;
      13'b0011001101111:
        casez_tmp = 64'h1A6F6B38FD10086;
      13'b0011001110000:
        casez_tmp = 64'hD69B017787BB8FD5;
      13'b0011001110001:
        casez_tmp = 64'h8F550187971B0187;
      13'b0011001110010:
        casez_tmp = 64'h1B6F6B30087969B;
      13'b0011001110011:
        casez_tmp = 64'hF7B38F550087D79B;
      13'b0011001110100:
        casez_tmp = 64'h2FC20238FD901A7;
      13'b0011001110101:
        casez_tmp = 64'h41BAC6FD0EF865E;
      13'b0011001110110:
        casez_tmp = 64'h9B783B5D9000B;
      13'b0011001110111:
        casez_tmp = 64'h571BC39803000737;
      13'b0011001111000:
        casez_tmp = 64'h8FD90184179B0184;
      13'b0011001111001:
        casez_tmp = 64'h9B6830084171B;
      13'b0011001111010:
        casez_tmp = 64'h84541B01677733;
      13'b0011001111011:
        casez_tmp = 64'h8FC1015474338FD9;
      13'b0011001111100:
        casez_tmp = 64'h979BC69C0184D71B;
      13'b0011001111101:
        casez_tmp = 64'h84971B8FD90184;
      13'b0011001111110:
        casez_tmp = 64'h16777330009B683;
      13'b0011001111111:
        casez_tmp = 64'hF4B38FD90084D49B;
      13'b0011010000000:
        casez_tmp = 64'hB5D1C2DC8FC50154;
      13'b0011010000001:
        casez_tmp = 64'hF04AF426F8227139;
      13'b0011010000010:
        casez_tmp = 64'hFC06E456E852EC4E;
      13'b0011010000011:
        casez_tmp = 64'hF0EF84B2892E8AAA;
      13'b0011010000100:
        casez_tmp = 64'hA37010AA783DB4F;
      13'b0011010000101:
        casez_tmp = 64'h187D71B69C100FF;
      13'b0011010000110:
        casez_tmp = 64'h971B8C590187941B;
      13'b0011010000111:
        casez_tmp = 64'hD79B014777330087;
      13'b0011010001000:
        casez_tmp = 64'h8C59F00989930087;
      13'b0011010001001:
        casez_tmp = 64'h14028C5D0137F7B3;
      13'b0011010001010:
        casez_tmp = 64'h9456942A90010512;
      13'b0011010001011:
        casez_tmp = 64'h855685A246014685;
      13'b0011010001100:
        casez_tmp = 64'h571BED41C19FF0EF;
      13'b0011010001101:
        casez_tmp = 64'h8FD90189179B0189;
      13'b0011010001110:
        casez_tmp = 64'h420956930089171B;
      13'b0011010001111:
        casez_tmp = 64'h186D61B01477733;
      13'b0011010010000:
        casez_tmp = 64'h8F510186971B8FD9;
      13'b0011010010001:
        casez_tmp = 64'h14676330086961B;
      13'b0011010010010:
        casez_tmp = 64'hF6B38F510086D69B;
      13'b0011010010011:
        casez_tmp = 64'h8F550089591B0136;
      13'b0011010010100:
        casez_tmp = 64'h127E7B301397933;
      13'b0011010010101:
        casez_tmp = 64'h8FD9178293011702;
      13'b0011010010110:
        casez_tmp = 64'h979B0184D71BE01C;
      13'b0011010010111:
        casez_tmp = 64'h84971B8FD90184;
      13'b0011010011000:
        casez_tmp = 64'h14777334204D693;
      13'b0011010011001:
        casez_tmp = 64'h971B8FD90186D61B;
      13'b0011010011010:
        casez_tmp = 64'h86961B8F510186;
      13'b0011010011011:
        casez_tmp = 64'h86D69B01467633;
      13'b0011010011100:
        casez_tmp = 64'hF6B38F510084D49B;
      13'b0011010011101:
        casez_tmp = 64'h8F550134F4B30136;
      13'b0011010011110:
        casez_tmp = 64'h9301178217028FC5;
      13'b0011010011111:
        casez_tmp = 64'h744270E2E41C8FD9;
      13'b0011010100000:
        casez_tmp = 64'h6A4269E2790274A2;
      13'b0011010100001:
        casez_tmp = 64'h1101808261216AA2;
      13'b0011010100010:
        casez_tmp = 64'hEC06E04AE426E822;
      13'b0011010100011:
        casez_tmp = 64'h892E00FF06B7491C;
      13'b0011010100100:
        casez_tmp = 64'h187941B0187D71B;
      13'b0011010100101:
        casez_tmp = 64'h8F750087971B8C59;
      13'b0011010100110:
        casez_tmp = 64'h87D79B67418C59;
      13'b0011010100111:
        casez_tmp = 64'h8C5D8FF9F0070713;
      13'b0011010101000:
        casez_tmp = 64'h45979390011402;
      13'b0011010101001:
        casez_tmp = 64'hF0EF942A84AA943E;
      13'b0011010101010:
        casez_tmp = 64'h85A200A95D63C84F;
      13'b0011010101011:
        casez_tmp = 64'h8526690260E26442;
      13'b0011010101100:
        casez_tmp = 64'h61054605468164A2;
      13'b0011010101101:
        casez_tmp = 64'h644260E2B11FF06F;
      13'b0011010101110:
        casez_tmp = 64'h6105557D690264A2;
      13'b0011010101111:
        casez_tmp = 64'h89B6F44E715D8082;
      13'b0011010110000:
        casez_tmp = 64'hF052F84AFC260054;
      13'b0011010110001:
        casez_tmp = 64'hE0A2E486E85AEC56;
      13'b0011010110010:
        casez_tmp = 64'h84BA8B328AAE8A2A;
      13'b0011010110011:
        casez_tmp = 64'hE42A892AEE2FF0EF;
      13'b0011010110100:
        casez_tmp = 64'h57FD020910634512;
      13'b0011010110101:
        casez_tmp = 64'h60A6C12506F50A63;
      13'b0011010110110:
        casez_tmp = 64'h79A2794274E26406;
      13'b0011010110111:
        casez_tmp = 64'h61616B426AE27A02;
      13'b0011010111000:
        casez_tmp = 64'h869B0035079B8082;
      13'b0011010111001:
        casez_tmp = 64'h26819BF19AF10039;
      13'b0011010111010:
        casez_tmp = 64'hC905930007861B;
      13'b0011010111011:
        casez_tmp = 64'hF0EF0009841B8552;
      13'b0011010111100:
        casez_tmp = 64'h184571BE915B53F;
      13'b0011010111101:
        casez_tmp = 64'h6B78FD90184179B;
      13'b0011010111110:
        casez_tmp = 64'h8F750084171B00FF;
      13'b0011010111111:
        casez_tmp = 64'h84541B67418FD9;
      13'b0011011000000:
        casez_tmp = 64'h8FC18C79F0070713;
      13'b0011011000001:
        casez_tmp = 64'h450167A200F92223;
      13'b0011011000010:
        casez_tmp = 64'h57FDBF69E09C07B1;
      13'b0011011000011:
        casez_tmp = 64'h86CE0038F8F51BE3;
      13'b0011011000100:
        casez_tmp = 64'hF0EF855285D6865A;
      13'b0011011000101:
        casez_tmp = 64'hF0227179B749BB7F;
      13'b0011011000110:
        casez_tmp = 64'h89360038E84A843A;
      13'b0011011000111:
        casez_tmp = 64'hF0EFF406EC2686A2;
      13'b0011011001000:
        casez_tmp = 64'hC411E51984AAF3DF;
      13'b0011011001001:
        casez_tmp = 64'hD0EF85CA86226522;
      13'b0011011001010:
        casez_tmp = 64'h6942740270A2822F;
      13'b0011011001011:
        casez_tmp = 64'h8082614564E28526;
      13'b0011011001100:
        casez_tmp = 64'hF44EFC26E0A2715D;
      13'b0011011001101:
        casez_tmp = 64'hEC56F84AE486F052;
      13'b0011011001110:
        casez_tmp = 64'h84B689B2842E8A2A;
      13'b0011011001111:
        casez_tmp = 64'hA055A63C32FF0EF;
      13'b0011011010000:
        casez_tmp = 64'hA9308F51E6357FD;
      13'b0011011010001:
        casez_tmp = 64'h8552865685A200C1;
      13'b0011011010010:
        casez_tmp = 64'h49324405EF9FE0EF;
      13'b0011011010011:
        casez_tmp = 64'hE0EF85CA85528656;
      13'b0011011010100:
        casez_tmp = 64'hFEA479E33575EEBF;
      13'b0011011010101:
        casez_tmp = 64'hFF06B7008A2783;
      13'b0011011010110:
        casez_tmp = 64'h187D71B00448A9B;
      13'b0011011010111:
        casez_tmp = 64'h971B8C590187941B;
      13'b0011011011000:
        casez_tmp = 64'h67418C598F750087;
      13'b0011011011001:
        casez_tmp = 64'hF00707130087D79B;
      13'b0011011011010:
        casez_tmp = 64'h900114028C5D8FF9;
      13'b0011011011011:
        casez_tmp = 64'h9452FFCAFA93944A;
      13'b0011011011100:
        casez_tmp = 64'h85A2460186D62AA1;
      13'b0011011011101:
        casez_tmp = 64'hE905A47FF0EF8552;
      13'b0011011011110:
        casez_tmp = 64'h440A13010007B7;
      13'b0011011011111:
        casez_tmp = 64'h9A71C01C00448613;
      13'b0011011100000:
        casez_tmp = 64'hDCDFC0EF85524581;
      13'b0011011100001:
        casez_tmp = 64'hC0EF855285CE8626;
      13'b0011011100010:
        casez_tmp = 64'h20007B79456F63F;
      13'b0011011100011:
        casez_tmp = 64'h60A6854AFEF42E23;
      13'b0011011100100:
        casez_tmp = 64'h79A2794274E26406;
      13'b0011011100101:
        casez_tmp = 64'h808261616AE27A02;
      13'b0011011100110:
        casez_tmp = 64'hE8221101B7F55579;
      13'b0011011100111:
        casez_tmp = 64'hE42EEC068532842A;
      13'b0011011101000:
        casez_tmp = 64'h69B5F0000EFE032;
      13'b0011011101001:
        casez_tmp = 64'h6602644285220005;
      13'b0011011101010:
        casez_tmp = 64'hB729610560E265A2;
      13'b0011011101011:
        casez_tmp = 64'hF0EFEC0600741101;
      13'b0011011101100:
        casez_tmp = 64'h853AE5094732D58F;
      13'b0011011101101:
        casez_tmp = 64'h46918082610560E2;
      13'b0011011101110:
        casez_tmp = 64'h55490007061B87AA;
      13'b0011011101111:
        casez_tmp = 64'h5B74398FED718E3;
      13'b0011011110000:
        casez_tmp = 64'h179B0187569B00FF;
      13'b0011011110001:
        casez_tmp = 64'h87169B8FD50187;
      13'b0011011110010:
        casez_tmp = 64'h571B66C18FD58EED;
      13'b0011011110011:
        casez_tmp = 64'h8F75F00686930087;
      13'b0011011110100:
        casez_tmp = 64'hFCF662E327818FD9;
      13'b0011011110101:
        casez_tmp = 64'h1141BF750007851B;
      13'b0011011110110:
        casez_tmp = 64'hBA86061300006617;
      13'b0011011110111:
        casez_tmp = 64'hC511F9FFF0EFE406;
      13'b0011011111000:
        casez_tmp = 64'h450900F5156357FD;
      13'b0011011111001:
        casez_tmp = 64'h14160A25549A011;
      13'b0011011111010:
        casez_tmp = 64'h661711418082;
      13'b0011011111011:
        casez_tmp = 64'hF0EFE406B9460613;
      13'b0011011111100:
        casez_tmp = 64'hF5136357FDF7BF;
      13'b0011011111101:
        casez_tmp = 64'h8082014160A24505;
      13'b0011011111110:
        casez_tmp = 64'h748436E8221101;
      13'b0011011111111:
        casez_tmp = 64'hC90DCBCFF0EFEC06;
      13'b0011100000000:
        casez_tmp = 64'h2E7F663478D4732;
      13'b0011100000001:
        casez_tmp = 64'hD71B00FF06B7411C;
      13'b0011100000010:
        casez_tmp = 64'h8C590187941B0187;
      13'b0011100000011:
        casez_tmp = 64'h8C598F750087971B;
      13'b0011100000100:
        casez_tmp = 64'h7130087D79B6741;
      13'b0011100000101:
        casez_tmp = 64'h24018C5D8FF9F007;
      13'b0011100000110:
        casez_tmp = 64'h61056442852260E2;
      13'b0011100000111:
        casez_tmp = 64'h84B6EC2671798082;
      13'b0011100001000:
        casez_tmp = 64'h843AF406F0220074;
      13'b0011100001001:
        casez_tmp = 64'hC51157FDC6EFF0EF;
      13'b0011100001010:
        casez_tmp = 64'h97436357D14732;
      13'b0011100001011:
        casez_tmp = 64'h740270A2C01C4781;
      13'b0011100001100:
        casez_tmp = 64'h11418082614564E2;
      13'b0011100001101:
        casez_tmp = 64'h6517E919E406;
      13'b0011100001110:
        casez_tmp = 64'h9E2FE0EFB0C50513;
      13'b0011100001111:
        casez_tmp = 64'h8082014160A25579;
      13'b0011100010000:
        casez_tmp = 64'hE0EFF7E500357793;
      13'b0011100010001:
        casez_tmp = 64'h1141B7C5D965C47F;
      13'b0011100010010:
        casez_tmp = 64'h613000066174681;
      13'b0011100010011:
        casez_tmp = 64'hC1AFF0EFE406AF66;
      13'b0011100010100:
        casez_tmp = 64'h859300006597CD01;
      13'b0011100010101:
        casez_tmp = 64'h3513430000EFAEE5;
      13'b0011100010110:
        casez_tmp = 64'h8082014160A20015;
      13'b0011100010111:
        casez_tmp = 64'hEC061101BFE54505;
      13'b0011100011000:
        casez_tmp = 64'h6597C10DE42EE822;
      13'b0011100011001:
        casez_tmp = 64'h842AAD2585930000;
      13'b0011100011010:
        casez_tmp = 64'h852285AAD70FF0EF;
      13'b0011100011011:
        casez_tmp = 64'h468160E266226442;
      13'b0011100011100:
        casez_tmp = 64'h60E2BD4FF06F6105;
      13'b0011100011101:
        casez_tmp = 64'h7179808261056442;
      13'b0011100011110:
        casez_tmp = 64'h84B6843AEC26F022;
      13'b0011100011111:
        casez_tmp = 64'hF40600780027169B;
      13'b0011100100000:
        casez_tmp = 64'h4532882AF3BFF0EF;
      13'b0011100100001:
        casez_tmp = 64'h64E2740270A2C521;
      13'b0011100100010:
        casez_tmp = 64'h27161380826145;
      13'b0011100100011:
        casez_tmp = 64'h85B3439C00C807B3;
      13'b0011100100100:
        casez_tmp = 64'h187D89B070500C4;
      13'b0011100100101:
        casez_tmp = 64'h11666330187961B;
      13'b0011100100110:
        casez_tmp = 64'h68F8B30087989B;
      13'b0011100100111:
        casez_tmp = 64'h11666330087D79B;
      13'b0011100101000:
        casez_tmp = 64'h79BC19C8FD18FF5;
      13'b0011100101001:
        casez_tmp = 64'hBF75FC87C5E30007;
      13'b0011100101010:
        casez_tmp = 64'hFF0337470166C1;
      13'b0011100101011:
        casez_tmp = 64'h7175B7EDF0068693;
      13'b0011100101100:
        casez_tmp = 64'hE122087489B6F4CE;
      13'b0011100101101:
        casez_tmp = 64'hFCA6E506F0D2F8CA;
      13'b0011100101110:
        casez_tmp = 64'hE0E2E4DEE8DAECD6;
      13'b0011100101111:
        casez_tmp = 64'hE42AF46EF86AFC66;
      13'b0011100110000:
        casez_tmp = 64'hF0EF8442893E8A3A;
      13'b0011100110001:
        casez_tmp = 64'h60AA5CF9E115B30F;
      13'b0011100110010:
        casez_tmp = 64'h79A6794674E6640A;
      13'b0011100110011:
        casez_tmp = 64'h6BA66B466AE67A06;
      13'b0011100110100:
        casez_tmp = 64'h85667DA27D426C06;
      13'b0011100110101:
        casez_tmp = 64'h44F2808261497CE2;
      13'b0011100110110:
        casez_tmp = 64'h94AA98F14C816DC1;
      13'b0011100110111:
        casez_tmp = 64'hF00D8D9300FF0B37;
      13'b0011100111000:
        casez_tmp = 64'h9565632A015BFD;
      13'b0011100111001:
        casez_tmp = 64'h411CB7C1FC0943E3;
      13'b0011100111010:
        casez_tmp = 64'h187D71B00450D13;
      13'b0011100111011:
        casez_tmp = 64'hEC6C3301879C1B;
      13'b0011100111100:
        casez_tmp = 64'h16777330087971B;
      13'b0011100111101:
        casez_tmp = 64'hEC6C330087D79B;
      13'b0011100111110:
        casez_tmp = 64'hFC6C3301B7F7B3;
      13'b0011100111111:
        casez_tmp = 64'hC9B18C2E000C059B;
      13'b0011101000000:
        casez_tmp = 64'h94635AFD00099563;
      13'b0011101000001:
        casez_tmp = 64'hD0CFF0EF6522052C;
      13'b0011101000010:
        casez_tmp = 64'h5CA9000554638AAA;
      13'b0011101000011:
        casez_tmp = 64'h85AA02098A63BF9D;
      13'b0011101000100:
        casez_tmp = 64'hF0EF864E56FD6522;
      13'b0011101000101:
        casez_tmp = 64'h84E30005089BDCBF;
      13'b0011101000110:
        casez_tmp = 64'hD71302089693FF78;
      13'b0011101000111:
        casez_tmp = 64'hFCE4EDE3976A01E6;
      13'b0011101001000:
        casez_tmp = 64'hF40C04E3072C9763;
      13'b0011101001001:
        casez_tmp = 64'h88D2B7894C81E801;
      13'b0011101001010:
        casez_tmp = 64'hB7ED48815AFDB7CD;
      13'b0011101001011:
        casez_tmp = 64'h116F363874646C1;
      13'b0011101001100:
        casez_tmp = 64'h154202366414741;
      13'b0011101001101:
        casez_tmp = 64'h4210007051BC058;
      13'b0011101001110:
        casez_tmp = 64'h61300FF08374681;
      13'b0011101001111:
        casez_tmp = 64'hF6E30006879BF006;
      13'b0011101010000:
        casez_tmp = 64'h97EA00269793FCA7;
      13'b0011101010001:
        casez_tmp = 64'h187D59B0685439C;
      13'b0011101010010:
        casez_tmp = 64'h959B8F4D0187971B;
      13'b0011101010011:
        casez_tmp = 64'hD79B0105F5B30087;
      13'b0011101010100:
        casez_tmp = 64'h8FD98FF18F4D0087;
      13'b0011101010101:
        casez_tmp = 64'h9793B7F90411C01C;
      13'b0011101010110:
        casez_tmp = 64'h53301E7D8930208;
      13'b0011101010111:
        casez_tmp = 64'h6841B7212C85011D;
      13'b0011101011000:
        casez_tmp = 64'h337450158FD862A;
      13'b0011101011001:
        casez_tmp = 64'h35FDF008081300FF;
      13'b0011101011010:
        casez_tmp = 64'h4218808201159363;
      13'b0011101011011:
        casez_tmp = 64'h551B061102051693;
      13'b0011101011100:
        casez_tmp = 64'h8FC90187179B0187;
      13'b0011101011101:
        casez_tmp = 64'h6575330087151B;
      13'b0011101011110:
        casez_tmp = 64'h77338FC90087571B;
      13'b0011101011111:
        casez_tmp = 64'h938117828FD90107;
      13'b0011101100000:
        casez_tmp = 64'h7139B7E900D7E533;
      13'b0011101100001:
        casez_tmp = 64'hF42600748436F822;
      13'b0011101100010:
        casez_tmp = 64'hE852FC06EC4EF04A;
      13'b0011101100011:
        casez_tmp = 64'hF0EF89C284BE893A;
      13'b0011101100100:
        casez_tmp = 64'h9906BBC929998F;
      13'b0011101100101:
        casez_tmp = 64'h862A47B2028686BB;
      13'b0011101100110:
        casez_tmp = 64'h963E9BF100291A13;
      13'b0011101100111:
        casez_tmp = 64'h68A547D00249793;
      13'b0011101101000:
        casez_tmp = 64'h6E6397D29A2A9536;
      13'b0011101101001:
        casez_tmp = 64'hF73FF0EF85CA00F6;
      13'b0011101101010:
        casez_tmp = 64'h85A600098863842A;
      13'b0011101101011:
        casez_tmp = 64'hB023F65FF0EF8552;
      13'b0011101101100:
        casez_tmp = 64'h7442852270E200A9;
      13'b0011101101101:
        casez_tmp = 64'h6A4269E2790274A2;
      13'b0011101101110:
        casez_tmp = 64'hB7F5547D80826121;
      13'b0011101101111:
        casez_tmp = 64'hF44EF84AE0A2715D;
      13'b0011101110000:
        casez_tmp = 64'hE45EE85AEC56F052;
      13'b0011101110001:
        casez_tmp = 64'h8BAE842AFC26E486;
      13'b0011101110010:
        casez_tmp = 64'h8ABE8A3A89B68932;
      13'b0011101110011:
        casez_tmp = 64'h5C63C15FF0EF8B42;
      13'b0011101110100:
        casez_tmp = 64'h852285DE84AA02A0;
      13'b0011101110101:
        casez_tmp = 64'h446387AAC2BFF0EF;
      13'b0011101110110:
        casez_tmp = 64'h60A6640685220205;
      13'b0011101110111:
        casez_tmp = 64'h6B42885688DA6BA2;
      13'b0011101111000:
        casez_tmp = 64'h74E286D287266AE2;
      13'b0011101111001:
        casez_tmp = 64'h79A285CA864E7A02;
      13'b0011101111010:
        casez_tmp = 64'h60A6BF0D61617942;
      13'b0011101111011:
        casez_tmp = 64'h79A2794274E26406;
      13'b0011101111100:
        casez_tmp = 64'h6BA26B426AE27A02;
      13'b0011101111101:
        casez_tmp = 64'h450180826161557D;
      13'b0011101111110:
        casez_tmp = 64'hEC06E82211018082;
      13'b0011101111111:
        casez_tmp = 64'hF387B78300007797;
      13'b0011110000000:
        casez_tmp = 64'hE01A8230CF1BC23;
      13'b0011110000001:
        casez_tmp = 64'hB71FC0EF840E0068;
      13'b0011110000010:
        casez_tmp = 64'hB503E11D4532EC68;
      13'b0011110000011:
        casez_tmp = 64'hEE1A82347090D81;
      13'b0011110000100:
        casez_tmp = 64'hE909C62AC47FF0EF;
      13'b0011110000101:
        casez_tmp = 64'h73170D81B503;
      13'b0011110000110:
        casez_tmp = 64'hC62A9302F2C33303;
      13'b0011110000111:
        casez_tmp = 64'h6105644260E24532;
      13'b0011110001000:
        casez_tmp = 64'h551711418082;
      13'b0011110001001:
        casez_tmp = 64'hD0EFE40675C50513;
      13'b0011110001010:
        casez_tmp = 64'h4681C625A001E09F;
      13'b0011110001011:
        casez_tmp = 64'hE888B88300007897;
      13'b0011110001100:
        casez_tmp = 64'h7C70300D507B3;
      13'b0011110001101:
        casez_tmp = 64'h7C78300D587B3;
      13'b0011110001110:
        casez_tmp = 64'h2F70D63C3B1C339;
      13'b0011110001111:
        casez_tmp = 64'h8480300E88833;
      13'b0011110010000:
        casez_tmp = 64'h8066300187813;
      13'b0011110010001:
        casez_tmp = 64'hFF777130207071B;
      13'b0011110010010:
        casez_tmp = 64'h480398460007881B;
      13'b0011110010011:
        casez_tmp = 64'h663001878130008;
      13'b0011110010100:
        casez_tmp = 64'hF7930207879B0008;
      13'b0011110010101:
        casez_tmp = 64'h68500E796630FF7;
      13'b0011110010110:
        casez_tmp = 64'h53B87BAFAC698E3;
      13'b0011110010111:
        casez_tmp = 64'h47014781808240F7;
      13'b0011110011000:
        casez_tmp = 64'hB7799201567DBFDD;
      13'b0011110011001:
        casez_tmp = 64'h5850005C70387AA;
      13'b0011110011010:
        casez_tmp = 64'hFB75FEE78FA30785;
      13'b0011110011011:
        casez_tmp = 64'h5C70387AA8082;
      13'b0011110011100:
        casez_tmp = 64'h58507850007C503;
      13'b0011110011101:
        casez_tmp = 64'h8082FB65E1119D19;
      13'b0011110011110:
        casez_tmp = 64'hE61463470186AA;
      13'b0011110011111:
        casez_tmp = 64'hE587B380824501;
      13'b0011110100000:
        casez_tmp = 64'hE687B30007C803;
      13'b0011110100001:
        casez_tmp = 64'h4107853B0007C783;
      13'b0011110100010:
        casez_tmp = 64'hFE0810E30705E501;
      13'b0011110100011:
        casez_tmp = 64'h47830FF5F5938082;
      13'b0011110100100:
        casez_tmp = 64'h808200B793630005;
      13'b0011110100101:
        casez_tmp = 64'h4501BFCD0505C399;
      13'b0011110100110:
        casez_tmp = 64'h7C70387AA8082;
      13'b0011110100111:
        casez_tmp = 64'h808240A78533E701;
      13'b0011110101000:
        casez_tmp = 64'h87AA95AABFCD0785;
      13'b0011110101001:
        casez_tmp = 64'h7C70300B78563;
      13'b0011110101010:
        casez_tmp = 64'h808240A78533E701;
      13'b0011110101011:
        casez_tmp = 64'h1101C50DB7FD0785;
      13'b0011110101100:
        casez_tmp = 64'hF0EFE42AE822EC06;
      13'b0011110101101:
        casez_tmp = 64'h81CFE0EF0505FCDF;
      13'b0011110101110:
        casez_tmp = 64'h60E2E511842A65A2;
      13'b0011110101111:
        casez_tmp = 64'h8082610564428522;
      13'b0011110110000:
        casez_tmp = 64'h8082BFCDF49FF0EF;
      13'b0011110110001:
        casez_tmp = 64'hE61463470186AA;
      13'b0011110110010:
        casez_tmp = 64'hE687B380824501;
      13'b0011110110011:
        casez_tmp = 64'h7C78300E58533;
      13'b0011110110100:
        casez_tmp = 64'h853B070500054503;
      13'b0011110110101:
        casez_tmp = 64'h962A8082D16D40A7;
      13'b0011110110110:
        casez_tmp = 64'hC514630FF5F593;
      13'b0011110110111:
        casez_tmp = 64'h5470380824501;
      13'b0011110111000:
        casez_tmp = 64'hFEB70BE300150793;
      13'b0011110111001:
        casez_tmp = 64'hD01B783B7ED853E;
      13'b0011110111010:
        casez_tmp = 64'h30EFE4061141EF99;
      13'b0011110111011:
        casez_tmp = 64'hB50360A2E5192150;
      13'b0011110111100:
        casez_tmp = 64'h1C70306F01410D01;
      13'b0011110111101:
        casez_tmp = 64'hB5038082014160A2;
      13'b0011110111110:
        casez_tmp = 64'hEC061101BFCD0D01;
      13'b0011110111111:
        casez_tmp = 64'h30EFEB890D01B783;
      13'b0011111000000:
        casez_tmp = 64'h551785AA1ED0;
      13'b0011111000001:
        casez_tmp = 64'hB503ED815CC50513;
      13'b0011111000010:
        casez_tmp = 64'h173030EF002C0D01;
      13'b0011111000011:
        casez_tmp = 64'h5517C51985AA;
      13'b0011111000100:
        casez_tmp = 64'hF6000EF5DC50513;
      13'b0011111000101:
        casez_tmp = 64'h80826105652260E2;
      13'b0011111000110:
        casez_tmp = 64'hEC06110180824501;
      13'b0011111000111:
        casez_tmp = 64'hF0EF84AAE426E822;
      13'b0011111001000:
        casez_tmp = 64'hF89FF0EF842AFB7F;
      13'b0011111001001:
        casez_tmp = 64'h2F404333E800793;
      13'b0011111001010:
        casez_tmp = 64'h553360E291011502;
      13'b0011111001011:
        casez_tmp = 64'h64A28D05644202A4;
      13'b0011111001100:
        casez_tmp = 64'hE022114180826105;
      13'b0011111001101:
        casez_tmp = 64'hF61FF0EF842AE406;
      13'b0011111001110:
        casez_tmp = 64'hF453702A40433;
      13'b0011111001111:
        casez_tmp = 64'h553360A224050513;
      13'b0011111010000:
        casez_tmp = 64'h80820141640202A4;
      13'b0011111010001:
        casez_tmp = 64'hE426E822EC061101;
      13'b0011111010010:
        casez_tmp = 64'h842AF63FF0EF84AA;
      13'b0011111010011:
        casez_tmp = 64'h942AFCBFF0EF8526;
      13'b0011111010100:
        casez_tmp = 64'h6EE3F53FF0EF0405;
      13'b0011111010101:
        casez_tmp = 64'h64A2644260E2FE85;
      13'b0011111010110:
        casez_tmp = 64'hEC26717980826105;
      13'b0011111010111:
        casez_tmp = 64'hE44EF022009894B7;
      13'b0011111011000:
        casez_tmp = 64'h8493842AE84AF406;
      13'b0011111011001:
        casez_tmp = 64'hB983000079976804;
      13'b0011111011010:
        casez_tmp = 64'h84F3638922B769;
      13'b0011111011011:
        casez_tmp = 64'h41240433854A8926;
      13'b0011111011100:
        casez_tmp = 64'h740270A2F8659982;
      13'b0011111011101:
        casez_tmp = 64'h614569A2694264E2;
      13'b0011111011110:
        casez_tmp = 64'hE406452911418082;
      13'b0011111011111:
        casez_tmp = 64'hB95FD0EFB27FD0EF;
      13'b0011111100000:
        casez_tmp = 64'h4501458146014681;
      13'b0011111100001:
        casez_tmp = 64'h1141A001D4AFC0EF;
      13'b0011111100010:
        casez_tmp = 64'hF0EFB45FD0EFE406;
      13'b0011111100011:
        casez_tmp = 64'h102CF42E711DFDDF;
      13'b0011111100100:
        casez_tmp = 64'hE0BAFC36F832EC06;
      13'b0011111100101:
        casez_tmp = 64'hE42EECC6E8C2E4BE;
      13'b0011111100110:
        casez_tmp = 64'hFBFFF0EF2F0000EF;
      13'b0011111100111:
        casez_tmp = 64'h2C7786361984781;
      13'b0011111101000:
        casez_tmp = 64'hC3158F5D00854703;
      13'b0011111101001:
        casez_tmp = 64'h6463057006934725;
      13'b0011111101010:
        casez_tmp = 64'h61180300069300F7;
      13'b0011111101011:
        casez_tmp = 64'hE110001706139FB5;
      13'b0011111101100:
        casez_tmp = 64'h423478500F70023;
      13'b0011111101101:
        casez_tmp = 64'h27858F11808200F5;
      13'b0011111101110:
        casez_tmp = 64'hB7D10FF7F793E198;
      13'b0011111101111:
        casez_tmp = 64'hE91800178713691C;
      13'b0011111110000:
        casez_tmp = 64'h852E808200B78023;
      13'b0011111110001:
        casez_tmp = 64'hE9227135A97FD06F;
      13'b0011111110010:
        casez_tmp = 64'hF0DAF8D2E14AE526;
      13'b0011111110011:
        casez_tmp = 64'hE0EAE4E6E8E2ECDE;
      13'b0011111110100:
        casez_tmp = 64'hFC6EF4D6FCCEED06;
      13'b0011111110101:
        casez_tmp = 64'hB138432892E84AA;
      13'b0011111110110:
        casez_tmp = 64'hC1302D00B930250;
      13'b0011111110111:
        casez_tmp = 64'h6C00D134CA50300;
      13'b0011111111000:
        casez_tmp = 64'h9458302010A13;
      13'b0011111111001:
        casez_tmp = 64'h60EAE18D00190993;
      13'b0011111111010:
        casez_tmp = 64'h79E6690A64AA644A;
      13'b0011111111011:
        casez_tmp = 64'h6BE67B067AA67A46;
      13'b0011111111100:
        casez_tmp = 64'h7DE26D066CA66C46;
      13'b0011111111101:
        casez_tmp = 64'h87638082610D4501;
      13'b0011111111110:
        casez_tmp = 64'h894E85266C9C0165;
      13'b0011111111111:
        casez_tmp = 64'h194783B7E99782;
      13'b0100000000000:
        casez_tmp = 64'h4A81090907778C63;
      13'b0100000000001:
        casez_tmp = 64'h9478301879663;
      13'b0100000000010:
        casez_tmp = 64'hFD07871B09054A85;
      13'b0100000000011:
        casez_tmp = 64'hE3634D810FF77713;
      13'b0100000000100:
        casez_tmp = 64'hDBB46A5462902EC;
      13'b0100000000101:
        casez_tmp = 64'hFD8DBB090503B6;
      13'b0100000000110:
        casez_tmp = 64'hFD0D8D9BFFF94783;
      13'b0100000000111:
        casez_tmp = 64'hFF77713FD07871B;
      13'b0100000001000:
        casez_tmp = 64'h96634701FEE6F3E3;
      13'b0100000001001:
        casez_tmp = 64'h47050009478301A7;
      13'b0100000001010:
        casez_tmp = 64'h84230144B0230905;
      13'b0100000001011:
        casez_tmp = 64'h8963069006930004;
      13'b0100000001100:
        casez_tmp = 64'h69304F6EA6302D7;
      13'b0100000001101:
        casez_tmp = 64'hE96318D787630250;
      13'b0100000001110:
        casez_tmp = 64'hA8D189A2DFB100F6;
      13'b0100000001111:
        casez_tmp = 64'hB761090D00294783;
      13'b0100000010000:
        casez_tmp = 64'h10D78F6306300693;
      13'b0100000010001:
        casez_tmp = 64'hFED794E306400693;
      13'b0100000010010:
        casez_tmp = 64'h6018CF3500840993;
      13'b0100000010011:
        casez_tmp = 64'h9863EC3A07500693;
      13'b0100000010100:
        casez_tmp = 64'h40AC56394370AD7;
      13'b0100000010101:
        casez_tmp = 64'h413043260940413;
      13'b0100000010110:
        casez_tmp = 64'h693A89D044E13D4;
      13'b0100000010111:
        casez_tmp = 64'hE9630ED78E630730;
      13'b0100000011000:
        casez_tmp = 64'h97E30700071302F6;
      13'b0100000011001:
        casez_tmp = 64'h840993601CFAE7;
      13'b0100000011010:
        casez_tmp = 64'h82CEC3E14724405;
      13'b0100000011011:
        casez_tmp = 64'hE09C02110793EFC5;
      13'b0100000011100:
        casez_tmp = 64'h2F1002303000793;
      13'b0100000011101:
        casez_tmp = 64'hA8B100F484234785;
      13'b0100000011110:
        casez_tmp = 64'hF8D78EE307500693;
      13'b0100000011111:
        casez_tmp = 64'hF6D79CE307800693;
      13'b0100000100000:
        casez_tmp = 64'h99300046783F769;
      13'b0100000100001:
        casez_tmp = 64'hB7D9100004370084;
      13'b0100000100010:
        casez_tmp = 64'h9301020697134014;
      13'b0100000100011:
        casez_tmp = 64'h9E6307500713EC3A;
      13'b0100000100100:
        casez_tmp = 64'h4133B9AD43704E7;
      13'b0100000100101:
        casez_tmp = 64'h82CD7DD67E2A004;
      13'b0100000100110:
        casez_tmp = 64'hF0EFE42E85268622;
      13'b0100000100111:
        casez_tmp = 64'h47A546A98722E03F;
      13'b0100000101000:
        casez_tmp = 64'hE5E365A202D45433;
      13'b0100000101001:
        casez_tmp = 64'h5AE3A8858452FEE7;
      13'b0100000101010:
        casez_tmp = 64'h40AC5639437F407;
      13'b0100000101011:
        casez_tmp = 64'h413043260940413;
      13'b0100000101100:
        casez_tmp = 64'h44E40E0073313D4;
      13'b0100000101101:
        casez_tmp = 64'h793E09C02110793;
      13'b0100000101110:
        casez_tmp = 64'h2F10023EC3A02D0;
      13'b0100000101111:
        casez_tmp = 64'h871B3B9AD437BF5D;
      13'b0100000110000:
        casez_tmp = 64'hD2E3A00404130006;
      13'b0100000110001:
        casez_tmp = 64'hBFE940E0073BFA06;
      13'b0100000110010:
        casez_tmp = 64'h8011E42E85268622;
      13'b0100000110011:
        casez_tmp = 64'hF86D65A2DA1FF0EF;
      13'b0100000110100:
        casez_tmp = 64'h71300044783B76D;
      13'b0100000110101:
        casez_tmp = 64'hE098008409930211;
      13'b0100000110110:
        casez_tmp = 64'h993BF5902F10023;
      13'b0100000110111:
        casez_tmp = 64'h8023609C60000084;
      13'b0100000111000:
        casez_tmp = 64'h7936098E0800007;
      13'b0100000111001:
        casez_tmp = 64'h74703E09C0017;
      13'b0100000111010:
        casez_tmp = 64'h47E3C3193DFD87EE;
      13'b0100000111011:
        casez_tmp = 64'h846302000593FEF0;
      13'b0100000111100:
        casez_tmp = 64'hFD9303000593000A;
      13'b0100000111101:
        casez_tmp = 64'h4B6300078A9B0FF5;
      13'b0100000111110:
        casez_tmp = 64'hB3F9844EE0150150;
      13'b0100000111111:
        casez_tmp = 64'h23E09802110713;
      13'b0100001000000:
        casez_tmp = 64'h85EE6C9CBD8D02F1;
      13'b0100001000001:
        casez_tmp = 64'hB7C53AFD97828526;
      13'b0100001000010:
        casez_tmp = 64'h4583978285266C9C;
      13'b0100001000011:
        casez_tmp = 64'hBFD9F9F504050004;
      13'b0100001000100:
        casez_tmp = 64'h797862E7179;
      13'b0100001000101:
        casez_tmp = 64'h850A85AAD6278793;
      13'b0100001000110:
        casez_tmp = 64'hD59FF0EFEC3EF406;
      13'b0100001000111:
        casez_tmp = 64'h71198082614570A2;
      13'b0100001001000:
        casez_tmp = 64'hB0F4BEE8B2E4AE;
      13'b0100001001001:
        casez_tmp = 64'hD3E7879300000797;
      13'b0100001001010:
        casez_tmp = 64'hECB6FC06080885AA;
      13'b0100001001011:
        casez_tmp = 64'hF43EFCC6F8C2F0BA;
      13'b0100001001100:
        casez_tmp = 64'h70E2D2BFF0EFE432;
      13'b0100001001101:
        casez_tmp = 64'hECBE715980826109;
      13'b0100001001110:
        casez_tmp = 64'h879300000797F02A;
      13'b0100001001111:
        casez_tmp = 64'hB0080885B2D067;
      13'b0100001010000:
        casez_tmp = 64'hE8BAE4B6F43EFC06;
      13'b0100001010001:
        casez_tmp = 64'hF0EFE432F4C6F0C2;
      13'b0100001010010:
        casez_tmp = 64'h780237782CFFF;
      13'b0100001010011:
        casez_tmp = 64'h77178082616570E2;
      13'b0100001010100:
        casez_tmp = 64'h7797072707130000;
      13'b0100001010101:
        casez_tmp = 64'h8F990BA787930000;
      13'b0100001010110:
        casez_tmp = 64'hFCCCD7B74037D713;
      13'b0100001010111:
        casez_tmp = 64'h879307B2CCD78793;
      13'b0100001011000:
        casez_tmp = 64'hCCD7879307B2CCD7;
      13'b0100001011001:
        casez_tmp = 64'h7BBCCD7879307B2;
      13'b0100001011010:
        casez_tmp = 64'h86AA0280071302F7;
      13'b0100001011011:
        casez_tmp = 64'h385051300007517;
      13'b0100001011100:
        casez_tmp = 64'h946397AA02E787B3;
      13'b0100001011101:
        casez_tmp = 64'h45188082450100A7;
      13'b0100001011110:
        casez_tmp = 64'h2850513FED70EE3;
      13'b0100001011111:
        casez_tmp = 64'hE04AE4261101B7FD;
      13'b0100001100000:
        casez_tmp = 64'h4503892AE822EC06;
      13'b0100001100001:
        casez_tmp = 64'h8493000074970085;
      13'b0100001100010:
        casez_tmp = 64'h713000077170064;
      13'b0100001100011:
        casez_tmp = 64'h879300007797FFE7;
      13'b0100001100100:
        casez_tmp = 64'h40E78433ED290467;
      13'b0100001100101:
        casez_tmp = 64'hCCD78793FCCCD7B7;
      13'b0100001100110:
        casez_tmp = 64'h7B2CCD7879307B2;
      13'b0100001100111:
        casez_tmp = 64'h879307B2CCD78793;
      13'b0100001101000:
        casez_tmp = 64'h2F4043B840DCCD7;
      13'b0100001101001:
        casez_tmp = 64'h2F4043302800793;
      13'b0100001101010:
        casez_tmp = 64'h4481009414639426;
      13'b0100001101011:
        casez_tmp = 64'h9782854A709CA801;
      13'b0100001101100:
        casez_tmp = 64'hF90423449CE919;
      13'b0100001101101:
        casez_tmp = 64'h85266902644260E2;
      13'b0100001101110:
        casez_tmp = 64'h84938082610564A2;
      13'b0100001101111:
        casez_tmp = 64'h60E26442BFE10284;
      13'b0100001110000:
        casez_tmp = 64'hBF216105690264A2;
      13'b0100001110001:
        casez_tmp = 64'h7717E8221101;
      13'b0100001110010:
        casez_tmp = 64'h7797F8470713;
      13'b0100001110011:
        casez_tmp = 64'h40E78433FCC78793;
      13'b0100001110100:
        casez_tmp = 64'hCCD78793FCCCD7B7;
      13'b0100001110101:
        casez_tmp = 64'h7B2CCD7879307B2;
      13'b0100001110110:
        casez_tmp = 64'h879307B2CCD78793;
      13'b0100001110111:
        casez_tmp = 64'h2F4043B840DCCD7;
      13'b0100001111000:
        casez_tmp = 64'hE04AE42602800793;
      13'b0100001111001:
        casez_tmp = 64'h849300007497EC06;
      13'b0100001111010:
        casez_tmp = 64'h50423892AF464;
      13'b0100001111011:
        casez_tmp = 64'h8963942602F40433;
      13'b0100001111100:
        casez_tmp = 64'h9782854A709C0084;
      13'b0100001111101:
        casez_tmp = 64'hF90423449CE911;
      13'b0100001111110:
        casez_tmp = 64'h690264A2644260E2;
      13'b0100001111111:
        casez_tmp = 64'h284849380826105;
      13'b0100010000000:
        casez_tmp = 64'hE426E8221101BFF9;
      13'b0100010000001:
        casez_tmp = 64'h4068E23EC06E04A;
      13'b0100010000010:
        casez_tmp = 64'hE61D8436892E84AA;
      13'b0100010000011:
        casez_tmp = 64'h51387AAEE3FF0EF;
      13'b0100010000100:
        casez_tmp = 64'h5136B9CCB99FA30;
      13'b0100010000101:
        casez_tmp = 64'h85CA8622C799FDA0;
      13'b0100010000110:
        casez_tmp = 64'h5579C11197828526;
      13'b0100010000111:
        casez_tmp = 64'h690264A2644260E2;
      13'b0100010001000:
        casez_tmp = 64'hF0EF853280826105;
      13'b0100010001001:
        casez_tmp = 64'h460186B2BFC9E59F;
      13'b0100010001010:
        casez_tmp = 64'hEC26F0227179BF4D;
      13'b0100010001011:
        casez_tmp = 64'hE84AF406E052E44E;
      13'b0100010001100:
        casez_tmp = 64'hEF84B2842E89AA;
      13'b0100010001101:
        casez_tmp = 64'h687BA03611C1290;
      13'b0100010001110:
        casez_tmp = 64'h892ACF85010A3783;
      13'b0100010001111:
        casez_tmp = 64'h691C0CD000EF854E;
      13'b0100010010000:
        casez_tmp = 64'h94073304F47063;
      13'b0100010010001:
        casez_tmp = 64'h408784B300E7F463;
      13'b0100010010010:
        casez_tmp = 64'h70A2010A3783650C;
      13'b0100010010011:
        casez_tmp = 64'h6A0269A2740295A2;
      13'b0100010010100:
        casez_tmp = 64'h694264E2854A8626;
      13'b0100010010101:
        casez_tmp = 64'hFDA0051387826145;
      13'b0100010010110:
        casez_tmp = 64'h694264E2740270A2;
      13'b0100010010111:
        casez_tmp = 64'h808261456A0269A2;
      13'b0100010011000:
        casez_tmp = 64'hF8227139B7FD4501;
      13'b0100010011001:
        casez_tmp = 64'hE456E852EC4EF426;
      13'b0100010011010:
        casez_tmp = 64'h842E8A2AF04AFC06;
      13'b0100010011011:
        casez_tmp = 64'hB3000EF89B684B2;
      13'b0100010011100:
        casez_tmp = 64'hB7830687BA83611C;
      13'b0100010011101:
        casez_tmp = 64'h8552892ACF95008A;
      13'b0100010011110:
        casez_tmp = 64'h7363691C057000EF;
      13'b0100010011111:
        casez_tmp = 64'hF4630094073304F4;
      13'b0100010100000:
        casez_tmp = 64'h650C408784B300E7;
      13'b0100010100001:
        casez_tmp = 64'h95A270E2008AB783;
      13'b0100010100010:
        casez_tmp = 64'h86CE6AA26A427442;
      13'b0100010100011:
        casez_tmp = 64'h854A74A269E28626;
      13'b0100010100100:
        casez_tmp = 64'h513878261217902;
      13'b0100010100101:
        casez_tmp = 64'h74A2744270E2FDA0;
      13'b0100010100110:
        casez_tmp = 64'h6AA26A4269E27902;
      13'b0100010100111:
        casez_tmp = 64'hB7F5450180826121;
      13'b0100010101000:
        casez_tmp = 64'hEC4EF426F8227139;
      13'b0100010101001:
        casez_tmp = 64'hF04AFC06E456E852;
      13'b0100010101010:
        casez_tmp = 64'h89B684B2842E8A2A;
      13'b0100010101011:
        casez_tmp = 64'hBA83611C037000EF;
      13'b0100010101100:
        casez_tmp = 64'hCF95000AB7830687;
      13'b0100010101101:
        casez_tmp = 64'h7DA000EF8552892A;
      13'b0100010101110:
        casez_tmp = 64'h73304F47363691C;
      13'b0100010101111:
        casez_tmp = 64'h84B300E7F4630094;
      13'b0100010110000:
        casez_tmp = 64'hAB783650C4087;
      13'b0100010110001:
        casez_tmp = 64'h6A42744295A270E2;
      13'b0100010110010:
        casez_tmp = 64'h69E2862686CE6AA2;
      13'b0100010110011:
        casez_tmp = 64'h61217902854A74A2;
      13'b0100010110100:
        casez_tmp = 64'h70E2FDA005138782;
      13'b0100010110101:
        casez_tmp = 64'h69E2790274A27442;
      13'b0100010110110:
        casez_tmp = 64'h808261216AA26A42;
      13'b0100010110111:
        casez_tmp = 64'hFD867111B7F54501;
      13'b0100010111000:
        casez_tmp = 64'hF9A284AAF1CAF5A6;
      13'b0100010111001:
        casez_tmp = 64'hE1DAE5D6E9D2EDCE;
      13'b0100010111010:
        casez_tmp = 64'h772000EFF962FD5E;
      13'b0100010111011:
        casez_tmp = 64'h7BA000EF8526892A;
      13'b0100010111100:
        casez_tmp = 64'h440506F51A6347D9;
      13'b0100010111101:
        casez_tmp = 64'h810A1302810993;
      13'b0100010111110:
        casez_tmp = 64'hE38B0B1300005B17;
      13'b0100010111111:
        casez_tmp = 64'hC1300005C178B8A;
      13'b0100011000000:
        casez_tmp = 64'h864E08100A93E36C;
      13'b0100011000001:
        casez_tmp = 64'hE41FF0EF854A85A2;
      13'b0100011000010:
        casez_tmp = 64'h593865A6494E121;
      13'b0100011000011:
        casez_tmp = 64'hF0EF855287220200;
      13'b0100011000100:
        casez_tmp = 64'hF38FF0EF8552C4FF;
      13'b0100011000101:
        casez_tmp = 64'h852685E286DE862A;
      13'b0100011000110:
        casez_tmp = 64'h6502E115565000EF;
      13'b0100011000111:
        casez_tmp = 64'h613C10070E000EF;
      13'b0100011001000:
        casez_tmp = 64'hC0EF052185CE0880;
      13'b0100011001001:
        casez_tmp = 64'h45000EF650282AF;
      13'b0100011001010:
        casez_tmp = 64'h4501FB541AE32405;
      13'b0100011001011:
        casez_tmp = 64'h790E74AE744E70EE;
      13'b0100011001100:
        casez_tmp = 64'h6B0E6AAE6A4E69EE;
      13'b0100011001101:
        casez_tmp = 64'h808261117C4A7BEA;
      13'b0100011001110:
        casez_tmp = 64'h55007931FE54703;
      13'b0100011001111:
        casez_tmp = 64'hE426110108F71463;
      13'b0100011010000:
        casez_tmp = 64'h1FF54703E822EC06;
      13'b0100011010001:
        casez_tmp = 64'h557D84AA0AA00793;
      13'b0100011010010:
        casez_tmp = 64'h1BE4879304F71263;
      13'b0100011010011:
        casez_tmp = 64'hC683461144014701;
      13'b0100011010100:
        casez_tmp = 64'hEE8107F6F6930007;
      13'b0100011010101:
        casez_tmp = 64'h2705C2910047C683;
      13'b0100011010110:
        casez_tmp = 64'hFEC415E307C12405;
      13'b0100011010111:
        casez_tmp = 64'h460DA8214501C319;
      13'b0100011011000:
        casez_tmp = 64'hD905859300005597;
      13'b0100011011001:
        casez_tmp = 64'hE24FF0EF03648513;
      13'b0100011011010:
        casez_tmp = 64'h644260E24505E519;
      13'b0100011011011:
        casez_tmp = 64'h46158082610564A2;
      13'b0100011011100:
        casez_tmp = 64'hD785859300005597;
      13'b0100011011101:
        casez_tmp = 64'hE04FF0EF05248513;
      13'b0100011011110:
        casez_tmp = 64'h3533FFC40513D16D;
      13'b0100011011111:
        casez_tmp = 64'hBFD940A0053300A0;
      13'b0100011100000:
        casez_tmp = 64'hE82211018082557D;
      13'b0100011100001:
        casez_tmp = 64'h6D1C1000EC06E426;
      13'b0100011100010:
        casez_tmp = 64'h3F7879345814605;
      13'b0100011100011:
        casez_tmp = 64'h4078793FC07F793;
      13'b0100011100100:
        casez_tmp = 64'h3F1049340F10133;
      13'b0100011100101:
        casez_tmp = 64'hEF86A6FC04F493;
      13'b0100011100110:
        casez_tmp = 64'h2F5106347851380;
      13'b0100011100111:
        casez_tmp = 64'h3533F37FF0EF8526;
      13'b0100011101000:
        casez_tmp = 64'h11340A0053300A0;
      13'b0100011101001:
        casez_tmp = 64'h64A2644260E2FE04;
      13'b0100011101010:
        casez_tmp = 64'hBFC5557D80826105;
      13'b0100011101011:
        casez_tmp = 64'hE04AE426E8221101;
      13'b0100011101100:
        casez_tmp = 64'h7936D181000EC06;
      13'b0100011101101:
        casez_tmp = 64'h2E7D7B346051FF0;
      13'b0100011101110:
        casez_tmp = 64'h2E787B307854581;
      13'b0100011101111:
        casez_tmp = 64'hFC07F79303F78793;
      13'b0100011110000:
        casez_tmp = 64'h40F1013304078793;
      13'b0100011110001:
        casez_tmp = 64'hFC09749303F10913;
      13'b0100011110010:
        casez_tmp = 64'h47850D4000EF86A6;
      13'b0100011110011:
        casez_tmp = 64'h3F0079306F51463;
      13'b0100011110100:
        casez_tmp = 64'hD7030527F563557D;
      13'b0100011110101:
        casez_tmp = 64'hA557879367AD1FE4;
      13'b0100011110110:
        casez_tmp = 64'h1C24871302F71E63;
      13'b0100011110111:
        casez_tmp = 64'hEE006131BE48693;
      13'b0100011111000:
        casez_tmp = 64'h4783458520248493;
      13'b0100011111001:
        casez_tmp = 64'hD78300C79B630007;
      13'b0100011111010:
        casez_tmp = 64'h7C20086D50300A6;
      13'b0100011111011:
        casez_tmp = 64'h2B7806327818FC9;
      13'b0100011111100:
        casez_tmp = 64'hFE9711E306C10741;
      13'b0100011111101:
        casez_tmp = 64'hFE040113357D4501;
      13'b0100011111110:
        casez_tmp = 64'h690264A2644260E2;
      13'b0100011111111:
        casez_tmp = 64'hB7F5450580826105;
      13'b0100100000000:
        casez_tmp = 64'hEC061101B7ED557D;
      13'b0100100000001:
        casez_tmp = 64'hEF842AE426E822;
      13'b0100100000010:
        casez_tmp = 64'hB75FF0EF84AA5380;
      13'b0100100000011:
        casez_tmp = 64'h8522C7810084C783;
      13'b0100100000100:
        casez_tmp = 64'h644260E2D9DFF0EF;
      13'b0100100000101:
        casez_tmp = 64'h80826105450164A2;
      13'b0100100000110:
        casez_tmp = 64'h842AF406F0227179;
      13'b0100100000111:
        casez_tmp = 64'hEFE436E832EC2E;
      13'b0100100001000:
        casez_tmp = 64'h639C77BC601C5080;
      13'b0100100001001:
        casez_tmp = 64'h66A274028522CB89;
      13'b0100100001010:
        casez_tmp = 64'h614570A265E26642;
      13'b0100100001011:
        casez_tmp = 64'h513740270A28782;
      13'b0100100001100:
        casez_tmp = 64'h614880826145FDA0;
      13'b0100100001101:
        casez_tmp = 64'h1101CD1DA1E5B7E1;
      13'b0100100001110:
        casez_tmp = 64'h611CE822EC06E426;
      13'b0100100001111:
        casez_tmp = 64'h77A084AA00053423;
      13'b0100100010000:
        casez_tmp = 64'h713F8840413609C;
      13'b0100100010001:
        casez_tmp = 64'h1763068787930784;
      13'b0100100010010:
        casez_tmp = 64'h64A2644260E200F7;
      13'b0100100010011:
        casez_tmp = 64'hF0EF852280826105;
      13'b0100100010100:
        casez_tmp = 64'h7C20FCBFF0EFFCDF;
      13'b0100100010101:
        casez_tmp = 64'h852E87AA8082BFE1;
      13'b0100100010110:
        casez_tmp = 64'hE19C77386398C599;
      13'b0100100010111:
        casez_tmp = 64'h45018782C391671C;
      13'b0100100011000:
        casez_tmp = 64'hEC26F02271798082;
      13'b0100100011001:
        casez_tmp = 64'h84AA610C842EF406;
      13'b0100100011010:
        casez_tmp = 64'h1CC010EF45790030;
      13'b0100100011011:
        casez_tmp = 64'h639CE01C67A2ED19;
      13'b0100100011100:
        casez_tmp = 64'h85A6CF91639C77BC;
      13'b0100100011101:
        casez_tmp = 64'h6522E50997828522;
      13'b0100100011110:
        casez_tmp = 64'h70A2FBBFF0EF85A2;
      13'b0100100011111:
        casez_tmp = 64'h8082614564E27402;
      13'b0100100100000:
        casez_tmp = 64'hC8E3552947854498;
      13'b0100100100001:
        casez_tmp = 64'hE783C3194781FEE7;
      13'b0100100100010:
        casez_tmp = 64'h2043023EC1C00C4;
      13'b0100100100011:
        casez_tmp = 64'hECA6F0A27159BFD9;
      13'b0100100100100:
        casez_tmp = 64'h69480006B023F486;
      13'b0100100100101:
        casez_tmp = 64'h87A684368732848A;
      13'b0100100100110:
        casez_tmp = 64'h613000056174681;
      13'b0100100100111:
        casez_tmp = 64'hE51964C010EFBAE6;
      13'b0100100101000:
        casez_tmp = 64'h852685A200043023;
      13'b0100100101001:
        casez_tmp = 64'h740670A6F7BFF0EF;
      13'b0100100101010:
        casez_tmp = 64'h71598082616564E6;
      13'b0100100101011:
        casez_tmp = 64'h872EF0A2848AECA6;
      13'b0100100101100:
        casez_tmp = 64'h5617468187A68432;
      13'b0100100101101:
        casez_tmp = 64'h5597B7A606130000;
      13'b0100100101110:
        casez_tmp = 64'hF486B82585930000;
      13'b0100100101111:
        casez_tmp = 64'h4302360E010EF;
      13'b0100100110000:
        casez_tmp = 64'hF0EF852685A2E509;
      13'b0100100110001:
        casez_tmp = 64'h64E6740670A6F3DF;
      13'b0100100110010:
        casez_tmp = 64'hB7C1694880826165;
      13'b0100100110011:
        casez_tmp = 64'h639CC791611CC901;
      13'b0100100110100:
        casez_tmp = 64'h8782C3916B9C77BC;
      13'b0100100110101:
        casez_tmp = 64'h47816118C11D8082;
      13'b0100100110110:
        casez_tmp = 64'h739877BC631CC30D;
      13'b0100100110111:
        casez_tmp = 64'h1141CB19FDA00793;
      13'b0100100111000:
        casez_tmp = 64'h79B60A29702E406;
      13'b0100100111001:
        casez_tmp = 64'h80820141853E0005;
      13'b0100100111010:
        casez_tmp = 64'h71798082853E4781;
      13'b0100100111011:
        casez_tmp = 64'hE42EEC26F022F406;
      13'b0100100111100:
        casez_tmp = 64'hCF99842A611CC115;
      13'b0100100111101:
        casez_tmp = 64'hC38D749C77A4639C;
      13'b0100100111110:
        casez_tmp = 64'h74028522E7DFF0EF;
      13'b0100100111111:
        casez_tmp = 64'h64E270A265A2749C;
      13'b0100101000000:
        casez_tmp = 64'h70A2450187826145;
      13'b0100101000001:
        casez_tmp = 64'h8082614564E27402;
      13'b0100101000010:
        casez_tmp = 64'hC901BFCDFDA00513;
      13'b0100101000011:
        casez_tmp = 64'h77BC639CC791611C;
      13'b0100101000100:
        casez_tmp = 64'h45018782C7817B9C;
      13'b0100101000101:
        casez_tmp = 64'h8082FDA005138082;
      13'b0100101000110:
        casez_tmp = 64'hF526FD06F9227131;
      13'b0100101000111:
        casez_tmp = 64'hE556E952ED4EF14A;
      13'b0100101001000:
        casez_tmp = 64'hF4E6F8E2FCDEE15A;
      13'b0100101001001:
        casez_tmp = 64'h6948842AECEEF0EA;
      13'b0100101001010:
        casez_tmp = 64'h468184AE04054E63;
      13'b0100101001011:
        casez_tmp = 64'hA886061300005617;
      13'b0100101001100:
        casez_tmp = 64'hA985859300005597;
      13'b0100101001101:
        casez_tmp = 64'h4D81892A570010EF;
      13'b0100101001110:
        casez_tmp = 64'h281099302054563;
      13'b0100101001111:
        casez_tmp = 64'hA80B0B1300005B17;
      13'b0100101010000:
        casez_tmp = 64'h5C178A0A7AFD5BF9;
      13'b0100101010001:
        casez_tmp = 64'hC93A8AC0C130000;
      13'b0100101010010:
        casez_tmp = 64'h1D63FDA00D13DFB0;
      13'b0100101010011:
        casez_tmp = 64'h5597684801B9;
      13'b0100101010100:
        casez_tmp = 64'h48A010EFA8458593;
      13'b0100101010101:
        casez_tmp = 64'hA8B9450108055163;
      13'b0100101010110:
        casez_tmp = 64'h852285DA866E86CE;
      13'b0100101010111:
        casez_tmp = 64'h1751463E63FF0EF;
      13'b0100101011000:
        casez_tmp = 64'hF663E521BFD12D85;
      13'b0100101011001:
        casez_tmp = 64'hED1D0009851B013A;
      13'b0100101011010:
        casez_tmp = 64'h85E2866E86D2B7E9;
      13'b0100101011011:
        casez_tmp = 64'h1E3E41FF0EF8522;
      13'b0100101011100:
        casez_tmp = 64'hE8816782E50DFF95;
      13'b0100101011101:
        casez_tmp = 64'h14AF863FCF40CE3;
      13'b0100101011110:
        casez_tmp = 64'h15E3BFE9000A051B;
      13'b0100101011111:
        casez_tmp = 64'h855285CEBFCDFCF4;
      13'b0100101100000:
        casez_tmp = 64'hFBA50EE3F17FF0EF;
      13'b0100101100001:
        casez_tmp = 64'h744A70EAFA055CE3;
      13'b0100101100010:
        casez_tmp = 64'h6A4A69EA790A74AA;
      13'b0100101100011:
        casez_tmp = 64'h7C467BE66B0A6AAA;
      13'b0100101100100:
        casez_tmp = 64'h61296DE67D067CA6;
      13'b0100101100101:
        casez_tmp = 64'h4591002559938082;
      13'b0100101100110:
        casez_tmp = 64'h8A2AF3AFD0EF854E;
      13'b0100101100111:
        casez_tmp = 64'h6848FC0A09E35551;
      13'b0100101101000:
        casez_tmp = 64'h5597865286CE;
      13'b0100101101001:
        casez_tmp = 64'h3FA010EF9DC58593;
      13'b0100101101010:
        casez_tmp = 64'h8B522981E92D892A;
      13'b0100101101011:
        casez_tmp = 64'h5B9702810D134A81;
      13'b0100101101100:
        casez_tmp = 64'hC139B2B8B930000;
      13'b0100101101101:
        casez_tmp = 64'h53ADC637CFDDFB0;
      13'b0100101101110:
        casez_tmp = 64'h86EACF99000B2783;
      13'b0100101101111:
        casez_tmp = 64'hF0EF852285DE8656;
      13'b0100101110000:
        casez_tmp = 64'h5850463892AD9DF;
      13'b0100101110001:
        casez_tmp = 64'h1763E49177A2E509;
      13'b0100101110010:
        casez_tmp = 64'hBFD90B112A8500F4;
      13'b0100101110011:
        casez_tmp = 64'h1ACFB63FEF41DE3;
      13'b0100101110100:
        casez_tmp = 64'h536387CA000D091B;
      13'b0100101110101:
        casez_tmp = 64'h7851B47810120;
      13'b0100101110110:
        casez_tmp = 64'h856A000B6583BFB1;
      13'b0100101110111:
        casez_tmp = 64'h5091BE1FFF0EF;
      13'b0100101111000:
        casez_tmp = 64'hD0EF8552FC0959E3;
      13'b0100101111001:
        casez_tmp = 64'hB7D14901BFE9812F;
      13'b0100101111010:
        casez_tmp = 64'hF0EFE40645851141;
      13'b0100101111011:
        casez_tmp = 64'h141450160A2E5BF;
      13'b0100101111100:
        casez_tmp = 64'hC791611CC9018082;
      13'b0100101111101:
        casez_tmp = 64'hC7817F9C77BC639C;
      13'b0100101111110:
        casez_tmp = 64'h513808245018782;
      13'b0100101111111:
        casez_tmp = 64'h808245018082FDA0;
      13'b0100110000000:
        casez_tmp = 64'hE406114180827508;
      13'b0100110000001:
        casez_tmp = 64'h60A2130000EF6108;
      13'b0100110000010:
        casez_tmp = 64'h1101808201417508;
      13'b0100110000011:
        casez_tmp = 64'h84AAE426E822EC06;
      13'b0100110000100:
        casez_tmp = 64'h55974601842E6948;
      13'b0100110000101:
        casez_tmp = 64'h10EF91A585930000;
      13'b0100110000110:
        casez_tmp = 64'h85A2F40825012920;
      13'b0100110000111:
        casez_tmp = 64'hE00416C000EF8526;
      13'b0100110001000:
        casez_tmp = 64'h644260E200042A23;
      13'b0100110001001:
        casez_tmp = 64'h11418082610564A2;
      13'b0100110001010:
        casez_tmp = 64'hEF842AE022E406;
      13'b0100110001011:
        casez_tmp = 64'hF0EF852285AA0E40;
      13'b0100110001100:
        casez_tmp = 64'h4501640260A2FB9F;
      13'b0100110001101:
        casez_tmp = 64'hE406114180820141;
      13'b0100110001110:
        casez_tmp = 64'hC6000EF6108E022;
      13'b0100110001111:
        casez_tmp = 64'h77FDD31FF0EF842A;
      13'b0100110010000:
        casez_tmp = 64'h284678300A7EA63;
      13'b0100110010001:
        casez_tmp = 64'h2C4678302F55533;
      13'b0100110010010:
        casez_tmp = 64'h640260A202F50533;
      13'b0100110010011:
        casez_tmp = 64'hEC06110180820141;
      13'b0100110010100:
        casez_tmp = 64'h84AAE04AE426E822;
      13'b0100110010101:
        casez_tmp = 64'h842A862A092000EF;
      13'b0100110010110:
        casez_tmp = 64'hCE1FF0EF85264581;
      13'b0100110010111:
        casez_tmp = 64'h460568C8E11D892A;
      13'b0100110011000:
        casez_tmp = 64'h8C85859300005597;
      13'b0100110011001:
        casez_tmp = 64'h68C8D4081F8010EF;
      13'b0100110011010:
        casez_tmp = 64'h8593000055974605;
      13'b0100110011011:
        casez_tmp = 64'hD4481E6010EF8C65;
      13'b0100110011100:
        casez_tmp = 64'h854A64A2644260E2;
      13'b0100110011101:
        casez_tmp = 64'hF593808261056902;
      13'b0100110011110:
        casez_tmp = 64'hE8221101C1A10205;
      13'b0100110011111:
        casez_tmp = 64'hFC04741303F5041B;
      13'b0100110100000:
        casez_tmp = 64'h400051385A22401;
      13'b0100110100001:
        casez_tmp = 64'hE22FD0EFEC06E426;
      13'b0100110100010:
        casez_tmp = 64'h86224581C91184AA;
      13'b0100110100011:
        casez_tmp = 64'h8485B3FB8FB0EF;
      13'b0100110100100:
        casez_tmp = 64'h60E2DBAFB0EF8526;
      13'b0100110100101:
        casez_tmp = 64'h610564A285266442;
      13'b0100110100110:
        casez_tmp = 64'hD06F450585AA8082;
      13'b0100110100111:
        casez_tmp = 64'h80826908C111D36F;
      13'b0100110101000:
        casez_tmp = 64'hC11180826D08C111;
      13'b0100110101001:
        casez_tmp = 64'h7D08C11180827108;
      13'b0100110101010:
        casez_tmp = 64'h80826528C1118082;
      13'b0100110101011:
        casez_tmp = 64'h753880826928C111;
      13'b0100110101100:
        casez_tmp = 64'h463478106850513;
      13'b0100110101101:
        casez_tmp = 64'hE19CF887079300A7;
      13'b0100110101110:
        casez_tmp = 64'h4701611C80824501;
      13'b0100110101111:
        casez_tmp = 64'h68787937B9C7FB4;
      13'b0100110110000:
        casez_tmp = 64'hF886871300F68463;
      13'b0100110110001:
        casez_tmp = 64'h790880824501E118;
      13'b0100110110010:
        casez_tmp = 64'h613C808275088082;
      13'b0100110110011:
        casez_tmp = 64'hFD0C80824788679C;
      13'b0100110110100:
        casez_tmp = 64'hE52C8082E92C8082;
      13'b0100110110101:
        casez_tmp = 64'h11010E0501638082;
      13'b0100110110110:
        casez_tmp = 64'hE04AE426EC06E822;
      13'b0100110110111:
        casez_tmp = 64'h9713842A08852783;
      13'b0100110111000:
        casez_tmp = 64'h7908040745630337;
      13'b0100110111001:
        casez_tmp = 64'h278300043903E90D;
      13'b0100110111010:
        casez_tmp = 64'hF0EF8522C3B10589;
      13'b0100110111011:
        casez_tmp = 64'h7092583ED15F77F;
      13'b0100110111100:
        casez_tmp = 64'hF0BFF0EF05892503;
      13'b0100110111101:
        casez_tmp = 64'h60E25551E11D85AA;
      13'b0100110111110:
        casez_tmp = 64'h6105690264A26442;
      13'b0100110111111:
        casez_tmp = 64'hF965FB1FF0EF8082;
      13'b0100111000000:
        casez_tmp = 64'h8FF9670508842783;
      13'b0100111000001:
        casez_tmp = 64'hB7C54501D3E12781;
      13'b0100111000010:
        casez_tmp = 64'h603CF8DFF0EF8522;
      13'b0100111000011:
        casez_tmp = 64'h8522C08553E4679C;
      13'b0100111000100:
        casez_tmp = 64'h603CED01F33FF0EF;
      13'b0100111000101:
        casez_tmp = 64'hF0EF5BEC679C8526;
      13'b0100111000110:
        casez_tmp = 64'h8522DD4585AAEC1F;
      13'b0100111000111:
        casez_tmp = 64'hC795781CF6FFF0EF;
      13'b0100111001000:
        casez_tmp = 64'h63BCE48953246398;
      13'b0100111001001:
        casez_tmp = 64'h8522CC9957E4679C;
      13'b0100111001010:
        casez_tmp = 64'h2583E919F09FF0EF;
      13'b0100111001011:
        casez_tmp = 64'hE93FF0EF85260709;
      13'b0100111001100:
        casez_tmp = 64'hF0EF8522D54985AA;
      13'b0100111001101:
        casez_tmp = 64'hEB817F9C601CF3DF;
      13'b0100111001110:
        casez_tmp = 64'h8FD9670508842783;
      13'b0100111001111:
        casez_tmp = 64'h6858BF4108F42423;
      13'b0100111010000:
        casez_tmp = 64'h97828522FE0748E3;
      13'b0100111010001:
        casez_tmp = 64'h80825529B795D565;
      13'b0100111010010:
        casez_tmp = 64'hEC06E8221101C15D;
      13'b0100111010011:
        casez_tmp = 64'h842A08852783E426;
      13'b0100111010100:
        casez_tmp = 64'hF0EF6104E3A58B85;
      13'b0100111010101:
        casez_tmp = 64'hE1397808ED25F05F;
      13'b0100111010110:
        casez_tmp = 64'h17E79308842783;
      13'b0100111010111:
        casez_tmp = 64'hEBA1781C08F42423;
      13'b0100111011000:
        casez_tmp = 64'hED314F9000EF8522;
      13'b0100111011001:
        casez_tmp = 64'hC763685CE7B1781C;
      13'b0100111011010:
        casez_tmp = 64'hF0EF852245810007;
      13'b0100111011011:
        casez_tmp = 64'hEBA1709CE521B5BF;
      13'b0100111011100:
        casez_tmp = 64'hED1550F000EF8522;
      13'b0100111011101:
        casez_tmp = 64'hF0EF8522CF81781C;
      13'b0100111011110:
        casez_tmp = 64'hF9DFF0EFA801EA9F;
      13'b0100111011111:
        casez_tmp = 64'h8B8508842783E50D;
      13'b0100111100000:
        casez_tmp = 64'h644260E24501DBC5;
      13'b0100111100001:
        casez_tmp = 64'h85228082610564A2;
      13'b0100111100010:
        casez_tmp = 64'h639CB775E87FF0EF;
      13'b0100111100011:
        casez_tmp = 64'h97828522DBCD67BC;
      13'b0100111100100:
        casez_tmp = 64'h9BF908842783D555;
      13'b0100111100101:
        casez_tmp = 64'h8522BFE108F42423;
      13'b0100111100110:
        casez_tmp = 64'h5529B7FDD55D9782;
      13'b0100111100111:
        casez_tmp = 64'hED0C8082E90C8082;
      13'b0100111101000:
        casez_tmp = 64'h711D8082F10C8082;
      13'b0100111101001:
        casez_tmp = 64'hF456F852FC4EE4A6;
      13'b0100111101010:
        casez_tmp = 64'hEC86E862EC5EF05A;
      13'b0100111101011:
        casez_tmp = 64'h84AE89AAE0CAE8A2;
      13'b0100111101100:
        casez_tmp = 64'h8BBE8C3A8AB68B32;
      13'b0100111101101:
        casez_tmp = 64'h3023000804638A42;
      13'b0100111101110:
        casez_tmp = 64'h120B076359290008;
      13'b0100111101111:
        casez_tmp = 64'h7CA000EF002C4488;
      13'b0100111110000:
        casez_tmp = 64'h59312051063892A;
      13'b0100111110001:
        casez_tmp = 64'hAE0FD0EF45050980;
      13'b0100111110010:
        casez_tmp = 64'h100507635951842A;
      13'b0100111110011:
        casez_tmp = 64'h785091306850793;
      13'b0100111110100:
        casez_tmp = 64'h5850793F93CF53C;
      13'b0100111110101:
        casez_tmp = 64'h7253C23F13CED3C;
      13'b0100111110110:
        casez_tmp = 64'hF0EF85D609253023;
      13'b0100111110111:
        casez_tmp = 64'h57FD6522E004F85F;
      13'b0100111111000:
        casez_tmp = 64'h164342303843423;
      13'b0100111111001:
        casez_tmp = 64'h334382309743823;
      13'b0100111111010:
        casez_tmp = 64'h651C08F42623E028;
      13'b0100111111011:
        casez_tmp = 64'hEFE7898B895BFC;
      13'b0100111111100:
        casez_tmp = 64'h4CFC08A426231090;
      13'b0100111111101:
        casez_tmp = 64'h2783020A9263C39D;
      13'b0100111111110:
        casez_tmp = 64'h27E79345050884;
      13'b0100111111111:
        casez_tmp = 64'hD0EF4CEC08F42423;
      13'b0101000000000:
        casez_tmp = 64'hE05066385AAA6EF;
      13'b0101000000001:
        casez_tmp = 64'h67A2F31FF0EF8522;
      13'b0101000000010:
        casez_tmp = 64'h2783CD9957AC679C;
      13'b0101000000011:
        casez_tmp = 64'h107E79345050884;
      13'b0101000000100:
        casez_tmp = 64'hA48FD0EF08F42423;
      13'b0101000000101:
        casez_tmp = 64'hF0EF8522C17985AA;
      13'b0101000000110:
        casez_tmp = 64'hB78304098363F15F;
      13'b0101000000111:
        casez_tmp = 64'hB783E59153EC0009;
      13'b0101000001000:
        casez_tmp = 64'hCD995BAC679C0409;
      13'b0101000001001:
        casez_tmp = 64'hE793450508842783;
      13'b0101000001010:
        casez_tmp = 64'hD0EF08F424230087;
      13'b0101000001011:
        casez_tmp = 64'h8522C95185AAA16F;
      13'b0101000001100:
        casez_tmp = 64'h709B783EDFFF0EF;
      13'b0101000001101:
        casez_tmp = 64'h729B82306898713;
      13'b0101000001110:
        casez_tmp = 64'h127B023E05CFC38;
      13'b0101000001111:
        casez_tmp = 64'h892A2F3000EF8522;
      13'b0101000010000:
        casez_tmp = 64'h9463EF856C9CE935;
      13'b0101000010001:
        casez_tmp = 64'h6B9C679C67A20409;
      13'b0101000010010:
        casez_tmp = 64'h2783040A1C63EBA1;
      13'b0101000010011:
        casez_tmp = 64'h24230407E7930884;
      13'b0101000010100:
        casez_tmp = 64'h64A6644660E608F4;
      13'b0101000010101:
        casez_tmp = 64'h7B027AA27A4279E2;
      13'b0101000010110:
        casez_tmp = 64'h6906854A6C426BE2;
      13'b0101000010111:
        casez_tmp = 64'h9782852280826125;
      13'b0101000011000:
        casez_tmp = 64'hC0EF8522D17184AA;
      13'b0101000011001:
        casez_tmp = 64'hB783BFD98926B13F;
      13'b0101000011010:
        casez_tmp = 64'h8522DBDD63BC0009;
      13'b0101000011011:
        casez_tmp = 64'hB7DDD55D84AA9782;
      13'b0101000011100:
        casez_tmp = 64'hD55584AA97828522;
      13'b0101000011101:
        casez_tmp = 64'hB765008A3023BFF1;
      13'b0101000011110:
        casez_tmp = 64'hB7F984AABFC954D1;
      13'b0101000011111:
        casez_tmp = 64'hE84AEC26F0227179;
      13'b0101000100000:
        casez_tmp = 64'h892E620884AAF406;
      13'b0101000100001:
        casez_tmp = 64'hC6000EFE4368432;
      13'b0101000100010:
        casez_tmp = 64'h56385AA6822C505;
      13'b0101000100011:
        casez_tmp = 64'hC7858B91593C0009;
      13'b0101000100100:
        casez_tmp = 64'h70A2740260106414;
      13'b0101000100101:
        casez_tmp = 64'h57FD64E285266942;
      13'b0101000100110:
        casez_tmp = 64'hE13FF06F61454701;
      13'b0101000100111:
        casez_tmp = 64'h64E2740270A25579;
      13'b0101000101000:
        casez_tmp = 64'h557D808261456942;
      13'b0101000101001:
        casez_tmp = 64'h873687BA883EBFCD;
      13'b0101000101010:
        casez_tmp = 64'h1101DF5FF06F4681;
      13'b0101000101011:
        casez_tmp = 64'h7908842AEC06E822;
      13'b0101000101100:
        casez_tmp = 64'h258309042603872E;
      13'b0101000101101:
        casez_tmp = 64'h47810D81B5030905;
      13'b0101000101110:
        casez_tmp = 64'h8693000046974801;
      13'b0101000101111:
        casez_tmp = 64'h57FD9FFFE0EFFBE6;
      13'b0101000110000:
        casez_tmp = 64'hE42A02F5016385AA;
      13'b0101000110001:
        casez_tmp = 64'h793C0DFF0EF7808;
      13'b0101000110010:
        casez_tmp = 64'hF5186365A206A0;
      13'b0101000110011:
        casez_tmp = 64'h610560E264427808;
      13'b0101000110100:
        casez_tmp = 64'h644260E22F50006F;
      13'b0101000110101:
        casez_tmp = 64'h458180826105852E;
      13'b0101000110110:
        casez_tmp = 64'hF0EFE4061141B75D;
      13'b0101000110111:
        casez_tmp = 64'hF5136357FDFA1F;
      13'b0101000111000:
        casez_tmp = 64'h8082014160A24501;
      13'b0101000111001:
        casez_tmp = 64'h4581BFF54581B7ED;
      13'b0101000111010:
        casez_tmp = 64'h6717E8221101B7CD;
      13'b0101000111011:
        casez_tmp = 64'h679799A707130000;
      13'b0101000111100:
        casez_tmp = 64'h8433112787930000;
      13'b0101000111101:
        casez_tmp = 64'h8793FEEEF7B740E7;
      13'b0101000111110:
        casez_tmp = 64'hEEF7879307B2EEF7;
      13'b0101000111111:
        casez_tmp = 64'h7B2EEF7879307B2;
      13'b0101001000000:
        casez_tmp = 64'h43B840DEEF78793;
      13'b0101001000001:
        casez_tmp = 64'hE4260780079302F4;
      13'b0101001000010:
        casez_tmp = 64'h849300006497E04A;
      13'b0101001000011:
        casez_tmp = 64'h433892AEC0695E4;
      13'b0101001000100:
        casez_tmp = 64'h941A63942602F4;
      13'b0101001000101:
        casez_tmp = 64'h6902644260E24481;
      13'b0101001000110:
        casez_tmp = 64'h8082610564A28526;
      13'b0101001000111:
        casez_tmp = 64'hA9FFE0EF854A608C;
      13'b0101001001000:
        casez_tmp = 64'hBFF907848493D56D;
      13'b0101001001001:
        casez_tmp = 64'h1307071300006717;
      13'b0101001001010:
        casez_tmp = 64'h7407879300006797;
      13'b0101001001011:
        casez_tmp = 64'hF7B74037D7138F99;
      13'b0101001001100:
        casez_tmp = 64'h7B2EEF78793FEEE;
      13'b0101001001101:
        casez_tmp = 64'h879307B2EEF78793;
      13'b0101001001110:
        casez_tmp = 64'hEEF7879307B2EEF7;
      13'b0101001001111:
        casez_tmp = 64'h780071302F707BB;
      13'b0101001010000:
        casez_tmp = 64'h5130000651786AA;
      13'b0101001010001:
        casez_tmp = 64'h97AA02E787B30F65;
      13'b0101001010010:
        casez_tmp = 64'h8082450100A79463;
      13'b0101001010011:
        casez_tmp = 64'h513FED70EE34518;
      13'b0101001010100:
        casez_tmp = 64'hF8A27119B7FD0785;
      13'b0101001010101:
        casez_tmp = 64'h487071300006717;
      13'b0101001010110:
        casez_tmp = 64'h407879300006797;
      13'b0101001010111:
        casez_tmp = 64'hF0CA841140E78433;
      13'b0101001011000:
        casez_tmp = 64'hF862FC5EE0DAE8D2;
      13'b0101001011001:
        casez_tmp = 64'hF4A6FC86F06AF466;
      13'b0101001011010:
        casez_tmp = 64'h8BAE8B2AEC6EECCE;
      13'b0101001011011:
        casez_tmp = 64'hC13240149014A29;
      13'b0101001011100:
        casez_tmp = 64'hE4D65CD54D050081;
      13'b0101001011101:
        casez_tmp = 64'h8A8A9300006A97;
      13'b0101001011110:
        casez_tmp = 64'h879B5DF944814981;
      13'b0101001011111:
        casez_tmp = 64'h4630287CC630009;
      13'b0101001100000:
        casez_tmp = 64'h8926019913630009;
      13'b0101001100001:
        casez_tmp = 64'h11E33A7D01949563;
      13'b0101001100010:
        casez_tmp = 64'h74A6744670E6FE0A;
      13'b0101001100011:
        casez_tmp = 64'h6B066AA66A4669E6;
      13'b0101001100100:
        casez_tmp = 64'h7D027CA27C427BE2;
      13'b0101001100101:
        casez_tmp = 64'h61097906854A6DE2;
      13'b0101001100110:
        casez_tmp = 64'h86E2004996138082;
      13'b0101001100111:
        casez_tmp = 64'hF0EF855A85DE9656;
      13'b0101001101000:
        casez_tmp = 64'h75630015079BDBBF;
      13'b0101001101001:
        casez_tmp = 64'h1B51363C48100FD;
      13'b0101001101010:
        casez_tmp = 64'hB74584AA09858526;
      13'b0101001101011:
        casez_tmp = 64'h852E842AF0227179;
      13'b0101001101100:
        casez_tmp = 64'h84B6E432F406EC26;
      13'b0101001101101:
        casez_tmp = 64'hCD09E69FF0EFE03A;
      13'b0101001101110:
        casez_tmp = 64'h67827402852285AA;
      13'b0101001101111:
        casez_tmp = 64'h64E2872670A26622;
      13'b0101001110000:
        casez_tmp = 64'hDC7FF06F61454681;
      13'b0101001110001:
        casez_tmp = 64'h557964E2740270A2;
      13'b0101001110010:
        casez_tmp = 64'h56FD873680826145;
      13'b0101001110011:
        casez_tmp = 64'hE14AE9227135B7C1;
      13'b0101001110100:
        casez_tmp = 64'hE8E2F0DAF8D2FCCE;
      13'b0101001110101:
        casez_tmp = 64'hECDEF4D6E526ED06;
      13'b0101001110110:
        casez_tmp = 64'hEC2AFC6EE0EAE4E6;
      13'b0101001110111:
        casez_tmp = 64'hA1300005A17E42E;
      13'b0101001111000:
        casez_tmp = 64'h8993000059977B6A;
      13'b0101001111001:
        casez_tmp = 64'h413000064177AE9;
      13'b0101001111010:
        casez_tmp = 64'h8C3A8B368932F264;
      13'b0101001111011:
        casez_tmp = 64'h652200063023C219;
      13'b0101001111100:
        casez_tmp = 64'h6522E82A391000EF;
      13'b0101001111101:
        casez_tmp = 64'h8593000045971050;
      13'b0101001111110:
        casez_tmp = 64'h8AAA45D000EF1EE5;
      13'b0101001111111:
        casez_tmp = 64'h8793FEEEF7B7C939;
      13'b0101010000000:
        casez_tmp = 64'hEEF7879307B2EEF7;
      13'b0101010000001:
        casez_tmp = 64'h433EEF7879307B2;
      13'b0101010000010:
        casez_tmp = 64'hEEF7879307B24134;
      13'b0101010000011:
        casez_tmp = 64'h79302F4043B840D;
      13'b0101010000100:
        casez_tmp = 64'h2810D1349810780;
      13'b0101010000101:
        casez_tmp = 64'h945202F404335DB5;
      13'b0101010000110:
        casez_tmp = 64'h8CB302F9D2635792;
      13'b0101010000111:
        casez_tmp = 64'h3741D638BD2013A;
      13'b0101010001000:
        casez_tmp = 64'h5058F1FE0EF8566;
      13'b0101010001001:
        casez_tmp = 64'h5512B7D5013509BB;
      13'b0101010001010:
        casez_tmp = 64'h450100F5136357FD;
      13'b0101010001011:
        casez_tmp = 64'h690A64AA644A60EA;
      13'b0101010001100:
        casez_tmp = 64'h7B067AA67A4679E6;
      13'b0101010001101:
        casez_tmp = 64'h6D066CA66C466BE6;
      13'b0101010001110:
        casez_tmp = 64'hA638082610D7DE2;
      13'b0101010001111:
        casez_tmp = 64'h8B93016B8563000B;
      13'b0101010010000:
        casez_tmp = 64'h10BB483BF6D078B;
      13'b0101010010001:
        casez_tmp = 64'hD8E5010BB483CC81;
      13'b0101010010010:
        casez_tmp = 64'hE0EF85E6D5756088;
      13'b0101010010011:
        casez_tmp = 64'hBFCD04C1C119845F;
      13'b0101010010100:
        casez_tmp = 64'hEF6522000C0A63;
      13'b0101010010101:
        casez_tmp = 64'h70BA703E5093E50;
      13'b0101010010110:
        casez_tmp = 64'hC0914681D3558B11;
      13'b0101010010111:
        casez_tmp = 64'h6562664267226494;
      13'b0101010011000:
        casez_tmp = 64'hC87FF0EF85DE87EA;
      13'b0101010011001:
        casez_tmp = 64'h4E3F551F7B50CE3;
      13'b0101010011010:
        casez_tmp = 64'hF9302377A2F809;
      13'b0101010011011:
        casez_tmp = 64'hFC06F4267139BFBD;
      13'b0101010011100:
        casez_tmp = 64'hE852EC4EF04AF822;
      13'b0101010011101:
        casez_tmp = 64'hC2634481E05AE456;
      13'b0101010011110:
        casez_tmp = 64'hD81B50389AA0205;
      13'b0101010011111:
        casez_tmp = 64'hA52FD0EF8A322581;
      13'b0101010100000:
        casez_tmp = 64'h553630005041B;
      13'b0101010100001:
        casez_tmp = 64'h1D635B7D4481547D;
      13'b0101010100010:
        casez_tmp = 64'h7902744270E20164;
      13'b0101010100011:
        casez_tmp = 64'h6B026AA26A4269E2;
      13'b0101010100100:
        casez_tmp = 64'h8082612174A28526;
      13'b0101010100101:
        casez_tmp = 64'hB503247000EF8522;
      13'b0101010100110:
        casez_tmp = 64'h85D600040A9B0D81;
      13'b0101010100111:
        casez_tmp = 64'h8752C911B56FE0EF;
      13'b0101010101000:
        casez_tmp = 64'h854E85A246014681;
      13'b0101010101001:
        casez_tmp = 64'hED11892AE53FF0EF;
      13'b0101010101010:
        casez_tmp = 64'h85D60D81B5038926;
      13'b0101010101011:
        casez_tmp = 64'h5041BA16FD0EF;
      13'b0101010101100:
        casez_tmp = 64'h84CA547D00055363;
      13'b0101010101101:
        casez_tmp = 64'h1101B7DDF0FDB75D;
      13'b0101010101110:
        casez_tmp = 64'hE426EC06E04AE822;
      13'b0101010101111:
        casez_tmp = 64'hE18D6948892E842A;
      13'b0101010110000:
        casez_tmp = 64'h307971308842783;
      13'b0101010110001:
        casez_tmp = 64'hF0EF852202075263;
      13'b0101010110010:
        casez_tmp = 64'h644260E2CD09903F;
      13'b0101010110011:
        casez_tmp = 64'h80826105690264A2;
      13'b0101010110100:
        casez_tmp = 64'h5BBC601C02055163;
      13'b0101010110101:
        casez_tmp = 64'h4137424FBF98B91;
      13'b0101010110110:
        casez_tmp = 64'h8793F88484930684;
      13'b0101010110111:
        casez_tmp = 64'h4501008798630784;
      13'b0101010111000:
        casez_tmp = 64'hFD4D2C9000EFBFD1;
      13'b0101010111001:
        casez_tmp = 64'hF0EF85CA8526BFF1;
      13'b0101010111010:
        casez_tmp = 64'hF88484937CA4FA1F;
      13'b0101010111011:
        casez_tmp = 64'h80820A81B503BFF9;
      13'b0101010111100:
        casez_tmp = 64'hEBA155290A81B783;
      13'b0101010111101:
        casez_tmp = 64'hB818793E4061141;
      13'b0101010111110:
        casez_tmp = 64'hAF1BC230CF1B423;
      13'b0101010111111:
        casez_tmp = 64'hA8186930CF1B023;
      13'b0101011000000:
        casez_tmp = 64'h1C86061300005617;
      13'b0101011000001:
        casez_tmp = 64'hAEDFF0EF45014581;
      13'b0101011000010:
        casez_tmp = 64'h38230A81B703E105;
      13'b0101011000011:
        casez_tmp = 64'hF0EF0A81B5030807;
      13'b0101011000100:
        casez_tmp = 64'h17818713E519873F;
      13'b0101011000101:
        casez_tmp = 64'h18E1B02316E1BC23;
      13'b0101011000110:
        casez_tmp = 64'h80828082014160A2;
      13'b0101011000111:
        casez_tmp = 64'hB50385AAE4061141;
      13'b0101011001000:
        casez_tmp = 64'h57F9C63FF0EF0A81;
      13'b0101011001001:
        casez_tmp = 64'h60A2450100F51363;
      13'b0101011001010:
        casez_tmp = 64'h81B60380820141;
      13'b0101011001011:
        casez_tmp = 64'h8A05FFF64613694C;
      13'b0101011001100:
        casez_tmp = 64'hB503862AE7BFF06F;
      13'b0101011001101:
        casez_tmp = 64'hE6FFF06F45810A81;
      13'b0101011001110:
        casez_tmp = 64'h879300004797715D;
      13'b0101011001111:
        casez_tmp = 64'h4797EC3ED267;
      13'b0101011010000:
        casez_tmp = 64'h4797F03EF6C78793;
      13'b0101011010001:
        casez_tmp = 64'hFC26F6A787930000;
      13'b0101011010010:
        casez_tmp = 64'hF43E84AAE0A2E486;
      13'b0101011010011:
        casez_tmp = 64'h181CE115FCDFF0EF;
      13'b0101011010100:
        casez_tmp = 64'hEF6008E43E0820;
      13'b0101011010101:
        casez_tmp = 64'hA81B50385AA1490;
      13'b0101011010110:
        casez_tmp = 64'hE509E29FF0EF8626;
      13'b0101011010111:
        casez_tmp = 64'hFEF414E3042167A2;
      13'b0101011011000:
        casez_tmp = 64'h616174E2640660A6;
      13'b0101011011001:
        casez_tmp = 64'h1141808245018082;
      13'b0101011011010:
        casez_tmp = 64'hE4064501842AE022;
      13'b0101011011011:
        casez_tmp = 64'h8522E905F09FF0EF;
      13'b0101011011100:
        casez_tmp = 64'h8522E505F59FF0EF;
      13'b0101011011101:
        casez_tmp = 64'h8522E105F89FF0EF;
      13'b0101011011110:
        casez_tmp = 64'h3883330300005317;
      13'b0101011011111:
        casez_tmp = 64'h640285A2E9099302;
      13'b0101011100000:
        casez_tmp = 64'h1410A81B50360A2;
      13'b0101011100001:
        casez_tmp = 64'h640260A2E67FF06F;
      13'b0101011100010:
        casez_tmp = 64'hB503872A80820141;
      13'b0101011100011:
        casez_tmp = 64'hC81B683C9190A81;
      13'b0101011100100:
        casez_tmp = 64'h793FE078513629C;
      13'b0101011100101:
        casez_tmp = 64'h450100F694630205;
      13'b0101011100110:
        casez_tmp = 64'h8DE3479C651C8082;
      13'b0101011100111:
        casez_tmp = 64'h6108B7DD711CFEE7;
      13'b0101011101000:
        casez_tmp = 64'h71798082E10C8082;
      13'b0101011101001:
        casez_tmp = 64'hE84AF022F406EC26;
      13'b0101011101010:
        casez_tmp = 64'h4930C81B783E44E;
      13'b0101011101011:
        casez_tmp = 64'h5B023C3DDFDD0;
      13'b0101011101100:
        casez_tmp = 64'hFB1FF0EF89AE842A;
      13'b0101011101101:
        casez_tmp = 64'h85220009B023E955;
      13'b0101011101110:
        casez_tmp = 64'h493892AAD9FF0EF;
      13'b0101011101111:
        casez_tmp = 64'h3000593C159FA00;
      13'b0101011110000:
        casez_tmp = 64'h842AAEBFC0EF4505;
      13'b0101011110001:
        casez_tmp = 64'h6092583C93D54D1;
      13'b0101011110010:
        casez_tmp = 64'hAD9FC0EF4505C989;
      13'b0101011110011:
        casez_tmp = 64'hF0EF8522CD3D85AA;
      13'b0101011110100:
        casez_tmp = 64'h71302040793FA5F;
      13'b0101011110101:
        casez_tmp = 64'h3423F41CF01C0104;
      13'b0101011110110:
        casez_tmp = 64'hB703EC18E8180124;
      13'b0101011110111:
        casez_tmp = 64'hF014E69C63140C81;
      13'b0101011111000:
        casez_tmp = 64'h5093783E31CF418;
      13'b0101011111001:
        casez_tmp = 64'h84AA97828522C7A1;
      13'b0101011111010:
        casez_tmp = 64'hCB9106092783C121;
      13'b0101011111011:
        casez_tmp = 64'hC0EFF65FF0EF8522;
      13'b0101011111100:
        casez_tmp = 64'hF0EF85224581BFAF;
      13'b0101011111101:
        casez_tmp = 64'hE71C7018741CF5DF;
      13'b0101011111110:
        casez_tmp = 64'h342302043023E398;
      13'b0101011111111:
        casez_tmp = 64'hBDCFC0EF85220204;
      13'b0101100000000:
        casez_tmp = 64'h69A26942740270A2;
      13'b0101100000001:
        casez_tmp = 64'h8082614564E28526;
      13'b0101100000010:
        casez_tmp = 64'hB7ED44810089B023;
      13'b0101100000011:
        casez_tmp = 64'hA9B023B7C554D1;
      13'b0101100000100:
        casez_tmp = 64'h3023F0227179BFD5;
      13'b0101100000101:
        casez_tmp = 64'hEC26002C842E0006;
      13'b0101100000110:
        casez_tmp = 64'hF13FF0EF84B2F406;
      13'b0101100000111:
        casez_tmp = 64'h107871367A2E11D;
      13'b0101100001000:
        casez_tmp = 64'h879300F70A636B9C;
      13'b0101100001001:
        casez_tmp = 64'h86930004059BFA87;
      13'b0101100001010:
        casez_tmp = 64'h553500D714630587;
      13'b0101100001011:
        casez_tmp = 64'h70A2E09CE599A019;
      13'b0101100001100:
        casez_tmp = 64'h8082614564E27402;
      13'b0101100001101:
        casez_tmp = 64'hFA87879335FD6FBC;
      13'b0101100001110:
        casez_tmp = 64'hEC06E8221101BFF9;
      13'b0101100001111:
        casez_tmp = 64'h2C0005B023842E;
      13'b0101100010000:
        casez_tmp = 64'h6722E909EC7FF0EF;
      13'b0101100010001:
        casez_tmp = 64'hE7856307416B1C;
      13'b0101100010010:
        casez_tmp = 64'h60E2E01CFA878793;
      13'b0101100010011:
        casez_tmp = 64'h6118808261056442;
      13'b0101100010100:
        casez_tmp = 64'h63386F3C00053023;
      13'b0101100010101:
        casez_tmp = 64'h879300E785630741;
      13'b0101100010110:
        casez_tmp = 64'h80824501E11CFA87;
      13'b0101100010111:
        casez_tmp = 64'hF406EC26F0227179;
      13'b0101100011000:
        casez_tmp = 64'h65220024842EE42A;
      13'b0101100011001:
        casez_tmp = 64'hE901DC6FF0EFC501;
      13'b0101100011010:
        casez_tmp = 64'h740270A2E01C67A2;
      13'b0101100011011:
        casez_tmp = 64'h85268082614564E2;
      13'b0101100011100:
        casez_tmp = 64'h691CB7CDFBFFF0EF;
      13'b0101100011101:
        casez_tmp = 64'hFA8787930541577D;
      13'b0101100011110:
        casez_tmp = 64'hA6956305878693;
      13'b0101100011111:
        casez_tmp = 64'hA60380820017051B;
      13'b0101100100000:
        casez_tmp = 64'hE6536386B208C7;
      13'b0101100100001:
        casez_tmp = 64'h6871B6FBC86BA;
      13'b0101100100010:
        casez_tmp = 64'h3023BFF1FA878793;
      13'b0101100100011:
        casez_tmp = 64'hF5946357FD0006;
      13'b0101100100100:
        casez_tmp = 64'hF022717980825535;
      13'b0101100100101:
        casez_tmp = 64'hF406EC26002C842E;
      13'b0101100100110:
        casez_tmp = 64'hE919E15FF0EF84B2;
      13'b0101100100111:
        casez_tmp = 64'h879307416B1C6722;
      13'b0101100101000:
        casez_tmp = 64'h986305878693FA87;
      13'b0101100101001:
        casez_tmp = 64'h740270A2553500E6;
      13'b0101100101010:
        casez_tmp = 64'hA6838082614564E2;
      13'b0101100101011:
        casez_tmp = 64'hE09C0086946308C7;
      13'b0101100101100:
        casez_tmp = 64'hFA8787936FBCB7F5;
      13'b0101100101101:
        casez_tmp = 64'hD46300063023BFE9;
      13'b0101100101110:
        casez_tmp = 64'h7179808255350005;
      13'b0101100101111:
        casez_tmp = 64'hEC26002C842EF022;
      13'b0101100110000:
        casez_tmp = 64'hDC3FF0EF84B2F406;
      13'b0101100110001:
        casez_tmp = 64'h7416B1C6722E919;
      13'b0101100110010:
        casez_tmp = 64'h5878693FA878793;
      13'b0101100110011:
        casez_tmp = 64'h70A2553500E69863;
      13'b0101100110100:
        casez_tmp = 64'h8082614564E27402;
      13'b0101100110101:
        casez_tmp = 64'hD414630907A683;
      13'b0101100110110:
        casez_tmp = 64'h87936FBCB7F5E09C;
      13'b0101100110111:
        casez_tmp = 64'h63023BFE9FA87;
      13'b0101100111000:
        casez_tmp = 64'h808255350005D463;
      13'b0101100111001:
        casez_tmp = 64'h2C842EF0227179;
      13'b0101100111010:
        casez_tmp = 64'hF0EF84B2F406EC26;
      13'b0101100111011:
        casez_tmp = 64'h6B1C6722E919D71F;
      13'b0101100111100:
        casez_tmp = 64'h8693FA8787930741;
      13'b0101100111101:
        casez_tmp = 64'h553500E698630587;
      13'b0101100111110:
        casez_tmp = 64'h614564E2740270A2;
      13'b0101100111111:
        casez_tmp = 64'hD414636BD48082;
      13'b0101101000000:
        casez_tmp = 64'h87936FBCB7FDE09C;
      13'b0101101000001:
        casez_tmp = 64'h1101E195BFF1FA87;
      13'b0101101000010:
        casez_tmp = 64'h84AAEC06E426E822;
      13'b0101101000011:
        casez_tmp = 64'h85AAC76FF0EF8432;
      13'b0101101000100:
        casez_tmp = 64'h644260E2E004E111;
      13'b0101101000101:
        casez_tmp = 64'h80826105852E64A2;
      13'b0101101000110:
        casez_tmp = 64'hEC0611018082852E;
      13'b0101101000111:
        casez_tmp = 64'h843200063023E822;
      13'b0101101001000:
        casez_tmp = 64'h85AADE1FF0EF0030;
      13'b0101101001001:
        casez_tmp = 64'hFC1FF0EF86226522;
      13'b0101101001010:
        casez_tmp = 64'h80826105644260E2;
      13'b0101101001011:
        casez_tmp = 64'h3023E822EC061101;
      13'b0101101001100:
        casez_tmp = 64'hF0EF003084320006;
      13'b0101101001101:
        casez_tmp = 64'h8622652285AAEB1F;
      13'b0101101001110:
        casez_tmp = 64'h644260E2F9DFF0EF;
      13'b0101101001111:
        casez_tmp = 64'hEC06110180826105;
      13'b0101101010000:
        casez_tmp = 64'h843200063023E822;
      13'b0101101010001:
        casez_tmp = 64'h85AAEE1FF0EF0030;
      13'b0101101010010:
        casez_tmp = 64'hF79FF0EF86226522;
      13'b0101101010011:
        casez_tmp = 64'h80826105644260E2;
      13'b0101101010100:
        casez_tmp = 64'h3023E822EC061101;
      13'b0101101010101:
        casez_tmp = 64'hF0EF003084320006;
      13'b0101101010110:
        casez_tmp = 64'h8622652285AAF0FF;
      13'b0101101010111:
        casez_tmp = 64'h644260E2F55FF0EF;
      13'b0101101011000:
        casez_tmp = 64'hE822110180826105;
      13'b0101101011001:
        casez_tmp = 64'hF0EFEC06002C842E;
      13'b0101101011010:
        casez_tmp = 64'hF0EF85A26522DA5F;
      13'b0101101011011:
        casez_tmp = 64'h6105644260E2DE3F;
      13'b0101101011100:
        casez_tmp = 64'h611CF40671798082;
      13'b0101101011101:
        casez_tmp = 64'hF0EFEC3E0828E42A;
      13'b0101101011110:
        casez_tmp = 64'hF0EF656265A2DB1F;
      13'b0101101011111:
        casez_tmp = 64'h8082614570A2DC3F;
      13'b0101101100000:
        casez_tmp = 64'hE0220005B0231141;
      13'b0101101100001:
        casez_tmp = 64'hD67FF0EF842EE406;
      13'b0101101100010:
        casez_tmp = 64'h6402C799601CE909;
      13'b0101101100011:
        casez_tmp = 64'hF06F0141853E60A2;
      13'b0101101100100:
        casez_tmp = 64'h141640260A2B72F;
      13'b0101101100101:
        casez_tmp = 64'hE406E02211418082;
      13'b0101101100110:
        casez_tmp = 64'hE501FCFFF0EF842E;
      13'b0101101100111:
        casez_tmp = 64'h60A25535E391601C;
      13'b0101101101000:
        casez_tmp = 64'h1141808201416402;
      13'b0101101101001:
        casez_tmp = 64'hF0EF842AE406E022;
      13'b0101101101010:
        casez_tmp = 64'hC799601CE909D51F;
      13'b0101101101011:
        casez_tmp = 64'h141853E60A26402;
      13'b0101101101100:
        casez_tmp = 64'h640260A2B30FF06F;
      13'b0101101101101:
        casez_tmp = 64'h693613C80820141;
      13'b0101101101110:
        casez_tmp = 64'h7C1EF946F980585;
      13'b0101101101111:
        casez_tmp = 64'h791CE314F138ED3C;
      13'b0101101110000:
        casez_tmp = 64'h7F98679C63BCCB95;
      13'b0101101110001:
        casez_tmp = 64'hE0221141C7154781;
      13'b0101101110010:
        casez_tmp = 64'h87AA9702842AE406;
      13'b0101101110011:
        casez_tmp = 64'hE6986C347038C909;
      13'b0101101110100:
        casez_tmp = 64'h302304043C23E314;
      13'b0101101110101:
        casez_tmp = 64'h853E640260A20604;
      13'b0101101110110:
        casez_tmp = 64'h853E478180820141;
      13'b0101101110111:
        casez_tmp = 64'hE406E02211418082;
      13'b0101101111000:
        casez_tmp = 64'h739C679C842A613C;
      13'b0101101111001:
        casez_tmp = 64'h4501EB89781CE789;
      13'b0101101111010:
        casez_tmp = 64'h60A2D97D9782A019;
      13'b0101101111011:
        casez_tmp = 64'h63BC808201416402;
      13'b0101101111100:
        casez_tmp = 64'h8522D7ED63BC679C;
      13'b0101101111101:
        casez_tmp = 64'h8782014160A26402;
      13'b0101101111110:
        casez_tmp = 64'h791CE406E0221141;
      13'b0101101111111:
        casez_tmp = 64'h4501603CEB99842A;
      13'b0101110000000:
        casez_tmp = 64'h8522CF81779C679C;
      13'b0101110000001:
        casez_tmp = 64'h8782014160A26402;
      13'b0101110000010:
        casez_tmp = 64'hD3FD67BC679C63BC;
      13'b0101110000011:
        casez_tmp = 64'h640260A2D16D9782;
      13'b0101110000100:
        casez_tmp = 64'hEC26717980820141;
      13'b0101110000101:
        casez_tmp = 64'hF022F40685A60024;
      13'b0101110000110:
        casez_tmp = 64'h842A67A2ED1FF0EF;
      13'b0101110000111:
        casez_tmp = 64'h64E2740270A2E791;
      13'b0101110001000:
        casez_tmp = 64'hF0EF852680826145;
      13'b0101110001001:
        casez_tmp = 64'hB7DD8522F56DF01F;
      13'b0101110001010:
        casez_tmp = 64'hF406EC26F0227179;
      13'b0101110001011:
        casez_tmp = 64'h842A8ECFF0EF84AA;
      13'b0101110001100:
        casez_tmp = 64'h4597860A468D68C8;
      13'b0101110001101:
        casez_tmp = 64'hEF9BA585930000;
      13'b0101110001110:
        casez_tmp = 64'h16783E9112D80;
      13'b0101110001111:
        casez_tmp = 64'hE81C00416783E01C;
      13'b0101110010000:
        casez_tmp = 64'h7402E41C00816783;
      13'b0101110010001:
        casez_tmp = 64'h614564E2852670A2;
      13'b0101110010010:
        casez_tmp = 64'hE02211419C5FF06F;
      13'b0101110010011:
        casez_tmp = 64'h8AAFF0EF842EE406;
      13'b0101110010100:
        casez_tmp = 64'h651800F46963611C;
      13'b0101110010101:
        casez_tmp = 64'h691800E47563973E;
      13'b0101110010110:
        casez_tmp = 64'h852260A28C1D943A;
      13'b0101110010111:
        casez_tmp = 64'h1141808201416402;
      13'b0101110011000:
        casez_tmp = 64'h592E0220015059B;
      13'b0101110011001:
        casez_tmp = 64'hC0EFE4064505842A;
      13'b0101110011010:
        casez_tmp = 64'hC5404791C501D9EF;
      13'b0101110011011:
        casez_tmp = 64'h141640260A2C15C;
      13'b0101110011100:
        casez_tmp = 64'hB0EFE40611418082;
      13'b0101110011101:
        casez_tmp = 64'h141450160A2EF3F;
      13'b0101110011110:
        casez_tmp = 64'hF8A2FC8671198082;
      13'b0101110011111:
        casez_tmp = 64'h8BAEF4A6FC5EF0CA;
      13'b0101110100000:
        casez_tmp = 64'hE0DAE4D6E8D2ECCE;
      13'b0101110100001:
        casez_tmp = 64'hEC6EF06AF466F862;
      13'b0101110100010:
        casez_tmp = 64'hEF248000EF892A;
      13'b0101110100011:
        casez_tmp = 64'h54F63842A35C0;
      13'b0101110100100:
        casez_tmp = 64'hEF238000EF854A;
      13'b0101110100101:
        casez_tmp = 64'hE0540638A2A3580;
      13'b0101110100110:
        casez_tmp = 64'hE39589BE00A407BB;
      13'b0101110100111:
        casez_tmp = 64'h7446852270E65429;
      13'b0101110101000:
        casez_tmp = 64'h6A4669E6790674A6;
      13'b0101110101001:
        casez_tmp = 64'h7C427BE26B066AA6;
      13'b0101110101010:
        casez_tmp = 64'h61096DE27D027CA2;
      13'b0101110101011:
        casez_tmp = 64'h8593000035978082;
      13'b0101110101100:
        casez_tmp = 64'h1CA000EF854A3D65;
      13'b0101110101101:
        casez_tmp = 64'h2554930A054463;
      13'b0101110101110:
        casez_tmp = 64'h8526D0F10334C4BB;
      13'b0101110101111:
        casez_tmp = 64'hC95989AAF47FF0EF;
      13'b0101110110000:
        casez_tmp = 64'hC134A8101050B13;
      13'b0101110110001:
        casez_tmp = 64'h3D1700090C9B0081;
      13'b0101110110010:
        casez_tmp = 64'h5DFD3A2D0D130000;
      13'b0101110110011:
        casez_tmp = 64'h886248850D81B503;
      13'b0101110110100:
        casez_tmp = 64'h866A86D6872287D2;
      13'b0101110110101:
        casez_tmp = 64'h3023D5DFD0EF85E6;
      13'b0101110110110:
        casez_tmp = 64'h854E01B5166300AB;
      13'b0101110110111:
        casez_tmp = 64'h67A2BFB5F2BFF0EF;
      13'b0101110111000:
        casez_tmp = 64'hFEFB3C230B412A85;
      13'b0101110111001:
        casez_tmp = 64'h4597FD5498E3;
      13'b0101110111010:
        casez_tmp = 64'hEF854A88C58593;
      13'b0101110111011:
        casez_tmp = 64'h4597E11547852880;
      13'b0101110111100:
        casez_tmp = 64'h854A88A585930000;
      13'b0101110111101:
        casez_tmp = 64'hE9094789276000EF;
      13'b0101110111110:
        casez_tmp = 64'h8885859300004597;
      13'b0101110111111:
        casez_tmp = 64'h4781264000EF854A;
      13'b0101111000000:
        casez_tmp = 64'h13BB02300F9A023;
      13'b0101111000001:
        casez_tmp = 64'hB735842ABF054401;
      13'b0101111000010:
        casez_tmp = 64'hB7155451B725842A;
      13'b0101111000011:
        casez_tmp = 64'h842AE822EC061101;
      13'b0101111000100:
        casez_tmp = 64'h7808E42AF33FE0EF;
      13'b0101111000101:
        casez_tmp = 64'h5400793F6FFE0EF;
      13'b0101111000110:
        casez_tmp = 64'h6442684800F50963;
      13'b0101111000111:
        casez_tmp = 64'hF06F610560E265A2;
      13'b0101111001000:
        casez_tmp = 64'h4501644260E2EB5F;
      13'b0101111001001:
        casez_tmp = 64'hF022717980826105;
      13'b0101111001010:
        casez_tmp = 64'h862E8432F406EC26;
      13'b0101111001011:
        casez_tmp = 64'hD81B5030005059B;
      13'b0101111001100:
        casez_tmp = 64'hE53FC0EF007484B6;
      13'b0101111001101:
        casez_tmp = 64'h14061B4732C531;
      13'b0101111001110:
        casez_tmp = 64'hFB50051387AA060A;
      13'b0101111001111:
        casez_tmp = 64'hA78397B202C76963;
      13'b0101111010000:
        casez_tmp = 64'h450100FF0637FFC7;
      13'b0101111010001:
        casez_tmp = 64'h187971B0187D69B;
      13'b0101111010010:
        casez_tmp = 64'h8EF10087969B8F55;
      13'b0101111010011:
        casez_tmp = 64'h87D79B66C18F55;
      13'b0101111010100:
        casez_tmp = 64'h8FD98FF5F0068693;
      13'b0101111010101:
        casez_tmp = 64'h64E2740270A2C09C;
      13'b0101111010110:
        casez_tmp = 64'hBFD5552980826145;
      13'b0101111010111:
        casez_tmp = 64'hF91FF06F460186B2;
      13'b0101111011000:
        casez_tmp = 64'h46010074C6321101;
      13'b0101111011001:
        casez_tmp = 64'h60E2F83FF0EFEC06;
      13'b0101111011010:
        casez_tmp = 64'h1101808261054532;
      13'b0101111011011:
        casez_tmp = 64'h862E8432EC06E822;
      13'b0101111011100:
        casez_tmp = 64'hD81B5030005059B;
      13'b0101111011101:
        casez_tmp = 64'hE519DCDFC0EF0074;
      13'b0101111011110:
        casez_tmp = 64'h644260E2E41957FD;
      13'b0101111011111:
        casez_tmp = 64'h47B2DC6580826105;
      13'b0101111100000:
        casez_tmp = 64'h701101BFCDC01C;
      13'b0101111100001:
        casez_tmp = 64'hFCBFF0EFE822EC06;
      13'b0101111100010:
        casez_tmp = 64'h852260E24401E519;
      13'b0101111100011:
        casez_tmp = 64'h45B2808261056442;
      13'b0101111100100:
        casez_tmp = 64'h47B2E23FD0EF842A;
      13'b0101111100101:
        casez_tmp = 64'h1101B7DDFEF566E3;
      13'b0101111100110:
        casez_tmp = 64'hFA3FF0EFEC060070;
      13'b0101111100111:
        casez_tmp = 64'h610560E24532C509;
      13'b0101111101000:
        casez_tmp = 64'h871BBFE555298082;
      13'b0101111101001:
        casez_tmp = 64'h59B862E86B20006;
      13'b0101111101010:
        casez_tmp = 64'hD06F0D81B5030005;
      13'b0101111101011:
        casez_tmp = 64'h59BE4061141999F;
      13'b0101111101100:
        casez_tmp = 64'hC0EF0D81B5030005;
      13'b0101111101101:
        casez_tmp = 64'h8082014160A2F81F;
      13'b0101111101110:
        casez_tmp = 64'h5059B00054963;
      13'b0101111101111:
        casez_tmp = 64'hC06F46010D81B503;
      13'b0101111110000:
        casez_tmp = 64'h715980824501ADBF;
      13'b0101111110001:
        casez_tmp = 64'h843EF486ECA6F0A2;
      13'b0101111110010:
        casez_tmp = 64'h862E86B2873687BA;
      13'b0101111110011:
        casez_tmp = 64'hD81B5030005059B;
      13'b0101111110100:
        casez_tmp = 64'h9BBFD0EF00810813;
      13'b0101111110101:
        casez_tmp = 64'h79B4722E10D84AA;
      13'b0101111110110:
        casez_tmp = 64'h57FD000753630007;
      13'b0101111110111:
        casez_tmp = 64'h400061347B2E01C;
      13'b0101111111000:
        casez_tmp = 64'hC40513C41C080C;
      13'b0101111111001:
        casez_tmp = 64'h740670A6EA8FA0EF;
      13'b0101111111010:
        casez_tmp = 64'h8082616564E68526;
      13'b0101111111011:
        casez_tmp = 64'h59B862E86B28736;
      13'b0101111111100:
        casez_tmp = 64'h48010D81B5030005;
      13'b0101111111101:
        casez_tmp = 64'h1141975FD06F57FD;
      13'b0101111111110:
        casez_tmp = 64'hD81B50385AAE406;
      13'b0101111111111:
        casez_tmp = 64'h436357FDE49FC0EF;
      13'b0110000000000:
        casez_tmp = 64'h851B60A287AA0005;
      13'b0110000000001:
        casez_tmp = 64'h1101808201410007;
      13'b0110000000010:
        casez_tmp = 64'h3517842AE822;
      13'b0110000000011:
        casez_tmp = 64'hE42EEC0638450513;
      13'b0110000000100:
        casez_tmp = 64'h644285A2FCFFF0EF;
      13'b0110000000101:
        casez_tmp = 64'hF06F610560E26622;
      13'b0110000000110:
        casez_tmp = 64'hE40645811141EA9F;
      13'b0110000000111:
        casez_tmp = 64'h60A2C509FD7FF0EF;
      13'b0110000001000:
        casez_tmp = 64'h60A2FADFF06F0141;
      13'b0110000001001:
        casez_tmp = 64'h86B280820141557D;
      13'b0110000001010:
        casez_tmp = 64'hB5030005059B862E;
      13'b0110000001011:
        casez_tmp = 64'h1141C5DFC06F0D81;
      13'b0110000001100:
        casez_tmp = 64'hFEBFF0EFE4064601;
      13'b0110000001101:
        casez_tmp = 64'h14100A0353360A2;
      13'b0110000001110:
        casez_tmp = 64'hB5030005059B8082;
      13'b0110000001111:
        casez_tmp = 64'h59BF34FD06F0D81;
      13'b0110000010000:
        casez_tmp = 64'hD06F0D81B5030005;
      13'b0110000010001:
        casez_tmp = 64'h110180824505F4CF;
      13'b0110000010010:
        casez_tmp = 64'h3517842AE822;
      13'b0110000010011:
        casez_tmp = 64'hE42EEC065FC50513;
      13'b0110000010100:
        casez_tmp = 64'h48636622F4FFF0EF;
      13'b0110000010101:
        casez_tmp = 64'h60E2644285A20005;
      13'b0110000010110:
        casez_tmp = 64'h60E2E0FFF06F6105;
      13'b0110000010111:
        casez_tmp = 64'h8082610585326442;
      13'b0110000011000:
        casez_tmp = 64'h77BC611C80824501;
      13'b0110000011001:
        casez_tmp = 64'h888A11018782639C;
      13'b0110000011010:
        casez_tmp = 64'h379700810813;
      13'b0110000011011:
        casez_tmp = 64'h37175C478793;
      13'b0110000011100:
        casez_tmp = 64'hEFEC065CC70713;
      13'b0110000011101:
        casez_tmp = 64'h63886782E90134B0;
      13'b0110000011110:
        casez_tmp = 64'h610560E2C63FE0EF;
      13'b0110000011111:
        casez_tmp = 64'h7179BFE545018082;
      13'b0110000100000:
        casez_tmp = 64'h842EE432F022F406;
      13'b0110000100001:
        casez_tmp = 64'h6702C49FE0EFE036;
      13'b0110000100010:
        casez_tmp = 64'h2041593655C6622;
      13'b0110000100011:
        casez_tmp = 64'h70A2978291810834;
      13'b0110000100100:
        casez_tmp = 64'h7179808261457402;
      13'b0110000100101:
        casez_tmp = 64'h842EE432F022F406;
      13'b0110000100110:
        casez_tmp = 64'h6702C21FE0EFE036;
      13'b0110000100111:
        casez_tmp = 64'h2041593615C6622;
      13'b0110000101000:
        casez_tmp = 64'h70A2978291810834;
      13'b0110000101001:
        casez_tmp = 64'h1141808261457402;
      13'b0110000101010:
        casez_tmp = 64'h60A2C01FE0EFE406;
      13'b0110000101011:
        casez_tmp = 64'h1101808201414501;
      13'b0110000101100:
        casez_tmp = 64'h842AE426E822EC06;
      13'b0110000101101:
        casez_tmp = 64'h84AABEFFE0EFE04A;
      13'b0110000101110:
        casez_tmp = 64'h3823BE1FE0EF8522;
      13'b0110000101111:
        casez_tmp = 64'hEC9918953C231885;
      13'b0110000110000:
        casez_tmp = 64'h5385051300003517;
      13'b0110000110001:
        casez_tmp = 64'h60E254358B6FE0EF;
      13'b0110000110010:
        casez_tmp = 64'h690264A264428522;
      13'b0110000110011:
        casez_tmp = 64'h8526892A80826105;
      13'b0110000110100:
        casez_tmp = 64'hF565842A1E7000EF;
      13'b0110000110101:
        casez_tmp = 64'h842A1F8000EF854A;
      13'b0110000110110:
        casez_tmp = 64'hBFE11DB000EF8526;
      13'b0110000110111:
        casez_tmp = 64'hB97FE0EFE4061141;
      13'b0110000111000:
        casez_tmp = 64'h7175A1E9014160A2;
      13'b0110000111001:
        casez_tmp = 64'hFCA6E506F4CEE122;
      13'b0110000111010:
        casez_tmp = 64'hE0EF89B2842EF8CA;
      13'b0110000111011:
        casez_tmp = 64'h773BC3B1491CB7DF;
      13'b0110000111100:
        casez_tmp = 64'hE715552984AA02F4;
      13'b0110000111101:
        casez_tmp = 64'h2F9F7B393811782;
      13'b0110000111110:
        casez_tmp = 64'h458100810913E38D;
      13'b0110000111111:
        casez_tmp = 64'hA0EF854A05800613;
      13'b0110001000000:
        casez_tmp = 64'h900178BC1402AD2F;
      13'b0110001000001:
        casez_tmp = 64'h852685CAEC4EE822;
      13'b0110001000010:
        casez_tmp = 64'h74E6640A60AA9782;
      13'b0110001000011:
        casez_tmp = 64'h8082614979A67946;
      13'b0110001000100:
        casez_tmp = 64'hDF400513BFC55529;
      13'b0110001000101:
        casez_tmp = 64'h8082DF4005138082;
      13'b0110001000110:
        casez_tmp = 64'hFCCEE526E9227135;
      13'b0110001000111:
        casez_tmp = 64'hECDEF0DAF4D6F8D2;
      13'b0110001001000:
        casez_tmp = 64'hE4E6E14AED06E8E2;
      13'b0110001001001:
        casez_tmp = 64'h89AE5AFD13853903;
      13'b0110001001010:
        casez_tmp = 64'hB13843A8A3684B2;
      13'b0110001001011:
        casez_tmp = 64'h20ADA934B850081;
      13'b0110001001100:
        casez_tmp = 64'h488C0C1300003C17;
      13'b0110001001101:
        casez_tmp = 64'h644A60EA4501EC99;
      13'b0110001001110:
        casez_tmp = 64'h7A4679E6690A64AA;
      13'b0110001001111:
        casez_tmp = 64'h6C466BE67B067AA6;
      13'b0110001010000:
        casez_tmp = 64'h6138082610D6CA6;
      13'b0110001010001:
        casez_tmp = 64'hA0EF855A45810300;
      13'b0110001010010:
        casez_tmp = 64'h26831B694783A42F;
      13'b0110001010011:
        casez_tmp = 64'h1623017104231BC9;
      13'b0110001010100:
        casez_tmp = 64'hD71B1B49478300F1;
      13'b0110001010101:
        casez_tmp = 64'h82300E104A30106;
      13'b0110001010110:
        casez_tmp = 64'hD71B1B79478300F1;
      13'b0110001010111:
        casez_tmp = 64'h87BB0FF777130086;
      13'b0110001011000:
        casez_tmp = 64'hFC22D65EEC4E02E7;
      13'b0110001011001:
        casez_tmp = 64'h2E100A300E108A3;
      13'b0110001011010:
        casez_tmp = 64'hD79B8CA602D10423;
      13'b0110001011011:
        casez_tmp = 64'h87E602F100234037;
      13'b0110001011100:
        casez_tmp = 64'h350387D6019AF363;
      13'b0110001011101:
        casez_tmp = 64'hEFD83E85DA1989;
      13'b0110001011110:
        casez_tmp = 64'h19893503E1296410;
      13'b0110001011111:
        casez_tmp = 64'hE91D505000EF85DA;
      13'b0110001100000:
        casez_tmp = 64'h8CB367E203016703;
      13'b0110001100001:
        casez_tmp = 64'h77E2EC3E97BA40EC;
      13'b0110001100010:
        casez_tmp = 64'hFC0C95E3FC3E97BA;
      13'b0110001100011:
        casez_tmp = 64'h24468300344703;
      13'b0110001100100:
        casez_tmp = 64'h4458300144603;
      13'b0110001100101:
        casez_tmp = 64'h851BF15FD0EF8562;
      13'b0110001100110:
        casez_tmp = 64'hF2054CE3CD010004;
      13'b0110001100111:
        casez_tmp = 64'h99AA942A000A3783;
      13'b0110001101000:
        casez_tmp = 64'h8C8900FA302397AA;
      13'b0110001101001:
        casez_tmp = 64'h7159B705556DB705;
      13'b0110001101010:
        casez_tmp = 64'hE4CEECA6F0A2003C;
      13'b0110001101011:
        casez_tmp = 64'h458184B289AE842A;
      13'b0110001101100:
        casez_tmp = 64'hF486853E03000613;
      13'b0110001101101:
        casez_tmp = 64'h964FA0EF8936E8CA;
      13'b0110001101110:
        casez_tmp = 64'h350385AA10100713;
      13'b0110001101111:
        casez_tmp = 64'h470500E114231984;
      13'b0110001110000:
        casez_tmp = 64'h1623470902E10423;
      13'b0110001110001:
        casez_tmp = 64'hD63AFC26D84A0131;
      13'b0110001110010:
        casez_tmp = 64'h740670A646F000EF;
      13'b0110001110011:
        casez_tmp = 64'h616569A6694664E6;
      13'b0110001110100:
        casez_tmp = 64'hE24AEA22712D8082;
      13'b0110001110101:
        casez_tmp = 64'h67C1FDCEE626EE06;
      13'b0110001110110:
        casez_tmp = 64'h1985348310178793;
      13'b0110001110111:
        casez_tmp = 64'h27971AF52E23;
      13'b0110001111000:
        casez_tmp = 64'h1CF53023A2C7B783;
      13'b0110001111001:
        casez_tmp = 64'h8300913842A44DC;
      13'b0110001111010:
        casez_tmp = 64'h7436303279713;
      13'b0110001111011:
        casez_tmp = 64'h30006130818490D;
      13'b0110001111100:
        casez_tmp = 64'h8ECFA0EF853A4581;
      13'b0110001111101:
        casez_tmp = 64'h8793178209F00793;
      13'b0110001111110:
        casez_tmp = 64'h17824785E83E1017;
      13'b0110001111111:
        casez_tmp = 64'h479985AAF83E0785;
      13'b0110010000000:
        casez_tmp = 64'hDC3E008109938526;
      13'b0110010000001:
        casez_tmp = 64'h44973F5000EFE0CE;
      13'b0110010000010:
        casez_tmp = 64'h52636924B4830000;
      13'b0110010000011:
        casez_tmp = 64'hEA6377FD84AA1405;
      13'b0110010000100:
        casez_tmp = 64'h468D478567411497;
      13'b0110010000101:
        casez_tmp = 64'h1223D03E10170713;
      13'b0110010000110:
        casez_tmp = 64'hD43A02D103230201;
      13'b0110010000111:
        casez_tmp = 64'hEA190087F61348DC;
      13'b0110010001000:
        casez_tmp = 64'h800686936685D036;
      13'b0110010001001:
        casez_tmp = 64'h72346AD02D11623;
      13'b0110010001010:
        casez_tmp = 64'h407F793D83A02D1;
      13'b0110010001011:
        casez_tmp = 64'h807E7935782C395;
      13'b0110010001100:
        casez_tmp = 64'h800787936785D03E;
      13'b0110010001101:
        casez_tmp = 64'h6B0079304F11E23;
      13'b0110010001110:
        casez_tmp = 64'h879367C104F10F23;
      13'b0110010001111:
        casez_tmp = 64'h3797D0BE1047;
      13'b0110010010000:
        casez_tmp = 64'h3783FC1C28478793;
      13'b0110010010001:
        casez_tmp = 64'h342312843C231904;
      13'b0110010010010:
        casez_tmp = 64'hF40023478D14F4;
      13'b0110010010011:
        casez_tmp = 64'h87936785C85C4785;
      13'b0110010010100:
        casez_tmp = 64'hD7834498C05CC007;
      13'b0110010010101:
        casez_tmp = 64'h71702E787BB00C4;
      13'b0110010010110:
        casez_tmp = 64'hF838D76707130000;
      13'b0110010010111:
        casez_tmp = 64'hD787071300000717;
      13'b0110010011000:
        casez_tmp = 64'h71300000717E058;
      13'b0110010011001:
        casez_tmp = 64'h2079613E458D687;
      13'b0110010011010:
        casez_tmp = 64'h28F42423E4109201;
      13'b0110010011011:
        casez_tmp = 64'hE3DD0807F79348DC;
      13'b0110010011100:
        casez_tmp = 64'h58630317971348DC;
      13'b0110010011101:
        casez_tmp = 64'hE7931CC427830007;
      13'b0110010011110:
        casez_tmp = 64'h48DC1CF426230207;
      13'b0110010011111:
        casez_tmp = 64'h9BF55782C7818BA1;
      13'b0110010100000:
        casez_tmp = 64'h7733479D5702D03E;
      13'b0110010100001:
        casez_tmp = 64'hE689080776930127;
      13'b0110010100010:
        casez_tmp = 64'h1777934017571B;
      13'b0110010100011:
        casez_tmp = 64'hF078793078E0789;
      13'b0110010100100:
        casez_tmp = 64'hC703F287A683978A;
      13'b0110010100101:
        casez_tmp = 64'hC6831AD42E23F267;
      13'b0110010100110:
        casez_tmp = 64'hB23F257C783F247;
      13'b0110010100111:
        casez_tmp = 64'h1AF40BA39FB51AE4;
      13'b0110010101000:
        casez_tmp = 64'hD783EBC11B444783;
      13'b0110010101001:
        casez_tmp = 64'h1AF40A23C7A10104;
      13'b0110010101010:
        casez_tmp = 64'hE6190064C603A051;
      13'b0110010101011:
        casez_tmp = 64'h493FBFD449C04E1;
      13'b0110010101100:
        casez_tmp = 64'h852685CEA801F840;
      13'b0110010101101:
        casez_tmp = 64'h97E3F575821FD0EF;
      13'b0110010101110:
        casez_tmp = 64'h60F20004851BEA04;
      13'b0110010101111:
        casez_tmp = 64'h79EE691264B26452;
      13'b0110010110000:
        casez_tmp = 64'h1CC4278380826115;
      13'b0110010110001:
        casez_tmp = 64'h1CF426230017E793;
      13'b0110010110010:
        casez_tmp = 64'hFD63010007B7BF81;
      13'b0110010110011:
        casez_tmp = 64'h1AF40A2347910AC7;
      13'b0110010110100:
        casez_tmp = 64'h876347850004C683;
      13'b0110010110101:
        casez_tmp = 64'h347969348DC00F6;
      13'b0110010110110:
        casez_tmp = 64'h27970206D263;
      13'b0110010110111:
        casez_tmp = 64'h269783C78793;
      13'b0110010111000:
        casez_tmp = 64'h7C60384068693;
      13'b0110010111001:
        casez_tmp = 64'h17C70308E61063;
      13'b0110010111010:
        casez_tmp = 64'h1B4447031AE40B23;
      13'b0110010111011:
        casez_tmp = 64'hF8E7EDE355294791;
      13'b0110010111100:
        casez_tmp = 64'hAF713631A943023;
      13'b0110010111101:
        casez_tmp = 64'hE6347850004C703;
      13'b0110010111110:
        casez_tmp = 64'h347971348DC08F7;
      13'b0110010111111:
        casez_tmp = 64'h1CC4278308074963;
      13'b0110011000000:
        casez_tmp = 64'h3517C7990407F793;
      13'b0110011000001:
        casez_tmp = 64'hD0EF10A505130000;
      13'b0110011000010:
        casez_tmp = 64'h7131A043783C31F;
      13'b0110011000011:
        casez_tmp = 64'h8F630007C7830C20;
      13'b0110011000100:
        casez_tmp = 64'h71302F7696302E7;
      13'b0110011000101:
        casez_tmp = 64'h71302E78B630200;
      13'b0110011000110:
        casez_tmp = 64'h79302E7876302C0;
      13'b0110011000111:
        casez_tmp = 64'h46851CF40823F800;
      13'b0110011001000:
        casez_tmp = 64'hA83D45DD1D040613;
      13'b0110011001001:
        casez_tmp = 64'hB749F6F69DE30789;
      13'b0110011001010:
        casez_tmp = 64'hEF00713BDED478D;
      13'b0110011001011:
        casez_tmp = 64'hA8014481FCE79FE3;
      13'b0110011001100:
        casez_tmp = 64'h8522459946014681;
      13'b0110011001101:
        casez_tmp = 64'h46814485CE7FF0EF;
      13'b0110011001110:
        casez_tmp = 64'h85220B7005934601;
      13'b0110011001111:
        casez_tmp = 64'h4681C499CD7FF0EF;
      13'b0110011010000:
        casez_tmp = 64'hF0EF852245914601;
      13'b0110011010001:
        casez_tmp = 64'h513B5ED4501CC9F;
      13'b0110011010010:
        casez_tmp = 64'hF02271798082DF40;
      13'b0110011010011:
        casez_tmp = 64'hE44EE84AF406EC26;
      13'b0110011010100:
        casez_tmp = 64'hB98384AE842A611C;
      13'b0110011010101:
        casez_tmp = 64'hF5956347A90687;
      13'b0110011010110:
        casez_tmp = 64'h5955FE3FF0EF45B5;
      13'b0110011010111:
        casez_tmp = 64'h852285A60109B783;
      13'b0110011011000:
        casez_tmp = 64'h70A2FF250BE39782;
      13'b0110011011001:
        casez_tmp = 64'h69A2694264E27402;
      13'b0110011011010:
        casez_tmp = 64'h77BC611C80826145;
      13'b0110011011011:
        casez_tmp = 64'h101A583C781639C;
      13'b0110011011100:
        casez_tmp = 64'h4501808245018782;
      13'b0110011011101:
        casez_tmp = 64'h1501B50385AA8082;
      13'b0110011011110:
        casez_tmp = 64'h8082FA3FF06FC119;
      13'b0110011011111:
        casez_tmp = 64'hE426EC06E8221101;
      13'b0110011100000:
        casez_tmp = 64'hE891842A1501B483;
      13'b0110011100001:
        casez_tmp = 64'h610564A2644260E2;
      13'b0110011100010:
        casez_tmp = 64'hF0EF040585268082;
      13'b0110011100011:
        casez_tmp = 64'hF9F500044583F7FF;
      13'b0110011100100:
        casez_tmp = 64'hE822EC061101B7E5;
      13'b0110011100101:
        casez_tmp = 64'hC8191501B403E426;
      13'b0110011100110:
        casez_tmp = 64'hC799709C77A4601C;
      13'b0110011100111:
        casez_tmp = 64'h978285224581709C;
      13'b0110011101000:
        casez_tmp = 64'h644260E2FEA04CE3;
      13'b0110011101001:
        casez_tmp = 64'hB5038082610564A2;
      13'b0110011101010:
        casez_tmp = 64'h77BC611CC9011501;
      13'b0110011101011:
        casez_tmp = 64'h101A583C781639C;
      13'b0110011101100:
        casez_tmp = 64'hF426713980828782;
      13'b0110011101101:
        casez_tmp = 64'hB903F04AF822FC06;
      13'b0110011101110:
        casez_tmp = 64'hA090D6308240D81;
      13'b0110011101111:
        casez_tmp = 64'hFD85859300003597;
      13'b0110011110000:
        casez_tmp = 64'h842A93AFD0EF854A;
      13'b0110011110001:
        casez_tmp = 64'h859300003597E139;
      13'b0110011110010:
        casez_tmp = 64'hEACFC0EF854AFD65;
      13'b0110011110011:
        casez_tmp = 64'h6900513862685AA;
      13'b0110011110100:
        casez_tmp = 64'h65A2ADAFF0EFE42E;
      13'b0110011110101:
        casez_tmp = 64'h14F1B82367E2E921;
      13'b0110011110110:
        casez_tmp = 64'h1007E7930081B783;
      13'b0110011110111:
        casez_tmp = 64'hF93FF0EF00F1B423;
      13'b0110011111000:
        casez_tmp = 64'h790274A2744270E2;
      13'b0110011111001:
        casez_tmp = 64'h593808261214501;
      13'b0110011111010:
        casez_tmp = 64'hC919D48FD0EF03A0;
      13'b0110011111011:
        casez_tmp = 64'h854A85A24085063B;
      13'b0110011111100:
        casez_tmp = 64'h5AE385AADB6FC0EF;
      13'b0110011111101:
        casez_tmp = 64'hD0EF8522B745FA05;
      13'b0110011111110:
        casez_tmp = 64'hB7DD0005061BD44F;
      13'b0110011111111:
        casez_tmp = 64'hA81B50302B05563;
      13'b0110100000000:
        casez_tmp = 64'hE0EF862646814701;
      13'b0110100000001:
        casez_tmp = 64'hE0EF6562ED01B95F;
      13'b0110100000010:
        casez_tmp = 64'h166306900793D88F;
      13'b0110100000011:
        casez_tmp = 64'hE74FE0EF656200F5;
      13'b0110100000100:
        casez_tmp = 64'h51300003517D549;
      13'b0110100000101:
        casez_tmp = 64'h8626EE4FD0EFF465;
      13'b0110100000110:
        casez_tmp = 64'hF0EF069005134581;
      13'b0110100000111:
        casez_tmp = 64'h45818626D925A22F;
      13'b0110100001000:
        casez_tmp = 64'h9F0FF0EF06900513;
      13'b0110100001001:
        casez_tmp = 64'h690051385A6D12D;
      13'b0110100001010:
        casez_tmp = 64'h1141B7F1ADAFF0EF;
      13'b0110100001011:
        casez_tmp = 64'hE0EF842EE406E022;
      13'b0110100001100:
        casez_tmp = 64'h4BC8C811651CCDCF;
      13'b0110100001101:
        casez_tmp = 64'h89090AA0000F2501;
      13'b0110100001110:
        casez_tmp = 64'h80820141640260A2;
      13'b0110100001111:
        casez_tmp = 64'hAA0000F25014388;
      13'b0110100010000:
        casez_tmp = 64'h1141B7F501F5551B;
      13'b0110100010001:
        casez_tmp = 64'hE0EF842EE406E022;
      13'b0110100010010:
        casez_tmp = 64'h2781431C6518CACF;
      13'b0110100010011:
        casez_tmp = 64'hFE07CBE30AA0000F;
      13'b0110100010100:
        casez_tmp = 64'hC3000550000F2401;
      13'b0110100010101:
        casez_tmp = 64'h1414501640260A2;
      13'b0110100010110:
        casez_tmp = 64'hE0EFE40611418082;
      13'b0110100010111:
        casez_tmp = 64'h250143C8651CC84F;
      13'b0110100011000:
        casez_tmp = 64'hFE054CE30AA0000F;
      13'b0110100011001:
        casez_tmp = 64'h1410FF5751360A2;
      13'b0110100011010:
        casez_tmp = 64'hE0EFE40611418082;
      13'b0110100011011:
        casez_tmp = 64'h8B850081B783C64F;
      13'b0110100011100:
        casez_tmp = 64'h550000F651CEF89;
      13'b0110100011101:
        casez_tmp = 64'h550000FC7984705;
      13'b0110100011110:
        casez_tmp = 64'hA8230550000FC7D8;
      13'b0110100011111:
        casez_tmp = 64'h141450160A20007;
      13'b0110100100000:
        casez_tmp = 64'hE8A2EC86711D8082;
      13'b0110100100001:
        casez_tmp = 64'hF852FC4EE0CAE4A6;
      13'b0110100100010:
        casez_tmp = 64'h810993842E892A;
      13'b0110100100011:
        casez_tmp = 64'h864E84AAC22FE0EF;
      13'b0110100100100:
        casez_tmp = 64'hE0EFC202854A4581;
      13'b0110100100101:
        casez_tmp = 64'h77637A7D250186EF;
      13'b0110100100110:
        casez_tmp = 64'h500909350302AA;
      13'b0110100100111:
        casez_tmp = 64'hC085859300003597;
      13'b0110100101000:
        casez_tmp = 64'h7F632501D78FF0EF;
      13'b0110100101001:
        casez_tmp = 64'h64A6644660E600AA;
      13'b0110100101010:
        casez_tmp = 64'h45017A4279E26906;
      13'b0110100101011:
        casez_tmp = 64'hE0EF854E80826125;
      13'b0110100101100:
        casez_tmp = 64'h416783C22A84CF;
      13'b0110100101101:
        casez_tmp = 64'h17FDE09C46816490;
      13'b0110100101110:
        casez_tmp = 64'hF7666300878733;
      13'b0110100101111:
        casez_tmp = 64'hFFF7069B02875733;
      13'b0110100110000:
        casez_tmp = 64'hB7D1CE140550000F;
      13'b0110100110001:
        casez_tmp = 64'hE426E822EC061101;
      13'b0110100110010:
        casez_tmp = 64'h842ABA8FE0EF84AA;
      13'b0110100110011:
        casez_tmp = 64'hE408815FE0EF8526;
      13'b0110100110100:
        casez_tmp = 64'h450100A7E36377FD;
      13'b0110100110101:
        casez_tmp = 64'h250164A2644260E2;
      13'b0110100110110:
        casez_tmp = 64'hEC26717980826105;
      13'b0110100110111:
        casez_tmp = 64'hE44EE84AF022F406;
      13'b0110100111000:
        casez_tmp = 64'h687B98384AA611C;
      13'b0110100111001:
        casez_tmp = 64'h8932CB850289B783;
      13'b0110100111010:
        casez_tmp = 64'hC48DC121842A9782;
      13'b0110100111011:
        casez_tmp = 64'h638C86A26490609C;
      13'b0110100111100:
        casez_tmp = 64'hDC85051300003517;
      13'b0110100111101:
        casez_tmp = 64'h852270A2857FD0EF;
      13'b0110100111110:
        casez_tmp = 64'h69A2694264E27402;
      13'b0110100111111:
        casez_tmp = 64'hBFE1542980826145;
      13'b0110101000000:
        casez_tmp = 64'h6130000361786A2;
      13'b0110101000001:
        casez_tmp = 64'h859300003597DCE6;
      13'b0110101000010:
        casez_tmp = 64'h309B783B7F9DD65;
      13'b0110101000011:
        casez_tmp = 64'h9782852685CAC385;
      13'b0110101000100:
        casez_tmp = 64'h609CCC81D569842A;
      13'b0110101000101:
        casez_tmp = 64'h3517638C86A26490;
      13'b0110101000110:
        casez_tmp = 64'hBF4DDBA505130000;
      13'b0110101000111:
        casez_tmp = 64'h361786A2B7ED5429;
      13'b0110101001000:
        casez_tmp = 64'h3597D92606130000;
      13'b0110101001001:
        casez_tmp = 64'hB7C5D9A585930000;
      13'b0110101001010:
        casez_tmp = 64'hE426E822EC061101;
      13'b0110101001011:
        casez_tmp = 64'h842AAE6FE0EF84AA;
      13'b0110101001100:
        casez_tmp = 64'hE104AF6FE0EF8526;
      13'b0110101001101:
        casez_tmp = 64'hC55C441CC51C405C;
      13'b0110101001110:
        casez_tmp = 64'h644260E2C91C47A1;
      13'b0110101001111:
        casez_tmp = 64'h80826105450164A2;
      13'b0110101010000:
        casez_tmp = 64'hE426E822EC061101;
      13'b0110101010001:
        casez_tmp = 64'h842AAC8FE0EF84AA;
      13'b0110101010010:
        casez_tmp = 64'h3597460168C8;
      13'b0110101010011:
        casez_tmp = 64'hC24FF0EFD7C58593;
      13'b0110101010100:
        casez_tmp = 64'h64A2644260E2C008;
      13'b0110101010101:
        casez_tmp = 64'h7139808261054501;
      13'b0110101010110:
        casez_tmp = 64'hF04AF426F822FC06;
      13'b0110101010111:
        casez_tmp = 64'h3A03E456E852EC4E;
      13'b0110101011000:
        casez_tmp = 64'hA3783892A0305;
      13'b0110101011001:
        casez_tmp = 64'hE0EF0687BA838552;
      13'b0110101011010:
        casez_tmp = 64'hE0EF854A84AAA84F;
      13'b0110101011011:
        casez_tmp = 64'h2983451C4080A82F;
      13'b0110101011100:
        casez_tmp = 64'h8722C799C42100C5;
      13'b0110101011101:
        casez_tmp = 64'h41B873E0087F363;
      13'b0110101011110:
        casez_tmp = 64'h87956340DC0007;
      13'b0110101011111:
        casez_tmp = 64'h864E01378B63449C;
      13'b0110101100000:
        casez_tmp = 64'hEB1FF0EF855285A2;
      13'b0110101100001:
        casez_tmp = 64'h134A423C0C0E905;
      13'b0110101100010:
        casez_tmp = 64'h7442C38D000AB783;
      13'b0110101100011:
        casez_tmp = 64'h6A4269E274A270E2;
      13'b0110101100100:
        casez_tmp = 64'h61217902854A6AA2;
      13'b0110101100101:
        casez_tmp = 64'h6A04041364618782;
      13'b0110101100110:
        casez_tmp = 64'h4501BF7D843ED3E9;
      13'b0110101100111:
        casez_tmp = 64'h790274A2744270E2;
      13'b0110101101000:
        casez_tmp = 64'h61216AA26A4269E2;
      13'b0110101101001:
        casez_tmp = 64'h77BC639C791C8082;
      13'b0110101101010:
        casez_tmp = 64'h80828782C391679C;
      13'b0110101101011:
        casez_tmp = 64'h63BC0007B803791C;
      13'b0110101101100:
        casez_tmp = 64'hA883679C06883803;
      13'b0110101101101:
        casez_tmp = 64'h966306E007930087;
      13'b0110101101110:
        casez_tmp = 64'hC7890188378300F8;
      13'b0110101101111:
        casez_tmp = 64'h8082FA1005138782;
      13'b0110101110000:
        casez_tmp = 64'h61088082FDA00513;
      13'b0110101110001:
        casez_tmp = 64'hF06F6108F27FF06F;
      13'b0110101110010:
        casez_tmp = 64'hFC5FF06F6108FBDF;
      13'b0110101110011:
        casez_tmp = 64'hE486F84AFC26715D;
      13'b0110101110100:
        casez_tmp = 64'h84AA611CF44EE0A2;
      13'b0110101110101:
        casez_tmp = 64'h7F9C893277BC86AE;
      13'b0110101110110:
        casez_tmp = 64'h9782E42E0810C7A1;
      13'b0110101110111:
        casez_tmp = 64'hC09DCD15842A66A2;
      13'b0110101111000:
        casez_tmp = 64'h638C872A6490609C;
      13'b0110101111001:
        casez_tmp = 64'hC605051300003517;
      13'b0110101111010:
        casez_tmp = 64'h852260A6E6EFD0EF;
      13'b0110101111011:
        casez_tmp = 64'h79A2794274E26406;
      13'b0110101111100:
        casez_tmp = 64'h3617872A80826161;
      13'b0110101111101:
        casez_tmp = 64'h3597BEA606130000;
      13'b0110101111110:
        casez_tmp = 64'hBFC9BF2585930000;
      13'b0110101111111:
        casez_tmp = 64'h852685CE01810993;
      13'b0110110000000:
        casez_tmp = 64'h66A295CFE0EFE436;
      13'b0110110000001:
        casez_tmp = 64'hE11965620006841B;
      13'b0110110000010:
        casez_tmp = 64'h92CFE0EFB7C95435;
      13'b0110110000011:
        casez_tmp = 64'h67E200879763411C;
      13'b0110110000100:
        casez_tmp = 64'hB77D00F930234401;
      13'b0110110000101:
        casez_tmp = 64'hBFF994AFE0EF854E;
      13'b0110110000110:
        casez_tmp = 64'hFC5EECCEF0CA7119;
      13'b0110110000111:
        casez_tmp = 64'h85AA89328BAE89AA;
      13'b0110110001000:
        casez_tmp = 64'hE8D206E005130810;
      13'b0110110001001:
        casez_tmp = 64'hF466F862E0DAE4D6;
      13'b0110110001010:
        casez_tmp = 64'h8B36F4A6F8A2FC86;
      13'b0110110001011:
        casez_tmp = 64'h8A468AC28CBE8C3A;
      13'b0110110001100:
        casez_tmp = 64'h842AC905DF9FE0EF;
      13'b0110110001101:
        casez_tmp = 64'h351785CE862A;
      13'b0110110001110:
        casez_tmp = 64'hDCAFD0EFBDC50513;
      13'b0110110001111:
        casez_tmp = 64'h74A67446852270E6;
      13'b0110110010000:
        casez_tmp = 64'h6AA66A4669E67906;
      13'b0110110010001:
        casez_tmp = 64'h7CA27C427BE26B06;
      13'b0110110010010:
        casez_tmp = 64'h834654280826109;
      13'b0110110010011:
        casez_tmp = 64'hF0EFE43685DE8636;
      13'b0110110010100:
        casez_tmp = 64'h87AA66A25735EFBF;
      13'b0110110010101:
        casez_tmp = 64'hE6306E51F63842A;
      13'b0110110010110:
        casez_tmp = 64'h85E286666542060C;
      13'b0110110010111:
        casez_tmp = 64'hFD4D842AEDCFE0EF;
      13'b0110110011000:
        casez_tmp = 64'h202387EFE0EF6562;
      13'b0110110011001:
        casez_tmp = 64'h156387CA84AA0175;
      13'b0110110011010:
        casez_tmp = 64'h6A07879367E10009;
      13'b0110110011011:
        casez_tmp = 64'h65620164A423C0DC;
      13'b0110110011100:
        casez_tmp = 64'hEB918B8508852783;
      13'b0110110011101:
        casez_tmp = 64'hF549842A9A8FE0EF;
      13'b0110110011110:
        casez_tmp = 64'h67E2866FE0EF6562;
      13'b0110110011111:
        casez_tmp = 64'h85CFE0EF6562E11C;
      13'b0110110100000:
        casez_tmp = 64'h84EFE0EF654289AA;
      13'b0110110100001:
        casez_tmp = 64'h1363CFB18BAA415C;
      13'b0110110100010:
        casez_tmp = 64'h9463449CC4810609;
      13'b0110110100011:
        casez_tmp = 64'hB023440167C20767;
      13'b0110110100100:
        casez_tmp = 64'hBF89013A302300FA;
      13'b0110110100101:
        casez_tmp = 64'h620CCE096642C915;
      13'b0110110100110:
        casez_tmp = 64'h86CE618C875E6610;
      13'b0110110100111:
        casez_tmp = 64'hB305051300003517;
      13'b0110110101000:
        casez_tmp = 64'h875EBF15CFEFD0EF;
      13'b0110110101001:
        casez_tmp = 64'h6130000361786CE;
      13'b0110110101010:
        casez_tmp = 64'h859300003597A866;
      13'b0110110101011:
        casez_tmp = 64'hD1416562BFF9A8E5;
      13'b0110110101100:
        casez_tmp = 64'hBFA584AAFE1FD0EF;
      13'b0110110101101:
        casez_tmp = 64'h842AE1DFF0EF854E;
      13'b0110110101110:
        casez_tmp = 64'h4BA783B719DD59;
      13'b0110110101111:
        casez_tmp = 64'h6542F9278CE3DFC9;
      13'b0110110110000:
        casez_tmp = 64'hC31FF0EF85CA865A;
      13'b0110110110001:
        casez_tmp = 64'hF0EF854ED941842A;
      13'b0110110110010:
        casez_tmp = 64'hF4067179B5DDDFFF;
      13'b0110110110011:
        casez_tmp = 64'hE44EE84AEC26F022;
      13'b0110110110100:
        casez_tmp = 64'h892E694884AAE052;
      13'b0110110110101:
        casez_tmp = 64'h859300002597567D;
      13'b0110110110110:
        casez_tmp = 64'h202390EFF0EF3865;
      13'b0110110110111:
        casez_tmp = 64'h613666168C800A9;
      13'b0110110111000:
        casez_tmp = 64'h8593000035976A06;
      13'b0110110111001:
        casez_tmp = 64'h22238F6FF0EFA4E5;
      13'b0110110111010:
        casez_tmp = 64'h359768C800A9;
      13'b0110110111011:
        casez_tmp = 64'hA82FF0EFAC458593;
      13'b0110110111100:
        casez_tmp = 64'h359768C889AA;
      13'b0110110111101:
        casez_tmp = 64'h19999BAC458593;
      13'b0110110111110:
        casez_tmp = 64'h68C88A2AA6EFF0EF;
      13'b0110110111111:
        casez_tmp = 64'hAC05859300003597;
      13'b0110111000000:
        casez_tmp = 64'h25141BA5EFF0EF;
      13'b0110111000001:
        casez_tmp = 64'h85930000359768C8;
      13'b0110111000010:
        casez_tmp = 64'hF0EF01346433ABE5;
      13'b0110111000011:
        casez_tmp = 64'h151B01446433A48F;
      13'b0110111000100:
        casez_tmp = 64'h68C88C4924010045;
      13'b0110111000101:
        casez_tmp = 64'hAB05859300003597;
      13'b0110111000110:
        casez_tmp = 64'h151BA2CFF0EF2401;
      13'b0110111000111:
        casez_tmp = 64'h460568C88C490075;
      13'b0110111001000:
        casez_tmp = 64'hAA85859300003597;
      13'b0110111001001:
        casez_tmp = 64'h47912501878FF0EF;
      13'b0110111001010:
        casez_tmp = 64'h47A104F509632401;
      13'b0110111001011:
        casez_tmp = 64'h1463478904F50963;
      13'b0110111001100:
        casez_tmp = 64'h68C82004641300F5;
      13'b0110111001101:
        casez_tmp = 64'h8593000035974605;
      13'b0110111001110:
        casez_tmp = 64'h250184EFF0EFA965;
      13'b0110111001111:
        casez_tmp = 64'h47A102F50B634791;
      13'b0110111010000:
        casez_tmp = 64'h1463478902F50A63;
      13'b0110111010001:
        casez_tmp = 64'h24238C5D678500F5;
      13'b0110111010010:
        casez_tmp = 64'h64E2740270A20089;
      13'b0110111010011:
        casez_tmp = 64'h45016A0269A26942;
      13'b0110111010100:
        casez_tmp = 64'h4004641380826145;
      13'b0110111010101:
        casez_tmp = 64'hBF658C5D6791BF7D;
      13'b0110111010110:
        casez_tmp = 64'hBFD967A1BFE96789;
      13'b0110111010111:
        casez_tmp = 64'h842AE406E0221141;
      13'b0110111011000:
        casez_tmp = 64'hC963685CE81FD0EF;
      13'b0110111011001:
        casez_tmp = 64'h6402852285AA0007;
      13'b0110111011010:
        casez_tmp = 64'hEC1FF06F014160A2;
      13'b0110111011011:
        casez_tmp = 64'h1414501640260A2;
      13'b0110111011100:
        casez_tmp = 64'h826387AA47118082;
      13'b0110111011101:
        casez_tmp = 64'h470500B76C6304E5;
      13'b0110111011110:
        casez_tmp = 64'h470902E587634501;
      13'b0110111011111:
        casez_tmp = 64'hDF40051300E58F63;
      13'b0110111100000:
        casez_tmp = 64'hFEE59CE347218082;
      13'b0110111100001:
        casez_tmp = 64'hC215030797134501;
      13'b0110111100010:
        casez_tmp = 64'hE611A83903179713;
      13'b0110111100011:
        casez_tmp = 64'hDF798B0D00C7D713;
      13'b0110111100100:
        casez_tmp = 64'hFFED6007F7938082;
      13'b0110111100101:
        casez_tmp = 64'h97134501E619BFD1;
      13'b0110111100110:
        casez_tmp = 64'hB7D9FE0747E30327;
      13'b0110111100111:
        casez_tmp = 64'hB7E5450140057793;
      13'b0110111101000:
        casez_tmp = 64'hE426EC06E8221101;
      13'b0110111101001:
        casez_tmp = 64'h15C583842E4544;
      13'b0110111101010:
        casez_tmp = 64'hF8FFF0EF85264605;
      13'b0110111101011:
        casez_tmp = 64'h844783E5214781;
      13'b0110111101100:
        casez_tmp = 64'h460500944583CB89;
      13'b0110111101101:
        casez_tmp = 64'h4781F79FF0EF8526;
      13'b0110111101110:
        casez_tmp = 64'hCB8901844783E90D;
      13'b0110111101111:
        casez_tmp = 64'h8526460501944583;
      13'b0110111110000:
        casez_tmp = 64'hED114781F63FF0EF;
      13'b0110111110001:
        casez_tmp = 64'h4583CA1947855050;
      13'b0110111110010:
        casez_tmp = 64'h16361316790204;
      13'b0110111110011:
        casez_tmp = 64'h3793F49FF0EF8526;
      13'b0110111110100:
        casez_tmp = 64'h64A2644260E20015;
      13'b0110111110101:
        casez_tmp = 64'hC70380826105853E;
      13'b0110111110110:
        casez_tmp = 64'hC703E7058B050025;
      13'b0110111110111:
        casez_tmp = 64'hC703E3058B0500A5;
      13'b0110111111000:
        casez_tmp = 64'hC703EF018B0501A5;
      13'b0110111111001:
        casez_tmp = 64'hC703EB018B050215;
      13'b0110111111010:
        casez_tmp = 64'hF7146347850005;
      13'b0110111111011:
        casez_tmp = 64'h80824501F69FF06F;
      13'b0110111111100:
        casez_tmp = 64'h7A94872E87AA6114;
      13'b0110111111101:
        casez_tmp = 64'hC681729476B46294;
      13'b0110111111110:
        casez_tmp = 64'h85BA8682C2916694;
      13'b0110111111111:
        casez_tmp = 64'h7139FB5FF06F853E;
      13'b0111000000000:
        casez_tmp = 64'hEC4EF04AF426F822;
      13'b0111000000001:
        casez_tmp = 64'hE05AE456E852FC06;
      13'b0111000000010:
        casez_tmp = 64'h892E89AA611C0080;
      13'b0111000000011:
        casez_tmp = 64'h639CDF4004937B9C;
      13'b0111000000100:
        casez_tmp = 64'hFBDFF0EF0687BA03;
      13'b0111000000101:
        casez_tmp = 64'hB5BFF0EF854EC51D;
      13'b0111000000110:
        casez_tmp = 64'h37830205426384AA;
      13'b0111000000111:
        casez_tmp = 64'hCB8D6B9CCB9D020A;
      13'b0111000001000:
        casez_tmp = 64'h7939782854E85CA;
      13'b0111000001001:
        casez_tmp = 64'h2F5026384AADF40;
      13'b0111000001010:
        casez_tmp = 64'h113B3BFF0EF854E;
      13'b0111000001011:
        casez_tmp = 64'h7442852670E2FC04;
      13'b0111000001100:
        casez_tmp = 64'h6A4269E2790274A2;
      13'b0111000001101:
        casez_tmp = 64'h808261216B026AA2;
      13'b0111000001110:
        casez_tmp = 64'h2703CBD502892783;
      13'b0111000001111:
        casez_tmp = 64'h3093A0347850249;
      13'b0111000010000:
        casez_tmp = 64'h8AD200F704634A81;
      13'b0111000010001:
        casez_tmp = 64'h4483008947034A01;
      13'b0111000010010:
        casez_tmp = 64'h79B018946030009;
      13'b0111000010011:
        casez_tmp = 64'h86939CB19CB90007;
      13'b0111000010100:
        casez_tmp = 64'h1337F06F69300F4;
      13'b0111000010101:
        casez_tmp = 64'h8B0A0049568340D1;
      13'b0111000010110:
        casez_tmp = 64'hC31D00D100234505;
      13'b0111000010111:
        casez_tmp = 64'h979B37FD01093803;
      13'b0111000011000:
        casez_tmp = 64'h55E1001106930037;
      13'b0111000011001:
        casez_tmp = 64'hA6802300F85533;
      13'b0111000011010:
        casez_tmp = 64'hFEB79AE3068537E1;
      13'b0111000011011:
        casez_tmp = 64'h593C61100170513;
      13'b0111000011100:
        casez_tmp = 64'hBECF90EF955A0FF0;
      13'b0111000011101:
        casez_tmp = 64'h1363000A95634705;
      13'b0111000011110:
        casez_tmp = 64'h34959B470D000A;
      13'b0111000011111:
        casez_tmp = 64'hF0EF854E865A4681;
      13'b0111000100000:
        casez_tmp = 64'h9463F92984AAA95F;
      13'b0111000100001:
        casez_tmp = 64'h2583F40A03E3000A;
      13'b0111000100010:
        casez_tmp = 64'h959B86D247090289;
      13'b0111000100011:
        casez_tmp = 64'hF0EF854E86560035;
      13'b0111000100100:
        casez_tmp = 64'hBF0584AAD51DA75F;
      13'b0111000100101:
        casez_tmp = 64'h6118BFB94A814A01;
      13'b0111000100110:
        casez_tmp = 64'h63187B1887AE862A;
      13'b0111000100111:
        casez_tmp = 64'h6314C71173187738;
      13'b0111000101000:
        casez_tmp = 64'hE3216B188682C291;
      13'b0111000101001:
        casez_tmp = 64'h7C6830087C703;
      13'b0111000101010:
        casez_tmp = 64'h85BB0187C7039EB9;
      13'b0111000101011:
        casez_tmp = 64'hC70986AE4E1800E6;
      13'b0111000101100:
        casez_tmp = 64'h8082552900B77463;
      13'b0111000101101:
        casez_tmp = 64'h578C45050247A803;
      13'b0111000101110:
        casez_tmp = 64'hC7114A5800A81D63;
      13'b0111000101111:
        casez_tmp = 64'h86AE00E5F36386BA;
      13'b0111000110000:
        casez_tmp = 64'h4501D3E5579CD794;
      13'b0111000110001:
        casez_tmp = 64'h40D706BBDF658082;
      13'b0111000110010:
        casez_tmp = 64'h872E00D5F3638736;
      13'b0111000110011:
        casez_tmp = 64'hE0221141B7E5D798;
      13'b0111000110100:
        casez_tmp = 64'hBA9FD0EF842EE406;
      13'b0111000110101:
        casez_tmp = 64'hF4636345014D1C;
      13'b0111000110110:
        casez_tmp = 64'h141640260A25529;
      13'b0111000110111:
        casez_tmp = 64'hE406E02211418082;
      13'b0111000111000:
        casez_tmp = 64'h611CB8BFD0EF842E;
      13'b0111000111001:
        casez_tmp = 64'hAA0000F278143DC;
      13'b0111000111010:
        casez_tmp = 64'h88099BF100147713;
      13'b0111000111011:
        casez_tmp = 64'h27E793C0198FD9;
      13'b0111000111100:
        casez_tmp = 64'hC35C0550000F6118;
      13'b0111000111101:
        casez_tmp = 64'h1414501640260A2;
      13'b0111000111110:
        casez_tmp = 64'hE406E02211418082;
      13'b0111000111111:
        casez_tmp = 64'h495CB53FD0EF842E;
      13'b0111001000000:
        casez_tmp = 64'h873E00F463638722;
      13'b0111001000001:
        casez_tmp = 64'h37FD9FB90017D79B;
      13'b0111001000010:
        casez_tmp = 64'h37FD611802E7D7BB;
      13'b0111001000011:
        casez_tmp = 64'h550000F93D117D2;
      13'b0111001000100:
        casez_tmp = 64'h4501640260A2C31C;
      13'b0111001000101:
        casez_tmp = 64'hE486715D80820141;
      13'b0111001000110:
        casez_tmp = 64'h84AAF84AFC26E0A2;
      13'b0111001000111:
        casez_tmp = 64'h8526842AB15FD0EF;
      13'b0111001001000:
        casez_tmp = 64'h663E008F8FFD0EF;
      13'b0111001001001:
        casez_tmp = 64'h2597462168C81005;
      13'b0111001001010:
        casez_tmp = 64'hE0EF6F2585930000;
      13'b0111001001011:
        casez_tmp = 64'h462168C8C408C6BF;
      13'b0111001001100:
        casez_tmp = 64'h6F85859300002597;
      13'b0111001001101:
        casez_tmp = 64'h810913C59FE0EF;
      13'b0111001001110:
        casez_tmp = 64'h45818526864AC448;
      13'b0111001001111:
        casez_tmp = 64'hE12984AAF1CFD0EF;
      13'b0111001010000:
        casez_tmp = 64'h601CF28FD0EF854A;
      13'b0111001010001:
        casez_tmp = 64'hF27814BDCC848;
      13'b0111001010010:
        casez_tmp = 64'hF601CC81C0AA0;
      13'b0111001010011:
        casez_tmp = 64'h601CCBD8577D0550;
      13'b0111001010100:
        casez_tmp = 64'hAA0000F26814BD4;
      13'b0111001010101:
        casez_tmp = 64'h550000F601C4818;
      13'b0111001010110:
        casez_tmp = 64'h2517EE91CBD8;
      13'b0111001010111:
        casez_tmp = 64'hF83FC0EF6C450513;
      13'b0111001011000:
        casez_tmp = 64'h85267942640660A6;
      13'b0111001011001:
        casez_tmp = 64'h66418082616174E2;
      13'b0111001011010:
        casez_tmp = 64'h20007130006879B;
      13'b0111001011011:
        casez_tmp = 64'h107979B00C6F563;
      13'b0111001011100:
        casez_tmp = 64'hF563010006B74741;
      13'b0111001011101:
        casez_tmp = 64'h37610087979B00D7;
      13'b0111001011110:
        casez_tmp = 64'hD7F563100006B7;
      13'b0111001011111:
        casez_tmp = 64'h6B737710047979B;
      13'b0111001100000:
        casez_tmp = 64'h979B00D7F5634000;
      13'b0111001100001:
        casez_tmp = 64'h7C36337790027;
      13'b0111001100010:
        casez_tmp = 64'hFCC18601C377D;
      13'b0111001100011:
        casez_tmp = 64'h601C0607A8230550;
      13'b0111001100100:
        casez_tmp = 64'hCBB847050550000F;
      13'b0111001100101:
        casez_tmp = 64'hAA230550000F601C;
      13'b0111001100110:
        casez_tmp = 64'h550000F60140407;
      13'b0111001100111:
        casez_tmp = 64'h601CD69C078567C1;
      13'b0111001101000:
        casez_tmp = 64'h601CD7D80550000F;
      13'b0111001101001:
        casez_tmp = 64'h607A0230550000F;
      13'b0111001101010:
        casez_tmp = 64'h7179B7B554B5BF85;
      13'b0111001101011:
        casez_tmp = 64'hF0224501892AE84A;
      13'b0111001101100:
        casez_tmp = 64'h842EF406E44EEC26;
      13'b0111001101101:
        casez_tmp = 64'h99384AAACDFC0EF;
      13'b0111001101110:
        casez_tmp = 64'h2781074927830640;
      13'b0111001101111:
        casez_tmp = 64'hB638FE10AA0000F;
      13'b0111001110000:
        casez_tmp = 64'hAB1FC0EF852600F4;
      13'b0111001110001:
        casez_tmp = 64'hC0EF450500A9EE63;
      13'b0111001110010:
        casez_tmp = 64'h70A24501B7C5B27F;
      13'b0111001110011:
        casez_tmp = 64'h69A2694264E27402;
      13'b0111001110100:
        casez_tmp = 64'hF920051380826145;
      13'b0111001110101:
        casez_tmp = 64'hF822FC067139B7FD;
      13'b0111001110110:
        casez_tmp = 64'hE852EC4EF04AF426;
      13'b0111001110111:
        casez_tmp = 64'h79088A2AE05AE456;
      13'b0111001111000:
        casez_tmp = 64'h8AB684B289AE843A;
      13'b0111001111001:
        casez_tmp = 64'h8552892A985FD0EF;
      13'b0111001111010:
        casez_tmp = 64'h147793971FD0EF;
      13'b0111001111011:
        casez_tmp = 64'h260345144118CBA9;
      13'b0111001111100:
        casez_tmp = 64'hE797B347850109;
      13'b0111001111101:
        casez_tmp = 64'hC7E7338A912781;
      13'b0111001111110:
        casez_tmp = 64'hF733FFF7C793C689;
      13'b0111001111111:
        casez_tmp = 64'h378300E9282300C7;
      13'b0111010000000:
        casez_tmp = 64'hCBD80550000F0009;
      13'b0111010000001:
        casez_tmp = 64'hF000937834118;
      13'b0111010000010:
        casez_tmp = 64'h3703451CCB980550;
      13'b0111010000011:
        casez_tmp = 64'h17B7938B910009;
      13'b0111010000100:
        casez_tmp = 64'h550000F0017979B;
      13'b0111010000101:
        casez_tmp = 64'h43BC00093783CF1C;
      13'b0111010000110:
        casez_tmp = 64'h7370AA0000F2781;
      13'b0111010000111:
        casez_tmp = 64'h27038FF9177DFFF1;
      13'b0111010001000:
        casez_tmp = 64'h8FD90107171B00C9;
      13'b0111010001001:
        casez_tmp = 64'h8B219BED27814518;
      13'b0111010001010:
        casez_tmp = 64'h47030047E793C319;
      13'b0111010001011:
        casez_tmp = 64'hD639BF1468901C9;
      13'b0111010001100:
        casez_tmp = 64'hD71563469102D7;
      13'b0111010001101:
        casez_tmp = 64'h9BDD27810027E793;
      13'b0111010001110:
        casez_tmp = 64'h87E793000A9563;
      13'b0111010001111:
        casez_tmp = 64'hF000937032781;
      13'b0111010010000:
        casez_tmp = 64'hC33C0FF00B130550;
      13'b0111010010001:
        casez_tmp = 64'h999630039D99B;
      13'b0111010010010:
        casez_tmp = 64'hA0C94501EC698809;
      13'b0111010010011:
        casez_tmp = 64'h2783BFC90017E793;
      13'b0111010010100:
        casez_tmp = 64'hF46300078A1B0089;
      13'b0111010010101:
        casez_tmp = 64'h478100098A1B00F9;
      13'b0111010010110:
        casez_tmp = 64'h9350303479D63;
      13'b0111010010111:
        casez_tmp = 64'hFFFA079B080A8C63;
      13'b0111010011000:
        casez_tmp = 64'h3503C97C0550000F;
      13'b0111010011001:
        casez_tmp = 64'hE8BFF0EF45890009;
      13'b0111010011010:
        casez_tmp = 64'h7871B4781E541;
      13'b0111010011011:
        casez_tmp = 64'h20A179305476E63;
      13'b0111010011100:
        casez_tmp = 64'h414989BB9ABE9381;
      13'b0111010011101:
        casez_tmp = 64'h93703E08DB755;
      13'b0111010011110:
        casez_tmp = 64'hAA0000F27014738;
      13'b0111010011111:
        casez_tmp = 64'h93703FE074AE3;
      13'b0111010100000:
        casez_tmp = 64'h56724230550000F;
      13'b0111010100001:
        casez_tmp = 64'h4C703B75D2785;
      13'b0111010100010:
        casez_tmp = 64'h9368300148613;
      13'b0111010100011:
        casez_tmp = 64'hAA0000F268146B4;
      13'b0111010100100:
        casez_tmp = 64'h93683FE06CAE3;
      13'b0111010100101:
        casez_tmp = 64'hC6B80550000F2701;
      13'b0111010100110:
        casez_tmp = 64'h93703BFD984B2;
      13'b0111010100111:
        casez_tmp = 64'hAA0000F27014778;
      13'b0111010101000:
        casez_tmp = 64'hFA86B3FE074AE3;
      13'b0111010101001:
        casez_tmp = 64'hB759078500E68023;
      13'b0111010101010:
        casez_tmp = 64'hD559E05FF0EF4585;
      13'b0111010101011:
        casez_tmp = 64'h790274A2744270E2;
      13'b0111010101100:
        casez_tmp = 64'h6B026AA26A4269E2;
      13'b0111010101101:
        casez_tmp = 64'h9378380826121;
      13'b0111010101110:
        casez_tmp = 64'h7AC230550000F;
      13'b0111010101111:
        casez_tmp = 64'hFC26E0A2715DBF31;
      13'b0111010110000:
        casez_tmp = 64'hF84AE486EC56F052;
      13'b0111010110001:
        casez_tmp = 64'h39830880E85AF44E;
      13'b0111010110010:
        casez_tmp = 64'hB5034A8584AE0005;
      13'b0111010110011:
        casez_tmp = 64'hD783FB2FD0EF0309;
      13'b0111010110100:
        casez_tmp = 64'hFAF40FA38A2A0044;
      13'b0111010110101:
        casez_tmp = 64'hC783EB810084C783;
      13'b0111010110110:
        casez_tmp = 64'h4A8D549CE7890184;
      13'b0111010110111:
        casez_tmp = 64'h14C7834A85C391;
      13'b0111010111000:
        casez_tmp = 64'hFA0E2346818756;
      13'b0111010111001:
        casez_tmp = 64'h854E45A1FBF40613;
      13'b0111010111010:
        casez_tmp = 64'h5963892ADDBFF0EF;
      13'b0111010111011:
        casez_tmp = 64'hB78300098E630205;
      13'b0111010111100:
        casez_tmp = 64'h638C0089B6030009;
      13'b0111010111101:
        casez_tmp = 64'h3B05051300002517;
      13'b0111010111110:
        casez_tmp = 64'h2617A855C4FFC0EF;
      13'b0111010111111:
        casez_tmp = 64'h25971DA606130000;
      13'b0111011000000:
        casez_tmp = 64'hB7CD1E2585930000;
      13'b0111011000001:
        casez_tmp = 64'h184C6030084C503;
      13'b0111011000010:
        casez_tmp = 64'hA607330005079B;
      13'b0111011000011:
        casez_tmp = 64'h1333F077713073D;
      13'b0111011000100:
        casez_tmp = 64'h8B0A00A6093B40E1;
      13'b0111011000101:
        casez_tmp = 64'h37FD0104B803CD2D;
      13'b0111011000110:
        casez_tmp = 64'h56E1870A0037979B;
      13'b0111011000111:
        casez_tmp = 64'hB7002300F855B3;
      13'b0111011001000:
        casez_tmp = 64'hFED79AE3070537E1;
      13'b0111011001001:
        casez_tmp = 64'h955A0FF00593C611;
      13'b0111011001010:
        casez_tmp = 64'hE391549CE81F80EF;
      13'b0111011001011:
        casez_tmp = 64'h159B0094C7834A8D;
      13'b0111011001100:
        casez_tmp = 64'hFA0E2387560039;
      13'b0111011001101:
        casez_tmp = 64'hF0EF854E865A4681;
      13'b0111011001110:
        casez_tmp = 64'h2055763892AD3DF;
      13'b0111011001111:
        casez_tmp = 64'h9B78300098C63;
      13'b0111011010000:
        casez_tmp = 64'h2517638C0089B603;
      13'b0111011010001:
        casez_tmp = 64'hB78D332505130000;
      13'b0111011010010:
        casez_tmp = 64'h1406061300002617;
      13'b0111011010011:
        casez_tmp = 64'h1485859300002597;
      13'b0111011010100:
        casez_tmp = 64'h4901EF99549CB7DD;
      13'b0111011010101:
        casez_tmp = 64'h854A60A6FB040113;
      13'b0111011010110:
        casez_tmp = 64'h79A2794274E26406;
      13'b0111011010111:
        casez_tmp = 64'h61616B426AE27A02;
      13'b0111011011000:
        casez_tmp = 64'h7894478550D88082;
      13'b0111011011001:
        casez_tmp = 64'h863600F704634601;
      13'b0111011011010:
        casez_tmp = 64'h47090204C7834681;
      13'b0111011011011:
        casez_tmp = 64'h548C00FA0E23854E;
      13'b0111011011100:
        casez_tmp = 64'hCC7FF0EF0035959B;
      13'b0111011011101:
        casez_tmp = 64'h98C63DD55892A;
      13'b0111011011110:
        casez_tmp = 64'h89B6030009B783;
      13'b0111011011111:
        casez_tmp = 64'h51300002517638C;
      13'b0111011100000:
        casez_tmp = 64'h2617B5FD2E65;
      13'b0111011100001:
        casez_tmp = 64'h25970CC60613;
      13'b0111011100010:
        casez_tmp = 64'h1141B7DD0D458593;
      13'b0111011100011:
        casez_tmp = 64'h611CE38FD0EFE406;
      13'b0111011100100:
        casez_tmp = 64'h60A25529E3914501;
      13'b0111011100101:
        casez_tmp = 64'hE0A2715D80820141;
      13'b0111011100110:
        casez_tmp = 64'hF84AFC26842AE486;
      13'b0111011100111:
        casez_tmp = 64'hC263685CE1AFD0EF;
      13'b0111011101000:
        casez_tmp = 64'h84AA008109130407;
      13'b0111011101001:
        casez_tmp = 64'hD0EF85224581864A;
      13'b0111011101010:
        casez_tmp = 64'hD0EF854AED11A46F;
      13'b0111011101011:
        casez_tmp = 64'h2A7F26377FDA54F;
      13'b0111011101100:
        casez_tmp = 64'h74E2640660A62501;
      13'b0111011101101:
        casez_tmp = 64'h6848808261617942;
      13'b0111011101110:
        casez_tmp = 64'h8593000025974601;
      13'b0111011101111:
        casez_tmp = 64'h2501F46FE0EFDCE5;
      13'b0111011110000:
        casez_tmp = 64'h611CBFF94501E088;
      13'b0111011110001:
        casez_tmp = 64'h1141CF81639C77BC;
      13'b0111011110010:
        casez_tmp = 64'h9782842EE406E022;
      13'b0111011110011:
        casez_tmp = 64'h4501640260A2E008;
      13'b0111011110100:
        casez_tmp = 64'hFDA0051380820141;
      13'b0111011110101:
        casez_tmp = 64'hD0EFE40611418082;
      13'b0111011110110:
        casez_tmp = 64'h141610860A2DA4F;
      13'b0111011110111:
        casez_tmp = 64'hE022E40611418082;
      13'b0111011111000:
        casez_tmp = 64'hE385611CD92FD0EF;
      13'b0111011111001:
        casez_tmp = 64'hE51121E000EF842A;
      13'b0111011111010:
        casez_tmp = 64'h141640260A25535;
      13'b0111011111011:
        casez_tmp = 64'hD96DD66FD0EF8082;
      13'b0111011111100:
        casez_tmp = 64'h4501E01C01C56783;
      13'b0111011111101:
        casez_tmp = 64'hF022F4067179B7ED;
      13'b0111011111110:
        casez_tmp = 64'hE4020D01B703EC26;
      13'b0111011111111:
        casez_tmp = 64'h55550A81B783EB1D;
      13'b0111100000000:
        casez_tmp = 64'h51300002517CFB1;
      13'b0111100000001:
        casez_tmp = 64'h842A829FE0EF21E5;
      13'b0111100000010:
        casez_tmp = 64'hE79967A202055163;
      13'b0111100000011:
        casez_tmp = 64'hE0EF07700513002C;
      13'b0111100000100:
        casez_tmp = 64'h553567A2ED0DB0CF;
      13'b0111100000101:
        casez_tmp = 64'h45010CF1B823CB95;
      13'b0111100000110:
        casez_tmp = 64'h862685AA0024A035;
      13'b0111100000111:
        casez_tmp = 64'hA64FE0EF07700513;
      13'b0111100001000:
        casez_tmp = 64'h4701D99FD0EFD971;
      13'b0111100001001:
        casez_tmp = 64'hD0EF85A286264681;
      13'b0111100001010:
        casez_tmp = 64'hD0EF6522F169B4DF;
      13'b0111100001011:
        casez_tmp = 64'h740270A2DD4DE3AF;
      13'b0111100001100:
        casez_tmp = 64'h11418082614564E2;
      13'b0111100001101:
        casez_tmp = 64'h611CCE2FD0EFE406;
      13'b0111100001110:
        casez_tmp = 64'hAA0000F25014F88;
      13'b0111100001111:
        casez_tmp = 64'h1419101150260A2;
      13'b0111100010000:
        casez_tmp = 64'hD0EFE40611418082;
      13'b0111100010001:
        casez_tmp = 64'h550000F611CCC6F;
      13'b0111100010010:
        casez_tmp = 64'hF611C0607A023;
      13'b0111100010011:
        casez_tmp = 64'h611C0607A2230550;
      13'b0111100010100:
        casez_tmp = 64'h607A4230550000F;
      13'b0111100010101:
        casez_tmp = 64'hA0230550000F611C;
      13'b0111100010110:
        casez_tmp = 64'h550000F611C0007;
      13'b0111100010111:
        casez_tmp = 64'hF611C0007A223;
      13'b0111100011000:
        casez_tmp = 64'h611C0007A4230550;
      13'b0111100011001:
        casez_tmp = 64'hC7D847410550000F;
      13'b0111100011010:
        casez_tmp = 64'h80820141450160A2;
      13'b0111100011011:
        casez_tmp = 64'hE426E822EC061101;
      13'b0111100011100:
        casez_tmp = 64'h842AC6AFD0EF84AA;
      13'b0111100011101:
        casez_tmp = 64'hE0088C5FD0EF8526;
      13'b0111100011110:
        casez_tmp = 64'h450100A7E36377FD;
      13'b0111100011111:
        casez_tmp = 64'h250164A2644260E2;
      13'b0111100100000:
        casez_tmp = 64'hE406114180826105;
      13'b0111100100001:
        casez_tmp = 64'h259746016948;
      13'b0111100100010:
        casez_tmp = 64'hF3AFE0EF12C58593;
      13'b0111100100011:
        casez_tmp = 64'h14160A25535C111;
      13'b0111100100100:
        casez_tmp = 64'hE822EC0611018082;
      13'b0111100100101:
        casez_tmp = 64'hC20FD0EF84AAE426;
      13'b0111100100110:
        casez_tmp = 64'hC5EFD0EF8526842A;
      13'b0111100100111:
        casez_tmp = 64'hAA0000F6008942A;
      13'b0111100101000:
        casez_tmp = 64'h610564A2644260E2;
      13'b0111100101001:
        casez_tmp = 64'hE022E40611418082;
      13'b0111100101010:
        casez_tmp = 64'h85AA879FD0EF842A;
      13'b0111100101011:
        casez_tmp = 64'h8522C44FD0EF8522;
      13'b0111100101100:
        casez_tmp = 64'h8522C519BECFD0EF;
      13'b0111100101101:
        casez_tmp = 64'hF06F014160A26402;
      13'b0111100101110:
        casez_tmp = 64'h5529640260A2E4DF;
      13'b0111100101111:
        casez_tmp = 64'h8082450180820141;
      13'b0111100110000:
        casez_tmp = 64'h513000025177179;
      13'b0111100110001:
        casez_tmp = 64'hE62FE0EFF4061365;
      13'b0111100110010:
        casez_tmp = 64'hC0634501E42A86AA;
      13'b0111100110011:
        casez_tmp = 64'h66A2C41FD0EF0206;
      13'b0111100110100:
        casez_tmp = 64'h613000026170838;
      13'b0111100110101:
        casez_tmp = 64'h85930000259711E6;
      13'b0111100110110:
        casez_tmp = 64'h70A29A7FD0EF11E5;
      13'b0111100110111:
        casez_tmp = 64'hE06F457D80826145;
      13'b0111100111000:
        casez_tmp = 64'h739C77BC611CA66F;
      13'b0111100111001:
        casez_tmp = 64'h9782E4061141CF81;
      13'b0111100111010:
        casez_tmp = 64'hFDA00793E1194785;
      13'b0111100111011:
        casez_tmp = 64'h80820141853E60A2;
      13'b0111100111100:
        casez_tmp = 64'h8082853EFDA00793;
      13'b0111100111101:
        casez_tmp = 64'h85A60024EC267179;
      13'b0111100111110:
        casez_tmp = 64'hE0EFF022F406457D;
      13'b0111100111111:
        casez_tmp = 64'h85A6EC0164228CEF;
      13'b0111101000000:
        casez_tmp = 64'hCD01928FE0EF457D;
      13'b0111101000001:
        casez_tmp = 64'h64E27402852270A2;
      13'b0111101000010:
        casez_tmp = 64'hF0EF852280826145;
      13'b0111101000011:
        casez_tmp = 64'h642200A05463FADF;
      13'b0111101000100:
        casez_tmp = 64'h8BEFE0EF8526B7E5;
      13'b0111101000101:
        casez_tmp = 64'hFC06F8227139BFC9;
      13'b0111101000110:
        casez_tmp = 64'hE852EC4EF04AF426;
      13'b0111101000111:
        casez_tmp = 64'hD81B503791CE456;
      13'b0111101001000:
        casez_tmp = 64'hA0EF0907A583547D;
      13'b0111101001001:
        casez_tmp = 64'h41B00054463D09F;
      13'b0111101001010:
        casez_tmp = 64'h1A1759FD44810005;
      13'b0111101001011:
        casez_tmp = 64'h2A976AAA0A130000;
      13'b0111101001100:
        casez_tmp = 64'h1C63072A8A930000;
      13'b0111101001101:
        casez_tmp = 64'h7902744270E20134;
      13'b0111101001110:
        casez_tmp = 64'h85266AA26A4269E2;
      13'b0111101001111:
        casez_tmp = 64'hB5038082612174A2;
      13'b0111101010000:
        casez_tmp = 64'h85CA0004091B0D81;
      13'b0111101010001:
        casez_tmp = 64'h85D2C919E07FB0EF;
      13'b0111101010010:
        casez_tmp = 64'hC511C72FE0EF8522;
      13'b0111101010011:
        casez_tmp = 64'hE111A40FC0EF85D6;
      13'b0111101010100:
        casez_tmp = 64'h85CA0D81B5032485;
      13'b0111101010101:
        casez_tmp = 64'h5041BCC7FA0EF;
      13'b0111101010110:
        casez_tmp = 64'hBF45547DFA055BE3;
      13'b0111101010111:
        casez_tmp = 64'h810913F84A715D;
      13'b0111101011000:
        casez_tmp = 64'h4581842E864AE0A2;
      13'b0111101011001:
        casez_tmp = 64'hC0EF84AAE486FC26;
      13'b0111101011010:
        casez_tmp = 64'hC0EF854AED01EC7F;
      13'b0111101011011:
        casez_tmp = 64'hE36377FD2501ED5F;
      13'b0111101011100:
        casez_tmp = 64'hC0EF854AE00800A7;
      13'b0111101011101:
        casez_tmp = 64'h68C8EB89601CEB3F;
      13'b0111101011110:
        casez_tmp = 64'h8593000025978622;
      13'b0111101011111:
        casez_tmp = 64'h68C8BBEFE0EFA4E5;
      13'b0111101100000:
        casez_tmp = 64'hFD85859300002597;
      13'b0111101100001:
        casez_tmp = 64'h641CC509BFCFE0EF;
      13'b0111101100010:
        casez_tmp = 64'h68C8E41C0027E793;
      13'b0111101100011:
        casez_tmp = 64'h859300002597860A;
      13'b0111101100100:
        casez_tmp = 64'hED01B96FE0EFFCE5;
      13'b0111101100101:
        casez_tmp = 64'hE41C0017E793641C;
      13'b0111101100110:
        casez_tmp = 64'h794274E2640660A6;
      13'b0111101100111:
        casez_tmp = 64'h68C8808261614501;
      13'b0111101101000:
        casez_tmp = 64'h8593000025970050;
      13'b0111101101001:
        casez_tmp = 64'hDD69B6EFE0EFFB65;
      13'b0111101101010:
        casez_tmp = 64'hF022F4067179B7C5;
      13'b0111101101011:
        casez_tmp = 64'h2597842E6948EC26;
      13'b0111101101100:
        casez_tmp = 64'h84B2FAA585930000;
      13'b0111101101101:
        casez_tmp = 64'hC0EFE42AB9CFE0EF;
      13'b0111101101110:
        casez_tmp = 64'hA4EC6305059C4F;
      13'b0111101101111:
        casez_tmp = 64'h94CFC0EF852265A2;
      13'b0111101110000:
        casez_tmp = 64'h64E2740270A24501;
      13'b0111101110001:
        casez_tmp = 64'hBFD5551180826145;
      13'b0111101110010:
        casez_tmp = 64'h86260024FC26715D;
      13'b0111101110011:
        casez_tmp = 64'hC0EFE0A2E4864581;
      13'b0111101110100:
        casez_tmp = 64'h60A64401C901DF7F;
      13'b0111101110101:
        casez_tmp = 64'h616174E264068522;
      13'b0111101110110:
        casez_tmp = 64'h82EFD0EF85268082;
      13'b0111101110111:
        casez_tmp = 64'hDDDFC0EF8526842A;
      13'b0111101111000:
        casez_tmp = 64'hFEF400E3FDA00793;
      13'b0111101111001:
        casez_tmp = 64'hFCF41DE3DF400793;
      13'b0111101111010:
        casez_tmp = 64'hF022F4067179BFD1;
      13'b0111101111011:
        casez_tmp = 64'h964FD0EF84AAEC26;
      13'b0111101111100:
        casez_tmp = 64'hDCAFD0EF8526842A;
      13'b0111101111101:
        casez_tmp = 64'h1C4061368C8C008;
      13'b0111101111110:
        casez_tmp = 64'hF285859300002597;
      13'b0111101111111:
        casez_tmp = 64'h6622ABEFE0EFE432;
      13'b0111110000000:
        casez_tmp = 64'h2597789CC909;
      13'b0111110000001:
        casez_tmp = 64'hE0EF6BC8F1458593;
      13'b0111110000010:
        casez_tmp = 64'h1581B7834018AAAF;
      13'b0111110000011:
        casez_tmp = 64'hC7854C5C02F71763;
      13'b0111110000100:
        casez_tmp = 64'hF105051300002517;
      13'b0111110000101:
        casez_tmp = 64'hCD0185AADAAFD0EF;
      13'b0111110000110:
        casez_tmp = 64'h577D478101C46683;
      13'b0111110000111:
        casez_tmp = 64'hEF86061300002617;
      13'b0111110001000:
        casez_tmp = 64'h70A2D08FD0EF8526;
      13'b0111110001001:
        casez_tmp = 64'h6145450164E27402;
      13'b0111110001010:
        casez_tmp = 64'h8082;
      13'b0111110001011:
        casez_tmp = 64'hDEADBEEFDEADBEEF;
      13'b0111110001100:
        casez_tmp = 64'hDEADBEEFDEADBEEF;
      13'b0111110001101:
        casez_tmp = 64'hDEADBEEF;
      13'b0111110001110:
        casez_tmp = 64'h646E69665F746966;
      13'b0111110001111:
        casez_tmp = 64'h5F6769666E6F635F;
      13'b0111110010000:
        casez_tmp = 64'h65646F6E;
      13'b0111110010001:
        casez_tmp = 64'h64616F6C5F6C7073;
      13'b0111110010010:
        casez_tmp = 64'h616D695F7469665F;
      13'b0111110010011:
        casez_tmp = 64'h6567;
      13'b0111110010100:
        casez_tmp = 64'h64616F6C5F6C7073;
      13'b0111110010101:
        casez_tmp = 64'h5F656C706D69735F;
      13'b0111110010110:
        casez_tmp = 64'h746966;
      13'b0111110010111:
        casez_tmp = 64'h6F6365725F746466;
      13'b0111110011000:
        casez_tmp = 64'h6164616F6C5F6472;
      13'b0111110011001:
        casez_tmp = 64'h656C62;
      13'b0111110011010:
        casez_tmp = 64'h646E69665F746466;
      13'b0111110011011:
        casez_tmp = 64'h5F6464615F726F5F;
      13'b0111110011100:
        casez_tmp = 64'h65646F6E627573;
      13'b0111110011101:
        casez_tmp = 64'h808080808080808;
      13'b0111110011110:
        casez_tmp = 64'h808282828282808;
      13'b0111110011111:
        casez_tmp = 64'h808080808080808;
      13'b0111110100000:
        casez_tmp = 64'h808080808080808;
      13'b0111110100001:
        casez_tmp = 64'h10101010101010A0;
      13'b0111110100010:
        casez_tmp = 64'h1010101010101010;
      13'b0111110100011:
        casez_tmp = 64'h404040404040404;
      13'b0111110100100:
        casez_tmp = 64'h1010101010100404;
      13'b0111110100101:
        casez_tmp = 64'h141414141414110;
      13'b0111110100110:
        casez_tmp = 64'h101010101010101;
      13'b0111110100111:
        casez_tmp = 64'h101010101010101;
      13'b0111110101000:
        casez_tmp = 64'h1010101010010101;
      13'b0111110101001:
        casez_tmp = 64'h242424242424210;
      13'b0111110101010:
        casez_tmp = 64'h202020202020202;
      13'b0111110101011:
        casez_tmp = 64'h202020202020202;
      13'b0111110101100:
        casez_tmp = 64'h810101010020202;
      13'b0111110101101:
        casez_tmp = 64'h0;
      13'b0111110101110:
        casez_tmp = 64'h0;
      13'b0111110101111:
        casez_tmp = 64'h0;
      13'b0111110110000:
        casez_tmp = 64'h0;
      13'b0111110110001:
        casez_tmp = 64'h10101010101010A0;
      13'b0111110110010:
        casez_tmp = 64'h1010101010101010;
      13'b0111110110011:
        casez_tmp = 64'h1010101010101010;
      13'b0111110110100:
        casez_tmp = 64'h1010101010101010;
      13'b0111110110101:
        casez_tmp = 64'h101010101010101;
      13'b0111110110110:
        casez_tmp = 64'h101010101010101;
      13'b0111110110111:
        casez_tmp = 64'h1001010101010101;
      13'b0111110111000:
        casez_tmp = 64'h201010101010101;
      13'b0111110111001:
        casez_tmp = 64'h202020202020202;
      13'b0111110111010:
        casez_tmp = 64'h202020202020202;
      13'b0111110111011:
        casez_tmp = 64'h1002020202020202;
      13'b0111110111100:
        casez_tmp = 64'h202020202020202;
      13'b0111110111101:
        casez_tmp = 64'h1010100010101;
      13'b0111110111110:
        casez_tmp = 64'hBCBB3C3B0C0B1303;
      13'b0111110111111:
        casez_tmp = 64'hECEB6C6B;
      13'b0111111000000:
        casez_tmp = 64'h300000013409D;
      13'b0111111000001:
        casez_tmp = 64'h100000800010000;
      13'b0111111000010:
        casez_tmp = 64'h6100000000;
      13'b0111111000011:
        casez_tmp = 64'h300000014609D;
      13'b0111111000100:
        casez_tmp = 64'h100001000010000;
      13'b0111111000101:
        casez_tmp = 64'h4000000000;
      13'b0111111000110:
        casez_tmp = 64'h300000015609D;
      13'b0111111000111:
        casez_tmp = 64'h100002000010000;
      13'b0111111001000:
        casez_tmp = 64'h4000000000;
      13'b0111111001001:
        casez_tmp = 64'h300000016609D;
      13'b0111111001010:
        casez_tmp = 64'h100004000010000;
      13'b0111111001011:
        casez_tmp = 64'h0;
      13'b0111111001100:
        casez_tmp = 64'h300000017609D;
      13'b0111111001101:
        casez_tmp = 64'h100008000010000;
      13'b0111111001110:
        casez_tmp = 64'h0;
      13'b0111111001111:
        casez_tmp = 64'h300000018609D;
      13'b0111111010000:
        casez_tmp = 64'h100010000010000;
      13'b0111111010001:
        casez_tmp = 64'h2100000000;
      13'b0111111010010:
        casez_tmp = 64'h300000019609D;
      13'b0111111010011:
        casez_tmp = 64'h100020000010000;
      13'b0111111010100:
        casez_tmp = 64'h2100000000;
      13'b0111111010101:
        casez_tmp = 64'h30000001A609D;
      13'b0111111010110:
        casez_tmp = 64'h100040000010000;
      13'b0111111010111:
        casez_tmp = 64'h6100000000;
      13'b0111111011000:
        casez_tmp = 64'h30000001B609D;
      13'b0111111011001:
        casez_tmp = 64'h100080000010000;
      13'b0111111011010:
        casez_tmp = 64'h6100000000;
      13'b0111111011011:
        casez_tmp = 64'h300000014709D;
      13'b0111111011100:
        casez_tmp = 64'h100001000010000;
      13'b0111111011101:
        casez_tmp = 64'h4000000000;
      13'b0111111011110:
        casez_tmp = 64'h300000015709D;
      13'b0111111011111:
        casez_tmp = 64'h100002000010000;
      13'b0111111100000:
        casez_tmp = 64'h4000000000;
      13'b0111111100001:
        casez_tmp = 64'h300000016709D;
      13'b0111111100010:
        casez_tmp = 64'h100004000010000;
      13'b0111111100011:
        casez_tmp = 64'h6100000000;
      13'b0111111100100:
        casez_tmp = 64'h300000017709D;
      13'b0111111100101:
        casez_tmp = 64'h100008000010000;
      13'b0111111100110:
        casez_tmp = 64'h6100000000;
      13'b0111111100111:
        casez_tmp = 64'h300000018709D;
      13'b0111111101000:
        casez_tmp = 64'h100010000010000;
      13'b0111111101001:
        casez_tmp = 64'h6100000000;
      13'b0111111101010:
        casez_tmp = 64'h300000019709D;
      13'b0111111101011:
        casez_tmp = 64'h100020000010000;
      13'b0111111101100:
        casez_tmp = 64'h86100000000;
      13'b0111111101101:
        casez_tmp = 64'h30000001A709D;
      13'b0111111101110:
        casez_tmp = 64'h100040000010000;
      13'b0111111101111:
        casez_tmp = 64'h6100000000;
      13'b0111111110000:
        casez_tmp = 64'h30000001B709D;
      13'b0111111110001:
        casez_tmp = 64'h100080000010000;
      13'b0111111110010:
        casez_tmp = 64'h6100000000;
      13'b0111111110011:
        casez_tmp = 64'h3000000195B9D;
      13'b0111111110100:
        casez_tmp = 64'h100010000020000;
      13'b0111111110101:
        casez_tmp = 64'h1088100000000;
      13'b0111111110110:
        casez_tmp = 64'h0;
      13'b0111111110111:
        casez_tmp = 64'h0;
      13'b0111111111000:
        casez_tmp = 64'h0;
      13'b0111111111001:
        casez_tmp = 64'h63615F7663736972;
      13'b0111111111010:
        casez_tmp = 64'h6977735F746E696C;
      13'b0111111111011:
        casez_tmp = 64'h0;
      13'b0111111111100:
        casez_tmp = 64'h63612C7663736972;
      13'b0111111111101:
        casez_tmp = 64'h77736D2D746E696C;
      13'b0111111111110:
        casez_tmp = 64'h69;
      13'b0111111111111:
        casez_tmp = 64'h20;
      13'b1000000000000:
        casez_tmp = 64'h656C646E61686E55;
      13'b1000000000001:
        casez_tmp = 64'h7470656378652064;
      13'b1000000000010:
        casez_tmp = 64'hA7325203A6E6F69;
      13'b1000000000011:
        casez_tmp = 64'h0;
      13'b1000000000100:
        casez_tmp = 64'h656C646E61686E55;
      13'b1000000000101:
        casez_tmp = 64'h7470656378652064;
      13'b1000000000110:
        casez_tmp = 64'h65646F63206E6F69;
      13'b1000000000111:
        casez_tmp = 64'hA646C25203A;
      13'b1000000001000:
        casez_tmp = 64'h313025203A435045;
      13'b1000000001001:
        casez_tmp = 64'h203A415220786C36;
      13'b1000000001010:
        casez_tmp = 64'h5420786C36313025;
      13'b1000000001011:
        casez_tmp = 64'h313025203A4C4156;
      13'b1000000001100:
        casez_tmp = 64'hA786C36;
      13'b1000000001101:
        casez_tmp = 64'h313025203A435045;
      13'b1000000001110:
        casez_tmp = 64'h203A415220786C36;
      13'b1000000001111:
        casez_tmp = 64'h7220786C36313025;
      13'b1000000010000:
        casez_tmp = 64'h6A646120636F6C65;
      13'b1000000010001:
        casez_tmp = 64'hA6465747375;
      13'b1000000010010:
        casez_tmp = 64'h203A65646F430A;
      13'b1000000010011:
        casez_tmp = 64'h2078343025;
      13'b1000000010100:
        casez_tmp = 64'h28;
      13'b1000000010101:
        casez_tmp = 64'h732578343025;
      13'b1000000010110:
        casez_tmp = 64'h7463757274736E49;
      13'b1000000010111:
        casez_tmp = 64'h72646461206E6F69;
      13'b1000000011000:
        casez_tmp = 64'h6173696D20737365;
      13'b1000000011001:
        casez_tmp = 64'h64656E67696C;
      13'b1000000011010:
        casez_tmp = 64'h7463757274736E49;
      13'b1000000011011:
        casez_tmp = 64'h65636361206E6F69;
      13'b1000000011100:
        casez_tmp = 64'h746C756166207373;
      13'b1000000011101:
        casez_tmp = 64'h0;
      13'b1000000011110:
        casez_tmp = 64'h206C6167656C6C49;
      13'b1000000011111:
        casez_tmp = 64'h7463757274736E69;
      13'b1000000100000:
        casez_tmp = 64'h6E6F69;
      13'b1000000100001:
        casez_tmp = 64'h696F706B61657242;
      13'b1000000100010:
        casez_tmp = 64'h746E;
      13'b1000000100011:
        casez_tmp = 64'h6464612064616F4C;
      13'b1000000100100:
        casez_tmp = 64'h73696D2073736572;
      13'b1000000100101:
        casez_tmp = 64'h64656E67696C61;
      13'b1000000100110:
        casez_tmp = 64'h6363612064616F4C;
      13'b1000000100111:
        casez_tmp = 64'h6C75616620737365;
      13'b1000000101000:
        casez_tmp = 64'h74;
      13'b1000000101001:
        casez_tmp = 64'h4D412F65726F7453;
      13'b1000000101010:
        casez_tmp = 64'h736572646461204F;
      13'b1000000101011:
        casez_tmp = 64'h696C6173696D2073;
      13'b1000000101100:
        casez_tmp = 64'h64656E67;
      13'b1000000101101:
        casez_tmp = 64'h4D412F65726F7453;
      13'b1000000101110:
        casez_tmp = 64'h737365636361204F;
      13'b1000000101111:
        casez_tmp = 64'h746C75616620;
      13'b1000000110000:
        casez_tmp = 64'h6D6E6F7269766E45;
      13'b1000000110001:
        casez_tmp = 64'h6C6C616320746E65;
      13'b1000000110010:
        casez_tmp = 64'h2D55206D6F726620;
      13'b1000000110011:
        casez_tmp = 64'h65646F6D;
      13'b1000000110100:
        casez_tmp = 64'h6D6E6F7269766E45;
      13'b1000000110101:
        casez_tmp = 64'h6C6C616320746E65;
      13'b1000000110110:
        casez_tmp = 64'h2D53206D6F726620;
      13'b1000000110111:
        casez_tmp = 64'h65646F6D;
      13'b1000000111000:
        casez_tmp = 64'h6465767265736552;
      13'b1000000111001:
        casez_tmp = 64'h0;
      13'b1000000111010:
        casez_tmp = 64'h6D6E6F7269766E45;
      13'b1000000111011:
        casez_tmp = 64'h6C6C616320746E65;
      13'b1000000111100:
        casez_tmp = 64'h2D4D206D6F726620;
      13'b1000000111101:
        casez_tmp = 64'h65646F6D;
      13'b1000000111110:
        casez_tmp = 64'h7463757274736E49;
      13'b1000000111111:
        casez_tmp = 64'h65676170206E6F69;
      13'b1000001000000:
        casez_tmp = 64'h746C75616620;
      13'b1000001000001:
        casez_tmp = 64'h6761702064616F4C;
      13'b1000001000010:
        casez_tmp = 64'h746C7561662065;
      13'b1000001000011:
        casez_tmp = 64'h4D412F65726F7453;
      13'b1000001000100:
        casez_tmp = 64'h662065676170204F;
      13'b1000001000101:
        casez_tmp = 64'h746C7561;
      13'b1000001000110:
        casez_tmp = 64'h6E69747465736572;
      13'b1000001000111:
        casez_tmp = 64'hA2E2E2E2067;
      13'b1000001001000:
        casez_tmp = 64'h6F6E207465736572;
      13'b1000001001001:
        casez_tmp = 64'h726F707075732074;
      13'b1000001001010:
        casez_tmp = 64'hA74657920646574;
      13'b1000001001011:
        casez_tmp = 64'h0;
      13'b1000001001100:
        casez_tmp = 64'h6C7261655F6C7073;
      13'b1000001001101:
        casez_tmp = 64'h292874696E695F79;
      13'b1000001001110:
        casez_tmp = 64'h3A64656C69616620;
      13'b1000001001111:
        casez_tmp = 64'hA642520;
      13'b1000001010000:
        casez_tmp = 64'h72616F625F6C7073;
      13'b1000001010001:
        casez_tmp = 64'h665F74696E695F64;
      13'b1000001010010:
        casez_tmp = 64'h656C696166202928;
      13'b1000001010011:
        casez_tmp = 64'hA6425203A64;
      13'b1000001010100:
        casez_tmp = 64'h746F6F422D55;
      13'b1000001010101:
        casez_tmp = 64'h7420676E69797254;
      13'b1000001010110:
        casez_tmp = 64'h6620746F6F62206F;
      13'b1000001010111:
        casez_tmp = 64'hA7325206D6F72;
      13'b1000001011000:
        casez_tmp = 64'h736E55203A4C5053;
      13'b1000001011001:
        casez_tmp = 64'h646574726F707075;
      13'b1000001011010:
        casez_tmp = 64'h654420746F6F4220;
      13'b1000001011011:
        casez_tmp = 64'hA2165636976;
      13'b1000001011100:
        casez_tmp = 64'h696166203A4C5053;
      13'b1000001011101:
        casez_tmp = 64'h62206F742064656C;
      13'b1000001011110:
        casez_tmp = 64'h6D6F726620746F6F;
      13'b1000001011111:
        casez_tmp = 64'h6F6F62206C6C6120;
      13'b1000001100000:
        casez_tmp = 64'h6563697665642074;
      13'b1000001100001:
        casez_tmp = 64'hA73;
      13'b1000001100010:
        casez_tmp = 64'h6620746F6E6E6163;
      13'b1000001100011:
        casez_tmp = 64'h67616D6920646E69;
      13'b1000001100100:
        casez_tmp = 64'h272065646F6E2065;
      13'b1000001100101:
        casez_tmp = 64'hA6425203A277325;
      13'b1000001100110:
        casez_tmp = 64'h0;
      13'b1000001100111:
        casez_tmp = 64'h6F6C2074276E6143;
      13'b1000001101000:
        casez_tmp = 64'h4E203A7325206461;
      13'b1000001101001:
        casez_tmp = 64'h612064616F6C206F;
      13'b1000001101010:
        casez_tmp = 64'h6120737365726464;
      13'b1000001101011:
        casez_tmp = 64'h7562206F6E20646E;
      13'b1000001101100:
        casez_tmp = 64'hA72656666;
      13'b1000001101101:
        casez_tmp = 64'h70696B53203A7325;
      13'b1000001101110:
        casez_tmp = 64'h25272064616F6C20;
      13'b1000001101111:
        casez_tmp = 64'h67616D69203A2773;
      13'b1000001110000:
        casez_tmp = 64'h6920657A69732065;
      13'b1000001110001:
        casez_tmp = 64'hA21302073;
      13'b1000001110010:
        casez_tmp = 64'h6720746F6E6E6143;
      13'b1000001110011:
        casez_tmp = 64'h6567616D69207465;
      13'b1000001110100:
        casez_tmp = 64'h69732F6174616420;
      13'b1000001110101:
        casez_tmp = 64'hA657A;
      13'b1000001110110:
        casez_tmp = 64'h746466;
      13'b1000001110111:
        casez_tmp = 64'h6F6E20646C756F43;
      13'b1000001111000:
        casez_tmp = 64'h4946207465672074;
      13'b1000001111001:
        casez_tmp = 64'h7265666675622054;
      13'b1000001111010:
        casez_tmp = 64'h20756C2520666F20;
      13'b1000001111011:
        casez_tmp = 64'hA7365747962;
      13'b1000001111100:
        casez_tmp = 64'h43206B6365686309;
      13'b1000001111101:
        casez_tmp = 64'h59535F4749464E4F;
      13'b1000001111110:
        casez_tmp = 64'h414D5F4C50535F53;
      13'b1000001111111:
        casez_tmp = 64'h5A49535F434F4C4C;
      13'b1000010000000:
        casez_tmp = 64'hA45;
      13'b1000010000001:
        casez_tmp = 64'h736567616D692F;
      13'b1000010000010:
        casez_tmp = 64'h657261776D726966;
      13'b1000010000011:
        casez_tmp = 64'h0;
      13'b1000010000100:
        casez_tmp = 64'h656C626164616F6C;
      13'b1000010000101:
        casez_tmp = 64'h73;
      13'b1000010000110:
        casez_tmp = 64'h276E6163203A7325;
      13'b1000010000111:
        casez_tmp = 64'h692064616F6C2074;
      13'b1000010001000:
        casez_tmp = 64'h616F6C206567616D;
      13'b1000010001001:
        casez_tmp = 64'h692073656C626164;
      13'b1000010001010:
        casez_tmp = 64'h206425207865646E;
      13'b1000010001011:
        casez_tmp = 64'h25203D2074657228;
      13'b1000010001100:
        casez_tmp = 64'hA2964;
      13'b1000010001101:
        casez_tmp = 64'h65707974;
      13'b1000010001110:
        casez_tmp = 64'h736F;
      13'b1000010001111:
        casez_tmp = 64'h68637261;
      13'b1000010010000:
        casez_tmp = 64'h6369766564206F4E;
      13'b1000010010001:
        casez_tmp = 64'h7320656572742065;
      13'b1000010010010:
        casez_tmp = 64'h6465696669636570;
      13'b1000010010011:
        casez_tmp = 64'h204C5053206E6920;
      13'b1000010010100:
        casez_tmp = 64'hA6567616D69;
      13'b1000010010101:
        casez_tmp = 64'h616D692D7469662F;
      13'b1000010010110:
        casez_tmp = 64'h736567;
      13'b1000010010111:
        casez_tmp = 64'h69662074276E6143;
      13'b1000010011000:
        casez_tmp = 64'h6F6F422D5520646E;
      13'b1000010011001:
        casez_tmp = 64'h202C65646F6E2074;
      13'b1000010011010:
        casez_tmp = 64'hA6425;
      13'b1000010011011:
        casez_tmp = 64'h626F727020495053;
      13'b1000010011100:
        casez_tmp = 64'h64656C6961662065;
      13'b1000010011101:
        casez_tmp = 64'hA2E;
      13'b1000010011110:
        casez_tmp = 64'h732C746F6F622D75;
      13'b1000010011111:
        casez_tmp = 64'h6F6C7961702D6C70;
      13'b1000010100000:
        casez_tmp = 64'h657366666F2D6461;
      13'b1000010100001:
        casez_tmp = 64'h74;
      13'b1000010100010:
        casez_tmp = 64'h495053;
      13'b1000010100011:
        casez_tmp = 64'h6365746968637261;
      13'b1000010100100:
        casez_tmp = 64'h65727574;
      13'b1000010100101:
        casez_tmp = 64'h73736572706D6F63;
      13'b1000010100110:
        casez_tmp = 64'h6E6F69;
      13'b1000010100111:
        casez_tmp = 64'h6E6974617265706F;
      13'b1000010101000:
        casez_tmp = 64'h6D65747379732067;
      13'b1000010101001:
        casez_tmp = 64'h0;
      13'b1000010101010:
        casez_tmp = 64'h7974206567616D69;
      13'b1000010101011:
        casez_tmp = 64'h6570;
      13'b1000010101100:
        casez_tmp = 64'h6573616870;
      13'b1000010101101:
        casez_tmp = 64'h3270697A62;
      13'b1000010101110:
        casez_tmp = 64'h70697A67;
      13'b1000010101111:
        casez_tmp = 64'h616D7A6C;
      13'b1000010110000:
        casez_tmp = 64'h6F7A6C;
      13'b1000010110001:
        casez_tmp = 64'h347A6C;
      13'b1000010110010:
        casez_tmp = 64'h6474737A;
      13'b1000010110011:
        casez_tmp = 64'h656E6F6E;
      13'b1000010110100:
        casez_tmp = 64'h796E61;
      13'b1000010110101:
        casez_tmp = 64'h746F6F622D75;
      13'b1000010110110:
        casez_tmp = 64'h7020746F6F422D55;
      13'b1000010110111:
        casez_tmp = 64'h65736168;
      13'b1000010111000:
        casez_tmp = 64'h6C7073;
      13'b1000010111001:
        casez_tmp = 64'h73616850204C5053;
      13'b1000010111010:
        casez_tmp = 64'h65;
      13'b1000010111011:
        casez_tmp = 64'h6572706D6F636E75;
      13'b1000010111100:
        casez_tmp = 64'h64657373;
      13'b1000010111101:
        casez_tmp = 64'h6F63203270697A62;
      13'b1000010111110:
        casez_tmp = 64'h646573736572706D;
      13'b1000010111111:
        casez_tmp = 64'h0;
      13'b1000011000000:
        casez_tmp = 64'h6D6F632070697A67;
      13'b1000011000001:
        casez_tmp = 64'h64657373657270;
      13'b1000011000010:
        casez_tmp = 64'h6D6F6320616D7A6C;
      13'b1000011000011:
        casez_tmp = 64'h64657373657270;
      13'b1000011000100:
        casez_tmp = 64'h706D6F63206F7A6C;
      13'b1000011000101:
        casez_tmp = 64'h646573736572;
      13'b1000011000110:
        casez_tmp = 64'h706D6F6320347A6C;
      13'b1000011000111:
        casez_tmp = 64'h646573736572;
      13'b1000011001000:
        casez_tmp = 64'h6D6F63206474737A;
      13'b1000011001001:
        casez_tmp = 64'h64657373657270;
      13'b1000011001010:
        casez_tmp = 64'h6567616D69736961;
      13'b1000011001011:
        casez_tmp = 64'h0;
      13'b1000011001100:
        casez_tmp = 64'h2069636E69766144;
      13'b1000011001101:
        casez_tmp = 64'h67616D6920534941;
      13'b1000011001110:
        casez_tmp = 64'h65;
      13'b1000011001111:
        casez_tmp = 64'h74737973656C6966;
      13'b1000011010000:
        casez_tmp = 64'h6D65;
      13'b1000011010001:
        casez_tmp = 64'h74737973656C6946;
      13'b1000011010010:
        casez_tmp = 64'h6567616D49206D65;
      13'b1000011010011:
        casez_tmp = 64'h0;
      13'b1000011010100:
        casez_tmp = 64'h657261776D726946;
      13'b1000011010101:
        casez_tmp = 64'h0;
      13'b1000011010110:
        casez_tmp = 64'h74645F74616C66;
      13'b1000011010111:
        casez_tmp = 64'h7665442074616C46;
      13'b1000011011000:
        casez_tmp = 64'h6565725420656369;
      13'b1000011011001:
        casez_tmp = 64'h0;
      13'b1000011011010:
        casez_tmp = 64'h6567616D697067;
      13'b1000011011011:
        casez_tmp = 64'h747379654B204954;
      13'b1000011011100:
        casez_tmp = 64'h204C505320656E6F;
      13'b1000011011101:
        casez_tmp = 64'h6567616D49;
      13'b1000011011110:
        casez_tmp = 64'h6C656E72656B;
      13'b1000011011111:
        casez_tmp = 64'h49206C656E72654B;
      13'b1000011100000:
        casez_tmp = 64'h6567616D;
      13'b1000011100001:
        casez_tmp = 64'h6E5F6C656E72656B;
      13'b1000011100010:
        casez_tmp = 64'h64616F6C6F;
      13'b1000011100011:
        casez_tmp = 64'h49206C656E72654B;
      13'b1000011100100:
        casez_tmp = 64'h6F6E28206567616D;
      13'b1000011100101:
        casez_tmp = 64'h676E6964616F6C20;
      13'b1000011100110:
        casez_tmp = 64'h29656E6F6420;
      13'b1000011100111:
        casez_tmp = 64'h6567616D6962776B;
      13'b1000011101000:
        casez_tmp = 64'h0;
      13'b1000011101001:
        casez_tmp = 64'h646F6F776B72694B;
      13'b1000011101010:
        casez_tmp = 64'h6D4920746F6F4220;
      13'b1000011101011:
        casez_tmp = 64'h656761;
      13'b1000011101100:
        casez_tmp = 64'h6567616D69786D69;
      13'b1000011101101:
        casez_tmp = 64'h0;
      13'b1000011101110:
        casez_tmp = 64'h6C61637365657246;
      13'b1000011101111:
        casez_tmp = 64'h4220584D2E692065;
      13'b1000011110000:
        casez_tmp = 64'h67616D4920746F6F;
      13'b1000011110001:
        casez_tmp = 64'h65;
      13'b1000011110010:
        casez_tmp = 64'h67616D6938786D69;
      13'b1000011110011:
        casez_tmp = 64'h65;
      13'b1000011110100:
        casez_tmp = 64'h584D2E692050584E;
      13'b1000011110101:
        casez_tmp = 64'h4920746F6F422038;
      13'b1000011110110:
        casez_tmp = 64'h6567616D;
      13'b1000011110111:
        casez_tmp = 64'h616D696D38786D69;
      13'b1000011111000:
        casez_tmp = 64'h6567;
      13'b1000011111001:
        casez_tmp = 64'h584D2E692050584E;
      13'b1000011111010:
        casez_tmp = 64'h20746F6F42204D38;
      13'b1000011111011:
        casez_tmp = 64'h6567616D49;
      13'b1000011111100:
        casez_tmp = 64'h64696C61766E69;
      13'b1000011111101:
        casez_tmp = 64'h2064696C61766E49;
      13'b1000011111110:
        casez_tmp = 64'h6567616D49;
      13'b1000011111111:
        casez_tmp = 64'h69746C756D;
      13'b1000100000000:
        casez_tmp = 64'h69462D69746C754D;
      13'b1000100000001:
        casez_tmp = 64'h6567616D4920656C;
      13'b1000100000010:
        casez_tmp = 64'h0;
      13'b1000100000011:
        casez_tmp = 64'h67616D6970616D6F;
      13'b1000100000100:
        casez_tmp = 64'h65;
      13'b1000100000101:
        casez_tmp = 64'h2050414D4F204954;
      13'b1000100000110:
        casez_tmp = 64'h68746957204C5053;
      13'b1000100000111:
        casez_tmp = 64'h484320504720;
      13'b1000100001000:
        casez_tmp = 64'h6567616D696C6270;
      13'b1000100001001:
        casez_tmp = 64'h0;
      13'b1000100001010:
        casez_tmp = 64'h6C61637365657246;
      13'b1000100001011:
        casez_tmp = 64'h6F42204C42502065;
      13'b1000100001100:
        casez_tmp = 64'h6567616D4920746F;
      13'b1000100001101:
        casez_tmp = 64'h0;
      13'b1000100001110:
        casez_tmp = 64'h6B7369646D6172;
      13'b1000100001111:
        casez_tmp = 64'h206B7369444D4152;
      13'b1000100010000:
        casez_tmp = 64'h6567616D49;
      13'b1000100010001:
        casez_tmp = 64'h747069726373;
      13'b1000100010010:
        casez_tmp = 64'h747069726353;
      13'b1000100010011:
        casez_tmp = 64'h6961677066636F73;
      13'b1000100010100:
        casez_tmp = 64'h6567616D;
      13'b1000100010101:
        casez_tmp = 64'h5320617265746C41;
      13'b1000100010110:
        casez_tmp = 64'h432041475046436F;
      13'b1000100010111:
        casez_tmp = 64'h6572702056412F56;
      13'b1000100011000:
        casez_tmp = 64'h726564616F6C;
      13'b1000100011001:
        casez_tmp = 64'h6961677066636F73;
      13'b1000100011010:
        casez_tmp = 64'h31765F6567616D;
      13'b1000100011011:
        casez_tmp = 64'h5320617265746C41;
      13'b1000100011100:
        casez_tmp = 64'h412041475046436F;
      13'b1000100011101:
        casez_tmp = 64'h6F6C657270203031;
      13'b1000100011110:
        casez_tmp = 64'h72656461;
      13'b1000100011111:
        casez_tmp = 64'h6F6C61646E617473;
      13'b1000100100000:
        casez_tmp = 64'h656E;
      13'b1000100100001:
        casez_tmp = 64'h6F6C61646E617453;
      13'b1000100100010:
        casez_tmp = 64'h72676F725020656E;
      13'b1000100100011:
        casez_tmp = 64'h6D61;
      13'b1000100100100:
        casez_tmp = 64'h6567616D696C6275;
      13'b1000100100101:
        casez_tmp = 64'h0;
      13'b1000100100110:
        casez_tmp = 64'h2069636E69766144;
      13'b1000100100111:
        casez_tmp = 64'h67616D69204C4255;
      13'b1000100101000:
        casez_tmp = 64'h65;
      13'b1000100101001:
        casez_tmp = 64'h6567616D6973786D;
      13'b1000100101010:
        casez_tmp = 64'h0;
      13'b1000100101011:
        casez_tmp = 64'h6C61637365657246;
      13'b1000100101100:
        casez_tmp = 64'h6F422053584D2065;
      13'b1000100101101:
        casez_tmp = 64'h6567616D4920746F;
      13'b1000100101110:
        casez_tmp = 64'h0;
      13'b1000100101111:
        casez_tmp = 64'h616D696C656D7461;
      13'b1000100110000:
        casez_tmp = 64'h6567;
      13'b1000100110001:
        casez_tmp = 64'h4F52204C454D5441;
      13'b1000100110010:
        casez_tmp = 64'h4920746F6F422D4D;
      13'b1000100110011:
        casez_tmp = 64'h6567616D;
      13'b1000100110100:
        casez_tmp = 64'h757465735F363878;
      13'b1000100110101:
        casez_tmp = 64'h70;
      13'b1000100110110:
        casez_tmp = 64'h7574657320363878;
      13'b1000100110111:
        casez_tmp = 64'h6E69622E70;
      13'b1000100111000:
        casez_tmp = 64'h697878323363706C;
      13'b1000100111001:
        casez_tmp = 64'h6567616D;
      13'b1000100111010:
        casez_tmp = 64'h205858323343504C;
      13'b1000100111011:
        casez_tmp = 64'h616D4920746F6F42;
      13'b1000100111100:
        casez_tmp = 64'h6567;
      13'b1000100111101:
        casez_tmp = 64'h6567616D696B72;
      13'b1000100111110:
        casez_tmp = 64'h706968636B636F52;
      13'b1000100111111:
        casez_tmp = 64'h6D4920746F6F4220;
      13'b1000101000000:
        casez_tmp = 64'h656761;
      13'b1000101000001:
        casez_tmp = 64'h64736B72;
      13'b1000101000010:
        casez_tmp = 64'h706968636B636F52;
      13'b1000101000011:
        casez_tmp = 64'h746F6F4220445320;
      13'b1000101000100:
        casez_tmp = 64'h6567616D4920;
      13'b1000101000101:
        casez_tmp = 64'h6970736B72;
      13'b1000101000110:
        casez_tmp = 64'h706968636B636F52;
      13'b1000101000111:
        casez_tmp = 64'h6F6F422049505320;
      13'b1000101001000:
        casez_tmp = 64'h6567616D492074;
      13'b1000101001001:
        casez_tmp = 64'h6D69646972627976;
      13'b1000101001010:
        casez_tmp = 64'h656761;
      13'b1000101001011:
        casez_tmp = 64'h4220646972627956;
      13'b1000101001100:
        casez_tmp = 64'h67616D4920746F6F;
      13'b1000101001101:
        casez_tmp = 64'h65;
      13'b1000101001110:
        casez_tmp = 64'h67616D69716E797A;
      13'b1000101001111:
        casez_tmp = 64'h65;
      13'b1000101010000:
        casez_tmp = 64'h5A20786E696C6958;
      13'b1000101010001:
        casez_tmp = 64'h746F6F4220716E79;
      13'b1000101010010:
        casez_tmp = 64'h6567616D4920;
      13'b1000101010011:
        casez_tmp = 64'h6D69706D716E797A;
      13'b1000101010100:
        casez_tmp = 64'h656761;
      13'b1000101010101:
        casez_tmp = 64'h5A20786E696C6958;
      13'b1000101010110:
        casez_tmp = 64'h6F4220504D716E79;
      13'b1000101010111:
        casez_tmp = 64'h6567616D4920746F;
      13'b1000101011000:
        casez_tmp = 64'h0;
      13'b1000101011001:
        casez_tmp = 64'h6962706D716E797A;
      13'b1000101011010:
        casez_tmp = 64'h66;
      13'b1000101011011:
        casez_tmp = 64'h5A20786E696C6958;
      13'b1000101011100:
        casez_tmp = 64'h6F4220504D716E79;
      13'b1000101011101:
        casez_tmp = 64'h6567616D4920746F;
      13'b1000101011110:
        casez_tmp = 64'h296669622820;
      13'b1000101011111:
        casez_tmp = 64'h61677066;
      13'b1000101100000:
        casez_tmp = 64'h616D492041475046;
      13'b1000101100001:
        casez_tmp = 64'h6567;
      13'b1000101100010:
        casez_tmp = 64'h656574;
      13'b1000101100011:
        casez_tmp = 64'h2064657473757254;
      13'b1000101100100:
        casez_tmp = 64'h6F69747563657845;
      13'b1000101100101:
        casez_tmp = 64'h6F7269766E45206E;
      13'b1000101100110:
        casez_tmp = 64'h6D4920746E656D6E;
      13'b1000101100111:
        casez_tmp = 64'h656761;
      13'b1000101101000:
        casez_tmp = 64'h657261776D726966;
      13'b1000101101001:
        casez_tmp = 64'h7476695F;
      13'b1000101101010:
        casez_tmp = 64'h657261776D726946;
      13'b1000101101011:
        casez_tmp = 64'h4148206874697720;
      13'b1000101101100:
        casez_tmp = 64'h54564920347642;
      13'b1000101101101:
        casez_tmp = 64'h636D6D70;
      13'b1000101101110:
        casez_tmp = 64'h7265776F50204954;
      13'b1000101101111:
        casez_tmp = 64'h6D6567616E614D20;
      13'b1000101110000:
        casez_tmp = 64'h7263694D20746E65;
      13'b1000101110001:
        casez_tmp = 64'h6F72746E6F432D6F;
      13'b1000101110010:
        casez_tmp = 64'h7269462072656C6C;
      13'b1000101110011:
        casez_tmp = 64'h657261776D;
      13'b1000101110100:
        casez_tmp = 64'h616D6932336D7473;
      13'b1000101110101:
        casez_tmp = 64'h6567;
      13'b1000101110110:
        casez_tmp = 64'h656F7263694D5453;
      13'b1000101110111:
        casez_tmp = 64'h696E6F727463656C;
      13'b1000101111000:
        casez_tmp = 64'h32334D5453207363;
      13'b1000101111001:
        casez_tmp = 64'h6567616D4920;
      13'b1000101111010:
        casez_tmp = 64'h67616D695F6B746D;
      13'b1000101111011:
        casez_tmp = 64'h65;
      13'b1000101111100:
        casez_tmp = 64'h6B6554616964654D;
      13'b1000101111101:
        casez_tmp = 64'h4D4F52746F6F4220;
      13'b1000101111110:
        casez_tmp = 64'h6C626164616F6C20;
      13'b1000101111111:
        casez_tmp = 64'h6567616D492065;
      13'b1000110000000:
        casez_tmp = 64'h6F72706F63;
      13'b1000110000001:
        casez_tmp = 64'h7365636F72706F43;
      13'b1000110000010:
        casez_tmp = 64'h67616D4920726F73;
      13'b1000110000011:
        casez_tmp = 64'h65;
      13'b1000110000100:
        casez_tmp = 64'h67655F69786E7573;
      13'b1000110000101:
        casez_tmp = 64'h6E6F;
      13'b1000110000110:
        casez_tmp = 64'h656E6E69776C6C41;
      13'b1000110000111:
        casez_tmp = 64'h42204E4F47652072;
      13'b1000110001000:
        casez_tmp = 64'h67616D4920746F6F;
      13'b1000110001001:
        casez_tmp = 64'h65;
      13'b1000110001010:
        casez_tmp = 64'h6F745F69786E7573;
      13'b1000110001011:
        casez_tmp = 64'h3063;
      13'b1000110001100:
        casez_tmp = 64'h656E6E69776C6C41;
      13'b1000110001101:
        casez_tmp = 64'h422030434F542072;
      13'b1000110001110:
        casez_tmp = 64'h67616D4920746F6F;
      13'b1000110001111:
        casez_tmp = 64'h65;
      13'b1000110010000:
        casez_tmp = 64'h6167656C5F746466;
      13'b1000110010001:
        casez_tmp = 64'h7963;
      13'b1000110010010:
        casez_tmp = 64'h492079636167656C;
      13'b1000110010011:
        casez_tmp = 64'h746977206567616D;
      13'b1000110010100:
        casez_tmp = 64'h442074616C462068;
      13'b1000110010101:
        casez_tmp = 64'h7254206563697665;
      13'b1000110010110:
        casez_tmp = 64'h206565;
      13'b1000110010111:
        casez_tmp = 64'h67616D69676B7073;
      13'b1000110011000:
        casez_tmp = 64'h65;
      13'b1000110011001:
        casez_tmp = 64'h20736173656E6552;
      13'b1000110011010:
        casez_tmp = 64'h616D4920474B5053;
      13'b1000110011011:
        casez_tmp = 64'h6567;
      13'b1000110011100:
        casez_tmp = 64'h2064696C61766E49;
      13'b1000110011101:
        casez_tmp = 64'h534F;
      13'b1000110011110:
        casez_tmp = 64'h737572742D6D7261;
      13'b1000110011111:
        casez_tmp = 64'h6D7269662D646574;
      13'b1000110100000:
        casez_tmp = 64'h65726177;
      13'b1000110100001:
        casez_tmp = 64'h73757254204D5241;
      13'b1000110100010:
        casez_tmp = 64'h6D72694620646574;
      13'b1000110100011:
        casez_tmp = 64'h65726177;
      13'b1000110100100:
        casez_tmp = 64'h78756E696C;
      13'b1000110100101:
        casez_tmp = 64'h78756E694C;
      13'b1000110100110:
        casez_tmp = 64'h64736274656E;
      13'b1000110100111:
        casez_tmp = 64'h44534274654E;
      13'b1000110101000:
        casez_tmp = 64'h65736F;
      13'b1000110101001:
        casez_tmp = 64'h45534F2061656E45;
      13'b1000110101010:
        casez_tmp = 64'h0;
      13'b1000110101011:
        casez_tmp = 64'h396E616C70;
      13'b1000110101100:
        casez_tmp = 64'h39206E616C50;
      13'b1000110101101:
        casez_tmp = 64'h736D657472;
      13'b1000110101110:
        casez_tmp = 64'h534D455452;
      13'b1000110101111:
        casez_tmp = 64'h2064657473757254;
      13'b1000110110000:
        casez_tmp = 64'h6F69747563657845;
      13'b1000110110001:
        casez_tmp = 64'h6F7269766E45206E;
      13'b1000110110010:
        casez_tmp = 64'h746E656D6E;
      13'b1000110110011:
        casez_tmp = 64'h736B726F777876;
      13'b1000110110100:
        casez_tmp = 64'h736B726F577856;
      13'b1000110110101:
        casez_tmp = 64'h786E71;
      13'b1000110110110:
        casez_tmp = 64'h584E51;
      13'b1000110110111:
        casez_tmp = 64'h6962736E65706F;
      13'b1000110111000:
        casez_tmp = 64'h4F20562D43534952;
      13'b1000110111001:
        casez_tmp = 64'h4942536E6570;
      13'b1000110111010:
        casez_tmp = 64'h696665;
      13'b1000110111011:
        casez_tmp = 64'h6D72694620494645;
      13'b1000110111100:
        casez_tmp = 64'h65726177;
      13'b1000110111101:
        casez_tmp = 64'h2064696C61766E49;
      13'b1000110111110:
        casez_tmp = 64'h48435241;
      13'b1000110111111:
        casez_tmp = 64'h6168706C61;
      13'b1000111000000:
        casez_tmp = 64'h6168706C41;
      13'b1000111000001:
        casez_tmp = 64'h6D7261;
      13'b1000111000010:
        casez_tmp = 64'h4D5241;
      13'b1000111000011:
        casez_tmp = 64'h363878;
      13'b1000111000100:
        casez_tmp = 64'h3878206C65746E49;
      13'b1000111000101:
        casez_tmp = 64'h36;
      13'b1000111000110:
        casez_tmp = 64'h34366169;
      13'b1000111000111:
        casez_tmp = 64'h34364149;
      13'b1000111001000:
        casez_tmp = 64'h6B38366D;
      13'b1000111001001:
        casez_tmp = 64'h4B38364D;
      13'b1000111001010:
        casez_tmp = 64'h616C626F7263696D;
      13'b1000111001011:
        casez_tmp = 64'h657A;
      13'b1000111001100:
        casez_tmp = 64'h616C426F7263694D;
      13'b1000111001101:
        casez_tmp = 64'h657A;
      13'b1000111001110:
        casez_tmp = 64'h7370696D;
      13'b1000111001111:
        casez_tmp = 64'h5350494D;
      13'b1000111010000:
        casez_tmp = 64'h34367370696D;
      13'b1000111010001:
        casez_tmp = 64'h203436205350494D;
      13'b1000111010010:
        casez_tmp = 64'h746942;
      13'b1000111010011:
        casez_tmp = 64'h32736F696E;
      13'b1000111010100:
        casez_tmp = 64'h494920534F494E;
      13'b1000111010101:
        casez_tmp = 64'h63707265776F70;
      13'b1000111010110:
        casez_tmp = 64'h43507265776F50;
      13'b1000111010111:
        casez_tmp = 64'h637070;
      13'b1000111011000:
        casez_tmp = 64'h30393373;
      13'b1000111011001:
        casez_tmp = 64'h30393353204D4249;
      13'b1000111011010:
        casez_tmp = 64'h0;
      13'b1000111011011:
        casez_tmp = 64'h6873;
      13'b1000111011100:
        casez_tmp = 64'h487265707553;
      13'b1000111011101:
        casez_tmp = 64'h6372617073;
      13'b1000111011110:
        casez_tmp = 64'h4352415053;
      13'b1000111011111:
        casez_tmp = 64'h34366372617073;
      13'b1000111100000:
        casez_tmp = 64'h3436204352415053;
      13'b1000111100001:
        casez_tmp = 64'h74694220;
      13'b1000111100010:
        casez_tmp = 64'h6E69666B63616C62;
      13'b1000111100011:
        casez_tmp = 64'h0;
      13'b1000111100100:
        casez_tmp = 64'h6E69666B63616C42;
      13'b1000111100101:
        casez_tmp = 64'h0;
      13'b1000111100110:
        casez_tmp = 64'h3233727661;
      13'b1000111100111:
        casez_tmp = 64'h3233525641;
      13'b1000111101000:
        casez_tmp = 64'h323373646E;
      13'b1000111101001:
        casez_tmp = 64'h323353444E;
      13'b1000111101010:
        casez_tmp = 64'h6B31726F;
      13'b1000111101011:
        casez_tmp = 64'h435349526E65704F;
      13'b1000111101100:
        casez_tmp = 64'h3030303120;
      13'b1000111101101:
        casez_tmp = 64'h786F62646E6173;
      13'b1000111101110:
        casez_tmp = 64'h786F62646E6153;
      13'b1000111101111:
        casez_tmp = 64'h34366D7261;
      13'b1000111110000:
        casez_tmp = 64'h34366863724141;
      13'b1000111110001:
        casez_tmp = 64'h637261;
      13'b1000111110010:
        casez_tmp = 64'h435241;
      13'b1000111110011:
        casez_tmp = 64'h34365F363878;
      13'b1000111110100:
        casez_tmp = 64'h5F36387820444D41;
      13'b1000111110101:
        casez_tmp = 64'h3436;
      13'b1000111110110:
        casez_tmp = 64'h61736E657478;
      13'b1000111110111:
        casez_tmp = 64'h61736E657458;
      13'b1000111111000:
        casez_tmp = 64'h7663736972;
      13'b1000111111001:
        casez_tmp = 64'h562D43534952;
      13'b1000111111010:
        casez_tmp = 64'h726F707075736E55;
      13'b1000111111011:
        casez_tmp = 64'h6120732520646574;
      13'b1000111111100:
        casez_tmp = 64'h7320737365726464;
      13'b1000111111101:
        casez_tmp = 64'hA657A69;
      13'b1000111111110:
        casez_tmp = 64'h64616F6C;
      13'b1000111111111:
        casez_tmp = 64'h7972746E65;
      13'b1001000000000:
        casez_tmp = 64'h61746164;
      13'b1001000000001:
        casez_tmp = 64'h66666F2D61746164;
      13'b1001000000010:
        casez_tmp = 64'h746573;
      13'b1001000000011:
        casez_tmp = 64'h736F702D61746164;
      13'b1001000000100:
        casez_tmp = 64'h6E6F697469;
      13'b1001000000101:
        casez_tmp = 64'h7A69732D61746164;
      13'b1001000000110:
        casez_tmp = 64'h65;
      13'b1001000000111:
        casez_tmp = 64'h756769666E6F632F;
      13'b1001000001000:
        casez_tmp = 64'h736E6F69746172;
      13'b1001000001001:
        casez_tmp = 64'h746C7561666564;
      13'b1001000001010:
        casez_tmp = 64'h7470697263736564;
      13'b1001000001011:
        casez_tmp = 64'h6E6F69;
      13'b1001000001100:
        casez_tmp = 64'h7373694D203A7325;
      13'b1001000001101:
        casez_tmp = 64'h2054444620676E69;
      13'b1001000001110:
        casez_tmp = 64'h7470697263736564;
      13'b1001000001111:
        casez_tmp = 64'h44206E69206E6F69;
      13'b1001000010000:
        casez_tmp = 64'hA4254;
      13'b1001000010001:
        casez_tmp = 64'h203A7325203A7325;
      13'b1001000010010:
        casez_tmp = 64'hA7325;
      13'b1001000010011:
        casez_tmp = 64'h206D756E203A7325;
      13'b1001000010100:
        casez_tmp = 64'h642520736B6E6162;
      13'b1001000010101:
        casez_tmp = 64'h7364656563786520;
      13'b1001000010110:
        casez_tmp = 64'h646F636472616820;
      13'b1001000010111:
        casez_tmp = 64'h74696D696C206465;
      13'b1001000011000:
        casez_tmp = 64'h636552202E642520;
      13'b1001000011001:
        casez_tmp = 64'h7720656C69706D6F;
      13'b1001000011010:
        casez_tmp = 64'h6867696820687469;
      13'b1001000011011:
        casez_tmp = 64'h524F4D454D207265;
      13'b1001000011100:
        casez_tmp = 64'h5F534B4E41425F59;
      13'b1001000011101:
        casez_tmp = 64'hA3F58414D;
      13'b1001000011110:
        casez_tmp = 64'hA7325203A7325;
      13'b1001000011111:
        casez_tmp = 64'h79726F6D656D;
      13'b1001000100000:
        casez_tmp = 64'h745F656369766564;
      13'b1001000100001:
        casez_tmp = 64'h657079;
      13'b1001000100010:
        casez_tmp = 64'h3A474E494E524157;
      13'b1001000100011:
        casez_tmp = 64'h6E20646C756F6320;
      13'b1001000100100:
        casez_tmp = 64'h252074657320746F;
      13'b1001000100101:
        casez_tmp = 64'hA2E73252073;
      13'b1001000100110:
        casez_tmp = 64'h676572;
      13'b1001000100111:
        casez_tmp = 64'h67616D692D746966;
      13'b1001000101000:
        casez_tmp = 64'h7365;
      13'b1001000101001:
        casez_tmp = 64'h707320636F6C6C61;
      13'b1001000101010:
        casez_tmp = 64'h6168786520656361;
      13'b1001000101011:
        casez_tmp = 64'hA6465747375;
      13'b1001000101100:
        casez_tmp = 64'h656C646E616870;
      13'b1001000101101:
        casez_tmp = 64'h68702C78756E696C;
      13'b1001000101110:
        casez_tmp = 64'h656C646E61;
      13'b1001000101111:
        casez_tmp = 64'h73657361696C612F;
      13'b1001000110000:
        casez_tmp = 64'h0;
      13'b1001000110001:
        casez_tmp = 64'h6F2064696C61763C;
      13'b1001000110010:
        casez_tmp = 64'h656C2F7465736666;
      13'b1001000110011:
        casez_tmp = 64'h3E6874676E;
      13'b1001000110100:
        casez_tmp = 64'h6F727265206F6E3C;
      13'b1001000110101:
        casez_tmp = 64'h3E72;
      13'b1001000110110:
        casez_tmp = 64'h6E776F6E6B6E753C;
      13'b1001000110111:
        casez_tmp = 64'h3E726F72726520;
      13'b1001000111000:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001000111001:
        casez_tmp = 64'h444E554F46544F4E;
      13'b1001000111010:
        casez_tmp = 64'h0;
      13'b1001000111011:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001000111100:
        casez_tmp = 64'h535453495845;
      13'b1001000111101:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001000111110:
        casez_tmp = 64'h45434150534F4E;
      13'b1001000111111:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001000000:
        casez_tmp = 64'h455346464F444142;
      13'b1001001000001:
        casez_tmp = 64'h54;
      13'b1001001000010:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001000011:
        casez_tmp = 64'h48544150444142;
      13'b1001001000100:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001000101:
        casez_tmp = 64'h444E414850444142;
      13'b1001001000110:
        casez_tmp = 64'h454C;
      13'b1001001000111:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001001000:
        casez_tmp = 64'h4554415453444142;
      13'b1001001001001:
        casez_tmp = 64'h0;
      13'b1001001001010:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001001011:
        casez_tmp = 64'h455441434E555254;
      13'b1001001001100:
        casez_tmp = 64'h44;
      13'b1001001001101:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001001110:
        casez_tmp = 64'h434947414D444142;
      13'b1001001001111:
        casez_tmp = 64'h0;
      13'b1001001010000:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001010001:
        casez_tmp = 64'h4953524556444142;
      13'b1001001010010:
        casez_tmp = 64'h4E4F;
      13'b1001001010011:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001010100:
        casez_tmp = 64'h4355525453444142;
      13'b1001001010101:
        casez_tmp = 64'h45525554;
      13'b1001001010110:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001010111:
        casez_tmp = 64'h554F59414C444142;
      13'b1001001011000:
        casez_tmp = 64'h54;
      13'b1001001011001:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001011010:
        casez_tmp = 64'h4C414E5245544E49;
      13'b1001001011011:
        casez_tmp = 64'h0;
      13'b1001001011100:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001011101:
        casez_tmp = 64'h4C4C45434E444142;
      13'b1001001011110:
        casez_tmp = 64'h53;
      13'b1001001011111:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001100000:
        casez_tmp = 64'h45554C4156444142;
      13'b1001001100001:
        casez_tmp = 64'h0;
      13'b1001001100010:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001100011:
        casez_tmp = 64'h4C5245564F444142;
      13'b1001001100100:
        casez_tmp = 64'h5941;
      13'b1001001100101:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001100110:
        casez_tmp = 64'h4C444E4148504F4E;
      13'b1001001100111:
        casez_tmp = 64'h5345;
      13'b1001001101000:
        casez_tmp = 64'h5F5252455F544446;
      13'b1001001101001:
        casez_tmp = 64'h5347414C46444142;
      13'b1001001101010:
        casez_tmp = 64'h0;
      13'b1001001101011:
        casez_tmp = 64'h7373657264646123;
      13'b1001001101100:
        casez_tmp = 64'h736C6C65632D;
      13'b1001001101101:
        casez_tmp = 64'h65632D657A697323;
      13'b1001001101110:
        casez_tmp = 64'h736C6C;
      13'b1001001101111:
        casez_tmp = 64'h20676E697373694D;
      13'b1001001110000:
        casez_tmp = 64'hA425444;
      13'b1001001110001:
        casez_tmp = 64'h737574617473;
      13'b1001001110010:
        casez_tmp = 64'h79616B6F;
      13'b1001001110011:
        casez_tmp = 64'h6E65736F68632F;
      13'b1001001110100:
        casez_tmp = 64'h4F52524520232323;
      13'b1001001110101:
        casez_tmp = 64'h6C50202323232052;
      13'b1001001110110:
        casez_tmp = 64'h5345522065736165;
      13'b1001001110111:
        casez_tmp = 64'h6220656874205445;
      13'b1001001111000:
        casez_tmp = 64'h232323206472616F;
      13'b1001001111001:
        casez_tmp = 64'hA;
      13'b1001001111010:
        casez_tmp = 64'h6F6E20646C756F43;
      13'b1001001111011:
        casez_tmp = 64'h616974696E692074;
      13'b1001001111100:
        casez_tmp = 64'h6D697420657A696C;
      13'b1001001111101:
        casez_tmp = 64'h2072726528207265;
      13'b1001001111110:
        casez_tmp = 64'hA296425;
      13'b1001001111111:
        casez_tmp = 64'h6F6E20646C756F43;
      13'b1001010000000:
        casez_tmp = 64'h6320646165722074;
      13'b1001010000001:
        casez_tmp = 64'h6F726620746E756F;
      13'b1001010000010:
        casez_tmp = 64'h2072656D6974206D;
      13'b1001010000011:
        casez_tmp = 64'h2964252072726528;
      13'b1001010000100:
        casez_tmp = 64'hA;
      13'b1001010000101:
        casez_tmp = 64'h64253A7325;
      13'b1001010000110:
        casez_tmp = 64'h747261705F6B6C62;
      13'b1001010000111:
        casez_tmp = 64'h6E6F697469;
      13'b1001010001000:
        casez_tmp = 64'h6F69746974726170;
      13'b1001010001001:
        casez_tmp = 64'h6E;
      13'b1001010001010:
        casez_tmp = 64'h544146;
      13'b1001010001011:
        casez_tmp = 64'h3233544146;
      13'b1001010001100:
        casez_tmp = 64'h534F44;
      13'b1001010001101:
        casez_tmp = 64'h494645;
      13'b1001010001110:
        casez_tmp = 64'h6B6C62;
      13'b1001010001111:
        casez_tmp = 64'h656469;
      13'b1001010010000:
        casez_tmp = 64'h69736373;
      13'b1001010010001:
        casez_tmp = 64'h627375;
      13'b1001010010010:
        casez_tmp = 64'h636D6D;
      13'b1001010010011:
        casez_tmp = 64'h61746173;
      13'b1001010010100:
        casez_tmp = 64'h74736F68;
      13'b1001010010101:
        casez_tmp = 64'h656D766E;
      13'b1001010010110:
        casez_tmp = 64'h7069786D766E;
      13'b1001010010111:
        casez_tmp = 64'h6564616F6C696665;
      13'b1001010011000:
        casez_tmp = 64'h72;
      13'b1001010011001:
        casez_tmp = 64'h6F6974726976;
      13'b1001010011010:
        casez_tmp = 64'h6B636F6C627670;
      13'b1001010011011:
        casez_tmp = 64'h70616D6B6C62;
      13'b1001010011100:
        casez_tmp = 64'h632D6B636F6C6323;
      13'b1001010011101:
        casez_tmp = 64'h736C6C65;
      13'b1001010011110:
        casez_tmp = 64'h736B636F6C63;
      13'b1001010011111:
        casez_tmp = 64'h64656E6769737361;
      13'b1001010100000:
        casez_tmp = 64'h702D6B636F6C632D;
      13'b1001010100001:
        casez_tmp = 64'h73746E657261;
      13'b1001010100010:
        casez_tmp = 64'h64656E6769737361;
      13'b1001010100011:
        casez_tmp = 64'h736B636F6C632D;
      13'b1001010100100:
        casez_tmp = 64'h64656E6769737361;
      13'b1001010100101:
        casez_tmp = 64'h722D6B636F6C632D;
      13'b1001010100110:
        casez_tmp = 64'h73657461;
      13'b1001010100111:
        casez_tmp = 64'h6B6C63;
      13'b1001010101000:
        casez_tmp = 64'h72662D6B636F6C63;
      13'b1001010101001:
        casez_tmp = 64'h79636E65757165;
      13'b1001010101010:
        casez_tmp = 64'h61725F6465786966;
      13'b1001010101011:
        casez_tmp = 64'h635F7761725F6574;
      13'b1001010101100:
        casez_tmp = 64'h6B636F6C;
      13'b1001010101101:
        casez_tmp = 64'h6C635F6465786966;
      13'b1001010101110:
        casez_tmp = 64'h6B636F;
      13'b1001010101111:
        casez_tmp = 64'h6C632D6465786966;
      13'b1001010110000:
        casez_tmp = 64'h6B636F;
      13'b1001010110001:
        casez_tmp = 64'h69642D6B636F6C63;
      13'b1001010110010:
        casez_tmp = 64'h76;
      13'b1001010110011:
        casez_tmp = 64'h756D2D6B636F6C63;
      13'b1001010110100:
        casez_tmp = 64'h746C;
      13'b1001010110101:
        casez_tmp = 64'h61665F6465786966;
      13'b1001010110110:
        casez_tmp = 64'h6F6C635F726F7463;
      13'b1001010110111:
        casez_tmp = 64'h6B63;
      13'b1001010111000:
        casez_tmp = 64'h61662D6465786966;
      13'b1001010111001:
        casez_tmp = 64'h6F6C632D726F7463;
      13'b1001010111010:
        casez_tmp = 64'h6B63;
      13'b1001010111011:
        casez_tmp = 64'h62697461706D6F63;
      13'b1001010111100:
        casez_tmp = 64'h656C;
      13'b1001010111101:
        casez_tmp = 64'h736B636F6C632F;
      13'b1001010111110:
        casez_tmp = 64'h7261776D7269662F;
      13'b1001010111111:
        casez_tmp = 64'h65;
      13'b1001011000000:
        casez_tmp = 64'h746F6F72;
      13'b1001011000001:
        casez_tmp = 64'h6972645F746F6F72;
      13'b1001011000010:
        casez_tmp = 64'h726576;
      13'b1001011000011:
        casez_tmp = 64'h706F6E;
      13'b1001011000100:
        casez_tmp = 64'h7365676E6172;
      13'b1001011000101:
        casez_tmp = 64'h625F656C706D6973;
      13'b1001011000110:
        casez_tmp = 64'h7375;
      13'b1001011000111:
        casez_tmp = 64'h622D656C706D6973;
      13'b1001011001000:
        casez_tmp = 64'h7375;
      13'b1001011001001:
        casez_tmp = 64'h6D2D656C706D6973;
      13'b1001011001010:
        casez_tmp = 64'h6466;
      13'b1001011001011:
        casez_tmp = 64'h652D656C7474696C;
      13'b1001011001100:
        casez_tmp = 64'h6E6169646E;
      13'b1001011001101:
        casez_tmp = 64'h69646E652D676962;
      13'b1001011001110:
        casez_tmp = 64'h6E61;
      13'b1001011001111:
        casez_tmp = 64'h652D65766974616E;
      13'b1001011010000:
        casez_tmp = 64'h6E6169646E;
      13'b1001011010001:
        casez_tmp = 64'h6E6F63737973;
      13'b1001011010010:
        casez_tmp = 64'h6769666E6F632F;
      13'b1001011010011:
        casez_tmp = 64'h73616C665F697073;
      13'b1001011010100:
        casez_tmp = 64'h68;
      13'b1001011010101:
        casez_tmp = 64'h70735F636564656A;
      13'b1001011010110:
        casez_tmp = 64'h726F6E5F69;
      13'b1001011010111:
        casez_tmp = 64'h6C696146203A4653;
      13'b1001011011000:
        casez_tmp = 64'h6573206F74206465;
      13'b1001011011001:
        casez_tmp = 64'h616C732070752074;
      13'b1001011011010:
        casez_tmp = 64'hA6576;
      13'b1001011011011:
        casez_tmp = 64'h70732C636564656A;
      13'b1001011011100:
        casez_tmp = 64'h726F6E2D69;
      13'b1001011011101:
        casez_tmp = 64'h302578323025202D;
      13'b1001011011110:
        casez_tmp = 64'h3025783230257832;
      13'b1001011011111:
        casez_tmp = 64'hA7832;
      13'b1001011100000:
        casez_tmp = 64'h73616C662D697073;
      13'b1001011100001:
        casez_tmp = 64'h68;
      13'b1001011100010:
        casez_tmp = 64'h676E696C62616E65;
      13'b1001011100011:
        casez_tmp = 64'h6820746573657220;
      13'b1001011100100:
        casez_tmp = 64'h79616D203B6B6361;
      13'b1001011100101:
        casez_tmp = 64'h63657220746F6E20;
      13'b1001011100110:
        casez_tmp = 64'h6F7266207265766F;
      13'b1001011100111:
        casez_tmp = 64'h657078656E75206D;
      13'b1001011101000:
        casez_tmp = 64'h6265722064657463;
      13'b1001011101001:
        casez_tmp = 64'hA73746F6F;
      13'b1001011101010:
        casez_tmp = 64'h702D74756F647473;
      13'b1001011101011:
        casez_tmp = 64'h687461;
      13'b1001011101100:
        casez_tmp = 64'h656C6F736E6F63;
      13'b1001011101101:
        casez_tmp = 64'h6169726573206F4E;
      13'b1001011101110:
        casez_tmp = 64'h726576697264206C;
      13'b1001011101111:
        casez_tmp = 64'h646E756F6620;
      13'b1001011110000:
        casez_tmp = 64'h6C6169726573;
      13'b1001011110001:
        casez_tmp = 64'h735F6C6169726573;
      13'b1001011110010:
        casez_tmp = 64'h6576696669;
      13'b1001011110011:
        casez_tmp = 64'h752C657669666973;
      13'b1001011110100:
        casez_tmp = 64'h30747261;
      13'b1001011110101:
        casez_tmp = 64'h43203A7325207325;
      13'b1001011110110:
        casez_tmp = 64'h657320746F6E6E61;
      13'b1001011110111:
        casez_tmp = 64'h2064656570732074;
      13'b1001011111000:
        casez_tmp = 64'h2964253D72726528;
      13'b1001011111001:
        casez_tmp = 64'hA;
      13'b1001011111010:
        casez_tmp = 64'h2065636976656475;
      13'b1001011111011:
        casez_tmp = 64'h292A;
      13'b1001011111100:
        casez_tmp = 64'h4C4C554E28;
      13'b1001011111101:
        casez_tmp = 64'h43203A7325207325;
      13'b1001011111110:
        casez_tmp = 64'h657320746F6E6E61;
      13'b1001011111111:
        casez_tmp = 64'h282065646F6D2074;
      13'b1001100000000:
        casez_tmp = 64'hA2964253D727265;
      13'b1001100000001:
        casez_tmp = 64'h0;
      13'b1001100000010:
        casez_tmp = 64'h2D78616D2D697073;
      13'b1001100000011:
        casez_tmp = 64'h636E657571657266;
      13'b1001100000100:
        casez_tmp = 64'h79;
      13'b1001100000101:
        casez_tmp = 64'h49203A7325207325;
      13'b1001100000110:
        casez_tmp = 64'h632064696C61766E;
      13'b1001100000111:
        casez_tmp = 64'h7265282064252073;
      13'b1001100001000:
        casez_tmp = 64'hA2964253D72;
      13'b1001100001001:
        casez_tmp = 64'h2064696C61766E49;
      13'b1001100001010:
        casez_tmp = 64'h2820642520737562;
      13'b1001100001011:
        casez_tmp = 64'hA2964253D727265;
      13'b1001100001100:
        casez_tmp = 64'h0;
      13'b1001100001101:
        casez_tmp = 64'h49203A7325207325;
      13'b1001100001110:
        casez_tmp = 64'h632064696C61766E;
      13'b1001100001111:
        casez_tmp = 64'h656C657320706968;
      13'b1001100010000:
        casez_tmp = 64'h64253A6425207463;
      13'b1001100010001:
        casez_tmp = 64'h64253D7272652820;
      13'b1001100010010:
        casez_tmp = 64'hA29;
      13'b1001100010011:
        casez_tmp = 64'h6C6F70632D697073;
      13'b1001100010100:
        casez_tmp = 64'h0;
      13'b1001100010101:
        casez_tmp = 64'h616870632D697073;
      13'b1001100010110:
        casez_tmp = 64'h0;
      13'b1001100010111:
        casez_tmp = 64'h682D73632D697073;
      13'b1001100011000:
        casez_tmp = 64'h686769;
      13'b1001100011001:
        casez_tmp = 64'h726977332D697073;
      13'b1001100011010:
        casez_tmp = 64'h65;
      13'b1001100011011:
        casez_tmp = 64'h666C61682D697073;
      13'b1001100011100:
        casez_tmp = 64'h78656C7075642D;
      13'b1001100011101:
        casez_tmp = 64'h622D78742D697073;
      13'b1001100011110:
        casez_tmp = 64'h68746469772D7375;
      13'b1001100011111:
        casez_tmp = 64'h0;
      13'b1001100100000:
        casez_tmp = 64'h622D78722D697073;
      13'b1001100100001:
        casez_tmp = 64'h68746469772D7375;
      13'b1001100100010:
        casez_tmp = 64'h0;
      13'b1001100100011:
        casez_tmp = 64'h656E65675F697073;
      13'b1001100100100:
        casez_tmp = 64'h7672645F636972;
      13'b1001100100101:
        casez_tmp = 64'h656E65675F697073;
      13'b1001100100110:
        casez_tmp = 64'h636972;
      13'b1001100100111:
        casez_tmp = 64'h697073;
      13'b1001100101000:
        casez_tmp = 64'h662C657669666973;
      13'b1001100101001:
        casez_tmp = 64'h747065642D6F6669;
      13'b1001100101010:
        casez_tmp = 64'h68;
      13'b1001100101011:
        casez_tmp = 64'h6D2C657669666973;
      13'b1001100101100:
        casez_tmp = 64'h2D737469622D7861;
      13'b1001100101101:
        casez_tmp = 64'h64726F772D726570;
      13'b1001100101110:
        casez_tmp = 64'h0;
      13'b1001100101111:
        casez_tmp = 64'h6F6E20646C756F43;
      13'b1001100110000:
        casez_tmp = 64'h70206F7475612074;
      13'b1001100110001:
        casez_tmp = 64'h2053432065626F72;
      13'b1001100110010:
        casez_tmp = 64'hA73656E696C;
      13'b1001100110011:
        casez_tmp = 64'h66203A7325207325;
      13'b1001100110100:
        casez_tmp = 64'h6F742064656C6961;
      13'b1001100110101:
        casez_tmp = 64'h706F207265667820;
      13'b1001100110110:
        casez_tmp = 64'hA65646F63;
      13'b1001100110111:
        casez_tmp = 64'h66203A7325207325;
      13'b1001100111000:
        casez_tmp = 64'h6F742064656C6961;
      13'b1001100111001:
        casez_tmp = 64'h6461207265667820;
      13'b1001100111010:
        casez_tmp = 64'h6D7564202B207264;
      13'b1001100111011:
        casez_tmp = 64'hA796D;
      13'b1001100111100:
        casez_tmp = 64'h66203A7325207325;
      13'b1001100111101:
        casez_tmp = 64'h6F742064656C6961;
      13'b1001100111110:
        casez_tmp = 64'h6164207265667820;
      13'b1001100111111:
        casez_tmp = 64'hA6174;
      13'b1001101000000:
        casez_tmp = 64'h735F657669666973;
      13'b1001101000001:
        casez_tmp = 64'h6970;
      13'b1001101000010:
        casez_tmp = 64'h732C657669666973;
      13'b1001101000011:
        casez_tmp = 64'h306970;
      13'b1001101000100:
        casez_tmp = 64'h6D69742D6B636974;
      13'b1001101000101:
        casez_tmp = 64'h7265;
      13'b1001101000110:
        casez_tmp = 64'h72656D6974;
      13'b1001101000111:
        casez_tmp = 64'h6C65632D6D777023;
      13'b1001101001000:
        casez_tmp = 64'h736C;
      13'b1001101001001:
        casez_tmp = 64'h5F65636E65646163;
      13'b1001101001010:
        casez_tmp = 64'h637474;
      13'b1001101001011:
        casez_tmp = 64'h6374742C736E6463;
      13'b1001101001100:
        casez_tmp = 64'h0;
      13'b1001101001101:
        casez_tmp = 64'h63615F7663736972;
      13'b1001101001110:
        casez_tmp = 64'h6D69745F746E696C;
      13'b1001101001111:
        casez_tmp = 64'h7265;
      13'b1001101010000:
        casez_tmp = 64'h6C632C7663736972;
      13'b1001101010001:
        casez_tmp = 64'h30746E69;
      13'b1001101010010:
        casez_tmp = 64'h632C657669666973;
      13'b1001101010011:
        casez_tmp = 64'h30746E696C;
      13'b1001101010100:
        casez_tmp = 64'h63612C7663736972;
      13'b1001101010101:
        casez_tmp = 64'h69746D2D746E696C;
      13'b1001101010110:
        casez_tmp = 64'h72656D;
      13'b1001101010111:
        casez_tmp = 64'h737570632F;
      13'b1001101011000:
        casez_tmp = 64'h73757063;
      13'b1001101011001:
        casez_tmp = 64'h7375625F757063;
      13'b1001101011010:
        casez_tmp = 64'h757063;
      13'b1001101011011:
        casez_tmp = 64'h657079742D756D6D;
      13'b1001101011100:
        casez_tmp = 64'h0;
      13'b1001101011101:
        casez_tmp = 64'h2D65686361632D69;
      13'b1001101011110:
        casez_tmp = 64'h657A6973;
      13'b1001101011111:
        casez_tmp = 64'h2D65686361632D64;
      13'b1001101100000:
        casez_tmp = 64'h657A6973;
      13'b1001101100001:
        casez_tmp = 64'h73692C7663736972;
      13'b1001101100010:
        casez_tmp = 64'h61;
      13'b1001101100011:
        casez_tmp = 64'h65736162656D6974;
      13'b1001101100100:
        casez_tmp = 64'h6E6575716572662D;
      13'b1001101100101:
        casez_tmp = 64'h7963;
      13'b1001101100110:
        casez_tmp = 64'h69745F7663736972;
      13'b1001101100111:
        casez_tmp = 64'h72656D;
      13'b1001101101000:
        casez_tmp = 64'h70635F7663736972;
      13'b1001101101001:
        casez_tmp = 64'hFFFF8AB200000075;
      13'b1001101101010:
        casez_tmp = 64'hFFFF8ADEFFFF8AC6;
      13'b1001101101011:
        casez_tmp = 64'hFFFF8B16FFFF8AC6;
      13'b1001101101100:
        casez_tmp = 64'hFFFF8B16FFFF8B16;
      13'b1001101101101:
        casez_tmp = 64'hFFFF8AC6FFFF8B16;
      13'b1001101101110:
        casez_tmp = 64'h100000000;
      13'b1001101101111:
        casez_tmp = 64'h850F8FE0;
      13'b1001101110000:
        casez_tmp = 64'h1;
      13'b1001101110001:
        casez_tmp = 64'h0;
      13'b1001101110010:
        casez_tmp = 64'h0;
      13'b1001101110011:
        casez_tmp = 64'h850F90B0;
      13'b1001101110100:
        casez_tmp = 64'h850F90D0;
      13'b1001101110101:
        casez_tmp = 64'h850F90F0;
      13'b1001101110110:
        casez_tmp = 64'h850F9108;
      13'b1001101110111:
        casez_tmp = 64'h850F9118;
      13'b1001101111000:
        casez_tmp = 64'h850F9130;
      13'b1001101111001:
        casez_tmp = 64'h850F9148;
      13'b1001101111010:
        casez_tmp = 64'h850F9168;
      13'b1001101111011:
        casez_tmp = 64'h850F9180;
      13'b1001101111100:
        casez_tmp = 64'h850F91A0;
      13'b1001101111101:
        casez_tmp = 64'h850F91C0;
      13'b1001101111110:
        casez_tmp = 64'h850F91D0;
      13'b1001101111111:
        casez_tmp = 64'h850F91F0;
      13'b1001110000000:
        casez_tmp = 64'h850F9208;
      13'b1001110000001:
        casez_tmp = 64'h850F91C0;
      13'b1001110000010:
        casez_tmp = 64'h850F9218;
      13'b1001110000011:
        casez_tmp = 64'h0;
      13'b1001110000100:
        casez_tmp = 64'h0;
      13'b1001110000101:
        casez_tmp = 64'h0;
      13'b1001110000110:
        casez_tmp = 64'h0;
      13'b1001110000111:
        casez_tmp = 64'h0;
      13'b1001110001000:
        casez_tmp = 64'h0;
      13'b1001110001001:
        casez_tmp = 64'h0;
      13'b1001110001010:
        casez_tmp = 64'h0;
      13'b1001110001011:
        casez_tmp = 64'h0;
      13'b1001110001100:
        casez_tmp = 64'h0;
      13'b1001110001101:
        casez_tmp = 64'h0;
      13'b1001110001110:
        casez_tmp = 64'h0;
      13'b1001110001111:
        casez_tmp = 64'h0;
      13'b1001110010000:
        casez_tmp = 64'h0;
      13'b1001110010001:
        casez_tmp = 64'h0;
      13'b1001110010010:
        casez_tmp = 64'h850F97E0;
      13'b1001110010011:
        casez_tmp = 64'h850F9CE0;
      13'b1001110010100:
        casez_tmp = 64'h19;
      13'b1001110010101:
        casez_tmp = 64'h850F9CF0;
      13'b1001110010110:
        casez_tmp = 64'h850F9D08;
      13'b1001110010111:
        casez_tmp = 64'h5;
      13'b1001110011000:
        casez_tmp = 64'h850F9D20;
      13'b1001110011001:
        casez_tmp = 64'h850F9D28;
      13'b1001110011010:
        casez_tmp = 64'h2;
      13'b1001110011011:
        casez_tmp = 64'h850F9D30;
      13'b1001110011100:
        casez_tmp = 64'h850F9D38;
      13'b1001110011101:
        casez_tmp = 64'h16;
      13'b1001110011110:
        casez_tmp = 64'h850F9D40;
      13'b1001110011111:
        casez_tmp = 64'h850F9D48;
      13'b1001110100000:
        casez_tmp = 64'h17;
      13'b1001110100001:
        casez_tmp = 64'h850F9D58;
      13'b1001110100010:
        casez_tmp = 64'h850F9D60;
      13'b1001110100011:
        casez_tmp = 64'h12;
      13'b1001110100100:
        casez_tmp = 64'h850F9D68;
      13'b1001110100101:
        casez_tmp = 64'h850F9D70;
      13'b1001110100110:
        casez_tmp = 64'h1A;
      13'b1001110100111:
        casez_tmp = 64'h850F9B10;
      13'b1001110101000:
        casez_tmp = 64'h850F9D78;
      13'b1001110101001:
        casez_tmp = 64'h11;
      13'b1001110101010:
        casez_tmp = 64'h850F95A8;
      13'b1001110101011:
        casez_tmp = 64'h850F92A0;
      13'b1001110101100:
        casez_tmp = 64'hE;
      13'b1001110101101:
        casez_tmp = 64'h850F9D98;
      13'b1001110101110:
        casez_tmp = 64'h850F9DA0;
      13'b1001110101111:
        casez_tmp = 64'h10;
      13'b1001110110000:
        casez_tmp = 64'h850F9DA8;
      13'b1001110110001:
        casez_tmp = 64'h850F9DB0;
      13'b1001110110010:
        casez_tmp = 64'h1B;
      13'b1001110110011:
        casez_tmp = 64'h850F9DB8;
      13'b1001110110100:
        casez_tmp = 64'h850F9DC0;
      13'b1001110110101:
        casez_tmp = 64'h1C;
      13'b1001110110110:
        casez_tmp = 64'h850F9DD0;
      13'b1001110110111:
        casez_tmp = 64'h850F9DD8;
      13'b1001110111000:
        casez_tmp = 64'hFFFFFFFF;
      13'b1001110111001:
        casez_tmp = 64'h850FA860;
      13'b1001110111010:
        casez_tmp = 64'h850FA860;
      13'b1001110111011:
        casez_tmp = 64'hFFFFFFFFFFFFFFFF;
      13'b1001110111100:
        casez_tmp = 64'h20000;
      13'b1001110111101:
        casez_tmp = 64'h0;
      13'b1001110111110:
        casez_tmp = 64'h0;
      13'b1001110111111:
        casez_tmp = 64'h850FADE8;
      13'b1001111000000:
        casez_tmp = 64'h850FADE8;
      13'b1001111000001:
        casez_tmp = 64'h850FADF8;
      13'b1001111000010:
        casez_tmp = 64'h850FADF8;
      13'b1001111000011:
        casez_tmp = 64'h850FAE08;
      13'b1001111000100:
        casez_tmp = 64'h850FAE08;
      13'b1001111000101:
        casez_tmp = 64'h850FAE18;
      13'b1001111000110:
        casez_tmp = 64'h850FAE18;
      13'b1001111000111:
        casez_tmp = 64'h850FAE28;
      13'b1001111001000:
        casez_tmp = 64'h850FAE28;
      13'b1001111001001:
        casez_tmp = 64'h850FAE38;
      13'b1001111001010:
        casez_tmp = 64'h850FAE38;
      13'b1001111001011:
        casez_tmp = 64'h850FAE48;
      13'b1001111001100:
        casez_tmp = 64'h850FAE48;
      13'b1001111001101:
        casez_tmp = 64'h850FAE58;
      13'b1001111001110:
        casez_tmp = 64'h850FAE58;
      13'b1001111001111:
        casez_tmp = 64'h850FAE68;
      13'b1001111010000:
        casez_tmp = 64'h850FAE68;
      13'b1001111010001:
        casez_tmp = 64'h850FAE78;
      13'b1001111010010:
        casez_tmp = 64'h850FAE78;
      13'b1001111010011:
        casez_tmp = 64'h850FAE88;
      13'b1001111010100:
        casez_tmp = 64'h850FAE88;
      13'b1001111010101:
        casez_tmp = 64'h850FAE98;
      13'b1001111010110:
        casez_tmp = 64'h850FAE98;
      13'b1001111010111:
        casez_tmp = 64'h850FAEA8;
      13'b1001111011000:
        casez_tmp = 64'h850FAEA8;
      13'b1001111011001:
        casez_tmp = 64'h850FAEB8;
      13'b1001111011010:
        casez_tmp = 64'h850FAEB8;
      13'b1001111011011:
        casez_tmp = 64'h850FAEC8;
      13'b1001111011100:
        casez_tmp = 64'h850FAEC8;
      13'b1001111011101:
        casez_tmp = 64'h850FAED8;
      13'b1001111011110:
        casez_tmp = 64'h850FAED8;
      13'b1001111011111:
        casez_tmp = 64'h850FAEE8;
      13'b1001111100000:
        casez_tmp = 64'h850FAEE8;
      13'b1001111100001:
        casez_tmp = 64'h850FAEF8;
      13'b1001111100010:
        casez_tmp = 64'h850FAEF8;
      13'b1001111100011:
        casez_tmp = 64'h850FAF08;
      13'b1001111100100:
        casez_tmp = 64'h850FAF08;
      13'b1001111100101:
        casez_tmp = 64'h850FAF18;
      13'b1001111100110:
        casez_tmp = 64'h850FAF18;
      13'b1001111100111:
        casez_tmp = 64'h850FAF28;
      13'b1001111101000:
        casez_tmp = 64'h850FAF28;
      13'b1001111101001:
        casez_tmp = 64'h850FAF38;
      13'b1001111101010:
        casez_tmp = 64'h850FAF38;
      13'b1001111101011:
        casez_tmp = 64'h850FAF48;
      13'b1001111101100:
        casez_tmp = 64'h850FAF48;
      13'b1001111101101:
        casez_tmp = 64'h850FAF58;
      13'b1001111101110:
        casez_tmp = 64'h850FAF58;
      13'b1001111101111:
        casez_tmp = 64'h850FAF68;
      13'b1001111110000:
        casez_tmp = 64'h850FAF68;
      13'b1001111110001:
        casez_tmp = 64'h850FAF78;
      13'b1001111110010:
        casez_tmp = 64'h850FAF78;
      13'b1001111110011:
        casez_tmp = 64'h850FAF88;
      13'b1001111110100:
        casez_tmp = 64'h850FAF88;
      13'b1001111110101:
        casez_tmp = 64'h850FAF98;
      13'b1001111110110:
        casez_tmp = 64'h850FAF98;
      13'b1001111110111:
        casez_tmp = 64'h850FAFA8;
      13'b1001111111000:
        casez_tmp = 64'h850FAFA8;
      13'b1001111111001:
        casez_tmp = 64'h850FAFB8;
      13'b1001111111010:
        casez_tmp = 64'h850FAFB8;
      13'b1001111111011:
        casez_tmp = 64'h850FAFC8;
      13'b1001111111100:
        casez_tmp = 64'h850FAFC8;
      13'b1001111111101:
        casez_tmp = 64'h850FAFD8;
      13'b1001111111110:
        casez_tmp = 64'h850FAFD8;
      13'b1001111111111:
        casez_tmp = 64'h850FAFE8;
      13'b1010000000000:
        casez_tmp = 64'h850FAFE8;
      13'b1010000000001:
        casez_tmp = 64'h850FAFF8;
      13'b1010000000010:
        casez_tmp = 64'h850FAFF8;
      13'b1010000000011:
        casez_tmp = 64'h850FB008;
      13'b1010000000100:
        casez_tmp = 64'h850FB008;
      13'b1010000000101:
        casez_tmp = 64'h850FB018;
      13'b1010000000110:
        casez_tmp = 64'h850FB018;
      13'b1010000000111:
        casez_tmp = 64'h850FB028;
      13'b1010000001000:
        casez_tmp = 64'h850FB028;
      13'b1010000001001:
        casez_tmp = 64'h850FB038;
      13'b1010000001010:
        casez_tmp = 64'h850FB038;
      13'b1010000001011:
        casez_tmp = 64'h850FB048;
      13'b1010000001100:
        casez_tmp = 64'h850FB048;
      13'b1010000001101:
        casez_tmp = 64'h850FB058;
      13'b1010000001110:
        casez_tmp = 64'h850FB058;
      13'b1010000001111:
        casez_tmp = 64'h850FB068;
      13'b1010000010000:
        casez_tmp = 64'h850FB068;
      13'b1010000010001:
        casez_tmp = 64'h850FB078;
      13'b1010000010010:
        casez_tmp = 64'h850FB078;
      13'b1010000010011:
        casez_tmp = 64'h850FB088;
      13'b1010000010100:
        casez_tmp = 64'h850FB088;
      13'b1010000010101:
        casez_tmp = 64'h850FB098;
      13'b1010000010110:
        casez_tmp = 64'h850FB098;
      13'b1010000010111:
        casez_tmp = 64'h850FB0A8;
      13'b1010000011000:
        casez_tmp = 64'h850FB0A8;
      13'b1010000011001:
        casez_tmp = 64'h850FB0B8;
      13'b1010000011010:
        casez_tmp = 64'h850FB0B8;
      13'b1010000011011:
        casez_tmp = 64'h850FB0C8;
      13'b1010000011100:
        casez_tmp = 64'h850FB0C8;
      13'b1010000011101:
        casez_tmp = 64'h850FB0D8;
      13'b1010000011110:
        casez_tmp = 64'h850FB0D8;
      13'b1010000011111:
        casez_tmp = 64'h850FB0E8;
      13'b1010000100000:
        casez_tmp = 64'h850FB0E8;
      13'b1010000100001:
        casez_tmp = 64'h850FB0F8;
      13'b1010000100010:
        casez_tmp = 64'h850FB0F8;
      13'b1010000100011:
        casez_tmp = 64'h850FB108;
      13'b1010000100100:
        casez_tmp = 64'h850FB108;
      13'b1010000100101:
        casez_tmp = 64'h850FB118;
      13'b1010000100110:
        casez_tmp = 64'h850FB118;
      13'b1010000100111:
        casez_tmp = 64'h850FB128;
      13'b1010000101000:
        casez_tmp = 64'h850FB128;
      13'b1010000101001:
        casez_tmp = 64'h850FB138;
      13'b1010000101010:
        casez_tmp = 64'h850FB138;
      13'b1010000101011:
        casez_tmp = 64'h850FB148;
      13'b1010000101100:
        casez_tmp = 64'h850FB148;
      13'b1010000101101:
        casez_tmp = 64'h850FB158;
      13'b1010000101110:
        casez_tmp = 64'h850FB158;
      13'b1010000101111:
        casez_tmp = 64'h850FB168;
      13'b1010000110000:
        casez_tmp = 64'h850FB168;
      13'b1010000110001:
        casez_tmp = 64'h850FB178;
      13'b1010000110010:
        casez_tmp = 64'h850FB178;
      13'b1010000110011:
        casez_tmp = 64'h850FB188;
      13'b1010000110100:
        casez_tmp = 64'h850FB188;
      13'b1010000110101:
        casez_tmp = 64'h850FB198;
      13'b1010000110110:
        casez_tmp = 64'h850FB198;
      13'b1010000110111:
        casez_tmp = 64'h850FB1A8;
      13'b1010000111000:
        casez_tmp = 64'h850FB1A8;
      13'b1010000111001:
        casez_tmp = 64'h850FB1B8;
      13'b1010000111010:
        casez_tmp = 64'h850FB1B8;
      13'b1010000111011:
        casez_tmp = 64'h850FB1C8;
      13'b1010000111100:
        casez_tmp = 64'h850FB1C8;
      13'b1010000111101:
        casez_tmp = 64'h850FB1D8;
      13'b1010000111110:
        casez_tmp = 64'h850FB1D8;
      13'b1010000111111:
        casez_tmp = 64'h850FB1E8;
      13'b1010001000000:
        casez_tmp = 64'h850FB1E8;
      13'b1010001000001:
        casez_tmp = 64'h850FB1F8;
      13'b1010001000010:
        casez_tmp = 64'h850FB1F8;
      13'b1010001000011:
        casez_tmp = 64'h850FB208;
      13'b1010001000100:
        casez_tmp = 64'h850FB208;
      13'b1010001000101:
        casez_tmp = 64'h850FB218;
      13'b1010001000110:
        casez_tmp = 64'h850FB218;
      13'b1010001000111:
        casez_tmp = 64'h850FB228;
      13'b1010001001000:
        casez_tmp = 64'h850FB228;
      13'b1010001001001:
        casez_tmp = 64'h850FB238;
      13'b1010001001010:
        casez_tmp = 64'h850FB238;
      13'b1010001001011:
        casez_tmp = 64'h850FB248;
      13'b1010001001100:
        casez_tmp = 64'h850FB248;
      13'b1010001001101:
        casez_tmp = 64'h850FB258;
      13'b1010001001110:
        casez_tmp = 64'h850FB258;
      13'b1010001001111:
        casez_tmp = 64'h850FB268;
      13'b1010001010000:
        casez_tmp = 64'h850FB268;
      13'b1010001010001:
        casez_tmp = 64'h850FB278;
      13'b1010001010010:
        casez_tmp = 64'h850FB278;
      13'b1010001010011:
        casez_tmp = 64'h850FB288;
      13'b1010001010100:
        casez_tmp = 64'h850FB288;
      13'b1010001010101:
        casez_tmp = 64'h850FB298;
      13'b1010001010110:
        casez_tmp = 64'h850FB298;
      13'b1010001010111:
        casez_tmp = 64'h850FB2A8;
      13'b1010001011000:
        casez_tmp = 64'h850FB2A8;
      13'b1010001011001:
        casez_tmp = 64'h850FB2B8;
      13'b1010001011010:
        casez_tmp = 64'h850FB2B8;
      13'b1010001011011:
        casez_tmp = 64'h850FB2C8;
      13'b1010001011100:
        casez_tmp = 64'h850FB2C8;
      13'b1010001011101:
        casez_tmp = 64'h850FB2D8;
      13'b1010001011110:
        casez_tmp = 64'h850FB2D8;
      13'b1010001011111:
        casez_tmp = 64'h850FB2E8;
      13'b1010001100000:
        casez_tmp = 64'h850FB2E8;
      13'b1010001100001:
        casez_tmp = 64'h850FB2F8;
      13'b1010001100010:
        casez_tmp = 64'h850FB2F8;
      13'b1010001100011:
        casez_tmp = 64'h850FB308;
      13'b1010001100100:
        casez_tmp = 64'h850FB308;
      13'b1010001100101:
        casez_tmp = 64'h850FB318;
      13'b1010001100110:
        casez_tmp = 64'h850FB318;
      13'b1010001100111:
        casez_tmp = 64'h850FB328;
      13'b1010001101000:
        casez_tmp = 64'h850FB328;
      13'b1010001101001:
        casez_tmp = 64'h850FB338;
      13'b1010001101010:
        casez_tmp = 64'h850FB338;
      13'b1010001101011:
        casez_tmp = 64'h850FB348;
      13'b1010001101100:
        casez_tmp = 64'h850FB348;
      13'b1010001101101:
        casez_tmp = 64'h850FB358;
      13'b1010001101110:
        casez_tmp = 64'h850FB358;
      13'b1010001101111:
        casez_tmp = 64'h850FB368;
      13'b1010001110000:
        casez_tmp = 64'h850FB368;
      13'b1010001110001:
        casez_tmp = 64'h850FB378;
      13'b1010001110010:
        casez_tmp = 64'h850FB378;
      13'b1010001110011:
        casez_tmp = 64'h850FB388;
      13'b1010001110100:
        casez_tmp = 64'h850FB388;
      13'b1010001110101:
        casez_tmp = 64'h850FB398;
      13'b1010001110110:
        casez_tmp = 64'h850FB398;
      13'b1010001110111:
        casez_tmp = 64'h850FB3A8;
      13'b1010001111000:
        casez_tmp = 64'h850FB3A8;
      13'b1010001111001:
        casez_tmp = 64'h850FB3B8;
      13'b1010001111010:
        casez_tmp = 64'h850FB3B8;
      13'b1010001111011:
        casez_tmp = 64'h850FB3C8;
      13'b1010001111100:
        casez_tmp = 64'h850FB3C8;
      13'b1010001111101:
        casez_tmp = 64'h850FB3D8;
      13'b1010001111110:
        casez_tmp = 64'h850FB3D8;
      13'b1010001111111:
        casez_tmp = 64'h850FB3E8;
      13'b1010010000000:
        casez_tmp = 64'h850FB3E8;
      13'b1010010000001:
        casez_tmp = 64'h850FB3F8;
      13'b1010010000010:
        casez_tmp = 64'h850FB3F8;
      13'b1010010000011:
        casez_tmp = 64'h850FB408;
      13'b1010010000100:
        casez_tmp = 64'h850FB408;
      13'b1010010000101:
        casez_tmp = 64'h850FB418;
      13'b1010010000110:
        casez_tmp = 64'h850FB418;
      13'b1010010000111:
        casez_tmp = 64'h850FB428;
      13'b1010010001000:
        casez_tmp = 64'h850FB428;
      13'b1010010001001:
        casez_tmp = 64'h850FB438;
      13'b1010010001010:
        casez_tmp = 64'h850FB438;
      13'b1010010001011:
        casez_tmp = 64'h850FB448;
      13'b1010010001100:
        casez_tmp = 64'h850FB448;
      13'b1010010001101:
        casez_tmp = 64'h850FB458;
      13'b1010010001110:
        casez_tmp = 64'h850FB458;
      13'b1010010001111:
        casez_tmp = 64'h850FB468;
      13'b1010010010000:
        casez_tmp = 64'h850FB468;
      13'b1010010010001:
        casez_tmp = 64'h850FB478;
      13'b1010010010010:
        casez_tmp = 64'h850FB478;
      13'b1010010010011:
        casez_tmp = 64'h850FB488;
      13'b1010010010100:
        casez_tmp = 64'h850FB488;
      13'b1010010010101:
        casez_tmp = 64'h850FB498;
      13'b1010010010110:
        casez_tmp = 64'h850FB498;
      13'b1010010010111:
        casez_tmp = 64'h850FB4A8;
      13'b1010010011000:
        casez_tmp = 64'h850FB4A8;
      13'b1010010011001:
        casez_tmp = 64'h850FB4B8;
      13'b1010010011010:
        casez_tmp = 64'h850FB4B8;
      13'b1010010011011:
        casez_tmp = 64'h850FB4C8;
      13'b1010010011100:
        casez_tmp = 64'h850FB4C8;
      13'b1010010011101:
        casez_tmp = 64'h850FB4D8;
      13'b1010010011110:
        casez_tmp = 64'h850FB4D8;
      13'b1010010011111:
        casez_tmp = 64'h850FB4E8;
      13'b1010010100000:
        casez_tmp = 64'h850FB4E8;
      13'b1010010100001:
        casez_tmp = 64'h850FB4F8;
      13'b1010010100010:
        casez_tmp = 64'h850FB4F8;
      13'b1010010100011:
        casez_tmp = 64'h850FB508;
      13'b1010010100100:
        casez_tmp = 64'h850FB508;
      13'b1010010100101:
        casez_tmp = 64'h850FB518;
      13'b1010010100110:
        casez_tmp = 64'h850FB518;
      13'b1010010100111:
        casez_tmp = 64'h850FB528;
      13'b1010010101000:
        casez_tmp = 64'h850FB528;
      13'b1010010101001:
        casez_tmp = 64'h850FB538;
      13'b1010010101010:
        casez_tmp = 64'h850FB538;
      13'b1010010101011:
        casez_tmp = 64'h850FB548;
      13'b1010010101100:
        casez_tmp = 64'h850FB548;
      13'b1010010101101:
        casez_tmp = 64'h850FB558;
      13'b1010010101110:
        casez_tmp = 64'h850FB558;
      13'b1010010101111:
        casez_tmp = 64'h850FB568;
      13'b1010010110000:
        casez_tmp = 64'h850FB568;
      13'b1010010110001:
        casez_tmp = 64'h850FB578;
      13'b1010010110010:
        casez_tmp = 64'h850FB578;
      13'b1010010110011:
        casez_tmp = 64'h850FB588;
      13'b1010010110100:
        casez_tmp = 64'h850FB588;
      13'b1010010110101:
        casez_tmp = 64'h850FB598;
      13'b1010010110110:
        casez_tmp = 64'h850FB598;
      13'b1010010110111:
        casez_tmp = 64'h850FB5A8;
      13'b1010010111000:
        casez_tmp = 64'h850FB5A8;
      13'b1010010111001:
        casez_tmp = 64'h850FB5B8;
      13'b1010010111010:
        casez_tmp = 64'h850FB5B8;
      13'b1010010111011:
        casez_tmp = 64'h850FB5C8;
      13'b1010010111100:
        casez_tmp = 64'h850FB5C8;
      13'b1010010111101:
        casez_tmp = 64'h850FB5D8;
      13'b1010010111110:
        casez_tmp = 64'h850FB5D8;
      13'b1010010111111:
        casez_tmp = 64'h0;
      13'b1010011000000:
        casez_tmp = 64'h850FA1C0;
      13'b1010011000001:
        casez_tmp = 64'h850FA1D8;
      13'b1010011000010:
        casez_tmp = 64'h850FA1E8;
      13'b1010011000011:
        casez_tmp = 64'h850FA1F8;
      13'b1010011000100:
        casez_tmp = 64'h850FA210;
      13'b1010011000101:
        casez_tmp = 64'h850FA220;
      13'b1010011000110:
        casez_tmp = 64'h850FA238;
      13'b1010011000111:
        casez_tmp = 64'h850FA250;
      13'b1010011001000:
        casez_tmp = 64'h850FA268;
      13'b1010011001001:
        casez_tmp = 64'h850FA280;
      13'b1010011001010:
        casez_tmp = 64'h850FA298;
      13'b1010011001011:
        casez_tmp = 64'h850FA2B0;
      13'b1010011001100:
        casez_tmp = 64'h850FA2C8;
      13'b1010011001101:
        casez_tmp = 64'h850FA2E0;
      13'b1010011001110:
        casez_tmp = 64'h850FA2F8;
      13'b1010011001111:
        casez_tmp = 64'h850FA310;
      13'b1010011010000:
        casez_tmp = 64'h850FA328;
      13'b1010011010001:
        casez_tmp = 64'h850FA340;
      13'b1010011010010:
        casez_tmp = 64'h850F5540;
      13'b1010011010011:
        casez_tmp = 64'h850F54C4;
      13'b1010011010100:
        casez_tmp = 64'h850F5452;
      13'b1010011010101:
        casez_tmp = 64'h0;
      13'b1010011010110:
        casez_tmp = 64'h850FA578;
      13'b1010011010111:
        casez_tmp = 64'h0;
      13'b1010011011000:
        casez_tmp = 64'h0;
      13'b1010011011001:
        casez_tmp = 64'h0;
      13'b1010011011010:
        casez_tmp = 64'h0;
      13'b1010011011011:
        casez_tmp = 64'h0;
      13'b1010011011100:
        casez_tmp = 64'h0;
      13'b1010011011101:
        casez_tmp = 64'h0;
      13'b1010011011110:
        casez_tmp = 64'h850F5C00;
      13'b1010011011111:
        casez_tmp = 64'h0;
      13'b1010011100000:
        casez_tmp = 64'h0;
      13'b1010011100001:
        casez_tmp = 64'h0;
      13'b1010011100010:
        casez_tmp = 64'h0;
      13'b1010011100011:
        casez_tmp = 64'h0;
      13'b1010011100100:
        casez_tmp = 64'h0;
      13'b1010011100101:
        casez_tmp = 64'h0;
      13'b1010011100110:
        casez_tmp = 64'h0;
      13'b1010011100111:
        casez_tmp = 64'h850F5C04;
      13'b1010011101000:
        casez_tmp = 64'h0;
      13'b1010011101001:
        casez_tmp = 64'h0;
      13'b1010011101010:
        casez_tmp = 64'h850F5BFC;
      13'b1010011101011:
        casez_tmp = 64'h850F5BFC;
      13'b1010011101100:
        casez_tmp = 64'h850FA5C0;
      13'b1010011101101:
        casez_tmp = 64'h0;
      13'b1010011101110:
        casez_tmp = 64'h0;
      13'b1010011101111:
        casez_tmp = 64'h0;
      13'b1010011110000:
        casez_tmp = 64'h0;
      13'b1010011110001:
        casez_tmp = 64'h0;
      13'b1010011110010:
        casez_tmp = 64'h0;
      13'b1010011110011:
        casez_tmp = 64'h0;
      13'b1010011110100:
        casez_tmp = 64'h850F5C6C;
      13'b1010011110101:
        casez_tmp = 64'h0;
      13'b1010011110110:
        casez_tmp = 64'h0;
      13'b1010011110111:
        casez_tmp = 64'h0;
      13'b1010011111000:
        casez_tmp = 64'h0;
      13'b1010011111001:
        casez_tmp = 64'h850FA608;
      13'b1010011111010:
        casez_tmp = 64'h0;
      13'b1010011111011:
        casez_tmp = 64'h850FA638;
      13'b1010011111100:
        casez_tmp = 64'h0;
      13'b1010011111101:
        casez_tmp = 64'h850FA648;
      13'b1010011111110:
        casez_tmp = 64'h0;
      13'b1010011111111:
        casez_tmp = 64'h0;
      13'b1010100000000:
        casez_tmp = 64'h0;
      13'b1010100000001:
        casez_tmp = 64'h850FA688;
      13'b1010100000010:
        casez_tmp = 64'h0;
      13'b1010100000011:
        casez_tmp = 64'h0;
      13'b1010100000100:
        casez_tmp = 64'h0;
      13'b1010100000101:
        casez_tmp = 64'h850FA6D8;
      13'b1010100000110:
        casez_tmp = 64'h0;
      13'b1010100000111:
        casez_tmp = 64'h0;
      13'b1010100001000:
        casez_tmp = 64'h0;
      13'b1010100001001:
        casez_tmp = 64'h850F7126;
      13'b1010100001010:
        casez_tmp = 64'h850F70FE;
      13'b1010100001011:
        casez_tmp = 64'h850F71C6;
      13'b1010100001100:
        casez_tmp = 64'h850F71B8;
      13'b1010100001101:
        casez_tmp = 64'h850FA798;
      13'b1010100001110:
        casez_tmp = 64'h0;
      13'b1010100001111:
        casez_tmp = 64'h0;
      13'b1010100010000:
        casez_tmp = 64'h0;
      13'b1010100010001:
        casez_tmp = 64'h850F7902;
      13'b1010100010010:
        casez_tmp = 64'h850F78B2;
      13'b1010100010011:
        casez_tmp = 64'h850F7886;
      13'b1010100010100:
        casez_tmp = 64'h0;
      13'b1010100010101:
        casez_tmp = 64'h850F7856;
      13'b1010100010110:
        casez_tmp = 64'h0;
      13'b1010100010111:
        casez_tmp = 64'h0;
      13'b1010100011000:
        casez_tmp = 64'h0;
      13'b1010100011001:
        casez_tmp = 64'h0;
      13'b1010100011010:
        casez_tmp = 64'h850FAA10;
      13'b1010100011011:
        casez_tmp = 64'h0;
      13'b1010100011100:
        casez_tmp = 64'h0;
      13'b1010100011101:
        casez_tmp = 64'h0;
      13'b1010100011110:
        casez_tmp = 64'h0;
      13'b1010100011111:
        casez_tmp = 64'h0;
      13'b1010100100000:
        casez_tmp = 64'h0;
      13'b1010100100001:
        casez_tmp = 64'h850F83AA;
      13'b1010100100010:
        casez_tmp = 64'h850FB938;
      13'b1010100100011:
        casez_tmp = 64'h850F81F2;
      13'b1010100100100:
        casez_tmp = 64'h850F81BA;
      13'b1010100100101:
        casez_tmp = 64'h850F819C;
      13'b1010100100110:
        casez_tmp = 64'h0;
      13'b1010100100111:
        casez_tmp = 64'h0;
      13'b1010100101000:
        casez_tmp = 64'h0;
      13'b1010100101001:
        casez_tmp = 64'h850F857A;
      13'b1010100101010:
        casez_tmp = 64'h0;
      13'b1010100101011:
        casez_tmp = 64'h0;
      13'b1010100101100:
        casez_tmp = 64'h0;
      13'b1010100101101:
        casez_tmp = 64'h0;
      13'b1010100101110:
        casez_tmp = 64'h850FAA58;
      13'b1010100101111:
        casez_tmp = 64'h0;
      13'b1010100110000:
        casez_tmp = 64'h0;
      13'b1010100110001:
        casez_tmp = 64'h0;
      13'b1010100110010:
        casez_tmp = 64'h850F8866;
      13'b1010100110011:
        casez_tmp = 64'h850FAA80;
      13'b1010100110100:
        casez_tmp = 64'hBFF8;
      13'b1010100110101:
        casez_tmp = 64'h850FAA90;
      13'b1010100110110:
        casez_tmp = 64'hBFF8;
      13'b1010100110111:
        casez_tmp = 64'h850FAAA0;
      13'b1010100111000:
        casez_tmp = 64'h0;
      13'b1010100111001:
        casez_tmp = 64'h0;
      13'b1010100111010:
        casez_tmp = 64'h0;
      13'b1010100111011:
        casez_tmp = 64'h850F8922;
      13'b1010100111100:
        casez_tmp = 64'h850F9FC0;
      13'b1010100111101:
        casez_tmp = 64'h0;
      13'b1010100111110:
        casez_tmp = 64'h0;
      13'b1010100111111:
        casez_tmp = 64'h0;
      13'b1010101000000:
        casez_tmp = 64'h850F8B52;
      13'b1010101000001:
        casez_tmp = 64'h850F8AB8;
      13'b1010101000010:
        casez_tmp = 64'h850F8A2A;
      13'b1010101000011:
        casez_tmp = 64'h0;
      13'b1010101000100:
        casez_tmp = 64'h0;
      13'b1010101000101:
        casez_tmp = 64'h0;
      13'b1010101000110:
        casez_tmp = 64'h850F1530;
      13'b1010101000111:
        casez_tmp = 64'h84000000;
      13'b1010101001000:
        casez_tmp = 64'h850F4E88;
      13'b1010101001001:
        casez_tmp = 64'h850F18E0;
      13'b1010101001010:
        casez_tmp = 64'h850F2240;
      13'b1010101001011:
        casez_tmp = 64'h850FAB74;
      13'b1010101001100:
        casez_tmp = 64'h850F1472;
      13'b1010101001101:
        casez_tmp = 64'h850F13EC;
      13'b1010101001110:
        casez_tmp = 64'h850F14B6;
      13'b1010101001111:
        casez_tmp = 64'h850F66CA;
      13'b1010101010000:
        casez_tmp = 64'h84000078;
      13'b1010101010001:
        casez_tmp = 64'h850F17FE;
      13'b1010101010010:
        casez_tmp = 64'h850F223A;
      13'b1010101010011:
        casez_tmp = 64'h850F18F6;
      13'b1010101010100:
        casez_tmp = 64'h850F8E00;
      13'b1010101010101:
        casez_tmp = 64'h850F1D94;
      13'b1010101010110:
        casez_tmp = 64'h850F1802;
      13'b1010101010111:
        casez_tmp = 64'h840000A0;
      13'b1010101011000:
        casez_tmp = 64'h850F1D98;
      13'b1010101011001:
        casez_tmp = 64'h850F1D48;
      13'b1010101011010:
        casez_tmp = 64'h850F2372;
      13'b1010101011011:
        casez_tmp = 64'h84000080;
      13'b1010101011100:
        casez_tmp = 64'h850F8CE8;
      13'b1010101011101:
        casez_tmp = 64'h84000000;
      13'b1010101011110:
        casez_tmp = 64'h850F1D4A;
      13'b1010101011111:
        casez_tmp = 64'h850F123C;
      13'b1010101100000:
        casez_tmp = 64'h84000088;
      13'b1010101100001:
        casez_tmp = 64'h850F1476;
      13'b1010101100010:
        casez_tmp = 64'h850F17AA;
      13'b1010101100011:
        casez_tmp = 64'h850F13EE;
      13'b1010101100100:
        casez_tmp = 64'h850F17B0;
      13'b1010101100101:
        casez_tmp = 64'h84000070;
      13'b1010101100110:
        casez_tmp = 64'h850FC990;
      13'b1010101100111:
        casez_tmp = 64'h850F1778;
      13'b1010101101000:
        casez_tmp = 64'h850F2244;
      13'b1010101101001:
        casez_tmp = 64'h850F17B4;
      13'b1010101101010:
        casez_tmp = 64'h850FAB70;
      13'b1010101101011:
        casez_tmp = 64'h850F4BEE;
      13'b1010101101100:
        casez_tmp = 64'hFFFFFFFFFFFFFFFF;
      13'b1010101101101:
        casez_tmp = 64'h0;
      13'b1010101101110:
        casez_tmp = 64'h850FA430;
      13'b1010101101111:
        casez_tmp = 64'h52;
      13'b1010101110000:
        casez_tmp = 64'h0;
      13'b1010101110001:
        casez_tmp = 64'h0;
      13'b1010101110010:
        casez_tmp = 64'h0;
      13'b1010101110011:
        casez_tmp = 64'h0;
      13'b1010101110100:
        casez_tmp = 64'h0;
      13'b1010101110101:
        casez_tmp = 64'h0;
      13'b1010101110110:
        casez_tmp = 64'h0;
      13'b1010101110111:
        casez_tmp = 64'h0;
      13'b1010101111000:
        casez_tmp = 64'h0;
      13'b1010101111001:
        casez_tmp = 64'h0;
      13'b1010101111010:
        casez_tmp = 64'h0;
      13'b1010101111011:
        casez_tmp = 64'h850FB690;
      13'b1010101111100:
        casez_tmp = 64'h0;
      13'b1010101111101:
        casez_tmp = 64'h850FAA48;
      13'b1010101111110:
        casez_tmp = 64'h77;
      13'b1010101111111:
        casez_tmp = 64'h850FB970;
      13'b1010110000000:
        casez_tmp = 64'h850F8904;
      13'b1010110000001:
        casez_tmp = 64'h850F8882;
      13'b1010110000010:
        casez_tmp = 64'h0;
      13'b1010110000011:
        casez_tmp = 64'h0;
      13'b1010110000100:
        casez_tmp = 64'h850F88D8;
      13'b1010110000101:
        casez_tmp = 64'h0;
      13'b1010110000110:
        casez_tmp = 64'h0;
      13'b1010110000111:
        casez_tmp = 64'h0;
      13'b1010110001000:
        casez_tmp = 64'h8;
      13'b1010110001001:
        casez_tmp = 64'h0;
      13'b1010110001010:
        casez_tmp = 64'h850FB990;
      13'b1010110001011:
        casez_tmp = 64'h0;
      13'b1010110001100:
        casez_tmp = 64'h850FA5A8;
      13'b1010110001101:
        casez_tmp = 64'h1E;
      13'b1010110001110:
        casez_tmp = 64'h850FB760;
      13'b1010110001111:
        casez_tmp = 64'h0;
      13'b1010110010000:
        casez_tmp = 64'h0;
      13'b1010110010001:
        casez_tmp = 64'h0;
      13'b1010110010010:
        casez_tmp = 64'h0;
      13'b1010110010011:
        casez_tmp = 64'h850F5C9C;
      13'b1010110010100:
        casez_tmp = 64'h0;
      13'b1010110010101:
        casez_tmp = 64'h0;
      13'b1010110010110:
        casez_tmp = 64'h0;
      13'b1010110010111:
        casez_tmp = 64'h3000000000;
      13'b1010110011000:
        casez_tmp = 64'h0;
      13'b1010110011001:
        casez_tmp = 64'h850FB780;
      13'b1010110011010:
        casez_tmp = 64'h0;
      13'b1010110011011:
        casez_tmp = 64'h850FA550;
      13'b1010110011100:
        casez_tmp = 64'h1E;
      13'b1010110011101:
        casez_tmp = 64'h0;
      13'b1010110011110:
        casez_tmp = 64'h0;
      13'b1010110011111:
        casez_tmp = 64'h0;
      13'b1010110100000:
        casez_tmp = 64'h0;
      13'b1010110100001:
        casez_tmp = 64'h0;
      13'b1010110100010:
        casez_tmp = 64'h0;
      13'b1010110100011:
        casez_tmp = 64'h0;
      13'b1010110100100:
        casez_tmp = 64'h0;
      13'b1010110100101:
        casez_tmp = 64'h0;
      13'b1010110100110:
        casez_tmp = 64'h0;
      13'b1010110100111:
        casez_tmp = 64'h0;
      13'b1010110101000:
        casez_tmp = 64'h850FB6D0;
      13'b1010110101001:
        casez_tmp = 64'h4;
      13'b1010110101010:
        casez_tmp = 64'h850FAAC8;
      13'b1010110101011:
        casez_tmp = 64'h6A;
      13'b1010110101100:
        casez_tmp = 64'h0;
      13'b1010110101101:
        casez_tmp = 64'h0;
      13'b1010110101110:
        casez_tmp = 64'h0;
      13'b1010110101111:
        casez_tmp = 64'h0;
      13'b1010110110000:
        casez_tmp = 64'h0;
      13'b1010110110001:
        casez_tmp = 64'h0;
      13'b1010110110010:
        casez_tmp = 64'h0;
      13'b1010110110011:
        casez_tmp = 64'h0;
      13'b1010110110100:
        casez_tmp = 64'h0;
      13'b1010110110101:
        casez_tmp = 64'h0;
      13'b1010110110110:
        casez_tmp = 64'h2000000000;
      13'b1010110110111:
        casez_tmp = 64'h0;
      13'b1010110111000:
        casez_tmp = 64'h0;
      13'b1010110111001:
        casez_tmp = 64'h850FA568;
      13'b1010110111010:
        casez_tmp = 64'h1E;
      13'b1010110111011:
        casez_tmp = 64'h850FB6B0;
      13'b1010110111100:
        casez_tmp = 64'h0;
      13'b1010110111101:
        casez_tmp = 64'h0;
      13'b1010110111110:
        casez_tmp = 64'h0;
      13'b1010110111111:
        casez_tmp = 64'h0;
      13'b1010111000000:
        casez_tmp = 64'h850F5C4E;
      13'b1010111000001:
        casez_tmp = 64'h0;
      13'b1010111000010:
        casez_tmp = 64'h0;
      13'b1010111000011:
        casez_tmp = 64'h0;
      13'b1010111000100:
        casez_tmp = 64'h3000000000;
      13'b1010111000101:
        casez_tmp = 64'h0;
      13'b1010111000110:
        casez_tmp = 64'h850FB718;
      13'b1010111000111:
        casez_tmp = 64'h4;
      13'b1010111001000:
        casez_tmp = 64'h850FA688;
      13'b1010111001001:
        casez_tmp = 64'h72;
      13'b1010111001010:
        casez_tmp = 64'h850FB808;
      13'b1010111001011:
        casez_tmp = 64'h850F6654;
      13'b1010111001100:
        casez_tmp = 64'h0;
      13'b1010111001101:
        casez_tmp = 64'h0;
      13'b1010111001110:
        casez_tmp = 64'h0;
      13'b1010111001111:
        casez_tmp = 64'h0;
      13'b1010111010000:
        casez_tmp = 64'h0;
      13'b1010111010001:
        casez_tmp = 64'h0;
      13'b1010111010010:
        casez_tmp = 64'h0;
      13'b1010111010011:
        casez_tmp = 64'h0;
      13'b1010111010100:
        casez_tmp = 64'h0;
      13'b1010111010101:
        casez_tmp = 64'h0;
      13'b1010111010110:
        casez_tmp = 64'h0;
      13'b1010111010111:
        casez_tmp = 64'h850FA6A8;
      13'b1010111011000:
        casez_tmp = 64'h6F;
      13'b1010111011001:
        casez_tmp = 64'h850FB828;
      13'b1010111011010:
        casez_tmp = 64'h0;
      13'b1010111011011:
        casez_tmp = 64'h850F715E;
      13'b1010111011100:
        casez_tmp = 64'h850F714E;
      13'b1010111011101:
        casez_tmp = 64'h0;
      13'b1010111011110:
        casez_tmp = 64'h0;
      13'b1010111011111:
        casez_tmp = 64'h0;
      13'b1010111100000:
        casez_tmp = 64'h0;
      13'b1010111100001:
        casez_tmp = 64'h0;
      13'b1010111100010:
        casez_tmp = 64'h298;
      13'b1010111100011:
        casez_tmp = 64'h0;
      13'b1010111100100:
        casez_tmp = 64'h850FB848;
      13'b1010111100101:
        casez_tmp = 64'h400;
      13'b1010111100110:
        casez_tmp = 64'h850F8FC8;
      13'b1010111100111:
        casez_tmp = 64'h72;
      13'b1010111101000:
        casez_tmp = 64'h850FAB78;
      13'b1010111101001:
        casez_tmp = 64'h0;
      13'b1010111101010:
        casez_tmp = 64'h0;
      13'b1010111101011:
        casez_tmp = 64'h0;
      13'b1010111101100:
        casez_tmp = 64'h0;
      13'b1010111101101:
        casez_tmp = 64'h0;
      13'b1010111101110:
        casez_tmp = 64'h0;
      13'b1010111101111:
        casez_tmp = 64'h0;
      13'b1010111110000:
        casez_tmp = 64'h0;
      13'b1010111110001:
        casez_tmp = 64'h0;
      13'b1010111110010:
        casez_tmp = 64'h0;
      13'b1010111110011:
        casez_tmp = 64'h0;
      13'b1010111110100:
        casez_tmp = 64'h4;
      13'b1010111110101:
        casez_tmp = 64'h850FAA68;
      13'b1010111110110:
        casez_tmp = 64'h77;
      13'b1010111110111:
        casez_tmp = 64'h850FB998;
      13'b1010111111000:
        casez_tmp = 64'h0;
      13'b1010111111001:
        casez_tmp = 64'h850F894A;
      13'b1010111111010:
        casez_tmp = 64'h0;
      13'b1010111111011:
        casez_tmp = 64'h0;
      13'b1010111111100:
        casez_tmp = 64'h0;
      13'b1010111111101:
        casez_tmp = 64'h0;
      13'b1010111111110:
        casez_tmp = 64'h0;
      13'b1010111111111:
        casez_tmp = 64'h0;
      13'b1011000000000:
        casez_tmp = 64'h0;
      13'b1011000000001:
        casez_tmp = 64'h0;
      13'b1011000000010:
        casez_tmp = 64'h850FB9D8;
      13'b1011000000011:
        casez_tmp = 64'h4;
      13'b1011000000100:
        casez_tmp = 64'h850FAB40;
      13'b1011000000101:
        casez_tmp = 64'h1F;
      13'b1011000000110:
        casez_tmp = 64'h850FB9E0;
      13'b1011000000111:
        casez_tmp = 64'h850F8BD2;
      13'b1011000001000:
        casez_tmp = 64'h850F8B90;
      13'b1011000001001:
        casez_tmp = 64'h0;
      13'b1011000001010:
        casez_tmp = 64'h0;
      13'b1011000001011:
        casez_tmp = 64'h0;
      13'b1011000001100:
        casez_tmp = 64'h0;
      13'b1011000001101:
        casez_tmp = 64'h0;
      13'b1011000001110:
        casez_tmp = 64'h0;
      13'b1011000001111:
        casez_tmp = 64'h0;
      13'b1011000010000:
        casez_tmp = 64'h0;
      13'b1011000010001:
        casez_tmp = 64'h850FBA00;
      13'b1011000010010:
        casez_tmp = 64'h4;
      13'b1011000010011:
        casez_tmp = 64'h850FA608;
      13'b1011000010100:
        casez_tmp = 64'h0;
      13'b1011000010101:
        casez_tmp = 64'h0;
      13'b1011000010110:
        casez_tmp = 64'h0;
      13'b1011000010111:
        casez_tmp = 64'h0;
      13'b1011000011000:
        casez_tmp = 64'h0;
      13'b1011000011001:
        casez_tmp = 64'h0;
      13'b1011000011010:
        casez_tmp = 64'h0;
      13'b1011000011011:
        casez_tmp = 64'h0;
      13'b1011000011100:
        casez_tmp = 64'h0;
      13'b1011000011101:
        casez_tmp = 64'h0;
      13'b1011000011110:
        casez_tmp = 64'h0;
      13'b1011000011111:
        casez_tmp = 64'h0;
      13'b1011000100000:
        casez_tmp = 64'h0;
      13'b1011000100001:
        casez_tmp = 64'h0;
      13'b1011000100010:
        casez_tmp = 64'h850FA788;
      13'b1011000100011:
        casez_tmp = 64'h69;
      13'b1011000100100:
        casez_tmp = 64'h850FB868;
      13'b1011000100101:
        casez_tmp = 64'h0;
      13'b1011000100110:
        casez_tmp = 64'h850F78D2;
      13'b1011000100111:
        casez_tmp = 64'h0;
      13'b1011000101000:
        casez_tmp = 64'h0;
      13'b1011000101001:
        casez_tmp = 64'h850F7988;
      13'b1011000101010:
        casez_tmp = 64'h0;
      13'b1011000101011:
        casez_tmp = 64'h0;
      13'b1011000101100:
        casez_tmp = 64'h0;
      13'b1011000101101:
        casez_tmp = 64'h1000000000;
      13'b1011000101110:
        casez_tmp = 64'h0;
      13'b1011000101111:
        casez_tmp = 64'h850FB888;
      13'b1011000110000:
        casez_tmp = 64'h0;
      13'b1011000110001:
        casez_tmp = 64'h850FAA00;
      13'b1011000110010:
        casez_tmp = 64'h6E;
      13'b1011000110011:
        casez_tmp = 64'h850FB8D0;
      13'b1011000110100:
        casez_tmp = 64'h0;
      13'b1011000110101:
        casez_tmp = 64'h850F822C;
      13'b1011000110110:
        casez_tmp = 64'h0;
      13'b1011000110111:
        casez_tmp = 64'h0;
      13'b1011000111000:
        casez_tmp = 64'h0;
      13'b1011000111001:
        casez_tmp = 64'h0;
      13'b1011000111010:
        casez_tmp = 64'h0;
      13'b1011000111011:
        casez_tmp = 64'h0;
      13'b1011000111100:
        casez_tmp = 64'h20;
      13'b1011000111101:
        casez_tmp = 64'h0;
      13'b1011000111110:
        casez_tmp = 64'h850FB8F0;
      13'b1011000111111:
        casez_tmp = 64'h0;
      13'b1011001000000:
        casez_tmp = 64'h850FA628;
      13'b1011001000001:
        casez_tmp = 64'h6A;
      13'b1011001000010:
        casez_tmp = 64'h850FB7D8;
      13'b1011001000011:
        casez_tmp = 64'h0;
      13'b1011001000100:
        casez_tmp = 64'h0;
      13'b1011001000101:
        casez_tmp = 64'h0;
      13'b1011001000110:
        casez_tmp = 64'h0;
      13'b1011001000111:
        casez_tmp = 64'h0;
      13'b1011001001000:
        casez_tmp = 64'h0;
      13'b1011001001001:
        casez_tmp = 64'h0;
      13'b1011001001010:
        casez_tmp = 64'h0;
      13'b1011001001011:
        casez_tmp = 64'h0;
      13'b1011001001100:
        casez_tmp = 64'h0;
      13'b1011001001101:
        casez_tmp = 64'h0;
      13'b1011001001110:
        casez_tmp = 64'h4;
      13'b1011001001111:
        casez_tmp = 64'h850FA918;
      13'b1011001010000:
        casez_tmp = 64'h70;
      13'b1011001010001:
        casez_tmp = 64'h0;
      13'b1011001010010:
        casez_tmp = 64'h0;
      13'b1011001010011:
        casez_tmp = 64'h0;
      13'b1011001010100:
        casez_tmp = 64'h0;
      13'b1011001010101:
        casez_tmp = 64'h0;
      13'b1011001010110:
        casez_tmp = 64'h0;
      13'b1011001010111:
        casez_tmp = 64'h0;
      13'b1011001011000:
        casez_tmp = 64'h0;
      13'b1011001011001:
        casez_tmp = 64'h0;
      13'b1011001011010:
        casez_tmp = 64'h0;
      13'b1011001011011:
        casez_tmp = 64'h0;
      13'b1011001011100:
        casez_tmp = 64'h0;
      13'b1011001011101:
        casez_tmp = 64'h0;
      13'b1011001011110:
        casez_tmp = 64'h850F11EA;
      13'b1011001011111:
        casez_tmp = 64'h2;
      13'b1011001100000:
        casez_tmp = 64'h850F11E6;
      13'b1011001100001:
        casez_tmp = 64'h3;
      13'b1011001100010:
        casez_tmp = 64'h850FA468;
      13'b1011001100011:
        casez_tmp = 64'h8000000005;
      13'b1011001100100:
        casez_tmp = 64'h0;
      13'b1011001100101:
        casez_tmp = 64'h0;
      13'b1011001100110:
        casez_tmp = 64'h850F5758;
      13'b1011001100111:
        casez_tmp = 64'h850FA460;
      13'b1011001101000:
        casez_tmp = 64'h800000002;
      13'b1011001101001:
        casez_tmp = 64'h0;
      13'b1011001101010:
        casez_tmp = 64'h0;
      13'b1011001101011:
        casez_tmp = 64'h850F5704;
      13'b1011001101100:
        casez_tmp = 64'h850F9510;
      13'b1011001101101:
        casez_tmp = 64'h8;
      13'b1011001101110:
        casez_tmp = 64'h850F2248;
      13'b1011001101111:
        casez_tmp = 64'h850FA470;
      13'b1011001110000:
        casez_tmp = 64'h16;
      13'b1011001110001:
        casez_tmp = 64'h0;
      13'b1011001110010:
        casez_tmp = 64'h0;
      13'b1011001110011:
        casez_tmp = 64'h0;
      13'b1011001110100:
        casez_tmp = 64'h850F5804;
      13'b1011001110101:
        casez_tmp = 64'h0;
      13'b1011001110110:
        casez_tmp = 64'h0;
      13'b1011001110111:
        casez_tmp = 64'h0;
      13'b1011001111000:
        casez_tmp = 64'h0;
      13'b1011001111001:
        casez_tmp = 64'h0;
      13'b1011001111010:
        casez_tmp = 64'h0;
      13'b1011001111011:
        casez_tmp = 64'h0;
      13'b1011001111100:
        casez_tmp = 64'h88;
      13'b1011001111101:
        casez_tmp = 64'h0;
      13'b1011001111110:
        casez_tmp = 64'h850FA538;
      13'b1011001111111:
        casez_tmp = 64'h1E;
      13'b1011010000000:
        casez_tmp = 64'h0;
      13'b1011010000001:
        casez_tmp = 64'h0;
      13'b1011010000010:
        casez_tmp = 64'h0;
      13'b1011010000011:
        casez_tmp = 64'h850F5BD0;
      13'b1011010000100:
        casez_tmp = 64'h0;
      13'b1011010000101:
        casez_tmp = 64'h0;
      13'b1011010000110:
        casez_tmp = 64'h0;
      13'b1011010000111:
        casez_tmp = 64'h0;
      13'b1011010001000:
        casez_tmp = 64'h0;
      13'b1011010001001:
        casez_tmp = 64'h0;
      13'b1011010001010:
        casez_tmp = 64'h0;
      13'b1011010001011:
        casez_tmp = 64'h0;
      13'b1011010001100:
        casez_tmp = 64'h0;
      13'b1011010001101:
        casez_tmp = 64'h850FAAD0;
      13'b1011010001110:
        casez_tmp = 64'h1F;
      13'b1011010001111:
        casez_tmp = 64'h850F897C;
      13'b1011010010000:
        casez_tmp = 64'h0;
      13'b1011010010001:
        casez_tmp = 64'h0;
      13'b1011010010010:
        casez_tmp = 64'h0;
      13'b1011010010011:
        casez_tmp = 64'h0;
      13'b1011010010100:
        casez_tmp = 64'h0;
      13'b1011010010101:
        casez_tmp = 64'h0;
      13'b1011010010110:
        casez_tmp = 64'h0;
      13'b1011010010111:
        casez_tmp = 64'h850F8980;
      13'b1011010011000:
        casez_tmp = 64'h0;
      13'b1011010011001:
        casez_tmp = 64'h0;
      13'b1011010011010:
        casez_tmp = 64'h0;
      13'b1011010011011:
        casez_tmp = 64'h100000000;
      13'b1011010011100:
        casez_tmp = 64'h850FA618;
      13'b1011010011101:
        casez_tmp = 64'h4B;
      13'b1011010011110:
        casez_tmp = 64'h0;
      13'b1011010011111:
        casez_tmp = 64'h0;
      13'b1011010100000:
        casez_tmp = 64'h0;
      13'b1011010100001:
        casez_tmp = 64'h0;
      13'b1011010100010:
        casez_tmp = 64'h0;
      13'b1011010100011:
        casez_tmp = 64'h0;
      13'b1011010100100:
        casez_tmp = 64'h0;
      13'b1011010100101:
        casez_tmp = 64'h0;
      13'b1011010100110:
        casez_tmp = 64'h0;
      13'b1011010100111:
        casez_tmp = 64'h0;
      13'b1011010101000:
        casez_tmp = 64'h0;
      13'b1011010101001:
        casez_tmp = 64'h0;
      13'b1011010101010:
        casez_tmp = 64'h0;
      13'b1011010101011:
        casez_tmp = 64'h850FA440;
      13'b1011010101100:
        casez_tmp = 64'h52;
      13'b1011010101101:
        casez_tmp = 64'h0;
      13'b1011010101110:
        casez_tmp = 64'h0;
      13'b1011010101111:
        casez_tmp = 64'h0;
      13'b1011010110000:
        casez_tmp = 64'h0;
      13'b1011010110001:
        casez_tmp = 64'h0;
      13'b1011010110010:
        casez_tmp = 64'h0;
      13'b1011010110011:
        casez_tmp = 64'h0;
      13'b1011010110100:
        casez_tmp = 64'h0;
      13'b1011010110101:
        casez_tmp = 64'h0;
      13'b1011010110110:
        casez_tmp = 64'h0;
      13'b1011010110111:
        casez_tmp = 64'h0;
      13'b1011010111000:
        casez_tmp = 64'hA0;
      13'b1011010111001:
        casez_tmp = 64'h0;
      13'b1011010111010:
        casez_tmp = 64'h850FA600;
      13'b1011010111011:
        casez_tmp = 64'h0;
      13'b1011010111100:
        casez_tmp = 64'h0;
      13'b1011010111101:
        casez_tmp = 64'h0;
      13'b1011010111110:
        casez_tmp = 64'h0;
      13'b1011010111111:
        casez_tmp = 64'h0;
      13'b1011011000000:
        casez_tmp = 64'h0;
      13'b1011011000001:
        casez_tmp = 64'h0;
      13'b1011011000010:
        casez_tmp = 64'h0;
      13'b1011011000011:
        casez_tmp = 64'h0;
      13'b1011011000100:
        casez_tmp = 64'h0;
      13'b1011011000101:
        casez_tmp = 64'h0;
      13'b1011011000110:
        casez_tmp = 64'h0;
      13'b1011011000111:
        casez_tmp = 64'h0;
      13'b1011011001000:
        casez_tmp = 64'h0;
      13'b1011011001001:
        casez_tmp = 64'h850FA780;
      13'b1011011001010:
        casez_tmp = 64'h69;
      13'b1011011001011:
        casez_tmp = 64'h0;
      13'b1011011001100:
        casez_tmp = 64'h0;
      13'b1011011001101:
        casez_tmp = 64'h0;
      13'b1011011001110:
        casez_tmp = 64'h850F76D4;
      13'b1011011001111:
        casez_tmp = 64'h850F76E6;
      13'b1011011010000:
        casez_tmp = 64'h0;
      13'b1011011010001:
        casez_tmp = 64'h0;
      13'b1011011010010:
        casez_tmp = 64'h0;
      13'b1011011010011:
        casez_tmp = 64'h0;
      13'b1011011010100:
        casez_tmp = 64'h0;
      13'b1011011010101:
        casez_tmp = 64'h1800000000;
      13'b1011011010110:
        casez_tmp = 64'h0;
      13'b1011011010111:
        casez_tmp = 64'h100000000;
      13'b1011011011000:
        casez_tmp = 64'h850FA628;
      13'b1011011011001:
        casez_tmp = 64'h6A;
      13'b1011011011010:
        casez_tmp = 64'h850F6C50;
      13'b1011011011011:
        casez_tmp = 64'h0;
      13'b1011011011100:
        casez_tmp = 64'h0;
      13'b1011011011101:
        casez_tmp = 64'h0;
      13'b1011011011110:
        casez_tmp = 64'h0;
      13'b1011011011111:
        casez_tmp = 64'h0;
      13'b1011011100000:
        casez_tmp = 64'h0;
      13'b1011011100001:
        casez_tmp = 64'h0;
      13'b1011011100010:
        casez_tmp = 64'h0;
      13'b1011011100011:
        casez_tmp = 64'h0;
      13'b1011011100100:
        casez_tmp = 64'h0;
      13'b1011011100101:
        casez_tmp = 64'h18;
      13'b1011011100110:
        casez_tmp = 64'h0;
      13'b1011011100111:
        casez_tmp = 64'h850FA938;
      13'b1011011101000:
        casez_tmp = 64'h6E;
      13'b1011011101001:
        casez_tmp = 64'h850F6654;
      13'b1011011101010:
        casez_tmp = 64'h0;
      13'b1011011101011:
        casez_tmp = 64'h0;
      13'b1011011101100:
        casez_tmp = 64'h850F7A80;
      13'b1011011101101:
        casez_tmp = 64'h0;
      13'b1011011101110:
        casez_tmp = 64'h850F7EB8;
      13'b1011011101111:
        casez_tmp = 64'h850F7A50;
      13'b1011011110000:
        casez_tmp = 64'h0;
      13'b1011011110001:
        casez_tmp = 64'h0;
      13'b1011011110010:
        casez_tmp = 64'h0;
      13'b1011011110011:
        casez_tmp = 64'hC00000000;
      13'b1011011110100:
        casez_tmp = 64'h3000000000;
      13'b1011011110101:
        casez_tmp = 64'h10000000C;
      13'b1011011110110:
        casez_tmp = 64'h850FA928;
      13'b1011011110111:
        casez_tmp = 64'h70;
      13'b1011011111000:
        casez_tmp = 64'h0;
      13'b1011011111001:
        casez_tmp = 64'h0;
      13'b1011011111010:
        casez_tmp = 64'h0;
      13'b1011011111011:
        casez_tmp = 64'h0;
      13'b1011011111100:
        casez_tmp = 64'h0;
      13'b1011011111101:
        casez_tmp = 64'h0;
      13'b1011011111110:
        casez_tmp = 64'h0;
      13'b1011011111111:
        casez_tmp = 64'h0;
      13'b1011100000000:
        casez_tmp = 64'h0;
      13'b1011100000001:
        casez_tmp = 64'h0;
      13'b1011100000010:
        casez_tmp = 64'h0;
      13'b1011100000011:
        casez_tmp = 64'h0;
      13'b1011100000100:
        casez_tmp = 64'h0;
      13'b1011100000101:
        casez_tmp = 64'h850FA698;
      13'b1011100000110:
        casez_tmp = 64'h6F;
      13'b1011100000111:
        casez_tmp = 64'h850F70C0;
      13'b1011100001000:
        casez_tmp = 64'h0;
      13'b1011100001001:
        casez_tmp = 64'h0;
      13'b1011100001010:
        casez_tmp = 64'h0;
      13'b1011100001011:
        casez_tmp = 64'h0;
      13'b1011100001100:
        casez_tmp = 64'h0;
      13'b1011100001101:
        casez_tmp = 64'h0;
      13'b1011100001110:
        casez_tmp = 64'h0;
      13'b1011100001111:
        casez_tmp = 64'h0;
      13'b1011100010000:
        casez_tmp = 64'h0;
      13'b1011100010001:
        casez_tmp = 64'h29800000000;
      13'b1011100010010:
        casez_tmp = 64'h0;
      13'b1011100010011:
        casez_tmp = 64'h0;
      13'b1011100010100:
        casez_tmp = 64'h850FA688;
      13'b1011100010101:
        casez_tmp = 64'h72;
      13'b1011100010110:
        casez_tmp = 64'h0;
      13'b1011100010111:
        casez_tmp = 64'h0;
      13'b1011100011000:
        casez_tmp = 64'h850F6E18;
      13'b1011100011001:
        casez_tmp = 64'h0;
      13'b1011100011010:
        casez_tmp = 64'h0;
      13'b1011100011011:
        casez_tmp = 64'h0;
      13'b1011100011100:
        casez_tmp = 64'h0;
      13'b1011100011101:
        casez_tmp = 64'h0;
      13'b1011100011110:
        casez_tmp = 64'h0;
      13'b1011100011111:
        casez_tmp = 64'h0;
      13'b1011100100000:
        casez_tmp = 64'h800000000;
      13'b1011100100001:
        casez_tmp = 64'h0;
      13'b1011100100010:
        casez_tmp = 64'h0;
      13'b1011100100011:
        casez_tmp = 64'h850FAA30;
      13'b1011100100100:
        casez_tmp = 64'h77;
      13'b1011100100101:
        casez_tmp = 64'h0;
      13'b1011100100110:
        casez_tmp = 64'h0;
      13'b1011100100111:
        casez_tmp = 64'h850F872C;
      13'b1011100101000:
        casez_tmp = 64'h850F8716;
      13'b1011100101001:
        casez_tmp = 64'h0;
      13'b1011100101010:
        casez_tmp = 64'h0;
      13'b1011100101011:
        casez_tmp = 64'h0;
      13'b1011100101100:
        casez_tmp = 64'h0;
      13'b1011100101101:
        casez_tmp = 64'h0;
      13'b1011100101110:
        casez_tmp = 64'h0;
      13'b1011100101111:
        casez_tmp = 64'h800000000;
      13'b1011100110000:
        casez_tmp = 64'h0;
      13'b1011100110001:
        casez_tmp = 64'h100000000;
      13'b1011100110010:
        casez_tmp = 64'h0;
      13'b1011100110011:
        casez_tmp = 64'h0;
      13'b1011100110100:
        casez_tmp = 64'h0;
      13'b1011100110101:
        casez_tmp = 64'h0;
      13'b1011100110110:
        casez_tmp = 64'h0;
      13'b1011100110111:
        casez_tmp = 64'h0;
      13'b1011100111000:
        casez_tmp = 64'h0;
      13'b1011100111001:
        casez_tmp = 64'h0;
      13'b1011100111010:
        casez_tmp = 64'h0;
      13'b1011100111011:
        casez_tmp = 64'h0;
      13'b1011100111100:
        casez_tmp = 64'h0;
      13'b1011100111101:
        casez_tmp = 64'h0;
      13'b1011100111110:
        casez_tmp = 64'h0;
      13'b1011100111111:
        casez_tmp = 64'h0;
      13'b1011101000000:
        casez_tmp = 64'h0;
      13'b1011101000001:
        casez_tmp = 64'h0;
      13'b1011101000010:
        casez_tmp = 64'h0;
      13'b1011101000011:
        casez_tmp = 64'h0;
      13'b1011101000100:
        casez_tmp = 64'h0;
      13'b1011101000101:
        casez_tmp = 64'h0;
      13'b1011101000110:
        casez_tmp = 64'h0;
      13'b1011101000111:
        casez_tmp = 64'h0;
      13'b1011101001000:
        casez_tmp = 64'h0;
      13'b1011101001001:
        casez_tmp = 64'h0;
      13'b1011101001010:
        casez_tmp = 64'h0;
      13'b1011101001011:
        casez_tmp = 64'h0;
      13'b1011101001100:
        casez_tmp = 64'h0;
      13'b1011101001101:
        casez_tmp = 64'h0;
      13'b1011101001110:
        casez_tmp = 64'h0;
      13'b1011101001111:
        casez_tmp = 64'h0;
      13'b1011101010000:
        casez_tmp = 64'h0;
      13'b1011101010001:
        casez_tmp = 64'h0;
      13'b1011101010010:
        casez_tmp = 64'h0;
      13'b1011101010011:
        casez_tmp = 64'h0;
      13'b1011101010100:
        casez_tmp = 64'h0;
      13'b1011101010101:
        casez_tmp = 64'h0;
      13'b1011101010110:
        casez_tmp = 64'h0;
      13'b1011101010111:
        casez_tmp = 64'h0;
      13'b1011101011000:
        casez_tmp = 64'h0;
      13'b1011101011001:
        casez_tmp = 64'h0;
      13'b1011101011010:
        casez_tmp = 64'h0;
      13'b1011101011011:
        casez_tmp = 64'h0;
      13'b1011101011100:
        casez_tmp = 64'h0;
      13'b1011101011101:
        casez_tmp = 64'h0;
      13'b1011101011110:
        casez_tmp = 64'h0;
      13'b1011101011111:
        casez_tmp = 64'h0;
      13'b1011101100000:
        casez_tmp = 64'h0;
      13'b1011101100001:
        casez_tmp = 64'h0;
      13'b1011101100010:
        casez_tmp = 64'h0;
      13'b1011101100011:
        casez_tmp = 64'h0;
      13'b1011101100100:
        casez_tmp = 64'h0;
      13'b1011101100101:
        casez_tmp = 64'h0;
      13'b1011101100110:
        casez_tmp = 64'h0;
      13'b1011101100111:
        casez_tmp = 64'h0;
      13'b1011101101000:
        casez_tmp = 64'h0;
      13'b1011101101001:
        casez_tmp = 64'h0;
      13'b1011101101010:
        casez_tmp = 64'h0;
      13'b1011101101011:
        casez_tmp = 64'h0;
      13'b1011101101100:
        casez_tmp = 64'h0;
      13'b1011101101101:
        casez_tmp = 64'h0;
      13'b1011101101110:
        casez_tmp = 64'h0;
      13'b1011101101111:
        casez_tmp = 64'h0;
      13'b1011101110000:
        casez_tmp = 64'h0;
      13'b1011101110001:
        casez_tmp = 64'h0;
      13'b1011101110010:
        casez_tmp = 64'h0;
      13'b1011101110011:
        casez_tmp = 64'h0;
      13'b1011101110100:
        casez_tmp = 64'h0;
      13'b1011101110101:
        casez_tmp = 64'h0;
      13'b1011101110110:
        casez_tmp = 64'h0;
      13'b1011101110111:
        casez_tmp = 64'h0;
      13'b1011101111000:
        casez_tmp = 64'h0;
      13'b1011101111001:
        casez_tmp = 64'h0;
      13'b1011101111010:
        casez_tmp = 64'h0;
      13'b1011101111011:
        casez_tmp = 64'h0;
      13'b1011101111100:
        casez_tmp = 64'h0;
      13'b1011101111101:
        casez_tmp = 64'h0;
      13'b1011101111110:
        casez_tmp = 64'h0;
      13'b1011101111111:
        casez_tmp = 64'h0;
      13'b1011110000000:
        casez_tmp = 64'h0;
      13'b1011110000001:
        casez_tmp = 64'h0;
      13'b1011110000010:
        casez_tmp = 64'h0;
      13'b1011110000011:
        casez_tmp = 64'h0;
      13'b1011110000100:
        casez_tmp = 64'h0;
      13'b1011110000101:
        casez_tmp = 64'h0;
      13'b1011110000110:
        casez_tmp = 64'h0;
      13'b1011110000111:
        casez_tmp = 64'h0;
      13'b1011110001000:
        casez_tmp = 64'h0;
      13'b1011110001001:
        casez_tmp = 64'h0;
      13'b1011110001010:
        casez_tmp = 64'h0;
      13'b1011110001011:
        casez_tmp = 64'h0;
      13'b1011110001100:
        casez_tmp = 64'h0;
      13'b1011110001101:
        casez_tmp = 64'h0;
      13'b1011110001110:
        casez_tmp = 64'h0;
      13'b1011110001111:
        casez_tmp = 64'h0;
      13'b1011110010000:
        casez_tmp = 64'h0;
      13'b1011110010001:
        casez_tmp = 64'h0;
      13'b1011110010010:
        casez_tmp = 64'h0;
      13'b1011110010011:
        casez_tmp = 64'h0;
      13'b1011110010100:
        casez_tmp = 64'h0;
      13'b1011110010101:
        casez_tmp = 64'h0;
      13'b1011110010110:
        casez_tmp = 64'h0;
      13'b1011110010111:
        casez_tmp = 64'h0;
      13'b1011110011000:
        casez_tmp = 64'h0;
      13'b1011110011001:
        casez_tmp = 64'h0;
      13'b1011110011010:
        casez_tmp = 64'h0;
      13'b1011110011011:
        casez_tmp = 64'h0;
      13'b1011110011100:
        casez_tmp = 64'h0;
      13'b1011110011101:
        casez_tmp = 64'h0;
      13'b1011110011110:
        casez_tmp = 64'h0;
      13'b1011110011111:
        casez_tmp = 64'h0;
      13'b1011110100000:
        casez_tmp = 64'h0;
      13'b1011110100001:
        casez_tmp = 64'h0;
      13'b1011110100010:
        casez_tmp = 64'h0;
      13'b1011110100011:
        casez_tmp = 64'h0;
      13'b1011110100100:
        casez_tmp = 64'h0;
      13'b1011110100101:
        casez_tmp = 64'h0;
      13'b1011110100110:
        casez_tmp = 64'h0;
      13'b1011110100111:
        casez_tmp = 64'h0;
      13'b1011110101000:
        casez_tmp = 64'h0;
      13'b1011110101001:
        casez_tmp = 64'h0;
      13'b1011110101010:
        casez_tmp = 64'h0;
      13'b1011110101011:
        casez_tmp = 64'h0;
      13'b1011110101100:
        casez_tmp = 64'h0;
      13'b1011110101101:
        casez_tmp = 64'h0;
      13'b1011110101110:
        casez_tmp = 64'h0;
      13'b1011110101111:
        casez_tmp = 64'h0;
      13'b1011110110000:
        casez_tmp = 64'h0;
      13'b1011110110001:
        casez_tmp = 64'h0;
      13'b1011110110010:
        casez_tmp = 64'h0;
      13'b1011110110011:
        casez_tmp = 64'h0;
      13'b1011110110100:
        casez_tmp = 64'h0;
      13'b1011110110101:
        casez_tmp = 64'h0;
      13'b1011110110110:
        casez_tmp = 64'h0;
      13'b1011110110111:
        casez_tmp = 64'h0;
      13'b1011110111000:
        casez_tmp = 64'h0;
      13'b1011110111001:
        casez_tmp = 64'h0;
      13'b1011110111010:
        casez_tmp = 64'h0;
      13'b1011110111011:
        casez_tmp = 64'h0;
      13'b1011110111100:
        casez_tmp = 64'h0;
      13'b1011110111101:
        casez_tmp = 64'h0;
      13'b1011110111110:
        casez_tmp = 64'h0;
      13'b1011110111111:
        casez_tmp = 64'h0;
      13'b1011111000000:
        casez_tmp = 64'h0;
      13'b1011111000001:
        casez_tmp = 64'h0;
      13'b1011111000010:
        casez_tmp = 64'h0;
      13'b1011111000011:
        casez_tmp = 64'h0;
      13'b1011111000100:
        casez_tmp = 64'h0;
      13'b1011111000101:
        casez_tmp = 64'h0;
      13'b1011111000110:
        casez_tmp = 64'h0;
      13'b1011111000111:
        casez_tmp = 64'h0;
      13'b1011111001000:
        casez_tmp = 64'h0;
      13'b1011111001001:
        casez_tmp = 64'h0;
      13'b1011111001010:
        casez_tmp = 64'h0;
      13'b1011111001011:
        casez_tmp = 64'h0;
      13'b1011111001100:
        casez_tmp = 64'h0;
      13'b1011111001101:
        casez_tmp = 64'h0;
      13'b1011111001110:
        casez_tmp = 64'h0;
      13'b1011111001111:
        casez_tmp = 64'h0;
      13'b1011111010000:
        casez_tmp = 64'h0;
      13'b1011111010001:
        casez_tmp = 64'h0;
      13'b1011111010010:
        casez_tmp = 64'h0;
      13'b1011111010011:
        casez_tmp = 64'h0;
      13'b1011111010100:
        casez_tmp = 64'h0;
      13'b1011111010101:
        casez_tmp = 64'h0;
      13'b1011111010110:
        casez_tmp = 64'h0;
      13'b1011111010111:
        casez_tmp = 64'h0;
      13'b1011111011000:
        casez_tmp = 64'h0;
      13'b1011111011001:
        casez_tmp = 64'h0;
      13'b1011111011010:
        casez_tmp = 64'h0;
      13'b1011111011011:
        casez_tmp = 64'h0;
      13'b1011111011100:
        casez_tmp = 64'h0;
      13'b1011111011101:
        casez_tmp = 64'h0;
      13'b1011111011110:
        casez_tmp = 64'h0;
      13'b1011111011111:
        casez_tmp = 64'h0;
      13'b1011111100000:
        casez_tmp = 64'h0;
      13'b1011111100001:
        casez_tmp = 64'h0;
      13'b1011111100010:
        casez_tmp = 64'h0;
      13'b1011111100011:
        casez_tmp = 64'h0;
      13'b1011111100100:
        casez_tmp = 64'h0;
      13'b1011111100101:
        casez_tmp = 64'h0;
      13'b1011111100110:
        casez_tmp = 64'h0;
      13'b1011111100111:
        casez_tmp = 64'h0;
      13'b1011111101000:
        casez_tmp = 64'h0;
      13'b1011111101001:
        casez_tmp = 64'h0;
      13'b1011111101010:
        casez_tmp = 64'h0;
      13'b1011111101011:
        casez_tmp = 64'h0;
      13'b1011111101100:
        casez_tmp = 64'h0;
      13'b1011111101101:
        casez_tmp = 64'h0;
      13'b1011111101110:
        casez_tmp = 64'h0;
      13'b1011111101111:
        casez_tmp = 64'h0;
      13'b1011111110000:
        casez_tmp = 64'h0;
      13'b1011111110001:
        casez_tmp = 64'h0;
      13'b1011111110010:
        casez_tmp = 64'h0;
      13'b1011111110011:
        casez_tmp = 64'h0;
      13'b1011111110100:
        casez_tmp = 64'h0;
      13'b1011111110101:
        casez_tmp = 64'h0;
      13'b1011111110110:
        casez_tmp = 64'h0;
      13'b1011111110111:
        casez_tmp = 64'h0;
      13'b1011111111000:
        casez_tmp = 64'h0;
      13'b1011111111001:
        casez_tmp = 64'h0;
      13'b1011111111010:
        casez_tmp = 64'h0;
      13'b1011111111011:
        casez_tmp = 64'h0;
      13'b1011111111100:
        casez_tmp = 64'h0;
      13'b1011111111101:
        casez_tmp = 64'h0;
      13'b1011111111110:
        casez_tmp = 64'h0;
      13'b1011111111111:
        casez_tmp = 64'h0;
      13'b1100000000000:
        casez_tmp = 64'h0;
      13'b1100000000001:
        casez_tmp = 64'h0;
      13'b1100000000010:
        casez_tmp = 64'h0;
      13'b1100000000011:
        casez_tmp = 64'h0;
      13'b1100000000100:
        casez_tmp = 64'h0;
      13'b1100000000101:
        casez_tmp = 64'h0;
      13'b1100000000110:
        casez_tmp = 64'h0;
      13'b1100000000111:
        casez_tmp = 64'h0;
      13'b1100000001000:
        casez_tmp = 64'h0;
      13'b1100000001001:
        casez_tmp = 64'h0;
      13'b1100000001010:
        casez_tmp = 64'h0;
      13'b1100000001011:
        casez_tmp = 64'h0;
      13'b1100000001100:
        casez_tmp = 64'h0;
      13'b1100000001101:
        casez_tmp = 64'h0;
      13'b1100000001110:
        casez_tmp = 64'h0;
      13'b1100000001111:
        casez_tmp = 64'h0;
      13'b1100000010000:
        casez_tmp = 64'h0;
      13'b1100000010001:
        casez_tmp = 64'h0;
      13'b1100000010010:
        casez_tmp = 64'h0;
      13'b1100000010011:
        casez_tmp = 64'h0;
      13'b1100000010100:
        casez_tmp = 64'h0;
      13'b1100000010101:
        casez_tmp = 64'h0;
      13'b1100000010110:
        casez_tmp = 64'h0;
      13'b1100000010111:
        casez_tmp = 64'h0;
      13'b1100000011000:
        casez_tmp = 64'h0;
      13'b1100000011001:
        casez_tmp = 64'h0;
      13'b1100000011010:
        casez_tmp = 64'h0;
      13'b1100000011011:
        casez_tmp = 64'h0;
      13'b1100000011100:
        casez_tmp = 64'h0;
      13'b1100000011101:
        casez_tmp = 64'h0;
      13'b1100000011110:
        casez_tmp = 64'h0;
      13'b1100000011111:
        casez_tmp = 64'h0;
      13'b1100000100000:
        casez_tmp = 64'h0;
      13'b1100000100001:
        casez_tmp = 64'h0;
      13'b1100000100010:
        casez_tmp = 64'h0;
      13'b1100000100011:
        casez_tmp = 64'h0;
      13'b1100000100100:
        casez_tmp = 64'h0;
      13'b1100000100101:
        casez_tmp = 64'h0;
      13'b1100000100110:
        casez_tmp = 64'h0;
      13'b1100000100111:
        casez_tmp = 64'h0;
      13'b1100000101000:
        casez_tmp = 64'h0;
      13'b1100000101001:
        casez_tmp = 64'h0;
      13'b1100000101010:
        casez_tmp = 64'h0;
      13'b1100000101011:
        casez_tmp = 64'h0;
      13'b1100000101100:
        casez_tmp = 64'h0;
      13'b1100000101101:
        casez_tmp = 64'h0;
      13'b1100000101110:
        casez_tmp = 64'h0;
      13'b1100000101111:
        casez_tmp = 64'h0;
      13'b1100000110000:
        casez_tmp = 64'h0;
      13'b1100000110001:
        casez_tmp = 64'h0;
      13'b1100000110010:
        casez_tmp = 64'h0;
      13'b1100000110011:
        casez_tmp = 64'h0;
      13'b1100000110100:
        casez_tmp = 64'h0;
      13'b1100000110101:
        casez_tmp = 64'h0;
      13'b1100000110110:
        casez_tmp = 64'h0;
      13'b1100000110111:
        casez_tmp = 64'h0;
      13'b1100000111000:
        casez_tmp = 64'h0;
      13'b1100000111001:
        casez_tmp = 64'h0;
      13'b1100000111010:
        casez_tmp = 64'h0;
      13'b1100000111011:
        casez_tmp = 64'h0;
      13'b1100000111100:
        casez_tmp = 64'h0;
      13'b1100000111101:
        casez_tmp = 64'h0;
      13'b1100000111110:
        casez_tmp = 64'h0;
      13'b1100000111111:
        casez_tmp = 64'h0;
      13'b1100001000000:
        casez_tmp = 64'h0;
      13'b1100001000001:
        casez_tmp = 64'h0;
      13'b1100001000010:
        casez_tmp = 64'h0;
      13'b1100001000011:
        casez_tmp = 64'h0;
      13'b1100001000100:
        casez_tmp = 64'h0;
      13'b1100001000101:
        casez_tmp = 64'h0;
      13'b1100001000110:
        casez_tmp = 64'h0;
      13'b1100001000111:
        casez_tmp = 64'h0;
      13'b1100001001000:
        casez_tmp = 64'h0;
      13'b1100001001001:
        casez_tmp = 64'h0;
      13'b1100001001010:
        casez_tmp = 64'h0;
      13'b1100001001011:
        casez_tmp = 64'h0;
      13'b1100001001100:
        casez_tmp = 64'h0;
      13'b1100001001101:
        casez_tmp = 64'h0;
      13'b1100001001110:
        casez_tmp = 64'h0;
      13'b1100001001111:
        casez_tmp = 64'h0;
      13'b1100001010000:
        casez_tmp = 64'h0;
      13'b1100001010001:
        casez_tmp = 64'h0;
      13'b1100001010010:
        casez_tmp = 64'h0;
      13'b1100001010011:
        casez_tmp = 64'h0;
      13'b1100001010100:
        casez_tmp = 64'h0;
      13'b1100001010101:
        casez_tmp = 64'h0;
      13'b1100001010110:
        casez_tmp = 64'h0;
      13'b1100001010111:
        casez_tmp = 64'h0;
      13'b1100001011000:
        casez_tmp = 64'h0;
      13'b1100001011001:
        casez_tmp = 64'h0;
      13'b1100001011010:
        casez_tmp = 64'h0;
      13'b1100001011011:
        casez_tmp = 64'h0;
      13'b1100001011100:
        casez_tmp = 64'h0;
      13'b1100001011101:
        casez_tmp = 64'h0;
      13'b1100001011110:
        casez_tmp = 64'h0;
      13'b1100001011111:
        casez_tmp = 64'h0;
      13'b1100001100000:
        casez_tmp = 64'h0;
      13'b1100001100001:
        casez_tmp = 64'h0;
      13'b1100001100010:
        casez_tmp = 64'h0;
      13'b1100001100011:
        casez_tmp = 64'h0;
      13'b1100001100100:
        casez_tmp = 64'h0;
      13'b1100001100101:
        casez_tmp = 64'h0;
      13'b1100001100110:
        casez_tmp = 64'h0;
      13'b1100001100111:
        casez_tmp = 64'h0;
      13'b1100001101000:
        casez_tmp = 64'h0;
      13'b1100001101001:
        casez_tmp = 64'h0;
      13'b1100001101010:
        casez_tmp = 64'h0;
      13'b1100001101011:
        casez_tmp = 64'h0;
      13'b1100001101100:
        casez_tmp = 64'h0;
      13'b1100001101101:
        casez_tmp = 64'h0;
      13'b1100001101110:
        casez_tmp = 64'h0;
      13'b1100001101111:
        casez_tmp = 64'h0;
      13'b1100001110000:
        casez_tmp = 64'h0;
      13'b1100001110001:
        casez_tmp = 64'h0;
      13'b1100001110010:
        casez_tmp = 64'h0;
      13'b1100001110011:
        casez_tmp = 64'h0;
      13'b1100001110100:
        casez_tmp = 64'h0;
      13'b1100001110101:
        casez_tmp = 64'h0;
      13'b1100001110110:
        casez_tmp = 64'h0;
      13'b1100001110111:
        casez_tmp = 64'h0;
      13'b1100001111000:
        casez_tmp = 64'h0;
      13'b1100001111001:
        casez_tmp = 64'h0;
      13'b1100001111010:
        casez_tmp = 64'h0;
      13'b1100001111011:
        casez_tmp = 64'h0;
      13'b1100001111100:
        casez_tmp = 64'h0;
      13'b1100001111101:
        casez_tmp = 64'h0;
      13'b1100001111110:
        casez_tmp = 64'h0;
      13'b1100001111111:
        casez_tmp = 64'h0;
      13'b1100010000000:
        casez_tmp = 64'h0;
      13'b1100010000001:
        casez_tmp = 64'h0;
      13'b1100010000010:
        casez_tmp = 64'h0;
      13'b1100010000011:
        casez_tmp = 64'h0;
      13'b1100010000100:
        casez_tmp = 64'h0;
      13'b1100010000101:
        casez_tmp = 64'h0;
      13'b1100010000110:
        casez_tmp = 64'h0;
      13'b1100010000111:
        casez_tmp = 64'h0;
      13'b1100010001000:
        casez_tmp = 64'h0;
      13'b1100010001001:
        casez_tmp = 64'h0;
      13'b1100010001010:
        casez_tmp = 64'h0;
      13'b1100010001011:
        casez_tmp = 64'h0;
      13'b1100010001100:
        casez_tmp = 64'h0;
      13'b1100010001101:
        casez_tmp = 64'h0;
      13'b1100010001110:
        casez_tmp = 64'h0;
      13'b1100010001111:
        casez_tmp = 64'h0;
      13'b1100010010000:
        casez_tmp = 64'h0;
      13'b1100010010001:
        casez_tmp = 64'h0;
      13'b1100010010010:
        casez_tmp = 64'h0;
      13'b1100010010011:
        casez_tmp = 64'h0;
      13'b1100010010100:
        casez_tmp = 64'h0;
      13'b1100010010101:
        casez_tmp = 64'h0;
      13'b1100010010110:
        casez_tmp = 64'h0;
      13'b1100010010111:
        casez_tmp = 64'h0;
      13'b1100010011000:
        casez_tmp = 64'h0;
      13'b1100010011001:
        casez_tmp = 64'h0;
      13'b1100010011010:
        casez_tmp = 64'h0;
      13'b1100010011011:
        casez_tmp = 64'h0;
      13'b1100010011100:
        casez_tmp = 64'h0;
      13'b1100010011101:
        casez_tmp = 64'h0;
      13'b1100010011110:
        casez_tmp = 64'h0;
      13'b1100010011111:
        casez_tmp = 64'h0;
      13'b1100010100000:
        casez_tmp = 64'h0;
      13'b1100010100001:
        casez_tmp = 64'h0;
      13'b1100010100010:
        casez_tmp = 64'h0;
      13'b1100010100011:
        casez_tmp = 64'h0;
      13'b1100010100100:
        casez_tmp = 64'h0;
      13'b1100010100101:
        casez_tmp = 64'h0;
      13'b1100010100110:
        casez_tmp = 64'h0;
      13'b1100010100111:
        casez_tmp = 64'h0;
      13'b1100010101000:
        casez_tmp = 64'h0;
      13'b1100010101001:
        casez_tmp = 64'h0;
      13'b1100010101010:
        casez_tmp = 64'h0;
      13'b1100010101011:
        casez_tmp = 64'h0;
      13'b1100010101100:
        casez_tmp = 64'h0;
      13'b1100010101101:
        casez_tmp = 64'h0;
      13'b1100010101110:
        casez_tmp = 64'h0;
      13'b1100010101111:
        casez_tmp = 64'h0;
      13'b1100010110000:
        casez_tmp = 64'h0;
      13'b1100010110001:
        casez_tmp = 64'h0;
      13'b1100010110010:
        casez_tmp = 64'h0;
      13'b1100010110011:
        casez_tmp = 64'h0;
      13'b1100010110100:
        casez_tmp = 64'h0;
      13'b1100010110101:
        casez_tmp = 64'h0;
      13'b1100010110110:
        casez_tmp = 64'h0;
      13'b1100010110111:
        casez_tmp = 64'h0;
      13'b1100010111000:
        casez_tmp = 64'h0;
      13'b1100010111001:
        casez_tmp = 64'h0;
      13'b1100010111010:
        casez_tmp = 64'h0;
      13'b1100010111011:
        casez_tmp = 64'h0;
      13'b1100010111100:
        casez_tmp = 64'h0;
      13'b1100010111101:
        casez_tmp = 64'h0;
      13'b1100010111110:
        casez_tmp = 64'h0;
      13'b1100010111111:
        casez_tmp = 64'h0;
      13'b1100011000000:
        casez_tmp = 64'h0;
      13'b1100011000001:
        casez_tmp = 64'h0;
      13'b1100011000010:
        casez_tmp = 64'h0;
      13'b1100011000011:
        casez_tmp = 64'h0;
      13'b1100011000100:
        casez_tmp = 64'h0;
      13'b1100011000101:
        casez_tmp = 64'h0;
      13'b1100011000110:
        casez_tmp = 64'h0;
      13'b1100011000111:
        casez_tmp = 64'h0;
      13'b1100011001000:
        casez_tmp = 64'h0;
      13'b1100011001001:
        casez_tmp = 64'h0;
      13'b1100011001010:
        casez_tmp = 64'h0;
      13'b1100011001011:
        casez_tmp = 64'h0;
      13'b1100011001100:
        casez_tmp = 64'h0;
      13'b1100011001101:
        casez_tmp = 64'h0;
      13'b1100011001110:
        casez_tmp = 64'h0;
      13'b1100011001111:
        casez_tmp = 64'h0;
      13'b1100011010000:
        casez_tmp = 64'h0;
      13'b1100011010001:
        casez_tmp = 64'h0;
      13'b1100011010010:
        casez_tmp = 64'h0;
      13'b1100011010011:
        casez_tmp = 64'h0;
      13'b1100011010100:
        casez_tmp = 64'h0;
      13'b1100011010101:
        casez_tmp = 64'h0;
      13'b1100011010110:
        casez_tmp = 64'h0;
      13'b1100011010111:
        casez_tmp = 64'h0;
      13'b1100011011000:
        casez_tmp = 64'h0;
      13'b1100011011001:
        casez_tmp = 64'h0;
      13'b1100011011010:
        casez_tmp = 64'h0;
      13'b1100011011011:
        casez_tmp = 64'h0;
      13'b1100011011100:
        casez_tmp = 64'h0;
      13'b1100011011101:
        casez_tmp = 64'h0;
      13'b1100011011110:
        casez_tmp = 64'h0;
      13'b1100011011111:
        casez_tmp = 64'h0;
      13'b1100011100000:
        casez_tmp = 64'h0;
      13'b1100011100001:
        casez_tmp = 64'h0;
      13'b1100011100010:
        casez_tmp = 64'h0;
      13'b1100011100011:
        casez_tmp = 64'h0;
      13'b1100011100100:
        casez_tmp = 64'h0;
      13'b1100011100101:
        casez_tmp = 64'h0;
      13'b1100011100110:
        casez_tmp = 64'h0;
      13'b1100011100111:
        casez_tmp = 64'h0;
      13'b1100011101000:
        casez_tmp = 64'h0;
      13'b1100011101001:
        casez_tmp = 64'h0;
      13'b1100011101010:
        casez_tmp = 64'h0;
      13'b1100011101011:
        casez_tmp = 64'h0;
      13'b1100011101100:
        casez_tmp = 64'h0;
      13'b1100011101101:
        casez_tmp = 64'h0;
      13'b1100011101110:
        casez_tmp = 64'h0;
      13'b1100011101111:
        casez_tmp = 64'h0;
      13'b1100011110000:
        casez_tmp = 64'h0;
      13'b1100011110001:
        casez_tmp = 64'h0;
      13'b1100011110010:
        casez_tmp = 64'h0;
      13'b1100011110011:
        casez_tmp = 64'h0;
      13'b1100011110100:
        casez_tmp = 64'h0;
      13'b1100011110101:
        casez_tmp = 64'h0;
      13'b1100011110110:
        casez_tmp = 64'h0;
      13'b1100011110111:
        casez_tmp = 64'h0;
      13'b1100011111000:
        casez_tmp = 64'h0;
      13'b1100011111001:
        casez_tmp = 64'h0;
      13'b1100011111010:
        casez_tmp = 64'h0;
      13'b1100011111011:
        casez_tmp = 64'h0;
      13'b1100011111100:
        casez_tmp = 64'h0;
      13'b1100011111101:
        casez_tmp = 64'h0;
      13'b1100011111110:
        casez_tmp = 64'h0;
      13'b1100011111111:
        casez_tmp = 64'h0;
      13'b1100100000000:
        casez_tmp = 64'h0;
      13'b1100100000001:
        casez_tmp = 64'h0;
      13'b1100100000010:
        casez_tmp = 64'h0;
      13'b1100100000011:
        casez_tmp = 64'h0;
      13'b1100100000100:
        casez_tmp = 64'h0;
      13'b1100100000101:
        casez_tmp = 64'h0;
      13'b1100100000110:
        casez_tmp = 64'h0;
      13'b1100100000111:
        casez_tmp = 64'h0;
      13'b1100100001000:
        casez_tmp = 64'h0;
      13'b1100100001001:
        casez_tmp = 64'h0;
      13'b1100100001010:
        casez_tmp = 64'h0;
      13'b1100100001011:
        casez_tmp = 64'h0;
      13'b1100100001100:
        casez_tmp = 64'h0;
      13'b1100100001101:
        casez_tmp = 64'h0;
      13'b1100100001110:
        casez_tmp = 64'h0;
      13'b1100100001111:
        casez_tmp = 64'h0;
      13'b1100100010000:
        casez_tmp = 64'h0;
      13'b1100100010001:
        casez_tmp = 64'h0;
      13'b1100100010010:
        casez_tmp = 64'h0;
      13'b1100100010011:
        casez_tmp = 64'h0;
      13'b1100100010100:
        casez_tmp = 64'h0;
      13'b1100100010101:
        casez_tmp = 64'h0;
      13'b1100100010110:
        casez_tmp = 64'h0;
      13'b1100100010111:
        casez_tmp = 64'h0;
      13'b1100100011000:
        casez_tmp = 64'h0;
      13'b1100100011001:
        casez_tmp = 64'h0;
      13'b1100100011010:
        casez_tmp = 64'h0;
      13'b1100100011011:
        casez_tmp = 64'h0;
      13'b1100100011100:
        casez_tmp = 64'h0;
      13'b1100100011101:
        casez_tmp = 64'h0;
      13'b1100100011110:
        casez_tmp = 64'h0;
      13'b1100100011111:
        casez_tmp = 64'h0;
      13'b1100100100000:
        casez_tmp = 64'h0;
      13'b1100100100001:
        casez_tmp = 64'h0;
      13'b1100100100010:
        casez_tmp = 64'h0;
      13'b1100100100011:
        casez_tmp = 64'h0;
      13'b1100100100100:
        casez_tmp = 64'h0;
      13'b1100100100101:
        casez_tmp = 64'h0;
      13'b1100100100110:
        casez_tmp = 64'h0;
      13'b1100100100111:
        casez_tmp = 64'h0;
      13'b1100100101000:
        casez_tmp = 64'h0;
      13'b1100100101001:
        casez_tmp = 64'h0;
      13'b1100100101010:
        casez_tmp = 64'h0;
      13'b1100100101011:
        casez_tmp = 64'h0;
      13'b1100100101100:
        casez_tmp = 64'h0;
      13'b1100100101101:
        casez_tmp = 64'h0;
      13'b1100100101110:
        casez_tmp = 64'h0;
      13'b1100100101111:
        casez_tmp = 64'h0;
      13'b1100100110000:
        casez_tmp = 64'h0;
      13'b1100100110001:
        casez_tmp = 64'h0;
      13'b1100100110010:
        casez_tmp = 64'h0;
      13'b1100100110011:
        casez_tmp = 64'h0;
      13'b1100100110100:
        casez_tmp = 64'h0;
      13'b1100100110101:
        casez_tmp = 64'h0;
      13'b1100100110110:
        casez_tmp = 64'h0;
      13'b1100100110111:
        casez_tmp = 64'h0;
      13'b1100100111000:
        casez_tmp = 64'h0;
      13'b1100100111001:
        casez_tmp = 64'h0;
      13'b1100100111010:
        casez_tmp = 64'h0;
      13'b1100100111011:
        casez_tmp = 64'h0;
      13'b1100100111100:
        casez_tmp = 64'h0;
      13'b1100100111101:
        casez_tmp = 64'h0;
      13'b1100100111110:
        casez_tmp = 64'h0;
      13'b1100100111111:
        casez_tmp = 64'h0;
      13'b1100101000000:
        casez_tmp = 64'h0;
      13'b1100101000001:
        casez_tmp = 64'h0;
      13'b1100101000010:
        casez_tmp = 64'h0;
      13'b1100101000011:
        casez_tmp = 64'h0;
      13'b1100101000100:
        casez_tmp = 64'h0;
      13'b1100101000101:
        casez_tmp = 64'h0;
      13'b1100101000110:
        casez_tmp = 64'h0;
      13'b1100101000111:
        casez_tmp = 64'h0;
      13'b1100101001000:
        casez_tmp = 64'h0;
      13'b1100101001001:
        casez_tmp = 64'h0;
      13'b1100101001010:
        casez_tmp = 64'h0;
      13'b1100101001011:
        casez_tmp = 64'h0;
      13'b1100101001100:
        casez_tmp = 64'h0;
      13'b1100101001101:
        casez_tmp = 64'h0;
      13'b1100101001110:
        casez_tmp = 64'h0;
      13'b1100101001111:
        casez_tmp = 64'h0;
      13'b1100101010000:
        casez_tmp = 64'h0;
      13'b1100101010001:
        casez_tmp = 64'h0;
      13'b1100101010010:
        casez_tmp = 64'h0;
      13'b1100101010011:
        casez_tmp = 64'h0;
      13'b1100101010100:
        casez_tmp = 64'h0;
      13'b1100101010101:
        casez_tmp = 64'h0;
      13'b1100101010110:
        casez_tmp = 64'h0;
      13'b1100101010111:
        casez_tmp = 64'h0;
      13'b1100101011000:
        casez_tmp = 64'h0;
      13'b1100101011001:
        casez_tmp = 64'h0;
      13'b1100101011010:
        casez_tmp = 64'h0;
      13'b1100101011011:
        casez_tmp = 64'h0;
      13'b1100101011100:
        casez_tmp = 64'h0;
      13'b1100101011101:
        casez_tmp = 64'h0;
      13'b1100101011110:
        casez_tmp = 64'h0;
      13'b1100101011111:
        casez_tmp = 64'h0;
      13'b1100101100000:
        casez_tmp = 64'h0;
      13'b1100101100001:
        casez_tmp = 64'h0;
      13'b1100101100010:
        casez_tmp = 64'h0;
      13'b1100101100011:
        casez_tmp = 64'h0;
      13'b1100101100100:
        casez_tmp = 64'h0;
      13'b1100101100101:
        casez_tmp = 64'h0;
      13'b1100101100110:
        casez_tmp = 64'h0;
      13'b1100101100111:
        casez_tmp = 64'h0;
      13'b1100101101000:
        casez_tmp = 64'h0;
      13'b1100101101001:
        casez_tmp = 64'h0;
      13'b1100101101010:
        casez_tmp = 64'h0;
      13'b1100101101011:
        casez_tmp = 64'h0;
      13'b1100101101100:
        casez_tmp = 64'h0;
      13'b1100101101101:
        casez_tmp = 64'h0;
      13'b1100101101110:
        casez_tmp = 64'h0;
      13'b1100101101111:
        casez_tmp = 64'h0;
      13'b1100101110000:
        casez_tmp = 64'h0;
      13'b1100101110001:
        casez_tmp = 64'h0;
      13'b1100101110010:
        casez_tmp = 64'h0;
      13'b1100101110011:
        casez_tmp = 64'h0;
      13'b1100101110100:
        casez_tmp = 64'h0;
      13'b1100101110101:
        casez_tmp = 64'h0;
      13'b1100101110110:
        casez_tmp = 64'h0;
      13'b1100101110111:
        casez_tmp = 64'h0;
      13'b1100101111000:
        casez_tmp = 64'h0;
      13'b1100101111001:
        casez_tmp = 64'h0;
      13'b1100101111010:
        casez_tmp = 64'h0;
      13'b1100101111011:
        casez_tmp = 64'h0;
      13'b1100101111100:
        casez_tmp = 64'h0;
      13'b1100101111101:
        casez_tmp = 64'h0;
      13'b1100101111110:
        casez_tmp = 64'h0;
      13'b1100101111111:
        casez_tmp = 64'h0;
      13'b1100110000000:
        casez_tmp = 64'h0;
      13'b1100110000001:
        casez_tmp = 64'h0;
      13'b1100110000010:
        casez_tmp = 64'h0;
      13'b1100110000011:
        casez_tmp = 64'h0;
      13'b1100110000100:
        casez_tmp = 64'h0;
      13'b1100110000101:
        casez_tmp = 64'h0;
      13'b1100110000110:
        casez_tmp = 64'h0;
      13'b1100110000111:
        casez_tmp = 64'h0;
      13'b1100110001000:
        casez_tmp = 64'h0;
      13'b1100110001001:
        casez_tmp = 64'h0;
      13'b1100110001010:
        casez_tmp = 64'h0;
      13'b1100110001011:
        casez_tmp = 64'h0;
      13'b1100110001100:
        casez_tmp = 64'h0;
      13'b1100110001101:
        casez_tmp = 64'h0;
      13'b1100110001110:
        casez_tmp = 64'h0;
      13'b1100110001111:
        casez_tmp = 64'h0;
      13'b1100110010000:
        casez_tmp = 64'h0;
      13'b1100110010001:
        casez_tmp = 64'h0;
      13'b1100110010010:
        casez_tmp = 64'h0;
      13'b1100110010011:
        casez_tmp = 64'h0;
      13'b1100110010100:
        casez_tmp = 64'h0;
      13'b1100110010101:
        casez_tmp = 64'h0;
      13'b1100110010110:
        casez_tmp = 64'h0;
      13'b1100110010111:
        casez_tmp = 64'h0;
      13'b1100110011000:
        casez_tmp = 64'h0;
      13'b1100110011001:
        casez_tmp = 64'h0;
      13'b1100110011010:
        casez_tmp = 64'h0;
      13'b1100110011011:
        casez_tmp = 64'h0;
      13'b1100110011100:
        casez_tmp = 64'h0;
      13'b1100110011101:
        casez_tmp = 64'h0;
      13'b1100110011110:
        casez_tmp = 64'h0;
      13'b1100110011111:
        casez_tmp = 64'h0;
      13'b1100110100000:
        casez_tmp = 64'h0;
      13'b1100110100001:
        casez_tmp = 64'h0;
      13'b1100110100010:
        casez_tmp = 64'h0;
      13'b1100110100011:
        casez_tmp = 64'h0;
      13'b1100110100100:
        casez_tmp = 64'h0;
      13'b1100110100101:
        casez_tmp = 64'h0;
      13'b1100110100110:
        casez_tmp = 64'h0;
      13'b1100110100111:
        casez_tmp = 64'h0;
      13'b1100110101000:
        casez_tmp = 64'h0;
      13'b1100110101001:
        casez_tmp = 64'h0;
      13'b1100110101010:
        casez_tmp = 64'h0;
      13'b1100110101011:
        casez_tmp = 64'h0;
      13'b1100110101100:
        casez_tmp = 64'h0;
      13'b1100110101101:
        casez_tmp = 64'h0;
      13'b1100110101110:
        casez_tmp = 64'h0;
      13'b1100110101111:
        casez_tmp = 64'h0;
      13'b1100110110000:
        casez_tmp = 64'h0;
      13'b1100110110001:
        casez_tmp = 64'h0;
      13'b1100110110010:
        casez_tmp = 64'h0;
      13'b1100110110011:
        casez_tmp = 64'h0;
      13'b1100110110100:
        casez_tmp = 64'h0;
      13'b1100110110101:
        casez_tmp = 64'h0;
      13'b1100110110110:
        casez_tmp = 64'h0;
      13'b1100110110111:
        casez_tmp = 64'h0;
      13'b1100110111000:
        casez_tmp = 64'h0;
      13'b1100110111001:
        casez_tmp = 64'h0;
      13'b1100110111010:
        casez_tmp = 64'h0;
      13'b1100110111011:
        casez_tmp = 64'h0;
      13'b1100110111100:
        casez_tmp = 64'h0;
      13'b1100110111101:
        casez_tmp = 64'h0;
      13'b1100110111110:
        casez_tmp = 64'h0;
      13'b1100110111111:
        casez_tmp = 64'h0;
      13'b1100111000000:
        casez_tmp = 64'h0;
      13'b1100111000001:
        casez_tmp = 64'h0;
      13'b1100111000010:
        casez_tmp = 64'h0;
      13'b1100111000011:
        casez_tmp = 64'h0;
      13'b1100111000100:
        casez_tmp = 64'h0;
      13'b1100111000101:
        casez_tmp = 64'h0;
      13'b1100111000110:
        casez_tmp = 64'h0;
      13'b1100111000111:
        casez_tmp = 64'h0;
      13'b1100111001000:
        casez_tmp = 64'h0;
      13'b1100111001001:
        casez_tmp = 64'h0;
      13'b1100111001010:
        casez_tmp = 64'h0;
      13'b1100111001011:
        casez_tmp = 64'h0;
      13'b1100111001100:
        casez_tmp = 64'h0;
      13'b1100111001101:
        casez_tmp = 64'h0;
      13'b1100111001110:
        casez_tmp = 64'h0;
      13'b1100111001111:
        casez_tmp = 64'h0;
      13'b1100111010000:
        casez_tmp = 64'h0;
      13'b1100111010001:
        casez_tmp = 64'h0;
      13'b1100111010010:
        casez_tmp = 64'h0;
      13'b1100111010011:
        casez_tmp = 64'h0;
      13'b1100111010100:
        casez_tmp = 64'h0;
      13'b1100111010101:
        casez_tmp = 64'h0;
      13'b1100111010110:
        casez_tmp = 64'h0;
      13'b1100111010111:
        casez_tmp = 64'h0;
      13'b1100111011000:
        casez_tmp = 64'h0;
      13'b1100111011001:
        casez_tmp = 64'h0;
      13'b1100111011010:
        casez_tmp = 64'h0;
      13'b1100111011011:
        casez_tmp = 64'h0;
      13'b1100111011100:
        casez_tmp = 64'h0;
      13'b1100111011101:
        casez_tmp = 64'h0;
      13'b1100111011110:
        casez_tmp = 64'h0;
      13'b1100111011111:
        casez_tmp = 64'h0;
      13'b1100111100000:
        casez_tmp = 64'h0;
      13'b1100111100001:
        casez_tmp = 64'h0;
      13'b1100111100010:
        casez_tmp = 64'h0;
      13'b1100111100011:
        casez_tmp = 64'h0;
      13'b1100111100100:
        casez_tmp = 64'h0;
      13'b1100111100101:
        casez_tmp = 64'h0;
      13'b1100111100110:
        casez_tmp = 64'h0;
      13'b1100111100111:
        casez_tmp = 64'h0;
      13'b1100111101000:
        casez_tmp = 64'h0;
      13'b1100111101001:
        casez_tmp = 64'h0;
      13'b1100111101010:
        casez_tmp = 64'h0;
      13'b1100111101011:
        casez_tmp = 64'h0;
      13'b1100111101100:
        casez_tmp = 64'h0;
      13'b1100111101101:
        casez_tmp = 64'h0;
      13'b1100111101110:
        casez_tmp = 64'h0;
      13'b1100111101111:
        casez_tmp = 64'h0;
      13'b1100111110000:
        casez_tmp = 64'h0;
      13'b1100111110001:
        casez_tmp = 64'h0;
      13'b1100111110010:
        casez_tmp = 64'h0;
      13'b1100111110011:
        casez_tmp = 64'h0;
      13'b1100111110100:
        casez_tmp = 64'h0;
      13'b1100111110101:
        casez_tmp = 64'h0;
      13'b1100111110110:
        casez_tmp = 64'h0;
      13'b1100111110111:
        casez_tmp = 64'h0;
      13'b1100111111000:
        casez_tmp = 64'h0;
      13'b1100111111001:
        casez_tmp = 64'h0;
      13'b1100111111010:
        casez_tmp = 64'h0;
      13'b1100111111011:
        casez_tmp = 64'h0;
      13'b1100111111100:
        casez_tmp = 64'h0;
      13'b1100111111101:
        casez_tmp = 64'h0;
      13'b1100111111110:
        casez_tmp = 64'h0;
      13'b1100111111111:
        casez_tmp = 64'h0;
      13'b1101000000000:
        casez_tmp = 64'h0;
      13'b1101000000001:
        casez_tmp = 64'h0;
      13'b1101000000010:
        casez_tmp = 64'h0;
      13'b1101000000011:
        casez_tmp = 64'h0;
      13'b1101000000100:
        casez_tmp = 64'h0;
      13'b1101000000101:
        casez_tmp = 64'h0;
      13'b1101000000110:
        casez_tmp = 64'h0;
      13'b1101000000111:
        casez_tmp = 64'h0;
      13'b1101000001000:
        casez_tmp = 64'h0;
      13'b1101000001001:
        casez_tmp = 64'h0;
      13'b1101000001010:
        casez_tmp = 64'h0;
      13'b1101000001011:
        casez_tmp = 64'h0;
      13'b1101000001100:
        casez_tmp = 64'h0;
      13'b1101000001101:
        casez_tmp = 64'h0;
      13'b1101000001110:
        casez_tmp = 64'h0;
      13'b1101000001111:
        casez_tmp = 64'h0;
      13'b1101000010000:
        casez_tmp = 64'h0;
      13'b1101000010001:
        casez_tmp = 64'h0;
      13'b1101000010010:
        casez_tmp = 64'h0;
      13'b1101000010011:
        casez_tmp = 64'h0;
      13'b1101000010100:
        casez_tmp = 64'h0;
      13'b1101000010101:
        casez_tmp = 64'h0;
      13'b1101000010110:
        casez_tmp = 64'h0;
      13'b1101000010111:
        casez_tmp = 64'h0;
      13'b1101000011000:
        casez_tmp = 64'h0;
      13'b1101000011001:
        casez_tmp = 64'h0;
      13'b1101000011010:
        casez_tmp = 64'h0;
      13'b1101000011011:
        casez_tmp = 64'h0;
      13'b1101000011100:
        casez_tmp = 64'h0;
      13'b1101000011101:
        casez_tmp = 64'h0;
      13'b1101000011110:
        casez_tmp = 64'h0;
      13'b1101000011111:
        casez_tmp = 64'h0;
      13'b1101000100000:
        casez_tmp = 64'h0;
      13'b1101000100001:
        casez_tmp = 64'h0;
      13'b1101000100010:
        casez_tmp = 64'h0;
      13'b1101000100011:
        casez_tmp = 64'h0;
      13'b1101000100100:
        casez_tmp = 64'h0;
      13'b1101000100101:
        casez_tmp = 64'h0;
      13'b1101000100110:
        casez_tmp = 64'h0;
      13'b1101000100111:
        casez_tmp = 64'h0;
      13'b1101000101000:
        casez_tmp = 64'h0;
      13'b1101000101001:
        casez_tmp = 64'h0;
      13'b1101000101010:
        casez_tmp = 64'h0;
      13'b1101000101011:
        casez_tmp = 64'h0;
      13'b1101000101100:
        casez_tmp = 64'h0;
      13'b1101000101101:
        casez_tmp = 64'h0;
      13'b1101000101110:
        casez_tmp = 64'h0;
      13'b1101000101111:
        casez_tmp = 64'h0;
      13'b1101000110000:
        casez_tmp = 64'h0;
      13'b1101000110001:
        casez_tmp = 64'h0;
      13'b1101000110010:
        casez_tmp = 64'h0;
      13'b1101000110011:
        casez_tmp = 64'h0;
      13'b1101000110100:
        casez_tmp = 64'h0;
      13'b1101000110101:
        casez_tmp = 64'h0;
      13'b1101000110110:
        casez_tmp = 64'h0;
      13'b1101000110111:
        casez_tmp = 64'h0;
      13'b1101000111000:
        casez_tmp = 64'h0;
      13'b1101000111001:
        casez_tmp = 64'h0;
      13'b1101000111010:
        casez_tmp = 64'h0;
      13'b1101000111011:
        casez_tmp = 64'h0;
      13'b1101000111100:
        casez_tmp = 64'h0;
      13'b1101000111101:
        casez_tmp = 64'h0;
      13'b1101000111110:
        casez_tmp = 64'h0;
      13'b1101000111111:
        casez_tmp = 64'h0;
      13'b1101001000000:
        casez_tmp = 64'h0;
      13'b1101001000001:
        casez_tmp = 64'h0;
      13'b1101001000010:
        casez_tmp = 64'h0;
      13'b1101001000011:
        casez_tmp = 64'h0;
      13'b1101001000100:
        casez_tmp = 64'h0;
      13'b1101001000101:
        casez_tmp = 64'h0;
      13'b1101001000110:
        casez_tmp = 64'h0;
      13'b1101001000111:
        casez_tmp = 64'h0;
      13'b1101001001000:
        casez_tmp = 64'h0;
      13'b1101001001001:
        casez_tmp = 64'h0;
      13'b1101001001010:
        casez_tmp = 64'h0;
      13'b1101001001011:
        casez_tmp = 64'h0;
      13'b1101001001100:
        casez_tmp = 64'h0;
      13'b1101001001101:
        casez_tmp = 64'h0;
      13'b1101001001110:
        casez_tmp = 64'h0;
      13'b1101001001111:
        casez_tmp = 64'h0;
      13'b1101001010000:
        casez_tmp = 64'h0;
      13'b1101001010001:
        casez_tmp = 64'h0;
      13'b1101001010010:
        casez_tmp = 64'h0;
      13'b1101001010011:
        casez_tmp = 64'h0;
      13'b1101001010100:
        casez_tmp = 64'h0;
      13'b1101001010101:
        casez_tmp = 64'h0;
      13'b1101001010110:
        casez_tmp = 64'h0;
      13'b1101001010111:
        casez_tmp = 64'h0;
      13'b1101001011000:
        casez_tmp = 64'h0;
      13'b1101001011001:
        casez_tmp = 64'h0;
      13'b1101001011010:
        casez_tmp = 64'h0;
      13'b1101001011011:
        casez_tmp = 64'h0;
      13'b1101001011100:
        casez_tmp = 64'h0;
      13'b1101001011101:
        casez_tmp = 64'h0;
      13'b1101001011110:
        casez_tmp = 64'h0;
      13'b1101001011111:
        casez_tmp = 64'h0;
      13'b1101001100000:
        casez_tmp = 64'h0;
      13'b1101001100001:
        casez_tmp = 64'h0;
      13'b1101001100010:
        casez_tmp = 64'h0;
      13'b1101001100011:
        casez_tmp = 64'h0;
      13'b1101001100100:
        casez_tmp = 64'h0;
      13'b1101001100101:
        casez_tmp = 64'h0;
      13'b1101001100110:
        casez_tmp = 64'h0;
      13'b1101001100111:
        casez_tmp = 64'h0;
      13'b1101001101000:
        casez_tmp = 64'h0;
      13'b1101001101001:
        casez_tmp = 64'h0;
      13'b1101001101010:
        casez_tmp = 64'h0;
      13'b1101001101011:
        casez_tmp = 64'h0;
      13'b1101001101100:
        casez_tmp = 64'h0;
      13'b1101001101101:
        casez_tmp = 64'h0;
      13'b1101001101110:
        casez_tmp = 64'h0;
      13'b1101001101111:
        casez_tmp = 64'h0;
      13'b1101001110000:
        casez_tmp = 64'h0;
      13'b1101001110001:
        casez_tmp = 64'h0;
      13'b1101001110010:
        casez_tmp = 64'h0;
      13'b1101001110011:
        casez_tmp = 64'h0;
      13'b1101001110100:
        casez_tmp = 64'h0;
      13'b1101001110101:
        casez_tmp = 64'h0;
      13'b1101001110110:
        casez_tmp = 64'h0;
      13'b1101001110111:
        casez_tmp = 64'h0;
      13'b1101001111000:
        casez_tmp = 64'h0;
      13'b1101001111001:
        casez_tmp = 64'h0;
      13'b1101001111010:
        casez_tmp = 64'h0;
      13'b1101001111011:
        casez_tmp = 64'h0;
      13'b1101001111100:
        casez_tmp = 64'h0;
      13'b1101001111101:
        casez_tmp = 64'h0;
      13'b1101001111110:
        casez_tmp = 64'h0;
      13'b1101001111111:
        casez_tmp = 64'h0;
      13'b1101010000000:
        casez_tmp = 64'h0;
      13'b1101010000001:
        casez_tmp = 64'h0;
      13'b1101010000010:
        casez_tmp = 64'h0;
      13'b1101010000011:
        casez_tmp = 64'h0;
      13'b1101010000100:
        casez_tmp = 64'h0;
      13'b1101010000101:
        casez_tmp = 64'h0;
      13'b1101010000110:
        casez_tmp = 64'h0;
      13'b1101010000111:
        casez_tmp = 64'h0;
      13'b1101010001000:
        casez_tmp = 64'h0;
      13'b1101010001001:
        casez_tmp = 64'h0;
      13'b1101010001010:
        casez_tmp = 64'h0;
      13'b1101010001011:
        casez_tmp = 64'h0;
      13'b1101010001100:
        casez_tmp = 64'h0;
      13'b1101010001101:
        casez_tmp = 64'h0;
      13'b1101010001110:
        casez_tmp = 64'h0;
      13'b1101010001111:
        casez_tmp = 64'h0;
      13'b1101010010000:
        casez_tmp = 64'h0;
      13'b1101010010001:
        casez_tmp = 64'h0;
      13'b1101010010010:
        casez_tmp = 64'h0;
      13'b1101010010011:
        casez_tmp = 64'h0;
      13'b1101010010100:
        casez_tmp = 64'h0;
      13'b1101010010101:
        casez_tmp = 64'h0;
      13'b1101010010110:
        casez_tmp = 64'h0;
      13'b1101010010111:
        casez_tmp = 64'h0;
      13'b1101010011000:
        casez_tmp = 64'h0;
      13'b1101010011001:
        casez_tmp = 64'h0;
      13'b1101010011010:
        casez_tmp = 64'h0;
      13'b1101010011011:
        casez_tmp = 64'h0;
      13'b1101010011100:
        casez_tmp = 64'h0;
      13'b1101010011101:
        casez_tmp = 64'h0;
      13'b1101010011110:
        casez_tmp = 64'h0;
      13'b1101010011111:
        casez_tmp = 64'h0;
      13'b1101010100000:
        casez_tmp = 64'h0;
      13'b1101010100001:
        casez_tmp = 64'h0;
      13'b1101010100010:
        casez_tmp = 64'h0;
      13'b1101010100011:
        casez_tmp = 64'h0;
      13'b1101010100100:
        casez_tmp = 64'h0;
      13'b1101010100101:
        casez_tmp = 64'h0;
      13'b1101010100110:
        casez_tmp = 64'h0;
      13'b1101010100111:
        casez_tmp = 64'h0;
      13'b1101010101000:
        casez_tmp = 64'h0;
      13'b1101010101001:
        casez_tmp = 64'h0;
      13'b1101010101010:
        casez_tmp = 64'h0;
      13'b1101010101011:
        casez_tmp = 64'h0;
      13'b1101010101100:
        casez_tmp = 64'h0;
      13'b1101010101101:
        casez_tmp = 64'h0;
      13'b1101010101110:
        casez_tmp = 64'h0;
      13'b1101010101111:
        casez_tmp = 64'h0;
      13'b1101010110000:
        casez_tmp = 64'h0;
      13'b1101010110001:
        casez_tmp = 64'h0;
      13'b1101010110010:
        casez_tmp = 64'h0;
      13'b1101010110011:
        casez_tmp = 64'h0;
      13'b1101010110100:
        casez_tmp = 64'h0;
      13'b1101010110101:
        casez_tmp = 64'h0;
      13'b1101010110110:
        casez_tmp = 64'h0;
      13'b1101010110111:
        casez_tmp = 64'h0;
      13'b1101010111000:
        casez_tmp = 64'h0;
      13'b1101010111001:
        casez_tmp = 64'h0;
      13'b1101010111010:
        casez_tmp = 64'h0;
      13'b1101010111011:
        casez_tmp = 64'h0;
      13'b1101010111100:
        casez_tmp = 64'h0;
      13'b1101010111101:
        casez_tmp = 64'h0;
      13'b1101010111110:
        casez_tmp = 64'h0;
      13'b1101010111111:
        casez_tmp = 64'h0;
      13'b1101011000000:
        casez_tmp = 64'h0;
      13'b1101011000001:
        casez_tmp = 64'h0;
      13'b1101011000010:
        casez_tmp = 64'h0;
      13'b1101011000011:
        casez_tmp = 64'h0;
      13'b1101011000100:
        casez_tmp = 64'h0;
      13'b1101011000101:
        casez_tmp = 64'h0;
      13'b1101011000110:
        casez_tmp = 64'h0;
      13'b1101011000111:
        casez_tmp = 64'h0;
      13'b1101011001000:
        casez_tmp = 64'h0;
      13'b1101011001001:
        casez_tmp = 64'h0;
      13'b1101011001010:
        casez_tmp = 64'h0;
      13'b1101011001011:
        casez_tmp = 64'h0;
      13'b1101011001100:
        casez_tmp = 64'h0;
      13'b1101011001101:
        casez_tmp = 64'h0;
      13'b1101011001110:
        casez_tmp = 64'h0;
      13'b1101011001111:
        casez_tmp = 64'h0;
      13'b1101011010000:
        casez_tmp = 64'h0;
      13'b1101011010001:
        casez_tmp = 64'h0;
      13'b1101011010010:
        casez_tmp = 64'h0;
      13'b1101011010011:
        casez_tmp = 64'h0;
      13'b1101011010100:
        casez_tmp = 64'h0;
      13'b1101011010101:
        casez_tmp = 64'h0;
      13'b1101011010110:
        casez_tmp = 64'h0;
      13'b1101011010111:
        casez_tmp = 64'h0;
      13'b1101011011000:
        casez_tmp = 64'h0;
      13'b1101011011001:
        casez_tmp = 64'h0;
      13'b1101011011010:
        casez_tmp = 64'h0;
      13'b1101011011011:
        casez_tmp = 64'h0;
      13'b1101011011100:
        casez_tmp = 64'h0;
      13'b1101011011101:
        casez_tmp = 64'h0;
      13'b1101011011110:
        casez_tmp = 64'h0;
      13'b1101011011111:
        casez_tmp = 64'h0;
      13'b1101011100000:
        casez_tmp = 64'h0;
      13'b1101011100001:
        casez_tmp = 64'h0;
      13'b1101011100010:
        casez_tmp = 64'h0;
      13'b1101011100011:
        casez_tmp = 64'h0;
      13'b1101011100100:
        casez_tmp = 64'h0;
      13'b1101011100101:
        casez_tmp = 64'h0;
      13'b1101011100110:
        casez_tmp = 64'h0;
      13'b1101011100111:
        casez_tmp = 64'h0;
      13'b1101011101000:
        casez_tmp = 64'h0;
      13'b1101011101001:
        casez_tmp = 64'h0;
      13'b1101011101010:
        casez_tmp = 64'h0;
      13'b1101011101011:
        casez_tmp = 64'h0;
      13'b1101011101100:
        casez_tmp = 64'h0;
      13'b1101011101101:
        casez_tmp = 64'h0;
      13'b1101011101110:
        casez_tmp = 64'h0;
      13'b1101011101111:
        casez_tmp = 64'h0;
      13'b1101011110000:
        casez_tmp = 64'h0;
      13'b1101011110001:
        casez_tmp = 64'h0;
      13'b1101011110010:
        casez_tmp = 64'h0;
      13'b1101011110011:
        casez_tmp = 64'h0;
      13'b1101011110100:
        casez_tmp = 64'h0;
      13'b1101011110101:
        casez_tmp = 64'h0;
      13'b1101011110110:
        casez_tmp = 64'h0;
      13'b1101011110111:
        casez_tmp = 64'h0;
      13'b1101011111000:
        casez_tmp = 64'h0;
      13'b1101011111001:
        casez_tmp = 64'h0;
      13'b1101011111010:
        casez_tmp = 64'h0;
      13'b1101011111011:
        casez_tmp = 64'h0;
      13'b1101011111100:
        casez_tmp = 64'h0;
      13'b1101011111101:
        casez_tmp = 64'h0;
      13'b1101011111110:
        casez_tmp = 64'h0;
      13'b1101011111111:
        casez_tmp = 64'h0;
      13'b1101100000000:
        casez_tmp = 64'h0;
      13'b1101100000001:
        casez_tmp = 64'h0;
      13'b1101100000010:
        casez_tmp = 64'h0;
      13'b1101100000011:
        casez_tmp = 64'h0;
      13'b1101100000100:
        casez_tmp = 64'h0;
      13'b1101100000101:
        casez_tmp = 64'h0;
      13'b1101100000110:
        casez_tmp = 64'h0;
      13'b1101100000111:
        casez_tmp = 64'h0;
      13'b1101100001000:
        casez_tmp = 64'h0;
      13'b1101100001001:
        casez_tmp = 64'h0;
      13'b1101100001010:
        casez_tmp = 64'h0;
      13'b1101100001011:
        casez_tmp = 64'h0;
      13'b1101100001100:
        casez_tmp = 64'h0;
      13'b1101100001101:
        casez_tmp = 64'h0;
      13'b1101100001110:
        casez_tmp = 64'h0;
      13'b1101100001111:
        casez_tmp = 64'h0;
      13'b1101100010000:
        casez_tmp = 64'h0;
      13'b1101100010001:
        casez_tmp = 64'h0;
      13'b1101100010010:
        casez_tmp = 64'h0;
      13'b1101100010011:
        casez_tmp = 64'h0;
      13'b1101100010100:
        casez_tmp = 64'h0;
      13'b1101100010101:
        casez_tmp = 64'h0;
      13'b1101100010110:
        casez_tmp = 64'h0;
      13'b1101100010111:
        casez_tmp = 64'h0;
      13'b1101100011000:
        casez_tmp = 64'h0;
      13'b1101100011001:
        casez_tmp = 64'h0;
      13'b1101100011010:
        casez_tmp = 64'h0;
      13'b1101100011011:
        casez_tmp = 64'h0;
      13'b1101100011100:
        casez_tmp = 64'h0;
      13'b1101100011101:
        casez_tmp = 64'h0;
      13'b1101100011110:
        casez_tmp = 64'h0;
      13'b1101100011111:
        casez_tmp = 64'h0;
      13'b1101100100000:
        casez_tmp = 64'h0;
      13'b1101100100001:
        casez_tmp = 64'h0;
      13'b1101100100010:
        casez_tmp = 64'h0;
      13'b1101100100011:
        casez_tmp = 64'h0;
      13'b1101100100100:
        casez_tmp = 64'h0;
      13'b1101100100101:
        casez_tmp = 64'h0;
      13'b1101100100110:
        casez_tmp = 64'h0;
      13'b1101100100111:
        casez_tmp = 64'h0;
      13'b1101100101000:
        casez_tmp = 64'h0;
      13'b1101100101001:
        casez_tmp = 64'h0;
      13'b1101100101010:
        casez_tmp = 64'h0;
      13'b1101100101011:
        casez_tmp = 64'h0;
      13'b1101100101100:
        casez_tmp = 64'h0;
      13'b1101100101101:
        casez_tmp = 64'h0;
      13'b1101100101110:
        casez_tmp = 64'h0;
      13'b1101100101111:
        casez_tmp = 64'h0;
      13'b1101100110000:
        casez_tmp = 64'h0;
      13'b1101100110001:
        casez_tmp = 64'h0;
      13'b1101100110010:
        casez_tmp = 64'h0;
      13'b1101100110011:
        casez_tmp = 64'h0;
      13'b1101100110100:
        casez_tmp = 64'h0;
      13'b1101100110101:
        casez_tmp = 64'h0;
      13'b1101100110110:
        casez_tmp = 64'h0;
      13'b1101100110111:
        casez_tmp = 64'h0;
      13'b1101100111000:
        casez_tmp = 64'h0;
      13'b1101100111001:
        casez_tmp = 64'h0;
      13'b1101100111010:
        casez_tmp = 64'h0;
      13'b1101100111011:
        casez_tmp = 64'h0;
      13'b1101100111100:
        casez_tmp = 64'h0;
      13'b1101100111101:
        casez_tmp = 64'h0;
      13'b1101100111110:
        casez_tmp = 64'h0;
      13'b1101100111111:
        casez_tmp = 64'h0;
      13'b1101101000000:
        casez_tmp = 64'h0;
      13'b1101101000001:
        casez_tmp = 64'h0;
      13'b1101101000010:
        casez_tmp = 64'h0;
      13'b1101101000011:
        casez_tmp = 64'h0;
      13'b1101101000100:
        casez_tmp = 64'h0;
      13'b1101101000101:
        casez_tmp = 64'h0;
      13'b1101101000110:
        casez_tmp = 64'h0;
      13'b1101101000111:
        casez_tmp = 64'h0;
      13'b1101101001000:
        casez_tmp = 64'h0;
      13'b1101101001001:
        casez_tmp = 64'h0;
      13'b1101101001010:
        casez_tmp = 64'h0;
      13'b1101101001011:
        casez_tmp = 64'h0;
      13'b1101101001100:
        casez_tmp = 64'h0;
      13'b1101101001101:
        casez_tmp = 64'h0;
      13'b1101101001110:
        casez_tmp = 64'h0;
      13'b1101101001111:
        casez_tmp = 64'h0;
      13'b1101101010000:
        casez_tmp = 64'h0;
      13'b1101101010001:
        casez_tmp = 64'h0;
      13'b1101101010010:
        casez_tmp = 64'h0;
      13'b1101101010011:
        casez_tmp = 64'h0;
      13'b1101101010100:
        casez_tmp = 64'h0;
      13'b1101101010101:
        casez_tmp = 64'h0;
      13'b1101101010110:
        casez_tmp = 64'h0;
      13'b1101101010111:
        casez_tmp = 64'h0;
      13'b1101101011000:
        casez_tmp = 64'h0;
      13'b1101101011001:
        casez_tmp = 64'h0;
      13'b1101101011010:
        casez_tmp = 64'h0;
      13'b1101101011011:
        casez_tmp = 64'h0;
      13'b1101101011100:
        casez_tmp = 64'h0;
      13'b1101101011101:
        casez_tmp = 64'h0;
      13'b1101101011110:
        casez_tmp = 64'h0;
      13'b1101101011111:
        casez_tmp = 64'h0;
      13'b1101101100000:
        casez_tmp = 64'h0;
      13'b1101101100001:
        casez_tmp = 64'h0;
      13'b1101101100010:
        casez_tmp = 64'h0;
      13'b1101101100011:
        casez_tmp = 64'h0;
      13'b1101101100100:
        casez_tmp = 64'h0;
      13'b1101101100101:
        casez_tmp = 64'h0;
      13'b1101101100110:
        casez_tmp = 64'h0;
      13'b1101101100111:
        casez_tmp = 64'h0;
      13'b1101101101000:
        casez_tmp = 64'h0;
      13'b1101101101001:
        casez_tmp = 64'h0;
      13'b1101101101010:
        casez_tmp = 64'h0;
      13'b1101101101011:
        casez_tmp = 64'h0;
      13'b1101101101100:
        casez_tmp = 64'h0;
      13'b1101101101101:
        casez_tmp = 64'h0;
      13'b1101101101110:
        casez_tmp = 64'h0;
      13'b1101101101111:
        casez_tmp = 64'h0;
      13'b1101101110000:
        casez_tmp = 64'h0;
      13'b1101101110001:
        casez_tmp = 64'h0;
      13'b1101101110010:
        casez_tmp = 64'h0;
      13'b1101101110011:
        casez_tmp = 64'h0;
      13'b1101101110100:
        casez_tmp = 64'h0;
      13'b1101101110101:
        casez_tmp = 64'h0;
      13'b1101101110110:
        casez_tmp = 64'h0;
      13'b1101101110111:
        casez_tmp = 64'h0;
      13'b1101101111000:
        casez_tmp = 64'h0;
      13'b1101101111001:
        casez_tmp = 64'h0;
      13'b1101101111010:
        casez_tmp = 64'h0;
      13'b1101101111011:
        casez_tmp = 64'h0;
      13'b1101101111100:
        casez_tmp = 64'h0;
      13'b1101101111101:
        casez_tmp = 64'h0;
      13'b1101101111110:
        casez_tmp = 64'h0;
      13'b1101101111111:
        casez_tmp = 64'h0;
      13'b1101110000000:
        casez_tmp = 64'h0;
      13'b1101110000001:
        casez_tmp = 64'h0;
      13'b1101110000010:
        casez_tmp = 64'h0;
      13'b1101110000011:
        casez_tmp = 64'h0;
      13'b1101110000100:
        casez_tmp = 64'h0;
      13'b1101110000101:
        casez_tmp = 64'h0;
      13'b1101110000110:
        casez_tmp = 64'h0;
      13'b1101110000111:
        casez_tmp = 64'h0;
      13'b1101110001000:
        casez_tmp = 64'h0;
      13'b1101110001001:
        casez_tmp = 64'h0;
      13'b1101110001010:
        casez_tmp = 64'h0;
      13'b1101110001011:
        casez_tmp = 64'h0;
      13'b1101110001100:
        casez_tmp = 64'h0;
      13'b1101110001101:
        casez_tmp = 64'h0;
      13'b1101110001110:
        casez_tmp = 64'h0;
      13'b1101110001111:
        casez_tmp = 64'h0;
      13'b1101110010000:
        casez_tmp = 64'h0;
      13'b1101110010001:
        casez_tmp = 64'h0;
      13'b1101110010010:
        casez_tmp = 64'h0;
      13'b1101110010011:
        casez_tmp = 64'h0;
      13'b1101110010100:
        casez_tmp = 64'h0;
      13'b1101110010101:
        casez_tmp = 64'h0;
      13'b1101110010110:
        casez_tmp = 64'h0;
      13'b1101110010111:
        casez_tmp = 64'h0;
      13'b1101110011000:
        casez_tmp = 64'h0;
      13'b1101110011001:
        casez_tmp = 64'h0;
      13'b1101110011010:
        casez_tmp = 64'h0;
      13'b1101110011011:
        casez_tmp = 64'h0;
      13'b1101110011100:
        casez_tmp = 64'h0;
      13'b1101110011101:
        casez_tmp = 64'h0;
      13'b1101110011110:
        casez_tmp = 64'h0;
      13'b1101110011111:
        casez_tmp = 64'h0;
      13'b1101110100000:
        casez_tmp = 64'h0;
      13'b1101110100001:
        casez_tmp = 64'h0;
      13'b1101110100010:
        casez_tmp = 64'h0;
      13'b1101110100011:
        casez_tmp = 64'h0;
      13'b1101110100100:
        casez_tmp = 64'h0;
      13'b1101110100101:
        casez_tmp = 64'h0;
      13'b1101110100110:
        casez_tmp = 64'h0;
      13'b1101110100111:
        casez_tmp = 64'h0;
      13'b1101110101000:
        casez_tmp = 64'h0;
      13'b1101110101001:
        casez_tmp = 64'h0;
      13'b1101110101010:
        casez_tmp = 64'h0;
      13'b1101110101011:
        casez_tmp = 64'h0;
      13'b1101110101100:
        casez_tmp = 64'h0;
      13'b1101110101101:
        casez_tmp = 64'h0;
      13'b1101110101110:
        casez_tmp = 64'h0;
      13'b1101110101111:
        casez_tmp = 64'h0;
      13'b1101110110000:
        casez_tmp = 64'h0;
      13'b1101110110001:
        casez_tmp = 64'h0;
      13'b1101110110010:
        casez_tmp = 64'h0;
      13'b1101110110011:
        casez_tmp = 64'h0;
      13'b1101110110100:
        casez_tmp = 64'h0;
      13'b1101110110101:
        casez_tmp = 64'h0;
      13'b1101110110110:
        casez_tmp = 64'h0;
      13'b1101110110111:
        casez_tmp = 64'h0;
      13'b1101110111000:
        casez_tmp = 64'h0;
      13'b1101110111001:
        casez_tmp = 64'h0;
      13'b1101110111010:
        casez_tmp = 64'h0;
      13'b1101110111011:
        casez_tmp = 64'h0;
      13'b1101110111100:
        casez_tmp = 64'h0;
      13'b1101110111101:
        casez_tmp = 64'h0;
      13'b1101110111110:
        casez_tmp = 64'h0;
      13'b1101110111111:
        casez_tmp = 64'h0;
      13'b1101111000000:
        casez_tmp = 64'h0;
      13'b1101111000001:
        casez_tmp = 64'h0;
      13'b1101111000010:
        casez_tmp = 64'h0;
      13'b1101111000011:
        casez_tmp = 64'h0;
      13'b1101111000100:
        casez_tmp = 64'h0;
      13'b1101111000101:
        casez_tmp = 64'h0;
      13'b1101111000110:
        casez_tmp = 64'h0;
      13'b1101111000111:
        casez_tmp = 64'h0;
      13'b1101111001000:
        casez_tmp = 64'h0;
      13'b1101111001001:
        casez_tmp = 64'h0;
      13'b1101111001010:
        casez_tmp = 64'h0;
      13'b1101111001011:
        casez_tmp = 64'h0;
      13'b1101111001100:
        casez_tmp = 64'h0;
      13'b1101111001101:
        casez_tmp = 64'h0;
      13'b1101111001110:
        casez_tmp = 64'h0;
      13'b1101111001111:
        casez_tmp = 64'h0;
      13'b1101111010000:
        casez_tmp = 64'h0;
      13'b1101111010001:
        casez_tmp = 64'h0;
      13'b1101111010010:
        casez_tmp = 64'h0;
      13'b1101111010011:
        casez_tmp = 64'h0;
      13'b1101111010100:
        casez_tmp = 64'h0;
      13'b1101111010101:
        casez_tmp = 64'h0;
      13'b1101111010110:
        casez_tmp = 64'h0;
      13'b1101111010111:
        casez_tmp = 64'h0;
      13'b1101111011000:
        casez_tmp = 64'h0;
      13'b1101111011001:
        casez_tmp = 64'h0;
      13'b1101111011010:
        casez_tmp = 64'h0;
      13'b1101111011011:
        casez_tmp = 64'h0;
      13'b1101111011100:
        casez_tmp = 64'h0;
      13'b1101111011101:
        casez_tmp = 64'h0;
      13'b1101111011110:
        casez_tmp = 64'h0;
      13'b1101111011111:
        casez_tmp = 64'h0;
      13'b1101111100000:
        casez_tmp = 64'h0;
      13'b1101111100001:
        casez_tmp = 64'h0;
      13'b1101111100010:
        casez_tmp = 64'h0;
      13'b1101111100011:
        casez_tmp = 64'h0;
      13'b1101111100100:
        casez_tmp = 64'h0;
      13'b1101111100101:
        casez_tmp = 64'h0;
      13'b1101111100110:
        casez_tmp = 64'h0;
      13'b1101111100111:
        casez_tmp = 64'h0;
      13'b1101111101000:
        casez_tmp = 64'h0;
      13'b1101111101001:
        casez_tmp = 64'h0;
      13'b1101111101010:
        casez_tmp = 64'h0;
      13'b1101111101011:
        casez_tmp = 64'h0;
      13'b1101111101100:
        casez_tmp = 64'h0;
      13'b1101111101101:
        casez_tmp = 64'h0;
      13'b1101111101110:
        casez_tmp = 64'h0;
      13'b1101111101111:
        casez_tmp = 64'h0;
      13'b1101111110000:
        casez_tmp = 64'h0;
      13'b1101111110001:
        casez_tmp = 64'h0;
      13'b1101111110010:
        casez_tmp = 64'h0;
      13'b1101111110011:
        casez_tmp = 64'h0;
      13'b1101111110100:
        casez_tmp = 64'h0;
      13'b1101111110101:
        casez_tmp = 64'h0;
      13'b1101111110110:
        casez_tmp = 64'h0;
      13'b1101111110111:
        casez_tmp = 64'h0;
      13'b1101111111000:
        casez_tmp = 64'h0;
      13'b1101111111001:
        casez_tmp = 64'h0;
      13'b1101111111010:
        casez_tmp = 64'h0;
      13'b1101111111011:
        casez_tmp = 64'h0;
      13'b1101111111100:
        casez_tmp = 64'h0;
      13'b1101111111101:
        casez_tmp = 64'h0;
      13'b1101111111110:
        casez_tmp = 64'h0;
      13'b1101111111111:
        casez_tmp = 64'h0;
      13'b1110000000000:
        casez_tmp = 64'h0;
      13'b1110000000001:
        casez_tmp = 64'h0;
      13'b1110000000010:
        casez_tmp = 64'h0;
      13'b1110000000011:
        casez_tmp = 64'h0;
      13'b1110000000100:
        casez_tmp = 64'h0;
      13'b1110000000101:
        casez_tmp = 64'h0;
      13'b1110000000110:
        casez_tmp = 64'h0;
      13'b1110000000111:
        casez_tmp = 64'h0;
      13'b1110000001000:
        casez_tmp = 64'h0;
      13'b1110000001001:
        casez_tmp = 64'h0;
      13'b1110000001010:
        casez_tmp = 64'h0;
      13'b1110000001011:
        casez_tmp = 64'h0;
      13'b1110000001100:
        casez_tmp = 64'h0;
      13'b1110000001101:
        casez_tmp = 64'h0;
      13'b1110000001110:
        casez_tmp = 64'h0;
      13'b1110000001111:
        casez_tmp = 64'h0;
      13'b1110000010000:
        casez_tmp = 64'h0;
      13'b1110000010001:
        casez_tmp = 64'h0;
      13'b1110000010010:
        casez_tmp = 64'h0;
      13'b1110000010011:
        casez_tmp = 64'h0;
      13'b1110000010100:
        casez_tmp = 64'h0;
      13'b1110000010101:
        casez_tmp = 64'h0;
      13'b1110000010110:
        casez_tmp = 64'h0;
      13'b1110000010111:
        casez_tmp = 64'h0;
      13'b1110000011000:
        casez_tmp = 64'h0;
      13'b1110000011001:
        casez_tmp = 64'h0;
      13'b1110000011010:
        casez_tmp = 64'h0;
      13'b1110000011011:
        casez_tmp = 64'h0;
      13'b1110000011100:
        casez_tmp = 64'h0;
      13'b1110000011101:
        casez_tmp = 64'h0;
      13'b1110000011110:
        casez_tmp = 64'h0;
      13'b1110000011111:
        casez_tmp = 64'h0;
      13'b1110000100000:
        casez_tmp = 64'h0;
      13'b1110000100001:
        casez_tmp = 64'h0;
      13'b1110000100010:
        casez_tmp = 64'h0;
      13'b1110000100011:
        casez_tmp = 64'h0;
      13'b1110000100100:
        casez_tmp = 64'h0;
      13'b1110000100101:
        casez_tmp = 64'h0;
      13'b1110000100110:
        casez_tmp = 64'h0;
      13'b1110000100111:
        casez_tmp = 64'h0;
      13'b1110000101000:
        casez_tmp = 64'h0;
      13'b1110000101001:
        casez_tmp = 64'h0;
      13'b1110000101010:
        casez_tmp = 64'h0;
      13'b1110000101011:
        casez_tmp = 64'h0;
      13'b1110000101100:
        casez_tmp = 64'h0;
      13'b1110000101101:
        casez_tmp = 64'h0;
      13'b1110000101110:
        casez_tmp = 64'h0;
      13'b1110000101111:
        casez_tmp = 64'h0;
      13'b1110000110000:
        casez_tmp = 64'h0;
      13'b1110000110001:
        casez_tmp = 64'h0;
      13'b1110000110010:
        casez_tmp = 64'h0;
      13'b1110000110011:
        casez_tmp = 64'h0;
      13'b1110000110100:
        casez_tmp = 64'h0;
      13'b1110000110101:
        casez_tmp = 64'h0;
      13'b1110000110110:
        casez_tmp = 64'h0;
      13'b1110000110111:
        casez_tmp = 64'h0;
      13'b1110000111000:
        casez_tmp = 64'h0;
      13'b1110000111001:
        casez_tmp = 64'h0;
      13'b1110000111010:
        casez_tmp = 64'h0;
      13'b1110000111011:
        casez_tmp = 64'h0;
      13'b1110000111100:
        casez_tmp = 64'h0;
      13'b1110000111101:
        casez_tmp = 64'h0;
      13'b1110000111110:
        casez_tmp = 64'h0;
      13'b1110000111111:
        casez_tmp = 64'h0;
      13'b1110001000000:
        casez_tmp = 64'h0;
      13'b1110001000001:
        casez_tmp = 64'h0;
      13'b1110001000010:
        casez_tmp = 64'h0;
      13'b1110001000011:
        casez_tmp = 64'h0;
      13'b1110001000100:
        casez_tmp = 64'h0;
      13'b1110001000101:
        casez_tmp = 64'h0;
      13'b1110001000110:
        casez_tmp = 64'h0;
      13'b1110001000111:
        casez_tmp = 64'h0;
      13'b1110001001000:
        casez_tmp = 64'h0;
      13'b1110001001001:
        casez_tmp = 64'h0;
      13'b1110001001010:
        casez_tmp = 64'h0;
      13'b1110001001011:
        casez_tmp = 64'h0;
      13'b1110001001100:
        casez_tmp = 64'h0;
      13'b1110001001101:
        casez_tmp = 64'h0;
      13'b1110001001110:
        casez_tmp = 64'h0;
      13'b1110001001111:
        casez_tmp = 64'h0;
      13'b1110001010000:
        casez_tmp = 64'h0;
      13'b1110001010001:
        casez_tmp = 64'h0;
      13'b1110001010010:
        casez_tmp = 64'h0;
      13'b1110001010011:
        casez_tmp = 64'h0;
      13'b1110001010100:
        casez_tmp = 64'h0;
      13'b1110001010101:
        casez_tmp = 64'h0;
      13'b1110001010110:
        casez_tmp = 64'h0;
      13'b1110001010111:
        casez_tmp = 64'h0;
      13'b1110001011000:
        casez_tmp = 64'h0;
      13'b1110001011001:
        casez_tmp = 64'h0;
      13'b1110001011010:
        casez_tmp = 64'h0;
      13'b1110001011011:
        casez_tmp = 64'h0;
      13'b1110001011100:
        casez_tmp = 64'h0;
      13'b1110001011101:
        casez_tmp = 64'h0;
      13'b1110001011110:
        casez_tmp = 64'h0;
      13'b1110001011111:
        casez_tmp = 64'h0;
      13'b1110001100000:
        casez_tmp = 64'h0;
      13'b1110001100001:
        casez_tmp = 64'h0;
      13'b1110001100010:
        casez_tmp = 64'h0;
      13'b1110001100011:
        casez_tmp = 64'h0;
      13'b1110001100100:
        casez_tmp = 64'h0;
      13'b1110001100101:
        casez_tmp = 64'h0;
      13'b1110001100110:
        casez_tmp = 64'h0;
      13'b1110001100111:
        casez_tmp = 64'h0;
      13'b1110001101000:
        casez_tmp = 64'h0;
      13'b1110001101001:
        casez_tmp = 64'h0;
      13'b1110001101010:
        casez_tmp = 64'h0;
      13'b1110001101011:
        casez_tmp = 64'h0;
      13'b1110001101100:
        casez_tmp = 64'h0;
      13'b1110001101101:
        casez_tmp = 64'h0;
      13'b1110001101110:
        casez_tmp = 64'h0;
      13'b1110001101111:
        casez_tmp = 64'h0;
      13'b1110001110000:
        casez_tmp = 64'h0;
      13'b1110001110001:
        casez_tmp = 64'h0;
      13'b1110001110010:
        casez_tmp = 64'h0;
      13'b1110001110011:
        casez_tmp = 64'h0;
      13'b1110001110100:
        casez_tmp = 64'h0;
      13'b1110001110101:
        casez_tmp = 64'h0;
      13'b1110001110110:
        casez_tmp = 64'h0;
      13'b1110001110111:
        casez_tmp = 64'h0;
      13'b1110001111000:
        casez_tmp = 64'h0;
      13'b1110001111001:
        casez_tmp = 64'h0;
      13'b1110001111010:
        casez_tmp = 64'h0;
      13'b1110001111011:
        casez_tmp = 64'h0;
      13'b1110001111100:
        casez_tmp = 64'h0;
      13'b1110001111101:
        casez_tmp = 64'h0;
      13'b1110001111110:
        casez_tmp = 64'h0;
      13'b1110001111111:
        casez_tmp = 64'h0;
      13'b1110010000000:
        casez_tmp = 64'h0;
      13'b1110010000001:
        casez_tmp = 64'h0;
      13'b1110010000010:
        casez_tmp = 64'h0;
      13'b1110010000011:
        casez_tmp = 64'h0;
      13'b1110010000100:
        casez_tmp = 64'h0;
      13'b1110010000101:
        casez_tmp = 64'h0;
      13'b1110010000110:
        casez_tmp = 64'h0;
      13'b1110010000111:
        casez_tmp = 64'h0;
      13'b1110010001000:
        casez_tmp = 64'h0;
      13'b1110010001001:
        casez_tmp = 64'h0;
      13'b1110010001010:
        casez_tmp = 64'h0;
      13'b1110010001011:
        casez_tmp = 64'h0;
      13'b1110010001100:
        casez_tmp = 64'h0;
      13'b1110010001101:
        casez_tmp = 64'h0;
      13'b1110010001110:
        casez_tmp = 64'h0;
      13'b1110010001111:
        casez_tmp = 64'h0;
      13'b1110010010000:
        casez_tmp = 64'h0;
      13'b1110010010001:
        casez_tmp = 64'h0;
      13'b1110010010010:
        casez_tmp = 64'h0;
      13'b1110010010011:
        casez_tmp = 64'h0;
      13'b1110010010100:
        casez_tmp = 64'h0;
      13'b1110010010101:
        casez_tmp = 64'h0;
      13'b1110010010110:
        casez_tmp = 64'h0;
      13'b1110010010111:
        casez_tmp = 64'h0;
      13'b1110010011000:
        casez_tmp = 64'h0;
      13'b1110010011001:
        casez_tmp = 64'h0;
      13'b1110010011010:
        casez_tmp = 64'h0;
      13'b1110010011011:
        casez_tmp = 64'h0;
      13'b1110010011100:
        casez_tmp = 64'h0;
      13'b1110010011101:
        casez_tmp = 64'h0;
      13'b1110010011110:
        casez_tmp = 64'h0;
      13'b1110010011111:
        casez_tmp = 64'h0;
      13'b1110010100000:
        casez_tmp = 64'h0;
      13'b1110010100001:
        casez_tmp = 64'h0;
      13'b1110010100010:
        casez_tmp = 64'h0;
      13'b1110010100011:
        casez_tmp = 64'h0;
      13'b1110010100100:
        casez_tmp = 64'h0;
      13'b1110010100101:
        casez_tmp = 64'h0;
      13'b1110010100110:
        casez_tmp = 64'h0;
      13'b1110010100111:
        casez_tmp = 64'h0;
      13'b1110010101000:
        casez_tmp = 64'h0;
      13'b1110010101001:
        casez_tmp = 64'h0;
      13'b1110010101010:
        casez_tmp = 64'h0;
      13'b1110010101011:
        casez_tmp = 64'h0;
      13'b1110010101100:
        casez_tmp = 64'h0;
      13'b1110010101101:
        casez_tmp = 64'h0;
      13'b1110010101110:
        casez_tmp = 64'h0;
      13'b1110010101111:
        casez_tmp = 64'h0;
      13'b1110010110000:
        casez_tmp = 64'h0;
      13'b1110010110001:
        casez_tmp = 64'h0;
      13'b1110010110010:
        casez_tmp = 64'h0;
      13'b1110010110011:
        casez_tmp = 64'h0;
      13'b1110010110100:
        casez_tmp = 64'h0;
      13'b1110010110101:
        casez_tmp = 64'h0;
      13'b1110010110110:
        casez_tmp = 64'h0;
      13'b1110010110111:
        casez_tmp = 64'h0;
      13'b1110010111000:
        casez_tmp = 64'h0;
      13'b1110010111001:
        casez_tmp = 64'h0;
      13'b1110010111010:
        casez_tmp = 64'h0;
      13'b1110010111011:
        casez_tmp = 64'h0;
      13'b1110010111100:
        casez_tmp = 64'h0;
      13'b1110010111101:
        casez_tmp = 64'h0;
      13'b1110010111110:
        casez_tmp = 64'h0;
      13'b1110010111111:
        casez_tmp = 64'h0;
      13'b1110011000000:
        casez_tmp = 64'h0;
      13'b1110011000001:
        casez_tmp = 64'h0;
      13'b1110011000010:
        casez_tmp = 64'h0;
      13'b1110011000011:
        casez_tmp = 64'h0;
      13'b1110011000100:
        casez_tmp = 64'h0;
      13'b1110011000101:
        casez_tmp = 64'h0;
      13'b1110011000110:
        casez_tmp = 64'h0;
      13'b1110011000111:
        casez_tmp = 64'h0;
      13'b1110011001000:
        casez_tmp = 64'h0;
      13'b1110011001001:
        casez_tmp = 64'h0;
      13'b1110011001010:
        casez_tmp = 64'h0;
      13'b1110011001011:
        casez_tmp = 64'h0;
      13'b1110011001100:
        casez_tmp = 64'h0;
      13'b1110011001101:
        casez_tmp = 64'h0;
      13'b1110011001110:
        casez_tmp = 64'h0;
      13'b1110011001111:
        casez_tmp = 64'h0;
      13'b1110011010000:
        casez_tmp = 64'h0;
      13'b1110011010001:
        casez_tmp = 64'h0;
      13'b1110011010010:
        casez_tmp = 64'h0;
      13'b1110011010011:
        casez_tmp = 64'h0;
      13'b1110011010100:
        casez_tmp = 64'h0;
      13'b1110011010101:
        casez_tmp = 64'h0;
      13'b1110011010110:
        casez_tmp = 64'h0;
      13'b1110011010111:
        casez_tmp = 64'h0;
      13'b1110011011000:
        casez_tmp = 64'h0;
      13'b1110011011001:
        casez_tmp = 64'h0;
      13'b1110011011010:
        casez_tmp = 64'h0;
      13'b1110011011011:
        casez_tmp = 64'h0;
      13'b1110011011100:
        casez_tmp = 64'h0;
      13'b1110011011101:
        casez_tmp = 64'h0;
      13'b1110011011110:
        casez_tmp = 64'h0;
      13'b1110011011111:
        casez_tmp = 64'h0;
      13'b1110011100000:
        casez_tmp = 64'h0;
      13'b1110011100001:
        casez_tmp = 64'h0;
      13'b1110011100010:
        casez_tmp = 64'h0;
      13'b1110011100011:
        casez_tmp = 64'h0;
      13'b1110011100100:
        casez_tmp = 64'h0;
      13'b1110011100101:
        casez_tmp = 64'h0;
      13'b1110011100110:
        casez_tmp = 64'h0;
      13'b1110011100111:
        casez_tmp = 64'h0;
      13'b1110011101000:
        casez_tmp = 64'h0;
      13'b1110011101001:
        casez_tmp = 64'h0;
      13'b1110011101010:
        casez_tmp = 64'h0;
      13'b1110011101011:
        casez_tmp = 64'h0;
      13'b1110011101100:
        casez_tmp = 64'h0;
      13'b1110011101101:
        casez_tmp = 64'h0;
      13'b1110011101110:
        casez_tmp = 64'h0;
      13'b1110011101111:
        casez_tmp = 64'h0;
      13'b1110011110000:
        casez_tmp = 64'h0;
      13'b1110011110001:
        casez_tmp = 64'h0;
      13'b1110011110010:
        casez_tmp = 64'h0;
      13'b1110011110011:
        casez_tmp = 64'h0;
      13'b1110011110100:
        casez_tmp = 64'h0;
      13'b1110011110101:
        casez_tmp = 64'h0;
      13'b1110011110110:
        casez_tmp = 64'h0;
      13'b1110011110111:
        casez_tmp = 64'h0;
      13'b1110011111000:
        casez_tmp = 64'h0;
      13'b1110011111001:
        casez_tmp = 64'h0;
      13'b1110011111010:
        casez_tmp = 64'h0;
      13'b1110011111011:
        casez_tmp = 64'h0;
      13'b1110011111100:
        casez_tmp = 64'h0;
      13'b1110011111101:
        casez_tmp = 64'h0;
      13'b1110011111110:
        casez_tmp = 64'h0;
      13'b1110011111111:
        casez_tmp = 64'h0;
      13'b1110100000000:
        casez_tmp = 64'h0;
      13'b1110100000001:
        casez_tmp = 64'h0;
      13'b1110100000010:
        casez_tmp = 64'h0;
      13'b1110100000011:
        casez_tmp = 64'h0;
      13'b1110100000100:
        casez_tmp = 64'h0;
      13'b1110100000101:
        casez_tmp = 64'h0;
      13'b1110100000110:
        casez_tmp = 64'h0;
      13'b1110100000111:
        casez_tmp = 64'h0;
      13'b1110100001000:
        casez_tmp = 64'h0;
      13'b1110100001001:
        casez_tmp = 64'h0;
      13'b1110100001010:
        casez_tmp = 64'h0;
      13'b1110100001011:
        casez_tmp = 64'h0;
      13'b1110100001100:
        casez_tmp = 64'h0;
      13'b1110100001101:
        casez_tmp = 64'h0;
      13'b1110100001110:
        casez_tmp = 64'h0;
      13'b1110100001111:
        casez_tmp = 64'h0;
      13'b1110100010000:
        casez_tmp = 64'h0;
      13'b1110100010001:
        casez_tmp = 64'h0;
      13'b1110100010010:
        casez_tmp = 64'h0;
      13'b1110100010011:
        casez_tmp = 64'h0;
      13'b1110100010100:
        casez_tmp = 64'h0;
      13'b1110100010101:
        casez_tmp = 64'h0;
      13'b1110100010110:
        casez_tmp = 64'h0;
      13'b1110100010111:
        casez_tmp = 64'h0;
      13'b1110100011000:
        casez_tmp = 64'h0;
      13'b1110100011001:
        casez_tmp = 64'h0;
      13'b1110100011010:
        casez_tmp = 64'h0;
      13'b1110100011011:
        casez_tmp = 64'h0;
      13'b1110100011100:
        casez_tmp = 64'h0;
      13'b1110100011101:
        casez_tmp = 64'h0;
      13'b1110100011110:
        casez_tmp = 64'h0;
      13'b1110100011111:
        casez_tmp = 64'h0;
      13'b1110100100000:
        casez_tmp = 64'h0;
      13'b1110100100001:
        casez_tmp = 64'h0;
      13'b1110100100010:
        casez_tmp = 64'h0;
      13'b1110100100011:
        casez_tmp = 64'h0;
      13'b1110100100100:
        casez_tmp = 64'h0;
      13'b1110100100101:
        casez_tmp = 64'h0;
      13'b1110100100110:
        casez_tmp = 64'h0;
      13'b1110100100111:
        casez_tmp = 64'h0;
      13'b1110100101000:
        casez_tmp = 64'h0;
      13'b1110100101001:
        casez_tmp = 64'h0;
      13'b1110100101010:
        casez_tmp = 64'h0;
      13'b1110100101011:
        casez_tmp = 64'h0;
      13'b1110100101100:
        casez_tmp = 64'h0;
      13'b1110100101101:
        casez_tmp = 64'h0;
      13'b1110100101110:
        casez_tmp = 64'h0;
      13'b1110100101111:
        casez_tmp = 64'h0;
      13'b1110100110000:
        casez_tmp = 64'h0;
      13'b1110100110001:
        casez_tmp = 64'h0;
      13'b1110100110010:
        casez_tmp = 64'h0;
      13'b1110100110011:
        casez_tmp = 64'h0;
      13'b1110100110100:
        casez_tmp = 64'h0;
      13'b1110100110101:
        casez_tmp = 64'h0;
      13'b1110100110110:
        casez_tmp = 64'h0;
      13'b1110100110111:
        casez_tmp = 64'h0;
      13'b1110100111000:
        casez_tmp = 64'h0;
      13'b1110100111001:
        casez_tmp = 64'h0;
      13'b1110100111010:
        casez_tmp = 64'h0;
      13'b1110100111011:
        casez_tmp = 64'h0;
      13'b1110100111100:
        casez_tmp = 64'h0;
      13'b1110100111101:
        casez_tmp = 64'h0;
      13'b1110100111110:
        casez_tmp = 64'h0;
      13'b1110100111111:
        casez_tmp = 64'h0;
      13'b1110101000000:
        casez_tmp = 64'h0;
      13'b1110101000001:
        casez_tmp = 64'h0;
      13'b1110101000010:
        casez_tmp = 64'h0;
      13'b1110101000011:
        casez_tmp = 64'h0;
      13'b1110101000100:
        casez_tmp = 64'h0;
      13'b1110101000101:
        casez_tmp = 64'h0;
      13'b1110101000110:
        casez_tmp = 64'h0;
      13'b1110101000111:
        casez_tmp = 64'h0;
      13'b1110101001000:
        casez_tmp = 64'h0;
      13'b1110101001001:
        casez_tmp = 64'h0;
      13'b1110101001010:
        casez_tmp = 64'h0;
      13'b1110101001011:
        casez_tmp = 64'h0;
      13'b1110101001100:
        casez_tmp = 64'h0;
      13'b1110101001101:
        casez_tmp = 64'h0;
      13'b1110101001110:
        casez_tmp = 64'h0;
      13'b1110101001111:
        casez_tmp = 64'h0;
      13'b1110101010000:
        casez_tmp = 64'h0;
      13'b1110101010001:
        casez_tmp = 64'h0;
      13'b1110101010010:
        casez_tmp = 64'h0;
      13'b1110101010011:
        casez_tmp = 64'h0;
      13'b1110101010100:
        casez_tmp = 64'h0;
      13'b1110101010101:
        casez_tmp = 64'h0;
      13'b1110101010110:
        casez_tmp = 64'h0;
      13'b1110101010111:
        casez_tmp = 64'h0;
      13'b1110101011000:
        casez_tmp = 64'h0;
      13'b1110101011001:
        casez_tmp = 64'h0;
      13'b1110101011010:
        casez_tmp = 64'h0;
      13'b1110101011011:
        casez_tmp = 64'h0;
      13'b1110101011100:
        casez_tmp = 64'h0;
      13'b1110101011101:
        casez_tmp = 64'h0;
      13'b1110101011110:
        casez_tmp = 64'h0;
      13'b1110101011111:
        casez_tmp = 64'h0;
      13'b1110101100000:
        casez_tmp = 64'h0;
      13'b1110101100001:
        casez_tmp = 64'h0;
      13'b1110101100010:
        casez_tmp = 64'h0;
      13'b1110101100011:
        casez_tmp = 64'h0;
      13'b1110101100100:
        casez_tmp = 64'h0;
      13'b1110101100101:
        casez_tmp = 64'h0;
      13'b1110101100110:
        casez_tmp = 64'h0;
      13'b1110101100111:
        casez_tmp = 64'h0;
      13'b1110101101000:
        casez_tmp = 64'h0;
      13'b1110101101001:
        casez_tmp = 64'h0;
      13'b1110101101010:
        casez_tmp = 64'h0;
      13'b1110101101011:
        casez_tmp = 64'h0;
      13'b1110101101100:
        casez_tmp = 64'h0;
      13'b1110101101101:
        casez_tmp = 64'h0;
      13'b1110101101110:
        casez_tmp = 64'h0;
      13'b1110101101111:
        casez_tmp = 64'h0;
      13'b1110101110000:
        casez_tmp = 64'h0;
      13'b1110101110001:
        casez_tmp = 64'h0;
      13'b1110101110010:
        casez_tmp = 64'h0;
      13'b1110101110011:
        casez_tmp = 64'h0;
      13'b1110101110100:
        casez_tmp = 64'h0;
      13'b1110101110101:
        casez_tmp = 64'h0;
      13'b1110101110110:
        casez_tmp = 64'h0;
      13'b1110101110111:
        casez_tmp = 64'h0;
      13'b1110101111000:
        casez_tmp = 64'h0;
      13'b1110101111001:
        casez_tmp = 64'h0;
      13'b1110101111010:
        casez_tmp = 64'h0;
      13'b1110101111011:
        casez_tmp = 64'h0;
      13'b1110101111100:
        casez_tmp = 64'h0;
      13'b1110101111101:
        casez_tmp = 64'h0;
      13'b1110101111110:
        casez_tmp = 64'h0;
      13'b1110101111111:
        casez_tmp = 64'h0;
      13'b1110110000000:
        casez_tmp = 64'h0;
      13'b1110110000001:
        casez_tmp = 64'h0;
      13'b1110110000010:
        casez_tmp = 64'h0;
      13'b1110110000011:
        casez_tmp = 64'h0;
      13'b1110110000100:
        casez_tmp = 64'h0;
      13'b1110110000101:
        casez_tmp = 64'h0;
      13'b1110110000110:
        casez_tmp = 64'h0;
      13'b1110110000111:
        casez_tmp = 64'h0;
      13'b1110110001000:
        casez_tmp = 64'h0;
      13'b1110110001001:
        casez_tmp = 64'h0;
      13'b1110110001010:
        casez_tmp = 64'h0;
      13'b1110110001011:
        casez_tmp = 64'h0;
      13'b1110110001100:
        casez_tmp = 64'h0;
      13'b1110110001101:
        casez_tmp = 64'h0;
      13'b1110110001110:
        casez_tmp = 64'h0;
      13'b1110110001111:
        casez_tmp = 64'h0;
      13'b1110110010000:
        casez_tmp = 64'h0;
      13'b1110110010001:
        casez_tmp = 64'h0;
      13'b1110110010010:
        casez_tmp = 64'h0;
      13'b1110110010011:
        casez_tmp = 64'h0;
      13'b1110110010100:
        casez_tmp = 64'h0;
      13'b1110110010101:
        casez_tmp = 64'h0;
      13'b1110110010110:
        casez_tmp = 64'h0;
      13'b1110110010111:
        casez_tmp = 64'h0;
      13'b1110110011000:
        casez_tmp = 64'h0;
      13'b1110110011001:
        casez_tmp = 64'h0;
      13'b1110110011010:
        casez_tmp = 64'h0;
      13'b1110110011011:
        casez_tmp = 64'h0;
      13'b1110110011100:
        casez_tmp = 64'h0;
      13'b1110110011101:
        casez_tmp = 64'h0;
      13'b1110110011110:
        casez_tmp = 64'h0;
      13'b1110110011111:
        casez_tmp = 64'h0;
      13'b1110110100000:
        casez_tmp = 64'h0;
      13'b1110110100001:
        casez_tmp = 64'h0;
      13'b1110110100010:
        casez_tmp = 64'h0;
      13'b1110110100011:
        casez_tmp = 64'h0;
      13'b1110110100100:
        casez_tmp = 64'h0;
      13'b1110110100101:
        casez_tmp = 64'h0;
      13'b1110110100110:
        casez_tmp = 64'h0;
      13'b1110110100111:
        casez_tmp = 64'h0;
      13'b1110110101000:
        casez_tmp = 64'h0;
      13'b1110110101001:
        casez_tmp = 64'h0;
      13'b1110110101010:
        casez_tmp = 64'h0;
      13'b1110110101011:
        casez_tmp = 64'h0;
      13'b1110110101100:
        casez_tmp = 64'h0;
      13'b1110110101101:
        casez_tmp = 64'h0;
      13'b1110110101110:
        casez_tmp = 64'h0;
      13'b1110110101111:
        casez_tmp = 64'h0;
      13'b1110110110000:
        casez_tmp = 64'h0;
      13'b1110110110001:
        casez_tmp = 64'h0;
      13'b1110110110010:
        casez_tmp = 64'h0;
      13'b1110110110011:
        casez_tmp = 64'h0;
      13'b1110110110100:
        casez_tmp = 64'h0;
      13'b1110110110101:
        casez_tmp = 64'h0;
      13'b1110110110110:
        casez_tmp = 64'h0;
      13'b1110110110111:
        casez_tmp = 64'h0;
      13'b1110110111000:
        casez_tmp = 64'h0;
      13'b1110110111001:
        casez_tmp = 64'h0;
      13'b1110110111010:
        casez_tmp = 64'h0;
      13'b1110110111011:
        casez_tmp = 64'h0;
      13'b1110110111100:
        casez_tmp = 64'h0;
      13'b1110110111101:
        casez_tmp = 64'h0;
      13'b1110110111110:
        casez_tmp = 64'h0;
      13'b1110110111111:
        casez_tmp = 64'h0;
      13'b1110111000000:
        casez_tmp = 64'h0;
      13'b1110111000001:
        casez_tmp = 64'h0;
      13'b1110111000010:
        casez_tmp = 64'h0;
      13'b1110111000011:
        casez_tmp = 64'h0;
      13'b1110111000100:
        casez_tmp = 64'h0;
      13'b1110111000101:
        casez_tmp = 64'h0;
      13'b1110111000110:
        casez_tmp = 64'h0;
      13'b1110111000111:
        casez_tmp = 64'h0;
      13'b1110111001000:
        casez_tmp = 64'h0;
      13'b1110111001001:
        casez_tmp = 64'h0;
      13'b1110111001010:
        casez_tmp = 64'h0;
      13'b1110111001011:
        casez_tmp = 64'h0;
      13'b1110111001100:
        casez_tmp = 64'h0;
      13'b1110111001101:
        casez_tmp = 64'h0;
      13'b1110111001110:
        casez_tmp = 64'h0;
      13'b1110111001111:
        casez_tmp = 64'h0;
      13'b1110111010000:
        casez_tmp = 64'h0;
      13'b1110111010001:
        casez_tmp = 64'h0;
      13'b1110111010010:
        casez_tmp = 64'h0;
      13'b1110111010011:
        casez_tmp = 64'h0;
      13'b1110111010100:
        casez_tmp = 64'h0;
      13'b1110111010101:
        casez_tmp = 64'h0;
      13'b1110111010110:
        casez_tmp = 64'h0;
      13'b1110111010111:
        casez_tmp = 64'h0;
      13'b1110111011000:
        casez_tmp = 64'h0;
      13'b1110111011001:
        casez_tmp = 64'h0;
      13'b1110111011010:
        casez_tmp = 64'h0;
      13'b1110111011011:
        casez_tmp = 64'h0;
      13'b1110111011100:
        casez_tmp = 64'h0;
      13'b1110111011101:
        casez_tmp = 64'h0;
      13'b1110111011110:
        casez_tmp = 64'h0;
      13'b1110111011111:
        casez_tmp = 64'h0;
      13'b1110111100000:
        casez_tmp = 64'h0;
      13'b1110111100001:
        casez_tmp = 64'h0;
      13'b1110111100010:
        casez_tmp = 64'h0;
      13'b1110111100011:
        casez_tmp = 64'h0;
      13'b1110111100100:
        casez_tmp = 64'h0;
      13'b1110111100101:
        casez_tmp = 64'h0;
      13'b1110111100110:
        casez_tmp = 64'h0;
      13'b1110111100111:
        casez_tmp = 64'h0;
      13'b1110111101000:
        casez_tmp = 64'h0;
      13'b1110111101001:
        casez_tmp = 64'h0;
      13'b1110111101010:
        casez_tmp = 64'h0;
      13'b1110111101011:
        casez_tmp = 64'h0;
      13'b1110111101100:
        casez_tmp = 64'h0;
      13'b1110111101101:
        casez_tmp = 64'h0;
      13'b1110111101110:
        casez_tmp = 64'h0;
      13'b1110111101111:
        casez_tmp = 64'h0;
      13'b1110111110000:
        casez_tmp = 64'h0;
      13'b1110111110001:
        casez_tmp = 64'h0;
      13'b1110111110010:
        casez_tmp = 64'h0;
      13'b1110111110011:
        casez_tmp = 64'h0;
      13'b1110111110100:
        casez_tmp = 64'h0;
      13'b1110111110101:
        casez_tmp = 64'h0;
      13'b1110111110110:
        casez_tmp = 64'h0;
      13'b1110111110111:
        casez_tmp = 64'h0;
      13'b1110111111000:
        casez_tmp = 64'h0;
      13'b1110111111001:
        casez_tmp = 64'h0;
      13'b1110111111010:
        casez_tmp = 64'h0;
      13'b1110111111011:
        casez_tmp = 64'h0;
      13'b1110111111100:
        casez_tmp = 64'h0;
      13'b1110111111101:
        casez_tmp = 64'h0;
      13'b1110111111110:
        casez_tmp = 64'h0;
      13'b1110111111111:
        casez_tmp = 64'h0;
      13'b1111000000000:
        casez_tmp = 64'hC10E0000EDFE0DD0;
      13'b1111000000001:
        casez_tmp = 64'h40C000038000000;
      13'b1111000000010:
        casez_tmp = 64'h1100000028000000;
      13'b1111000000011:
        casez_tmp = 64'h10000000;
      13'b1111000000100:
        casez_tmp = 64'hCC0B0000BD020000;
      13'b1111000000101:
        casez_tmp = 64'h0;
      13'b1111000000110:
        casez_tmp = 64'h0;
      13'b1111000000111:
        casez_tmp = 64'h1000000;
      13'b1111000001000:
        casez_tmp = 64'h400000003000000;
      13'b1111000001001:
        casez_tmp = 64'h100000000000000;
      13'b1111000001010:
        casez_tmp = 64'h400000003000000;
      13'b1111000001011:
        casez_tmp = 64'h10000000F000000;
      13'b1111000001100:
        casez_tmp = 64'h2100000003000000;
      13'b1111000001101:
        casez_tmp = 64'h656572661B000000;
      13'b1111000001110:
        casez_tmp = 64'h6F722C7370696863;
      13'b1111000001111:
        casez_tmp = 64'h7069686374656B63;
      13'b1111000010000:
        casez_tmp = 64'h343676637369722D;
      13'b1111000010001:
        casez_tmp = 64'h7665642D;
      13'b1111000010010:
        casez_tmp = 64'h1D00000003000000;
      13'b1111000010011:
        casez_tmp = 64'h6565726626000000;
      13'b1111000010100:
        casez_tmp = 64'h6F722C7370696863;
      13'b1111000010101:
        casez_tmp = 64'h7069686374656B63;
      13'b1111000010110:
        casez_tmp = 64'h343676637369722D;
      13'b1111000010111:
        casez_tmp = 64'h100000000000000;
      13'b1111000011000:
        casez_tmp = 64'h73657361696C61;
      13'b1111000011001:
        casez_tmp = 64'h1500000003000000;
      13'b1111000011010:
        casez_tmp = 64'h636F732F2C000000;
      13'b1111000011011:
        casez_tmp = 64'h406C61697265732F;
      13'b1111000011100:
        casez_tmp = 64'h3030303031303031;
      13'b1111000011101:
        casez_tmp = 64'h300000000000000;
      13'b1111000011110:
        casez_tmp = 64'h3400000015000000;
      13'b1111000011111:
        casez_tmp = 64'h7265732F636F732F;
      13'b1111000100000:
        casez_tmp = 64'h31303031406C6169;
      13'b1111000100001:
        casez_tmp = 64'h30303030;
      13'b1111000100010:
        casez_tmp = 64'h100000002000000;
      13'b1111000100011:
        casez_tmp = 64'h6E65736F6863;
      13'b1111000100100:
        casez_tmp = 64'h1200000003000000;
      13'b1111000100101:
        casez_tmp = 64'h636F732F3C000000;
      13'b1111000100110:
        casez_tmp = 64'h303031406374742F;
      13'b1111000100111:
        casez_tmp = 64'h3030303231;
      13'b1111000101000:
        casez_tmp = 64'h100000002000000;
      13'b1111000101001:
        casez_tmp = 64'h73757063;
      13'b1111000101010:
        casez_tmp = 64'h400000003000000;
      13'b1111000101011:
        casez_tmp = 64'h100000000000000;
      13'b1111000101100:
        casez_tmp = 64'h400000003000000;
      13'b1111000101101:
        casez_tmp = 64'hF000000;
      13'b1111000101110:
        casez_tmp = 64'h400000003000000;
      13'b1111000101111:
        casez_tmp = 64'h40420F0047000000;
      13'b1111000110000:
        casez_tmp = 64'h4075706301000000;
      13'b1111000110001:
        casez_tmp = 64'h300000000000030;
      13'b1111000110010:
        casez_tmp = 64'h5A00000004000000;
      13'b1111000110011:
        casez_tmp = 64'h300000000000000;
      13'b1111000110100:
        casez_tmp = 64'h1B00000015000000;
      13'b1111000110101:
        casez_tmp = 64'h722C657669666973;
      13'b1111000110110:
        casez_tmp = 64'h72003074656B636F;
      13'b1111000110111:
        casez_tmp = 64'h76637369;
      13'b1111000111000:
        casez_tmp = 64'h400000003000000;
      13'b1111000111001:
        casez_tmp = 64'h400000006A000000;
      13'b1111000111010:
        casez_tmp = 64'h400000003000000;
      13'b1111000111011:
        casez_tmp = 64'h400000007D000000;
      13'b1111000111100:
        casez_tmp = 64'h400000003000000;
      13'b1111000111101:
        casez_tmp = 64'h1000008A000000;
      13'b1111000111110:
        casez_tmp = 64'h400000003000000;
      13'b1111000111111:
        casez_tmp = 64'h100000097000000;
      13'b1111001000000:
        casez_tmp = 64'h400000003000000;
      13'b1111001000001:
        casez_tmp = 64'h4000000A2000000;
      13'b1111001000010:
        casez_tmp = 64'h400000003000000;
      13'b1111001000011:
        casez_tmp = 64'h757063AD000000;
      13'b1111001000100:
        casez_tmp = 64'h400000003000000;
      13'b1111001000101:
        casez_tmp = 64'h1000000B9000000;
      13'b1111001000110:
        casez_tmp = 64'h400000003000000;
      13'b1111001000111:
        casez_tmp = 64'h40000000D8000000;
      13'b1111001001000:
        casez_tmp = 64'h400000003000000;
      13'b1111001001001:
        casez_tmp = 64'h40000000EB000000;
      13'b1111001001010:
        casez_tmp = 64'h400000003000000;
      13'b1111001001011:
        casez_tmp = 64'h100000F8000000;
      13'b1111001001100:
        casez_tmp = 64'h400000003000000;
      13'b1111001001101:
        casez_tmp = 64'h100000005010000;
      13'b1111001001110:
        casez_tmp = 64'h400000003000000;
      13'b1111001001111:
        casez_tmp = 64'h400000010010000;
      13'b1111001010000:
        casez_tmp = 64'hB00000003000000;
      13'b1111001010001:
        casez_tmp = 64'h637369721B010000;
      13'b1111001010010:
        casez_tmp = 64'h393376732C76;
      13'b1111001010011:
        casez_tmp = 64'h400000003000000;
      13'b1111001010100:
        casez_tmp = 64'h100000024010000;
      13'b1111001010101:
        casez_tmp = 64'h400000003000000;
      13'b1111001010110:
        casez_tmp = 64'h35010000;
      13'b1111001010111:
        casez_tmp = 64'h2500000003000000;
      13'b1111001011000:
        casez_tmp = 64'h3436767239010000;
      13'b1111001011001:
        casez_tmp = 64'h7363697A63616D69;
      13'b1111001011010:
        casez_tmp = 64'h636E6566697A5F72;
      13'b1111001011011:
        casez_tmp = 64'h6D7068697A5F6965;
      13'b1111001011100:
        casez_tmp = 64'h74656B636F72785F;
      13'b1111001011101:
        casez_tmp = 64'h300000000000000;
      13'b1111001011110:
        casez_tmp = 64'h4301000004000000;
      13'b1111001011111:
        casez_tmp = 64'h300000004000000;
      13'b1111001100000:
        casez_tmp = 64'h5801000004000000;
      13'b1111001100001:
        casez_tmp = 64'h300000008000000;
      13'b1111001100010:
        casez_tmp = 64'h6901000005000000;
      13'b1111001100011:
        casez_tmp = 64'h79616B6F;
      13'b1111001100100:
        casez_tmp = 64'h400000003000000;
      13'b1111001100101:
        casez_tmp = 64'h40420F0047000000;
      13'b1111001100110:
        casez_tmp = 64'h3000000;
      13'b1111001100111:
        casez_tmp = 64'h100000070010000;
      13'b1111001101000:
        casez_tmp = 64'h7075727265746E69;
      13'b1111001101001:
        casez_tmp = 64'h6F72746E6F632D74;
      13'b1111001101010:
        casez_tmp = 64'h72656C6C;
      13'b1111001101011:
        casez_tmp = 64'h400000003000000;
      13'b1111001101100:
        casez_tmp = 64'h10000007A010000;
      13'b1111001101101:
        casez_tmp = 64'hF00000003000000;
      13'b1111001101110:
        casez_tmp = 64'h637369721B000000;
      13'b1111001101111:
        casez_tmp = 64'h6E692D7570632C76;
      13'b1111001110000:
        casez_tmp = 64'h300000000006374;
      13'b1111001110001:
        casez_tmp = 64'h8B01000000000000;
      13'b1111001110010:
        casez_tmp = 64'h400000003000000;
      13'b1111001110011:
        casez_tmp = 64'h2000000A0010000;
      13'b1111001110100:
        casez_tmp = 64'h200000002000000;
      13'b1111001110101:
        casez_tmp = 64'h100000002000000;
      13'b1111001110110:
        casez_tmp = 64'h6B6C635F687465;
      13'b1111001110111:
        casez_tmp = 64'h400000003000000;
      13'b1111001111000:
        casez_tmp = 64'hA8010000;
      13'b1111001111001:
        casez_tmp = 64'h400000003000000;
      13'b1111001111010:
        casez_tmp = 64'h405973075A000000;
      13'b1111001111011:
        casez_tmp = 64'hD00000003000000;
      13'b1111001111100:
        casez_tmp = 64'h65687465B5010000;
      13'b1111001111101:
        casez_tmp = 64'h6B6C635F74656E72;
      13'b1111001111110:
        casez_tmp = 64'h300000000000000;
      13'b1111001111111:
        casez_tmp = 64'h1B0000000C000000;
      13'b1111010000000:
        casez_tmp = 64'h6C632D6465786966;
      13'b1111010000001:
        casez_tmp = 64'h3000000006B636F;
      13'b1111010000010:
        casez_tmp = 64'hA001000004000000;
      13'b1111010000011:
        casez_tmp = 64'h200000004000000;
      13'b1111010000100:
        casez_tmp = 64'h6F6D656D01000000;
      13'b1111010000101:
        casez_tmp = 64'h3030303038407972;
      13'b1111010000110:
        casez_tmp = 64'h300000000303030;
      13'b1111010000111:
        casez_tmp = 64'hAD00000007000000;
      13'b1111010001000:
        casez_tmp = 64'h79726F6D656D;
      13'b1111010001001:
        casez_tmp = 64'h800000003000000;
      13'b1111010001010:
        casez_tmp = 64'h8035010000;
      13'b1111010001011:
        casez_tmp = 64'h300000000000080;
      13'b1111010001100:
        casez_tmp = 64'hA001000004000000;
      13'b1111010001101:
        casez_tmp = 64'h200000001000000;
      13'b1111010001110:
        casez_tmp = 64'h636F7301000000;
      13'b1111010001111:
        casez_tmp = 64'h400000003000000;
      13'b1111010010000:
        casez_tmp = 64'h100000000000000;
      13'b1111010010001:
        casez_tmp = 64'h400000003000000;
      13'b1111010010010:
        casez_tmp = 64'h10000000F000000;
      13'b1111010010011:
        casez_tmp = 64'h2C00000003000000;
      13'b1111010010100:
        casez_tmp = 64'h656572661B000000;
      13'b1111010010101:
        casez_tmp = 64'h6F722C7370696863;
      13'b1111010010110:
        casez_tmp = 64'h7069686374656B63;
      13'b1111010010111:
        casez_tmp = 64'h343676637369722D;
      13'b1111010011000:
        casez_tmp = 64'h6D697300636F732D;
      13'b1111010011001:
        casez_tmp = 64'h7375622D656C70;
      13'b1111010011010:
        casez_tmp = 64'h3000000;
      13'b1111010011011:
        casez_tmp = 64'h1000000C8010000;
      13'b1111010011100:
        casez_tmp = 64'h303240746E696C63;
      13'b1111010011101:
        casez_tmp = 64'h3030303030;
      13'b1111010011110:
        casez_tmp = 64'hD00000003000000;
      13'b1111010011111:
        casez_tmp = 64'h637369721B000000;
      13'b1111010100000:
        casez_tmp = 64'h30746E696C632C76;
      13'b1111010100001:
        casez_tmp = 64'h300000000000000;
      13'b1111010100010:
        casez_tmp = 64'hCF01000010000000;
      13'b1111010100011:
        casez_tmp = 64'h300000002000000;
      13'b1111010100100:
        casez_tmp = 64'h700000002000000;
      13'b1111010100101:
        casez_tmp = 64'h800000003000000;
      13'b1111010100110:
        casez_tmp = 64'h235010000;
      13'b1111010100111:
        casez_tmp = 64'h300000000000100;
      13'b1111010101000:
        casez_tmp = 64'hE301000008000000;
      13'b1111010101001:
        casez_tmp = 64'h6C6F72746E6F63;
      13'b1111010101010:
        casez_tmp = 64'h100000002000000;
      13'b1111010101011:
        casez_tmp = 64'h6F632D6775626564;
      13'b1111010101100:
        casez_tmp = 64'h72656C6C6F72746E;
      13'b1111010101101:
        casez_tmp = 64'h300000000003040;
      13'b1111010101110:
        casez_tmp = 64'h1B00000021000000;
      13'b1111010101111:
        casez_tmp = 64'h642C657669666973;
      13'b1111010110000:
        casez_tmp = 64'h3331302D67756265;
      13'b1111010110001:
        casez_tmp = 64'h642C766373697200;
      13'b1111010110010:
        casez_tmp = 64'h3331302D67756265;
      13'b1111010110011:
        casez_tmp = 64'h300000000000000;
      13'b1111010110100:
        casez_tmp = 64'hED01000004000000;
      13'b1111010110101:
        casez_tmp = 64'h300000000696D64;
      13'b1111010110110:
        casez_tmp = 64'hCF01000008000000;
      13'b1111010110111:
        casez_tmp = 64'hFFFF000002000000;
      13'b1111010111000:
        casez_tmp = 64'h800000003000000;
      13'b1111010111001:
        casez_tmp = 64'h35010000;
      13'b1111010111010:
        casez_tmp = 64'h300000000100000;
      13'b1111010111011:
        casez_tmp = 64'hE301000008000000;
      13'b1111010111100:
        casez_tmp = 64'h6C6F72746E6F63;
      13'b1111010111101:
        casez_tmp = 64'h100000002000000;
      13'b1111010111110:
        casez_tmp = 64'h65642D726F727265;
      13'b1111010111111:
        casez_tmp = 64'h3030334065636976;
      13'b1111011000000:
        casez_tmp = 64'h300000000000030;
      13'b1111011000001:
        casez_tmp = 64'h1B0000000E000000;
      13'b1111011000010:
        casez_tmp = 64'h652C657669666973;
      13'b1111011000011:
        casez_tmp = 64'h30726F7272;
      13'b1111011000100:
        casez_tmp = 64'h800000003000000;
      13'b1111011000101:
        casez_tmp = 64'h30000035010000;
      13'b1111011000110:
        casez_tmp = 64'h200000000100000;
      13'b1111011000111:
        casez_tmp = 64'h4068746501000000;
      13'b1111011001000:
        casez_tmp = 64'h3030303431303031;
      13'b1111011001001:
        casez_tmp = 64'h300000000000000;
      13'b1111011001010:
        casez_tmp = 64'hFA0100000A000000;
      13'b1111011001011:
        casez_tmp = 64'h6C6370006B6C6368;
      13'b1111011001100:
        casez_tmp = 64'h30000000000006B;
      13'b1111011001101:
        casez_tmp = 64'h602000008000000;
      13'b1111011001110:
        casez_tmp = 64'h400000003000000;
      13'b1111011001111:
        casez_tmp = 64'hA00000003000000;
      13'b1111011010000:
        casez_tmp = 64'h736E64631B000000;
      13'b1111011010001:
        casez_tmp = 64'h6263616D2C;
      13'b1111011010010:
        casez_tmp = 64'h400000003000000;
      13'b1111011010011:
        casez_tmp = 64'h50000000D020000;
      13'b1111011010100:
        casez_tmp = 64'h400000003000000;
      13'b1111011010101:
        casez_tmp = 64'h10000001E020000;
      13'b1111011010110:
        casez_tmp = 64'h1800000003000000;
      13'b1111011010111:
        casez_tmp = 64'h29020000;
      13'b1111011011000:
        casez_tmp = 64'h0;
      13'b1111011011001:
        casez_tmp = 64'h0;
      13'b1111011011010:
        casez_tmp = 64'h300000000000000;
      13'b1111011011011:
        casez_tmp = 64'h3502000005000000;
      13'b1111011011100:
        casez_tmp = 64'h69696D67;
      13'b1111011011101:
        casez_tmp = 64'h800000003000000;
      13'b1111011011110:
        casez_tmp = 64'h40011035010000;
      13'b1111011011111:
        casez_tmp = 64'h300000000100000;
      13'b1111011100000:
        casez_tmp = 64'hE301000008000000;
      13'b1111011100001:
        casez_tmp = 64'h6C6F72746E6F63;
      13'b1111011100010:
        casez_tmp = 64'h6578696601000000;
      13'b1111011100011:
        casez_tmp = 64'h6B6E696C2D64;
      13'b1111011100100:
        casez_tmp = 64'h3000000;
      13'b1111011100101:
        casez_tmp = 64'h30000003E020000;
      13'b1111011100110:
        casez_tmp = 64'h4A02000004000000;
      13'b1111011100111:
        casez_tmp = 64'h2000000E8030000;
      13'b1111011101000:
        casez_tmp = 64'h100000002000000;
      13'b1111011101001:
        casez_tmp = 64'h6C616E7265747865;
      13'b1111011101010:
        casez_tmp = 64'h75727265746E692D;
      13'b1111011101011:
        casez_tmp = 64'h300000000737470;
      13'b1111011101100:
        casez_tmp = 64'hD02000004000000;
      13'b1111011101101:
        casez_tmp = 64'h300000005000000;
      13'b1111011101110:
        casez_tmp = 64'h1E02000008000000;
      13'b1111011101111:
        casez_tmp = 64'h800000007000000;
      13'b1111011110000:
        casez_tmp = 64'h100000002000000;
      13'b1111011110001:
        casez_tmp = 64'h7075727265746E69;
      13'b1111011110010:
        casez_tmp = 64'h6F72746E6F632D74;
      13'b1111011110011:
        casez_tmp = 64'h3030634072656C6C;
      13'b1111011110100:
        casez_tmp = 64'h30303030;
      13'b1111011110101:
        casez_tmp = 64'h400000003000000;
      13'b1111011110110:
        casez_tmp = 64'h10000007A010000;
      13'b1111011110111:
        casez_tmp = 64'hC00000003000000;
      13'b1111011111000:
        casez_tmp = 64'h637369721B000000;
      13'b1111011111001:
        casez_tmp = 64'h3063696C702C76;
      13'b1111011111010:
        casez_tmp = 64'h3000000;
      13'b1111011111011:
        casez_tmp = 64'h30000008B010000;
      13'b1111011111100:
        casez_tmp = 64'hCF01000010000000;
      13'b1111011111101:
        casez_tmp = 64'hB00000002000000;
      13'b1111011111110:
        casez_tmp = 64'h900000002000000;
      13'b1111011111111:
        casez_tmp = 64'h800000003000000;
      13'b1111100000000:
        casez_tmp = 64'hC35010000;
      13'b1111100000001:
        casez_tmp = 64'h300000000000004;
      13'b1111100000010:
        casez_tmp = 64'hE301000008000000;
      13'b1111100000011:
        casez_tmp = 64'h6C6F72746E6F63;
      13'b1111100000100:
        casez_tmp = 64'h400000003000000;
      13'b1111100000101:
        casez_tmp = 64'h700000050020000;
      13'b1111100000110:
        casez_tmp = 64'h400000003000000;
      13'b1111100000111:
        casez_tmp = 64'h800000063020000;
      13'b1111100001000:
        casez_tmp = 64'h400000003000000;
      13'b1111100001001:
        casez_tmp = 64'h5000000A0010000;
      13'b1111100001010:
        casez_tmp = 64'h100000002000000;
      13'b1111100001011:
        casez_tmp = 64'h726F702D6F696D6D;
      13'b1111100001100:
        casez_tmp = 64'h3640346978612D74;
      13'b1111100001101:
        casez_tmp = 64'h30303030303030;
      13'b1111100001110:
        casez_tmp = 64'h400000003000000;
      13'b1111100001111:
        casez_tmp = 64'h100000000000000;
      13'b1111100010000:
        casez_tmp = 64'h400000003000000;
      13'b1111100010001:
        casez_tmp = 64'h10000000F000000;
      13'b1111100010010:
        casez_tmp = 64'hB00000003000000;
      13'b1111100010011:
        casez_tmp = 64'h706D69731B000000;
      13'b1111100010100:
        casez_tmp = 64'h7375622D656C;
      13'b1111100010101:
        casez_tmp = 64'hC00000003000000;
      13'b1111100010110:
        casez_tmp = 64'h60C8010000;
      13'b1111100010111:
        casez_tmp = 64'h2000000060;
      13'b1111100011000:
        casez_tmp = 64'h100000002000000;
      13'b1111100011001:
        casez_tmp = 64'h30303031406D6F72;
      13'b1111100011010:
        casez_tmp = 64'h300000000000030;
      13'b1111100011011:
        casez_tmp = 64'h1B0000000C000000;
      13'b1111100011100:
        casez_tmp = 64'h722C657669666973;
      13'b1111100011101:
        casez_tmp = 64'h300000000306D6F;
      13'b1111100011110:
        casez_tmp = 64'h3501000008000000;
      13'b1111100011111:
        casez_tmp = 64'h10000000100;
      13'b1111100100000:
        casez_tmp = 64'h400000003000000;
      13'b1111100100001:
        casez_tmp = 64'h6D656DE3010000;
      13'b1111100100010:
        casez_tmp = 64'h100000002000000;
      13'b1111100100011:
        casez_tmp = 64'h31406C6169726573;
      13'b1111100100100:
        casez_tmp = 64'h30303030313030;
      13'b1111100100101:
        casez_tmp = 64'h400000003000000;
      13'b1111100100110:
        casez_tmp = 64'h300000006020000;
      13'b1111100100111:
        casez_tmp = 64'hD00000003000000;
      13'b1111100101000:
        casez_tmp = 64'h696669731B000000;
      13'b1111100101001:
        casez_tmp = 64'h30747261752C6576;
      13'b1111100101010:
        casez_tmp = 64'h300000000000000;
      13'b1111100101011:
        casez_tmp = 64'hD02000004000000;
      13'b1111100101100:
        casez_tmp = 64'h300000005000000;
      13'b1111100101101:
        casez_tmp = 64'h1E02000004000000;
      13'b1111100101110:
        casez_tmp = 64'h300000006000000;
      13'b1111100101111:
        casez_tmp = 64'h3501000008000000;
      13'b1111100110000:
        casez_tmp = 64'h10000000000110;
      13'b1111100110001:
        casez_tmp = 64'h800000003000000;
      13'b1111100110010:
        casez_tmp = 64'h746E6F63E3010000;
      13'b1111100110011:
        casez_tmp = 64'h2000000006C6F72;
      13'b1111100110100:
        casez_tmp = 64'h4069707301000000;
      13'b1111100110101:
        casez_tmp = 64'h3030306631303031;
      13'b1111100110110:
        casez_tmp = 64'h300000000000000;
      13'b1111100110111:
        casez_tmp = 64'h4000000;
      13'b1111100111000:
        casez_tmp = 64'h300000001000000;
      13'b1111100111001:
        casez_tmp = 64'hF00000004000000;
      13'b1111100111010:
        casez_tmp = 64'h300000000000000;
      13'b1111100111011:
        casez_tmp = 64'h602000004000000;
      13'b1111100111100:
        casez_tmp = 64'h300000003000000;
      13'b1111100111101:
        casez_tmp = 64'h1B0000000C000000;
      13'b1111100111110:
        casez_tmp = 64'h732C657669666973;
      13'b1111100111111:
        casez_tmp = 64'h300000000306970;
      13'b1111101000000:
        casez_tmp = 64'hD02000004000000;
      13'b1111101000001:
        casez_tmp = 64'h300000005000000;
      13'b1111101000010:
        casez_tmp = 64'h1E02000004000000;
      13'b1111101000011:
        casez_tmp = 64'h300000005000000;
      13'b1111101000100:
        casez_tmp = 64'h3501000010000000;
      13'b1111101000101:
        casez_tmp = 64'h10000000F00110;
      13'b1111101000110:
        casez_tmp = 64'h2000000020;
      13'b1111101000111:
        casez_tmp = 64'hC00000003000000;
      13'b1111101001000:
        casez_tmp = 64'h746E6F63E3010000;
      13'b1111101001001:
        casez_tmp = 64'h6D656D006C6F72;
      13'b1111101001010:
        casez_tmp = 64'h73616C6601000000;
      13'b1111101001011:
        casez_tmp = 64'h300000000304068;
      13'b1111101001100:
        casez_tmp = 64'h1B0000000E000000;
      13'b1111101001101:
        casez_tmp = 64'h70732C636564656A;
      13'b1111101001110:
        casez_tmp = 64'h726F6E2D69;
      13'b1111101001111:
        casez_tmp = 64'h3000000;
      13'b1111101010000:
        casez_tmp = 64'h30000006E020000;
      13'b1111101010001:
        casez_tmp = 64'h3501000004000000;
      13'b1111101010010:
        casez_tmp = 64'h300000000000000;
      13'b1111101010011:
        casez_tmp = 64'h7D02000004000000;
      13'b1111101010100:
        casez_tmp = 64'h300000080F0FA02;
      13'b1111101010101:
        casez_tmp = 64'h8F02000004000000;
      13'b1111101010110:
        casez_tmp = 64'h300000004000000;
      13'b1111101010111:
        casez_tmp = 64'hA002000004000000;
      13'b1111101011000:
        casez_tmp = 64'h200000004000000;
      13'b1111101011001:
        casez_tmp = 64'h100000002000000;
      13'b1111101011010:
        casez_tmp = 64'h6574737973627573;
      13'b1111101011011:
        casez_tmp = 64'h635F737562705F6D;
      13'b1111101011100:
        casez_tmp = 64'h6B636F6C;
      13'b1111101011101:
        casez_tmp = 64'h400000003000000;
      13'b1111101011110:
        casez_tmp = 64'hA8010000;
      13'b1111101011111:
        casez_tmp = 64'h400000003000000;
      13'b1111101100000:
        casez_tmp = 64'hE1F5055A000000;
      13'b1111101100001:
        casez_tmp = 64'h1500000003000000;
      13'b1111101100010:
        casez_tmp = 64'h73627573B5010000;
      13'b1111101100011:
        casez_tmp = 64'h62705F6D65747379;
      13'b1111101100100:
        casez_tmp = 64'h6B636F6C635F7375;
      13'b1111101100101:
        casez_tmp = 64'h300000000000000;
      13'b1111101100110:
        casez_tmp = 64'h1B0000000C000000;
      13'b1111101100111:
        casez_tmp = 64'h6C632D6465786966;
      13'b1111101101000:
        casez_tmp = 64'h3000000006B636F;
      13'b1111101101001:
        casez_tmp = 64'hA001000004000000;
      13'b1111101101010:
        casez_tmp = 64'h200000003000000;
      13'b1111101101011:
        casez_tmp = 64'h4063747401000000;
      13'b1111101101100:
        casez_tmp = 64'h3030303231303031;
      13'b1111101101101:
        casez_tmp = 64'h300000000000000;
      13'b1111101101110:
        casez_tmp = 64'h602000004000000;
      13'b1111101101111:
        casez_tmp = 64'h300000003000000;
      13'b1111101110000:
        casez_tmp = 64'h1B00000009000000;
      13'b1111101110001:
        casez_tmp = 64'h6374742C736E6463;
      13'b1111101110010:
        casez_tmp = 64'h300000000000000;
      13'b1111101110011:
        casez_tmp = 64'hD02000004000000;
      13'b1111101110100:
        casez_tmp = 64'h300000005000000;
      13'b1111101110101:
        casez_tmp = 64'h1E0200000C000000;
      13'b1111101110110:
        casez_tmp = 64'h300000002000000;
      13'b1111101110111:
        casez_tmp = 64'h300000004000000;
      13'b1111101111000:
        casez_tmp = 64'h3501000008000000;
      13'b1111101111001:
        casez_tmp = 64'h10000000200110;
      13'b1111101111010:
        casez_tmp = 64'h800000003000000;
      13'b1111101111011:
        casez_tmp = 64'h746E6F63E3010000;
      13'b1111101111100:
        casez_tmp = 64'h3000000006C6F72;
      13'b1111101111101:
        casez_tmp = 64'hB102000004000000;
      13'b1111101111110:
        casez_tmp = 64'h200000020000000;
      13'b1111101111111:
        casez_tmp = 64'h200000002000000;
      13'b1111110000000:
        casez_tmp = 64'h6464612309000000;
      13'b1111110000001:
        casez_tmp = 64'h6C65632D73736572;
      13'b1111110000010:
        casez_tmp = 64'h657A69732300736C;
      13'b1111110000011:
        casez_tmp = 64'h6300736C6C65632D;
      13'b1111110000100:
        casez_tmp = 64'h6C62697461706D6F;
      13'b1111110000101:
        casez_tmp = 64'h6C65646F6D0065;
      13'b1111110000110:
        casez_tmp = 64'h656C6F736E6F63;
      13'b1111110000111:
        casez_tmp = 64'h306C6169726573;
      13'b1111110001000:
        casez_tmp = 64'h6D69742D6B636974;
      13'b1111110001001:
        casez_tmp = 64'h62656D6974007265;
      13'b1111110001010:
        casez_tmp = 64'h716572662D657361;
      13'b1111110001011:
        casez_tmp = 64'h6C630079636E6575;
      13'b1111110001100:
        casez_tmp = 64'h716572662D6B636F;
      13'b1111110001101:
        casez_tmp = 64'h2D640079636E6575;
      13'b1111110001110:
        casez_tmp = 64'h6C622D6568636163;
      13'b1111110001111:
        casez_tmp = 64'h657A69732D6B636F;
      13'b1111110010000:
        casez_tmp = 64'h65686361632D6400;
      13'b1111110010001:
        casez_tmp = 64'h2D6400737465732D;
      13'b1111110010010:
        casez_tmp = 64'h69732D6568636163;
      13'b1111110010011:
        casez_tmp = 64'h626C742D6400657A;
      13'b1111110010100:
        casez_tmp = 64'h2D6400737465732D;
      13'b1111110010101:
        casez_tmp = 64'h657A69732D626C74;
      13'b1111110010110:
        casez_tmp = 64'h5F65636976656400;
      13'b1111110010111:
        casez_tmp = 64'h7261680065707974;
      13'b1111110011000:
        casez_tmp = 64'h78652D6572617764;
      13'b1111110011001:
        casez_tmp = 64'h6B616572622D6365;
      13'b1111110011010:
        casez_tmp = 64'h6F632D746E696F70;
      13'b1111110011011:
        casez_tmp = 64'h61632D6900746E75;
      13'b1111110011100:
        casez_tmp = 64'h636F6C622D656863;
      13'b1111110011101:
        casez_tmp = 64'h6900657A69732D6B;
      13'b1111110011110:
        casez_tmp = 64'h732D65686361632D;
      13'b1111110011111:
        casez_tmp = 64'h61632D6900737465;
      13'b1111110100000:
        casez_tmp = 64'h657A69732D656863;
      13'b1111110100001:
        casez_tmp = 64'h732D626C742D6900;
      13'b1111110100010:
        casez_tmp = 64'h6C742D6900737465;
      13'b1111110100011:
        casez_tmp = 64'h6D00657A69732D62;
      13'b1111110100100:
        casez_tmp = 64'h657079742D756D;
      13'b1111110100101:
        casez_tmp = 64'h76656C2D7478656E;
      13'b1111110100110:
        casez_tmp = 64'h65686361632D6C65;
      13'b1111110100111:
        casez_tmp = 64'h7369720067657200;
      13'b1111110101000:
        casez_tmp = 64'h72006173692C7663;
      13'b1111110101001:
        casez_tmp = 64'h706D702C76637369;
      13'b1111110101010:
        casez_tmp = 64'h72616C756E617267;
      13'b1111110101011:
        casez_tmp = 64'h6373697200797469;
      13'b1111110101100:
        casez_tmp = 64'h676572706D702C76;
      13'b1111110101101:
        casez_tmp = 64'h61747300736E6F69;
      13'b1111110101110:
        casez_tmp = 64'h2D626C7400737574;
      13'b1111110101111:
        casez_tmp = 64'h69230074696C7073;
      13'b1111110110000:
        casez_tmp = 64'h747075727265746E;
      13'b1111110110001:
        casez_tmp = 64'h6900736C6C65632D;
      13'b1111110110010:
        casez_tmp = 64'h747075727265746E;
      13'b1111110110011:
        casez_tmp = 64'h6C6F72746E6F632D;
      13'b1111110110100:
        casez_tmp = 64'h6E6168700072656C;
      13'b1111110110101:
        casez_tmp = 64'h6F6C632300656C64;
      13'b1111110110110:
        casez_tmp = 64'h736C6C65632D6B63;
      13'b1111110110111:
        casez_tmp = 64'h6F2D6B636F6C6300;
      13'b1111110111000:
        casez_tmp = 64'h616E2D7475707475;
      13'b1111110111001:
        casez_tmp = 64'h676E61720073656D;
      13'b1111110111010:
        casez_tmp = 64'h7265746E69007365;
      13'b1111110111011:
        casez_tmp = 64'h78652D7374707572;
      13'b1111110111100:
        casez_tmp = 64'h72006465646E6574;
      13'b1111110111101:
        casez_tmp = 64'h73656D616E2D6765;
      13'b1111110111110:
        casez_tmp = 64'h612D677562656400;
      13'b1111110111111:
        casez_tmp = 64'h6C63006863617474;
      13'b1111111000000:
        casez_tmp = 64'h656D616E2D6B636F;
      13'b1111111000001:
        casez_tmp = 64'h736B636F6C630073;
      13'b1111111000010:
        casez_tmp = 64'h75727265746E6900;
      13'b1111111000011:
        casez_tmp = 64'h6E657261702D7470;
      13'b1111111000100:
        casez_tmp = 64'h727265746E690074;
      13'b1111111000101:
        casez_tmp = 64'h63616D0073747075;
      13'b1111111000110:
        casez_tmp = 64'h737365726464612D;
      13'b1111111000111:
        casez_tmp = 64'h646F6D2D79687000;
      13'b1111111001000:
        casez_tmp = 64'h642D6C6C75660065;
      13'b1111111001001:
        casez_tmp = 64'h70730078656C7075;
      13'b1111111001010:
        casez_tmp = 64'h6373697200646565;
      13'b1111111001011:
        casez_tmp = 64'h72702D78616D2C76;
      13'b1111111001100:
        casez_tmp = 64'h7200797469726F69;
      13'b1111111001101:
        casez_tmp = 64'h65646E2C76637369;
      13'b1111111001110:
        casez_tmp = 64'h662C7035326D0076;
      13'b1111111001111:
        casez_tmp = 64'h646165722D747361;
      13'b1111111010000:
        casez_tmp = 64'h78616D2D69707300;
      13'b1111111010001:
        casez_tmp = 64'h6E6575716572662D;
      13'b1111111010010:
        casez_tmp = 64'h722D697073007963;
      13'b1111111010011:
        casez_tmp = 64'h69772D7375622D78;
      13'b1111111010100:
        casez_tmp = 64'h2D69707300687464;
      13'b1111111010101:
        casez_tmp = 64'h772D7375622D7874;
      13'b1111111010110:
        casez_tmp = 64'h6D69740068746469;
      13'b1111111010111:
        casez_tmp = 64'h68746469772D7265;
      13'b1111111011000:
        casez_tmp = 64'h0;
      13'b1111111011001:
        casez_tmp = 64'h0;
      13'b1111111011010:
        casez_tmp = 64'h0;
      13'b1111111011011:
        casez_tmp = 64'h0;
      13'b1111111011100:
        casez_tmp = 64'h0;
      13'b1111111011101:
        casez_tmp = 64'h0;
      13'b1111111011110:
        casez_tmp = 64'h0;
      13'b1111111011111:
        casez_tmp = 64'h0;
      13'b1111111100000:
        casez_tmp = 64'h0;
      13'b1111111100001:
        casez_tmp = 64'h0;
      13'b1111111100010:
        casez_tmp = 64'h0;
      13'b1111111100011:
        casez_tmp = 64'h0;
      13'b1111111100100:
        casez_tmp = 64'h0;
      13'b1111111100101:
        casez_tmp = 64'h0;
      13'b1111111100110:
        casez_tmp = 64'h0;
      13'b1111111100111:
        casez_tmp = 64'h0;
      13'b1111111101000:
        casez_tmp = 64'h0;
      13'b1111111101001:
        casez_tmp = 64'h0;
      13'b1111111101010:
        casez_tmp = 64'h0;
      13'b1111111101011:
        casez_tmp = 64'h0;
      13'b1111111101100:
        casez_tmp = 64'h0;
      13'b1111111101101:
        casez_tmp = 64'h0;
      13'b1111111101110:
        casez_tmp = 64'h0;
      13'b1111111101111:
        casez_tmp = 64'h0;
      13'b1111111110000:
        casez_tmp = 64'h0;
      13'b1111111110001:
        casez_tmp = 64'h0;
      13'b1111111110010:
        casez_tmp = 64'h0;
      13'b1111111110011:
        casez_tmp = 64'h0;
      13'b1111111110100:
        casez_tmp = 64'h0;
      13'b1111111110101:
        casez_tmp = 64'h0;
      13'b1111111110110:
        casez_tmp = 64'h0;
      13'b1111111110111:
        casez_tmp = 64'h0;
      13'b1111111111000:
        casez_tmp = 64'h0;
      13'b1111111111001:
        casez_tmp = 64'h0;
      13'b1111111111010:
        casez_tmp = 64'h0;
      13'b1111111111011:
        casez_tmp = 64'h0;
      13'b1111111111100:
        casez_tmp = 64'h0;
      13'b1111111111101:
        casez_tmp = 64'h0;
      13'b1111111111110:
        casez_tmp = 64'h0;
      default:
        casez_tmp = 64'h0;
    endcase
  end // always @(*)
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data = casez_tmp;
endmodule

module ClockSinkDomain_5(
  input         auto_bootrom_in_a_valid,
  input  [1:0]  auto_bootrom_in_a_bits_size,
  input  [9:0]  auto_bootrom_in_a_bits_source,
  input  [16:0] auto_bootrom_in_a_bits_address,
  input         auto_bootrom_in_d_ready,
  output        auto_bootrom_in_a_ready,
                auto_bootrom_in_d_valid,
  output [1:0]  auto_bootrom_in_d_bits_size,
  output [9:0]  auto_bootrom_in_d_bits_source,
  output [63:0] auto_bootrom_in_d_bits_data
);

  TLROM bootrom (
    .auto_in_a_valid        (auto_bootrom_in_a_valid),
    .auto_in_a_bits_size    (auto_bootrom_in_a_bits_size),
    .auto_in_a_bits_source  (auto_bootrom_in_a_bits_source),
    .auto_in_a_bits_address (auto_bootrom_in_a_bits_address),
    .auto_in_d_ready        (auto_bootrom_in_d_ready),
    .auto_in_a_ready        (auto_bootrom_in_a_ready),
    .auto_in_d_valid        (auto_bootrom_in_d_valid),
    .auto_in_d_bits_size    (auto_bootrom_in_d_bits_size),
    .auto_in_d_bits_source  (auto_bootrom_in_d_bits_source),
    .auto_in_d_bits_data    (auto_bootrom_in_d_bits_data)
  );
endmodule

module RocketSystem(
  input         clock,
                reset,
                resetctrl_hartIsInReset_0,
                debug_clock,
                debug_reset,
                debug_clockeddmi_dmi_req_valid,
  input  [6:0]  debug_clockeddmi_dmi_req_bits_addr,
  input  [31:0] debug_clockeddmi_dmi_req_bits_data,
  input  [1:0]  debug_clockeddmi_dmi_req_bits_op,
  input         debug_clockeddmi_dmi_resp_ready,
                debug_clockeddmi_dmiClock,
                debug_clockeddmi_dmiReset,
                debug_dmactiveAck,
                mem_axi4_0_aw_ready,
                mem_axi4_0_w_ready,
                mem_axi4_0_b_valid,
  input  [3:0]  mem_axi4_0_b_bits_id,
  input  [1:0]  mem_axi4_0_b_bits_resp,
  input         mem_axi4_0_ar_ready,
                mem_axi4_0_r_valid,
  input  [3:0]  mem_axi4_0_r_bits_id,
  input  [63:0] mem_axi4_0_r_bits_data,
  input  [1:0]  mem_axi4_0_r_bits_resp,
  input         mem_axi4_0_r_bits_last,
                mmio_axi4_0_aw_ready,
                mmio_axi4_0_w_ready,
                mmio_axi4_0_b_valid,
  input  [3:0]  mmio_axi4_0_b_bits_id,
  input  [1:0]  mmio_axi4_0_b_bits_resp,
  input         mmio_axi4_0_ar_ready,
                mmio_axi4_0_r_valid,
  input  [3:0]  mmio_axi4_0_r_bits_id,
  input  [63:0] mmio_axi4_0_r_bits_data,
  input  [1:0]  mmio_axi4_0_r_bits_resp,
  input         mmio_axi4_0_r_bits_last,
                l2_frontend_bus_axi4_0_aw_valid,
  input  [7:0]  l2_frontend_bus_axi4_0_aw_bits_id,
  input  [31:0] l2_frontend_bus_axi4_0_aw_bits_addr,
  input  [7:0]  l2_frontend_bus_axi4_0_aw_bits_len,
  input  [2:0]  l2_frontend_bus_axi4_0_aw_bits_size,
  input  [1:0]  l2_frontend_bus_axi4_0_aw_bits_burst,
  input         l2_frontend_bus_axi4_0_aw_bits_lock,
  input  [3:0]  l2_frontend_bus_axi4_0_aw_bits_cache,
  input  [2:0]  l2_frontend_bus_axi4_0_aw_bits_prot,
  input  [3:0]  l2_frontend_bus_axi4_0_aw_bits_qos,
  input         l2_frontend_bus_axi4_0_w_valid,
  input  [63:0] l2_frontend_bus_axi4_0_w_bits_data,
  input  [7:0]  l2_frontend_bus_axi4_0_w_bits_strb,
  input         l2_frontend_bus_axi4_0_w_bits_last,
                l2_frontend_bus_axi4_0_b_ready,
                l2_frontend_bus_axi4_0_ar_valid,
  input  [7:0]  l2_frontend_bus_axi4_0_ar_bits_id,
  input  [31:0] l2_frontend_bus_axi4_0_ar_bits_addr,
  input  [7:0]  l2_frontend_bus_axi4_0_ar_bits_len,
  input  [2:0]  l2_frontend_bus_axi4_0_ar_bits_size,
  input  [1:0]  l2_frontend_bus_axi4_0_ar_bits_burst,
  input         l2_frontend_bus_axi4_0_ar_bits_lock,
  input  [3:0]  l2_frontend_bus_axi4_0_ar_bits_cache,
  input  [2:0]  l2_frontend_bus_axi4_0_ar_bits_prot,
  input  [3:0]  l2_frontend_bus_axi4_0_ar_bits_qos,
  input         l2_frontend_bus_axi4_0_r_ready,
                eth_0_rx_clk,
  input  [7:0]  eth_0_rxd,
  input         eth_0_rx_dv,
                eth_0_rx_er,
                eth_0_status,
  input  [4:0]  eth_0_phy_ad,
  input  [31:0] eth_0_phy_id,
  input         eth_clk_0_clock,
                ttc_0_ext_clock_0,
                ttc_0_ext_clock_1,
                ttc_0_ext_clock_2,
                qspi_0_dq_0_i,
                qspi_0_dq_1_i,
                qspi_0_dq_2_i,
                qspi_0_dq_3_i,
                uart_0_rxd,
  input  [1:0]  interrupts,
  output        debug_clockeddmi_dmi_req_ready,
                debug_clockeddmi_dmi_resp_valid,
  output [31:0] debug_clockeddmi_dmi_resp_bits_data,
  output [1:0]  debug_clockeddmi_dmi_resp_bits_resp,
  output        debug_ndreset,
                debug_dmactive,
                mem_axi4_0_aw_valid,
  output [3:0]  mem_axi4_0_aw_bits_id,
  output [31:0] mem_axi4_0_aw_bits_addr,
  output [7:0]  mem_axi4_0_aw_bits_len,
  output [2:0]  mem_axi4_0_aw_bits_size,
  output [1:0]  mem_axi4_0_aw_bits_burst,
  output        mem_axi4_0_aw_bits_lock,
  output [3:0]  mem_axi4_0_aw_bits_cache,
  output [2:0]  mem_axi4_0_aw_bits_prot,
  output [3:0]  mem_axi4_0_aw_bits_qos,
  output        mem_axi4_0_w_valid,
  output [63:0] mem_axi4_0_w_bits_data,
  output [7:0]  mem_axi4_0_w_bits_strb,
  output        mem_axi4_0_w_bits_last,
                mem_axi4_0_b_ready,
                mem_axi4_0_ar_valid,
  output [3:0]  mem_axi4_0_ar_bits_id,
  output [31:0] mem_axi4_0_ar_bits_addr,
  output [7:0]  mem_axi4_0_ar_bits_len,
  output [2:0]  mem_axi4_0_ar_bits_size,
  output [1:0]  mem_axi4_0_ar_bits_burst,
  output        mem_axi4_0_ar_bits_lock,
  output [3:0]  mem_axi4_0_ar_bits_cache,
  output [2:0]  mem_axi4_0_ar_bits_prot,
  output [3:0]  mem_axi4_0_ar_bits_qos,
  output        mem_axi4_0_r_ready,
                mmio_axi4_0_aw_valid,
  output [3:0]  mmio_axi4_0_aw_bits_id,
  output [30:0] mmio_axi4_0_aw_bits_addr,
  output [7:0]  mmio_axi4_0_aw_bits_len,
  output [2:0]  mmio_axi4_0_aw_bits_size,
  output [1:0]  mmio_axi4_0_aw_bits_burst,
  output        mmio_axi4_0_aw_bits_lock,
  output [3:0]  mmio_axi4_0_aw_bits_cache,
  output [2:0]  mmio_axi4_0_aw_bits_prot,
  output [3:0]  mmio_axi4_0_aw_bits_qos,
  output        mmio_axi4_0_w_valid,
  output [63:0] mmio_axi4_0_w_bits_data,
  output [7:0]  mmio_axi4_0_w_bits_strb,
  output        mmio_axi4_0_w_bits_last,
                mmio_axi4_0_b_ready,
                mmio_axi4_0_ar_valid,
  output [3:0]  mmio_axi4_0_ar_bits_id,
  output [30:0] mmio_axi4_0_ar_bits_addr,
  output [7:0]  mmio_axi4_0_ar_bits_len,
  output [2:0]  mmio_axi4_0_ar_bits_size,
  output [1:0]  mmio_axi4_0_ar_bits_burst,
  output        mmio_axi4_0_ar_bits_lock,
  output [3:0]  mmio_axi4_0_ar_bits_cache,
  output [2:0]  mmio_axi4_0_ar_bits_prot,
  output [3:0]  mmio_axi4_0_ar_bits_qos,
  output        mmio_axi4_0_r_ready,
                l2_frontend_bus_axi4_0_aw_ready,
                l2_frontend_bus_axi4_0_w_ready,
                l2_frontend_bus_axi4_0_b_valid,
  output [7:0]  l2_frontend_bus_axi4_0_b_bits_id,
  output [1:0]  l2_frontend_bus_axi4_0_b_bits_resp,
  output        l2_frontend_bus_axi4_0_ar_ready,
                l2_frontend_bus_axi4_0_r_valid,
  output [7:0]  l2_frontend_bus_axi4_0_r_bits_id,
  output [63:0] l2_frontend_bus_axi4_0_r_bits_data,
  output [1:0]  l2_frontend_bus_axi4_0_r_bits_resp,
  output        l2_frontend_bus_axi4_0_r_bits_last,
                eth_0_tx_clk,
  output [7:0]  eth_0_txd,
  output        eth_0_tx_en,
                eth_0_tx_er,
  output [2:0]  ttc_0_waveform,
                ttc_0_n_waveform_oe,
  output        qspi_0_sck,
                qspi_0_dq_0_o,
                qspi_0_dq_0_ie,
                qspi_0_dq_0_oe,
                qspi_0_dq_1_o,
                qspi_0_dq_1_ie,
                qspi_0_dq_1_oe,
                qspi_0_dq_2_o,
                qspi_0_dq_2_ie,
                qspi_0_dq_2_oe,
                qspi_0_dq_3_o,
                qspi_0_dq_3_ie,
                qspi_0_dq_3_oe,
                qspi_0_cs_0,
                uart_0_txd
);

  wire        _bootROMDomainWrapper_auto_bootrom_in_a_ready;
  wire        _bootROMDomainWrapper_auto_bootrom_in_d_valid;
  wire [1:0]  _bootROMDomainWrapper_auto_bootrom_in_d_bits_size;
  wire [9:0]  _bootROMDomainWrapper_auto_bootrom_in_d_bits_source;
  wire [63:0] _bootROMDomainWrapper_auto_bootrom_in_d_bits_data;
  wire        _intsource_3_auto_out_sync_0;
  wire        _intsource_3_auto_out_sync_1;
  wire        _intsink_7_auto_out_0;
  wire        _uartClockDomainWrapper_auto_uart_0_int_xing_out_sync_0;
  wire        _uartClockDomainWrapper_auto_uart_0_control_xing_in_a_ready;
  wire        _uartClockDomainWrapper_auto_uart_0_control_xing_in_d_valid;
  wire [2:0]  _uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_opcode;
  wire [1:0]  _uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_size;
  wire [9:0]  _uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_source;
  wire [63:0] _uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_data;
  wire        _intsink_6_auto_out_0;
  wire        _qspiClockDomainWrapper_auto_qspi_0_int_xing_out_sync_0;
  wire        _qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_a_ready;
  wire        _qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_valid;
  wire        _qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_size;
  wire [12:0] _qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_source;
  wire [7:0]  _qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_data;
  wire        _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_a_ready;
  wire        _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_valid;
  wire [2:0]  _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_opcode;
  wire [1:0]  _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_size;
  wire [9:0]  _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_source;
  wire [63:0] _qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_data;
  wire        _intsink_5_auto_out_0;
  wire        _intsink_5_auto_out_1;
  wire        _intsink_5_auto_out_2;
  wire        _ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_0;
  wire        _ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_1;
  wire        _ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_2;
  wire        _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_a_ready;
  wire        _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_valid;
  wire [2:0]  _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_opcode;
  wire [1:0]  _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_param;
  wire [1:0]  _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_size;
  wire [9:0]  _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_source;
  wire        _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_sink;
  wire        _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_denied;
  wire [63:0] _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_data;
  wire        _ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_corrupt;
  wire        _ethClk_auto_clock_out_clock;
  wire        _intsink_4_auto_out_0;
  wire        _ethClockDomainWrapper_auto_eth_0_int_xing_out_sync_0;
  wire        _ethClockDomainWrapper_auto_eth_0_control_xing_in_a_ready;
  wire        _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_valid;
  wire [2:0]  _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_opcode;
  wire [1:0]  _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_param;
  wire [1:0]  _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_size;
  wire [9:0]  _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_source;
  wire        _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_sink;
  wire        _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_denied;
  wire [63:0] _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_data;
  wire        _ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_corrupt;
  wire        _ethClockDomainWrapper_auto_eth_0_dma_out_a_valid;
  wire [2:0]  _ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_opcode;
  wire [3:0]  _ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_size;
  wire [1:0]  _ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_source;
  wire [31:0] _ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_address;
  wire [63:0] _ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_data;
  wire        _ethClockDomainWrapper_auto_eth_0_dma_out_d_ready;
  wire        _intsink_3_auto_out_0;
  wire        _intsink_2_auto_out_0;
  wire        _intsink_1_auto_out_0;
  wire        _intsource_2_auto_out_sync_0;
  wire        _intsource_1_auto_out_sync_0;
  wire        _intsource_auto_out_sync_0;
  wire        _intsource_auto_out_sync_1;
  wire        _tlDM_auto_dmInner_dmInner_tl_in_a_ready;
  wire        _tlDM_auto_dmInner_dmInner_tl_in_d_valid;
  wire [2:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode;
  wire [1:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_size;
  wire [9:0]  _tlDM_auto_dmInner_dmInner_tl_in_d_bits_source;
  wire [63:0] _tlDM_auto_dmInner_dmInner_tl_in_d_bits_data;
  wire        _tlDM_auto_dmOuter_intsource_out_sync_0;
  wire        _tileHartIdNexusNode_auto_out;
  wire        _clint_auto_int_out_0;
  wire        _clint_auto_int_out_1;
  wire        _clint_auto_in_a_ready;
  wire        _clint_auto_in_d_valid;
  wire [2:0]  _clint_auto_in_d_bits_opcode;
  wire [1:0]  _clint_auto_in_d_bits_size;
  wire [9:0]  _clint_auto_in_d_bits_source;
  wire [63:0] _clint_auto_in_d_bits_data;
  wire        _plicDomainWrapper_auto_plic_int_out_1_0;
  wire        _plicDomainWrapper_auto_plic_int_out_0_0;
  wire        _plicDomainWrapper_auto_plic_in_a_ready;
  wire        _plicDomainWrapper_auto_plic_in_d_valid;
  wire [2:0]  _plicDomainWrapper_auto_plic_in_d_bits_opcode;
  wire [1:0]  _plicDomainWrapper_auto_plic_in_d_bits_size;
  wire [9:0]  _plicDomainWrapper_auto_plic_in_d_bits_source;
  wire [63:0] _plicDomainWrapper_auto_plic_in_d_bits_data;
  wire        _tile_prci_domain_auto_int_out_clock_xing_out_2_sync_0;
  wire        _tile_prci_domain_auto_int_out_clock_xing_out_1_sync_0;
  wire        _tile_prci_domain_auto_int_out_clock_xing_out_0_sync_0;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_a_valid;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param;
  wire [3:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source;
  wire [31:0] _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address;
  wire [7:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask;
  wire [63:0] _tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_b_ready;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_c_valid;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode;
  wire [2:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param;
  wire [3:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source;
  wire [31:0] _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address;
  wire [63:0] _tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_d_ready;
  wire        _tile_prci_domain_auto_tl_master_clock_xing_out_e_valid;
  wire [1:0]  _tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink;
  wire
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid;
  wire [2:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode;
  wire [2:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size;
  wire [7:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source;
  wire [31:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data;
  wire
    _subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_a_ready;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_b_valid;
  wire [1:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_param;
  wire [31:0] _subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_address;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_c_ready;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_d_valid;
  wire [2:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_opcode;
  wire [1:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_param;
  wire [2:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_size;
  wire [5:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_source;
  wire [1:0]  _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_sink;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_denied;
  wire [63:0] _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_data;
  wire        _subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_corrupt;
  wire
    _subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock;
  wire
    _subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset;
  wire        _subsystem_mbus_auto_bus_xing_in_a_ready;
  wire        _subsystem_mbus_auto_bus_xing_in_d_valid;
  wire [2:0]  _subsystem_mbus_auto_bus_xing_in_d_bits_opcode;
  wire [2:0]  _subsystem_mbus_auto_bus_xing_in_d_bits_size;
  wire [7:0]  _subsystem_mbus_auto_bus_xing_in_d_bits_source;
  wire        _subsystem_mbus_auto_bus_xing_in_d_bits_denied;
  wire [63:0] _subsystem_mbus_auto_bus_xing_in_d_bits_data;
  wire        _subsystem_mbus_auto_bus_xing_in_d_bits_corrupt;
  wire        _subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_valid;
  wire [1:0]  _subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_size;
  wire [9:0]  _subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_source;
  wire [16:0] _subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_address;
  wire        _subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_d_ready;
  wire        _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_valid;
  wire [2:0]  _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_opcode;
  wire [1:0]  _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_size;
  wire [9:0]  _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_source;
  wire [11:0] _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_address;
  wire [7:0]  _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_mask;
  wire [63:0] _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_data;
  wire        _subsystem_cbus_auto_coupler_to_debug_fragmenter_out_d_ready;
  wire        _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_valid;
  wire [2:0]  _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_opcode;
  wire [1:0]  _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_size;
  wire [9:0]  _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_source;
  wire [25:0] _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_address;
  wire [7:0]  _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_mask;
  wire [63:0] _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_data;
  wire        _subsystem_cbus_auto_coupler_to_clint_fragmenter_out_d_ready;
  wire        _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_valid;
  wire [2:0]  _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_opcode;
  wire [1:0]  _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_size;
  wire [9:0]  _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_source;
  wire [27:0] _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_address;
  wire [7:0]  _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_mask;
  wire [63:0] _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_data;
  wire        _subsystem_cbus_auto_coupler_to_plic_fragmenter_out_d_ready;
  wire
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid;
  wire [2:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode;
  wire [2:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param;
  wire [2:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size;
  wire [5:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source;
  wire [29:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data;
  wire
    _subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready;
  wire        _subsystem_cbus_auto_fixedClockNode_out_0_clock;
  wire        _subsystem_cbus_auto_fixedClockNode_out_0_reset;
  wire
    _subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock;
  wire
    _subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset;
  wire        _subsystem_cbus_auto_bus_xing_in_a_ready;
  wire        _subsystem_cbus_auto_bus_xing_in_d_valid;
  wire [2:0]  _subsystem_cbus_auto_bus_xing_in_d_bits_opcode;
  wire [1:0]  _subsystem_cbus_auto_bus_xing_in_d_bits_param;
  wire [3:0]  _subsystem_cbus_auto_bus_xing_in_d_bits_size;
  wire [5:0]  _subsystem_cbus_auto_bus_xing_in_d_bits_source;
  wire        _subsystem_cbus_auto_bus_xing_in_d_bits_sink;
  wire        _subsystem_cbus_auto_bus_xing_in_d_bits_denied;
  wire [63:0] _subsystem_cbus_auto_bus_xing_in_d_bits_data;
  wire        _subsystem_cbus_auto_bus_xing_in_d_bits_corrupt;
  wire        _subsystem_cbus_clock;
  wire        _subsystem_cbus_reset;
  wire        _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_a_ready;
  wire        _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_valid;
  wire [2:0]  _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode;
  wire [3:0]  _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_size;
  wire [1:0]  _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_source;
  wire [63:0] _subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_data;
  wire        _subsystem_fbus_auto_bus_xing_out_a_valid;
  wire [2:0]  _subsystem_fbus_auto_bus_xing_out_a_bits_opcode;
  wire [2:0]  _subsystem_fbus_auto_bus_xing_out_a_bits_param;
  wire [3:0]  _subsystem_fbus_auto_bus_xing_out_a_bits_size;
  wire [4:0]  _subsystem_fbus_auto_bus_xing_out_a_bits_source;
  wire [31:0] _subsystem_fbus_auto_bus_xing_out_a_bits_address;
  wire [7:0]  _subsystem_fbus_auto_bus_xing_out_a_bits_mask;
  wire [63:0] _subsystem_fbus_auto_bus_xing_out_a_bits_data;
  wire        _subsystem_fbus_auto_bus_xing_out_d_ready;
  wire
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_valid;
  wire [2:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode;
  wire [1:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size;
  wire [9:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source;
  wire [28:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data;
  wire
    _subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_d_ready;
  wire        _subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid;
  wire
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size;
  wire [12:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source;
  wire [29:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address;
  wire        _subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready;
  wire
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid;
  wire [2:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode;
  wire [1:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size;
  wire [9:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source;
  wire [28:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data;
  wire
    _subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready;
  wire        _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid;
  wire [2:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode;
  wire [1:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size;
  wire [9:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source;
  wire [28:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data;
  wire        _subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready;
  wire        _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_valid;
  wire [2:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode;
  wire [1:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size;
  wire [9:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source;
  wire [28:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data;
  wire        _subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_d_ready;
  wire        _subsystem_pbus_auto_fixedClockNode_out_3_clock;
  wire        _subsystem_pbus_auto_fixedClockNode_out_3_reset;
  wire        _subsystem_pbus_auto_fixedClockNode_out_2_clock;
  wire        _subsystem_pbus_auto_fixedClockNode_out_2_reset;
  wire        _subsystem_pbus_auto_fixedClockNode_out_1_clock;
  wire        _subsystem_pbus_auto_fixedClockNode_out_1_reset;
  wire        _subsystem_pbus_auto_fixedClockNode_out_0_clock;
  wire        _subsystem_pbus_auto_fixedClockNode_out_0_reset;
  wire        _subsystem_pbus_auto_bus_xing_in_a_ready;
  wire        _subsystem_pbus_auto_bus_xing_in_d_valid;
  wire [2:0]  _subsystem_pbus_auto_bus_xing_in_d_bits_opcode;
  wire [1:0]  _subsystem_pbus_auto_bus_xing_in_d_bits_param;
  wire [2:0]  _subsystem_pbus_auto_bus_xing_in_d_bits_size;
  wire [5:0]  _subsystem_pbus_auto_bus_xing_in_d_bits_source;
  wire        _subsystem_pbus_auto_bus_xing_in_d_bits_sink;
  wire        _subsystem_pbus_auto_bus_xing_in_d_bits_denied;
  wire [63:0] _subsystem_pbus_auto_bus_xing_in_d_bits_data;
  wire        _subsystem_pbus_auto_bus_xing_in_d_bits_corrupt;
  wire        _subsystem_pbus_clock;
  wire        _subsystem_pbus_reset;
  wire        _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_a_ready;
  wire        _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_valid;
  wire [1:0]  _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param;
  wire [3:0]  _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size;
  wire [1:0]
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source;
  wire [31:0]
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address;
  wire        _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_c_ready;
  wire        _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_valid;
  wire [2:0]
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode;
  wire [1:0]  _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param;
  wire [3:0]  _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size;
  wire [1:0]
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source;
  wire [1:0]  _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink;
  wire
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied;
  wire [63:0] _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data;
  wire
    _subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt;
  wire        _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size;
  wire [5:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source;
  wire [31:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address;
  wire [7:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask;
  wire [63:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data;
  wire        _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready;
  wire        _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size;
  wire [5:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source;
  wire [31:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address;
  wire [63:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data;
  wire        _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready;
  wire        _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid;
  wire [1:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink;
  wire
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready;
  wire
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid;
  wire [2:0]
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode;
  wire [3:0]
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size;
  wire [4:0]
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source;
  wire
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied;
  wire [63:0]
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data;
  wire
    _subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt;
  wire
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode;
  wire [2:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param;
  wire [3:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size;
  wire [5:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source;
  wire [29:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address;
  wire [7:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask;
  wire [63:0]
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data;
  wire
    _subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready;
  wire        _subsystem_sbus_auto_fixedClockNode_out_1_clock;
  wire        _subsystem_sbus_auto_fixedClockNode_out_1_reset;
  wire        _subsystem_sbus_auto_fixedClockNode_out_0_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock;
  wire
    _subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_reset;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_clock;
  wire        _dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_reset;
  wire        _ibus_intsink_auto_out_0;
  wire        _ibus_intsink_auto_out_1;
  wire        _ibus_int_bus_auto_int_out_0;
  wire        _ibus_int_bus_auto_int_out_1;
  wire        _ibus_int_bus_auto_int_out_2;
  wire        _ibus_int_bus_auto_int_out_3;
  wire        _ibus_int_bus_auto_int_out_4;
  wire        _ibus_int_bus_auto_int_out_5;
  wire        _ibus_int_bus_auto_int_out_6;
  wire        _ibus_int_bus_auto_int_out_7;
  reg  [6:0]  int_rtc_tick_c_value;
  wire        int_rtc_tick = int_rtc_tick_c_value == 7'h63;
  always @(posedge _subsystem_pbus_clock) begin
    if (_subsystem_pbus_reset)
      int_rtc_tick_c_value <= 7'h0;
    else if (int_rtc_tick)
      int_rtc_tick_c_value <= 7'h0;
    else
      int_rtc_tick_c_value <= int_rtc_tick_c_value + 7'h1;
  end // always @(posedge)
  IntXbar ibus_int_bus (
    .auto_int_in_4_0 (_ibus_intsink_auto_out_0),
    .auto_int_in_4_1 (_ibus_intsink_auto_out_1),
    .auto_int_in_3_0 (_intsink_7_auto_out_0),
    .auto_int_in_2_0 (_intsink_6_auto_out_0),
    .auto_int_in_1_0 (_intsink_5_auto_out_0),
    .auto_int_in_1_1 (_intsink_5_auto_out_1),
    .auto_int_in_1_2 (_intsink_5_auto_out_2),
    .auto_int_in_0_0 (_intsink_4_auto_out_0),
    .auto_int_out_0  (_ibus_int_bus_auto_int_out_0),
    .auto_int_out_1  (_ibus_int_bus_auto_int_out_1),
    .auto_int_out_2  (_ibus_int_bus_auto_int_out_2),
    .auto_int_out_3  (_ibus_int_bus_auto_int_out_3),
    .auto_int_out_4  (_ibus_int_bus_auto_int_out_4),
    .auto_int_out_5  (_ibus_int_bus_auto_int_out_5),
    .auto_int_out_6  (_ibus_int_bus_auto_int_out_6),
    .auto_int_out_7  (_ibus_int_bus_auto_int_out_7)
  );
  IntSyncAsyncCrossingSink ibus_intsink (
    .clock          (_subsystem_sbus_auto_fixedClockNode_out_0_clock),
    .auto_in_sync_0 (_intsource_3_auto_out_sync_0),
    .auto_in_sync_1 (_intsource_3_auto_out_sync_1),
    .auto_out_0     (_ibus_intsink_auto_out_0),
    .auto_out_1     (_ibus_intsink_auto_out_1)
  );
  SimpleClockGroupSource dummyClockGroupSourceNode (
    .clock                                  (clock),
    .reset                                  (reset),
    .auto_out_member_subsystem_sbus_6_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_clock),
    .auto_out_member_subsystem_sbus_6_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_reset),
    .auto_out_member_subsystem_sbus_5_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_clock),
    .auto_out_member_subsystem_sbus_5_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_reset),
    .auto_out_member_subsystem_sbus_3_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_clock),
    .auto_out_member_subsystem_sbus_3_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_reset),
    .auto_out_member_subsystem_sbus_2_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_clock),
    .auto_out_member_subsystem_sbus_2_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_reset),
    .auto_out_member_subsystem_sbus_1_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_clock),
    .auto_out_member_subsystem_sbus_1_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_reset),
    .auto_out_member_subsystem_sbus_0_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_clock),
    .auto_out_member_subsystem_sbus_0_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_reset)
  );
  SystemBus subsystem_sbus (
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready
      (mmio_axi4_0_aw_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready
      (mmio_axi4_0_w_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid
      (mmio_axi4_0_b_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id
      (mmio_axi4_0_b_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp
      (mmio_axi4_0_b_bits_resp),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready
      (mmio_axi4_0_ar_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid
      (mmio_axi4_0_r_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id
      (mmio_axi4_0_r_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data
      (mmio_axi4_0_r_bits_data),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp
      (mmio_axi4_0_r_bits_resp),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last
      (mmio_axi4_0_r_bits_last),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_valid),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_b_ready),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_valid),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_d_ready),
    .auto_coupler_from_tile_tl_master_clock_xing_in_e_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_valid),
    .auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_a_ready),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_valid),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_param),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_address),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_c_ready),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_valid),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_param),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_size),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_source),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_sink),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_denied),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_data),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_corrupt),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_valid
      (_subsystem_fbus_auto_bus_xing_out_a_valid),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_opcode
      (_subsystem_fbus_auto_bus_xing_out_a_bits_opcode),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_param
      (_subsystem_fbus_auto_bus_xing_out_a_bits_param),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_size
      (_subsystem_fbus_auto_bus_xing_out_a_bits_size),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_source
      (_subsystem_fbus_auto_bus_xing_out_a_bits_source),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_address
      (_subsystem_fbus_auto_bus_xing_out_a_bits_address),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_mask
      (_subsystem_fbus_auto_bus_xing_out_a_bits_mask),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_bits_data
      (_subsystem_fbus_auto_bus_xing_out_a_bits_data),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_ready
      (_subsystem_fbus_auto_bus_xing_out_d_ready),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready
      (_subsystem_cbus_auto_bus_xing_in_a_ready),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid
      (_subsystem_cbus_auto_bus_xing_in_d_valid),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode
      (_subsystem_cbus_auto_bus_xing_in_d_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param
      (_subsystem_cbus_auto_bus_xing_in_d_bits_param),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size
      (_subsystem_cbus_auto_bus_xing_in_d_bits_size),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source
      (_subsystem_cbus_auto_bus_xing_in_d_bits_source),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink
      (_subsystem_cbus_auto_bus_xing_in_d_bits_sink),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied
      (_subsystem_cbus_auto_bus_xing_in_d_bits_denied),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data
      (_subsystem_cbus_auto_bus_xing_in_d_bits_data),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt
      (_subsystem_cbus_auto_bus_xing_in_d_bits_corrupt),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_6_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_6_reset),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_5_reset),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_3_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_3_reset),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_2_reset),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_1_reset),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_clock),
    .auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset
      (_dummyClockGroupSourceNode_auto_out_member_subsystem_sbus_0_reset),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid
      (mmio_axi4_0_aw_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id
      (mmio_axi4_0_aw_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr
      (mmio_axi4_0_aw_bits_addr),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len
      (mmio_axi4_0_aw_bits_len),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size
      (mmio_axi4_0_aw_bits_size),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst
      (mmio_axi4_0_aw_bits_burst),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock
      (mmio_axi4_0_aw_bits_lock),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache
      (mmio_axi4_0_aw_bits_cache),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot
      (mmio_axi4_0_aw_bits_prot),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos
      (mmio_axi4_0_aw_bits_qos),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid
      (mmio_axi4_0_w_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data
      (mmio_axi4_0_w_bits_data),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb
      (mmio_axi4_0_w_bits_strb),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last
      (mmio_axi4_0_w_bits_last),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready
      (mmio_axi4_0_b_ready),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid
      (mmio_axi4_0_ar_valid),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id
      (mmio_axi4_0_ar_bits_id),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr
      (mmio_axi4_0_ar_bits_addr),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len
      (mmio_axi4_0_ar_bits_len),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size
      (mmio_axi4_0_ar_bits_size),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst
      (mmio_axi4_0_ar_bits_burst),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock
      (mmio_axi4_0_ar_bits_lock),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache
      (mmio_axi4_0_ar_bits_cache),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot
      (mmio_axi4_0_ar_bits_prot),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos
      (mmio_axi4_0_ar_bits_qos),
    .auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready
      (mmio_axi4_0_r_ready),
    .auto_coupler_from_tile_tl_master_clock_xing_in_a_ready
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_a_ready),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_valid
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_valid),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source),
    .auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address),
    .auto_coupler_from_tile_tl_master_clock_xing_in_c_ready
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_c_ready),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_valid
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_valid),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data),
    .auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid),
    .auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data),
    .auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data),
    .auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready),
    .auto_fixedClockNode_out_1_clock
      (_subsystem_sbus_auto_fixedClockNode_out_1_clock),
    .auto_fixedClockNode_out_1_reset
      (_subsystem_sbus_auto_fixedClockNode_out_1_reset),
    .auto_fixedClockNode_out_0_clock
      (_subsystem_sbus_auto_fixedClockNode_out_0_clock),
    .auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock),
    .auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset),
    .auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock),
    .auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset),
    .auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock),
    .auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset),
    .auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock),
    .auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset),
    .auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock),
    .auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset)
  );
  PeripheryBus subsystem_pbus (
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_ready
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_a_ready),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_valid
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_valid),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_opcode
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_opcode),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_size
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_size),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_source
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_source),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_bits_data
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_data),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_a_ready
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_a_ready),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_d_valid
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_valid),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_size
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_size),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_source
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_source),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_d_bits_data
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_data),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_ready
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_a_ready),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_valid
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_valid),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_opcode
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_opcode),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_size
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_size),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_source
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_source),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_bits_data
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_data),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_ready
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_a_ready),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_valid
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_valid),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_opcode
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_opcode),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_param
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_param),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_size
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_size),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_source
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_source),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_sink
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_sink),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_denied
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_denied),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_data
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_data),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_bits_corrupt
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_corrupt),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_ready
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_a_ready),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_valid
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_valid),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_opcode
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_opcode),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_param
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_param),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_size
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_size),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_source
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_source),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_sink
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_sink),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_denied
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_denied),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_data
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_data),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_bits_corrupt
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_corrupt),
    .auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_clock
      (_subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock),
    .auto_subsystem_pbus_clock_groups_in_member_subsystem_pbus_0_reset
      (_subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset),
    .auto_bus_xing_in_a_valid
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid),
    .auto_bus_xing_in_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_in_a_bits_param
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param),
    .auto_bus_xing_in_a_bits_size
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size),
    .auto_bus_xing_in_a_bits_source
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source),
    .auto_bus_xing_in_a_bits_address
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address),
    .auto_bus_xing_in_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask),
    .auto_bus_xing_in_a_bits_data
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data),
    .auto_bus_xing_in_d_ready
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_valid),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask),
    .auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data),
    .auto_coupler_to_device_named_uart_0_control_xing_out_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_d_ready),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address),
    .auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data),
    .auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data),
    .auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_valid),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask),
    .auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data),
    .auto_coupler_to_device_named_eth_0_control_xing_out_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_d_ready),
    .auto_fixedClockNode_out_3_clock
      (_subsystem_pbus_auto_fixedClockNode_out_3_clock),
    .auto_fixedClockNode_out_3_reset
      (_subsystem_pbus_auto_fixedClockNode_out_3_reset),
    .auto_fixedClockNode_out_2_clock
      (_subsystem_pbus_auto_fixedClockNode_out_2_clock),
    .auto_fixedClockNode_out_2_reset
      (_subsystem_pbus_auto_fixedClockNode_out_2_reset),
    .auto_fixedClockNode_out_1_clock
      (_subsystem_pbus_auto_fixedClockNode_out_1_clock),
    .auto_fixedClockNode_out_1_reset
      (_subsystem_pbus_auto_fixedClockNode_out_1_reset),
    .auto_fixedClockNode_out_0_clock
      (_subsystem_pbus_auto_fixedClockNode_out_0_clock),
    .auto_fixedClockNode_out_0_reset
      (_subsystem_pbus_auto_fixedClockNode_out_0_reset),
    .auto_bus_xing_in_a_ready
      (_subsystem_pbus_auto_bus_xing_in_a_ready),
    .auto_bus_xing_in_d_valid
      (_subsystem_pbus_auto_bus_xing_in_d_valid),
    .auto_bus_xing_in_d_bits_opcode
      (_subsystem_pbus_auto_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_in_d_bits_param
      (_subsystem_pbus_auto_bus_xing_in_d_bits_param),
    .auto_bus_xing_in_d_bits_size
      (_subsystem_pbus_auto_bus_xing_in_d_bits_size),
    .auto_bus_xing_in_d_bits_source
      (_subsystem_pbus_auto_bus_xing_in_d_bits_source),
    .auto_bus_xing_in_d_bits_sink
      (_subsystem_pbus_auto_bus_xing_in_d_bits_sink),
    .auto_bus_xing_in_d_bits_denied
      (_subsystem_pbus_auto_bus_xing_in_d_bits_denied),
    .auto_bus_xing_in_d_bits_data
      (_subsystem_pbus_auto_bus_xing_in_d_bits_data),
    .auto_bus_xing_in_d_bits_corrupt
      (_subsystem_pbus_auto_bus_xing_in_d_bits_corrupt),
    .clock
      (_subsystem_pbus_clock),
    .reset
      (_subsystem_pbus_reset)
  );
  FrontBus subsystem_fbus (
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_valid
      (l2_frontend_bus_axi4_0_aw_valid),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_id
      (l2_frontend_bus_axi4_0_aw_bits_id),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_addr
      (l2_frontend_bus_axi4_0_aw_bits_addr),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_len
      (l2_frontend_bus_axi4_0_aw_bits_len),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_size
      (l2_frontend_bus_axi4_0_aw_bits_size),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_bits_burst
      (l2_frontend_bus_axi4_0_aw_bits_burst),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_valid
      (l2_frontend_bus_axi4_0_w_valid),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_data
      (l2_frontend_bus_axi4_0_w_bits_data),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_strb
      (l2_frontend_bus_axi4_0_w_bits_strb),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_bits_last
      (l2_frontend_bus_axi4_0_w_bits_last),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_ready
      (l2_frontend_bus_axi4_0_b_ready),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_valid
      (l2_frontend_bus_axi4_0_ar_valid),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_id
      (l2_frontend_bus_axi4_0_ar_bits_id),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_addr
      (l2_frontend_bus_axi4_0_ar_bits_addr),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_len
      (l2_frontend_bus_axi4_0_ar_bits_len),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_size
      (l2_frontend_bus_axi4_0_ar_bits_size),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_bits_burst
      (l2_frontend_bus_axi4_0_ar_bits_burst),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_ready
      (l2_frontend_bus_axi4_0_r_ready),
    .auto_coupler_from_port_named_eth_0_widget_in_a_valid
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_valid),
    .auto_coupler_from_port_named_eth_0_widget_in_a_bits_opcode
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_opcode),
    .auto_coupler_from_port_named_eth_0_widget_in_a_bits_size
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_size),
    .auto_coupler_from_port_named_eth_0_widget_in_a_bits_source
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_source),
    .auto_coupler_from_port_named_eth_0_widget_in_a_bits_address
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_address),
    .auto_coupler_from_port_named_eth_0_widget_in_a_bits_data
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_data),
    .auto_coupler_from_port_named_eth_0_widget_in_d_ready
      (_ethClockDomainWrapper_auto_eth_0_dma_out_d_ready),
    .auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_clock),
    .auto_subsystem_fbus_clock_groups_in_member_subsystem_fbus_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_1_member_subsystem_fbus_0_reset),
    .auto_bus_xing_out_a_ready
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_a_ready),
    .auto_bus_xing_out_d_valid
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_valid),
    .auto_bus_xing_out_d_bits_opcode
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_out_d_bits_size
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_size),
    .auto_bus_xing_out_d_bits_source
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_source),
    .auto_bus_xing_out_d_bits_denied
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_denied),
    .auto_bus_xing_out_d_bits_data
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_data),
    .auto_bus_xing_out_d_bits_corrupt
      (_subsystem_sbus_auto_coupler_from_bus_named_subsystem_fbus_bus_xing_in_d_bits_corrupt),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_aw_ready
      (l2_frontend_bus_axi4_0_aw_ready),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_w_ready
      (l2_frontend_bus_axi4_0_w_ready),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_valid
      (l2_frontend_bus_axi4_0_b_valid),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_id
      (l2_frontend_bus_axi4_0_b_bits_id),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_b_bits_resp
      (l2_frontend_bus_axi4_0_b_bits_resp),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_ar_ready
      (l2_frontend_bus_axi4_0_ar_ready),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_valid
      (l2_frontend_bus_axi4_0_r_valid),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_id
      (l2_frontend_bus_axi4_0_r_bits_id),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_data
      (l2_frontend_bus_axi4_0_r_bits_data),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_resp
      (l2_frontend_bus_axi4_0_r_bits_resp),
    .auto_coupler_from_port_named_slave_port_axi4_axi4index_in_r_bits_last
      (l2_frontend_bus_axi4_0_r_bits_last),
    .auto_coupler_from_port_named_eth_0_widget_in_a_ready
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_a_ready),
    .auto_coupler_from_port_named_eth_0_widget_in_d_valid
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_valid),
    .auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode),
    .auto_coupler_from_port_named_eth_0_widget_in_d_bits_size
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_size),
    .auto_coupler_from_port_named_eth_0_widget_in_d_bits_source
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_source),
    .auto_coupler_from_port_named_eth_0_widget_in_d_bits_data
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_data),
    .auto_bus_xing_out_a_valid
      (_subsystem_fbus_auto_bus_xing_out_a_valid),
    .auto_bus_xing_out_a_bits_opcode
      (_subsystem_fbus_auto_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_out_a_bits_param
      (_subsystem_fbus_auto_bus_xing_out_a_bits_param),
    .auto_bus_xing_out_a_bits_size
      (_subsystem_fbus_auto_bus_xing_out_a_bits_size),
    .auto_bus_xing_out_a_bits_source
      (_subsystem_fbus_auto_bus_xing_out_a_bits_source),
    .auto_bus_xing_out_a_bits_address
      (_subsystem_fbus_auto_bus_xing_out_a_bits_address),
    .auto_bus_xing_out_a_bits_mask
      (_subsystem_fbus_auto_bus_xing_out_a_bits_mask),
    .auto_bus_xing_out_a_bits_data
      (_subsystem_fbus_auto_bus_xing_out_a_bits_data),
    .auto_bus_xing_out_d_ready
      (_subsystem_fbus_auto_bus_xing_out_d_ready)
  );
  PeripheryBus_1 subsystem_cbus (
    .auto_coupler_to_bootrom_fragmenter_out_a_ready
      (_bootROMDomainWrapper_auto_bootrom_in_a_ready),
    .auto_coupler_to_bootrom_fragmenter_out_d_valid
      (_bootROMDomainWrapper_auto_bootrom_in_d_valid),
    .auto_coupler_to_bootrom_fragmenter_out_d_bits_size
      (_bootROMDomainWrapper_auto_bootrom_in_d_bits_size),
    .auto_coupler_to_bootrom_fragmenter_out_d_bits_source
      (_bootROMDomainWrapper_auto_bootrom_in_d_bits_source),
    .auto_coupler_to_bootrom_fragmenter_out_d_bits_data
      (_bootROMDomainWrapper_auto_bootrom_in_d_bits_data),
    .auto_coupler_to_debug_fragmenter_out_a_ready
      (_tlDM_auto_dmInner_dmInner_tl_in_a_ready),
    .auto_coupler_to_debug_fragmenter_out_d_valid
      (_tlDM_auto_dmInner_dmInner_tl_in_d_valid),
    .auto_coupler_to_debug_fragmenter_out_d_bits_opcode
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_coupler_to_debug_fragmenter_out_d_bits_size
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_coupler_to_debug_fragmenter_out_d_bits_source
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_coupler_to_debug_fragmenter_out_d_bits_data
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_data),
    .auto_coupler_to_clint_fragmenter_out_a_ready
      (_clint_auto_in_a_ready),
    .auto_coupler_to_clint_fragmenter_out_d_valid
      (_clint_auto_in_d_valid),
    .auto_coupler_to_clint_fragmenter_out_d_bits_opcode
      (_clint_auto_in_d_bits_opcode),
    .auto_coupler_to_clint_fragmenter_out_d_bits_size
      (_clint_auto_in_d_bits_size),
    .auto_coupler_to_clint_fragmenter_out_d_bits_source
      (_clint_auto_in_d_bits_source),
    .auto_coupler_to_clint_fragmenter_out_d_bits_data
      (_clint_auto_in_d_bits_data),
    .auto_coupler_to_plic_fragmenter_out_a_ready
      (_plicDomainWrapper_auto_plic_in_a_ready),
    .auto_coupler_to_plic_fragmenter_out_d_valid
      (_plicDomainWrapper_auto_plic_in_d_valid),
    .auto_coupler_to_plic_fragmenter_out_d_bits_opcode
      (_plicDomainWrapper_auto_plic_in_d_bits_opcode),
    .auto_coupler_to_plic_fragmenter_out_d_bits_size
      (_plicDomainWrapper_auto_plic_in_d_bits_size),
    .auto_coupler_to_plic_fragmenter_out_d_bits_source
      (_plicDomainWrapper_auto_plic_in_d_bits_source),
    .auto_coupler_to_plic_fragmenter_out_d_bits_data
      (_plicDomainWrapper_auto_plic_in_d_bits_data),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_ready
      (_subsystem_pbus_auto_bus_xing_in_a_ready),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_valid
      (_subsystem_pbus_auto_bus_xing_in_d_valid),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_opcode
      (_subsystem_pbus_auto_bus_xing_in_d_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_param
      (_subsystem_pbus_auto_bus_xing_in_d_bits_param),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_size
      (_subsystem_pbus_auto_bus_xing_in_d_bits_size),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_source
      (_subsystem_pbus_auto_bus_xing_in_d_bits_source),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_sink
      (_subsystem_pbus_auto_bus_xing_in_d_bits_sink),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_denied
      (_subsystem_pbus_auto_bus_xing_in_d_bits_denied),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_data
      (_subsystem_pbus_auto_bus_xing_in_d_bits_data),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_bits_corrupt
      (_subsystem_pbus_auto_bus_xing_in_d_bits_corrupt),
    .auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock),
    .auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset),
    .auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock),
    .auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset),
    .auto_bus_xing_in_a_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid),
    .auto_bus_xing_in_a_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_in_a_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param),
    .auto_bus_xing_in_a_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size),
    .auto_bus_xing_in_a_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source),
    .auto_bus_xing_in_a_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address),
    .auto_bus_xing_in_a_bits_mask
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask),
    .auto_bus_xing_in_a_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data),
    .auto_bus_xing_in_d_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready),
    .auto_coupler_to_bootrom_fragmenter_out_a_valid
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_valid),
    .auto_coupler_to_bootrom_fragmenter_out_a_bits_size
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_size),
    .auto_coupler_to_bootrom_fragmenter_out_a_bits_source
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_source),
    .auto_coupler_to_bootrom_fragmenter_out_a_bits_address
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_address),
    .auto_coupler_to_bootrom_fragmenter_out_d_ready
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_d_ready),
    .auto_coupler_to_debug_fragmenter_out_a_valid
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_valid),
    .auto_coupler_to_debug_fragmenter_out_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_opcode),
    .auto_coupler_to_debug_fragmenter_out_a_bits_size
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_size),
    .auto_coupler_to_debug_fragmenter_out_a_bits_source
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_source),
    .auto_coupler_to_debug_fragmenter_out_a_bits_address
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_address),
    .auto_coupler_to_debug_fragmenter_out_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_mask),
    .auto_coupler_to_debug_fragmenter_out_a_bits_data
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_data),
    .auto_coupler_to_debug_fragmenter_out_d_ready
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_d_ready),
    .auto_coupler_to_clint_fragmenter_out_a_valid
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_valid),
    .auto_coupler_to_clint_fragmenter_out_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_opcode),
    .auto_coupler_to_clint_fragmenter_out_a_bits_size
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_size),
    .auto_coupler_to_clint_fragmenter_out_a_bits_source
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_source),
    .auto_coupler_to_clint_fragmenter_out_a_bits_address
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_address),
    .auto_coupler_to_clint_fragmenter_out_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_mask),
    .auto_coupler_to_clint_fragmenter_out_a_bits_data
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_data),
    .auto_coupler_to_clint_fragmenter_out_d_ready
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_d_ready),
    .auto_coupler_to_plic_fragmenter_out_a_valid
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_valid),
    .auto_coupler_to_plic_fragmenter_out_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_opcode),
    .auto_coupler_to_plic_fragmenter_out_a_bits_size
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_size),
    .auto_coupler_to_plic_fragmenter_out_a_bits_source
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_source),
    .auto_coupler_to_plic_fragmenter_out_a_bits_address
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_address),
    .auto_coupler_to_plic_fragmenter_out_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_mask),
    .auto_coupler_to_plic_fragmenter_out_a_bits_data
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_data),
    .auto_coupler_to_plic_fragmenter_out_d_ready
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_d_ready),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_valid),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_param),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_size),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_source),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_address),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_mask),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_a_bits_data),
    .auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready
      (_subsystem_cbus_auto_coupler_to_bus_named_subsystem_pbus_bus_xing_out_d_ready),
    .auto_fixedClockNode_out_0_clock
      (_subsystem_cbus_auto_fixedClockNode_out_0_clock),
    .auto_fixedClockNode_out_0_reset
      (_subsystem_cbus_auto_fixedClockNode_out_0_reset),
    .auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock
      (_subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_clock),
    .auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset
      (_subsystem_cbus_auto_subsystem_cbus_clock_groups_out_member_subsystem_pbus_0_reset),
    .auto_bus_xing_in_a_ready
      (_subsystem_cbus_auto_bus_xing_in_a_ready),
    .auto_bus_xing_in_d_valid
      (_subsystem_cbus_auto_bus_xing_in_d_valid),
    .auto_bus_xing_in_d_bits_opcode
      (_subsystem_cbus_auto_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_in_d_bits_param
      (_subsystem_cbus_auto_bus_xing_in_d_bits_param),
    .auto_bus_xing_in_d_bits_size
      (_subsystem_cbus_auto_bus_xing_in_d_bits_size),
    .auto_bus_xing_in_d_bits_source
      (_subsystem_cbus_auto_bus_xing_in_d_bits_source),
    .auto_bus_xing_in_d_bits_sink
      (_subsystem_cbus_auto_bus_xing_in_d_bits_sink),
    .auto_bus_xing_in_d_bits_denied
      (_subsystem_cbus_auto_bus_xing_in_d_bits_denied),
    .auto_bus_xing_in_d_bits_data
      (_subsystem_cbus_auto_bus_xing_in_d_bits_data),
    .auto_bus_xing_in_d_bits_corrupt
      (_subsystem_cbus_auto_bus_xing_in_d_bits_corrupt),
    .clock
      (_subsystem_cbus_clock),
    .reset
      (_subsystem_cbus_reset)
  );
  MemoryBus subsystem_mbus (
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready
      (mem_axi4_0_aw_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready
      (mem_axi4_0_w_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid
      (mem_axi4_0_b_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id
      (mem_axi4_0_b_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp
      (mem_axi4_0_b_bits_resp),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready
      (mem_axi4_0_ar_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid
      (mem_axi4_0_r_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id
      (mem_axi4_0_r_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data
      (mem_axi4_0_r_bits_data),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp
      (mem_axi4_0_r_bits_resp),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last
      (mem_axi4_0_r_bits_last),
    .auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock
      (_subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock),
    .auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset
      (_subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset),
    .auto_bus_xing_in_a_valid
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid),
    .auto_bus_xing_in_a_bits_opcode
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode),
    .auto_bus_xing_in_a_bits_size
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size),
    .auto_bus_xing_in_a_bits_source
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source),
    .auto_bus_xing_in_a_bits_address
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address),
    .auto_bus_xing_in_a_bits_mask
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask),
    .auto_bus_xing_in_a_bits_data
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data),
    .auto_bus_xing_in_d_ready
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid
      (mem_axi4_0_aw_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id
      (mem_axi4_0_aw_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr
      (mem_axi4_0_aw_bits_addr),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len
      (mem_axi4_0_aw_bits_len),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size
      (mem_axi4_0_aw_bits_size),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst
      (mem_axi4_0_aw_bits_burst),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock
      (mem_axi4_0_aw_bits_lock),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache
      (mem_axi4_0_aw_bits_cache),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot
      (mem_axi4_0_aw_bits_prot),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos
      (mem_axi4_0_aw_bits_qos),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid
      (mem_axi4_0_w_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data
      (mem_axi4_0_w_bits_data),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb
      (mem_axi4_0_w_bits_strb),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last
      (mem_axi4_0_w_bits_last),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready
      (mem_axi4_0_b_ready),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid
      (mem_axi4_0_ar_valid),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id
      (mem_axi4_0_ar_bits_id),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr
      (mem_axi4_0_ar_bits_addr),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len
      (mem_axi4_0_ar_bits_len),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size
      (mem_axi4_0_ar_bits_size),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst
      (mem_axi4_0_ar_bits_burst),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock
      (mem_axi4_0_ar_bits_lock),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache
      (mem_axi4_0_ar_bits_cache),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot
      (mem_axi4_0_ar_bits_prot),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos
      (mem_axi4_0_ar_bits_qos),
    .auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready
      (mem_axi4_0_r_ready),
    .auto_bus_xing_in_a_ready
      (_subsystem_mbus_auto_bus_xing_in_a_ready),
    .auto_bus_xing_in_d_valid
      (_subsystem_mbus_auto_bus_xing_in_d_valid),
    .auto_bus_xing_in_d_bits_opcode
      (_subsystem_mbus_auto_bus_xing_in_d_bits_opcode),
    .auto_bus_xing_in_d_bits_size
      (_subsystem_mbus_auto_bus_xing_in_d_bits_size),
    .auto_bus_xing_in_d_bits_source
      (_subsystem_mbus_auto_bus_xing_in_d_bits_source),
    .auto_bus_xing_in_d_bits_denied
      (_subsystem_mbus_auto_bus_xing_in_d_bits_denied),
    .auto_bus_xing_in_d_bits_data
      (_subsystem_mbus_auto_bus_xing_in_d_bits_data),
    .auto_bus_xing_in_d_bits_corrupt
      (_subsystem_mbus_auto_bus_xing_in_d_bits_corrupt)
  );
  CoherenceManagerWrapper subsystem_l2_wrapper (
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready
      (_subsystem_mbus_auto_bus_xing_in_a_ready),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid
      (_subsystem_mbus_auto_bus_xing_in_d_valid),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode
      (_subsystem_mbus_auto_bus_xing_in_d_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size
      (_subsystem_mbus_auto_bus_xing_in_d_bits_size),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source
      (_subsystem_mbus_auto_bus_xing_in_d_bits_source),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied
      (_subsystem_mbus_auto_bus_xing_in_d_bits_denied),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data
      (_subsystem_mbus_auto_bus_xing_in_d_bits_data),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt
      (_subsystem_mbus_auto_bus_xing_in_d_bits_corrupt),
    .auto_coherent_jbar_in_a_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid),
    .auto_coherent_jbar_in_a_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode),
    .auto_coherent_jbar_in_a_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param),
    .auto_coherent_jbar_in_a_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size),
    .auto_coherent_jbar_in_a_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source),
    .auto_coherent_jbar_in_a_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address),
    .auto_coherent_jbar_in_a_bits_mask
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask),
    .auto_coherent_jbar_in_a_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data),
    .auto_coherent_jbar_in_b_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready),
    .auto_coherent_jbar_in_c_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid),
    .auto_coherent_jbar_in_c_bits_opcode
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode),
    .auto_coherent_jbar_in_c_bits_param
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param),
    .auto_coherent_jbar_in_c_bits_size
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size),
    .auto_coherent_jbar_in_c_bits_source
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source),
    .auto_coherent_jbar_in_c_bits_address
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address),
    .auto_coherent_jbar_in_c_bits_data
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data),
    .auto_coherent_jbar_in_d_ready
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready),
    .auto_coherent_jbar_in_e_valid
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid),
    .auto_coherent_jbar_in_e_bits_sink
      (_subsystem_sbus_auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink),
    .auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock),
    .auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset),
    .auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock),
    .auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset
      (_subsystem_sbus_auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data),
    .auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready
      (_subsystem_l2_wrapper_auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready),
    .auto_coherent_jbar_in_a_ready
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_a_ready),
    .auto_coherent_jbar_in_b_valid
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_valid),
    .auto_coherent_jbar_in_b_bits_param
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_param),
    .auto_coherent_jbar_in_b_bits_address
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_b_bits_address),
    .auto_coherent_jbar_in_c_ready
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_c_ready),
    .auto_coherent_jbar_in_d_valid
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_valid),
    .auto_coherent_jbar_in_d_bits_opcode
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_opcode),
    .auto_coherent_jbar_in_d_bits_param
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_param),
    .auto_coherent_jbar_in_d_bits_size
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_size),
    .auto_coherent_jbar_in_d_bits_source
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_source),
    .auto_coherent_jbar_in_d_bits_sink
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_sink),
    .auto_coherent_jbar_in_d_bits_denied
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_denied),
    .auto_coherent_jbar_in_d_bits_data
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_data),
    .auto_coherent_jbar_in_d_bits_corrupt
      (_subsystem_l2_wrapper_auto_coherent_jbar_in_d_bits_corrupt),
    .auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock
      (_subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock),
    .auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset
      (_subsystem_l2_wrapper_auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset)
  );
  TilePRCIDomain tile_prci_domain (
    .auto_intsink_in_sync_0
      (_tlDM_auto_dmOuter_intsource_out_sync_0),
    .auto_tile_reset_domain_tile_hartid_in        (_tileHartIdNexusNode_auto_out),
    .auto_int_in_clock_xing_in_2_sync_0           (_intsource_2_auto_out_sync_0),
    .auto_int_in_clock_xing_in_1_sync_0           (_intsource_1_auto_out_sync_0),
    .auto_int_in_clock_xing_in_0_sync_0           (_intsource_auto_out_sync_0),
    .auto_int_in_clock_xing_in_0_sync_1           (_intsource_auto_out_sync_1),
    .auto_tl_master_clock_xing_out_a_ready
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_a_ready),
    .auto_tl_master_clock_xing_out_b_valid
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_valid),
    .auto_tl_master_clock_xing_out_b_bits_param
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param),
    .auto_tl_master_clock_xing_out_b_bits_size
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_size),
    .auto_tl_master_clock_xing_out_b_bits_source
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_source),
    .auto_tl_master_clock_xing_out_b_bits_address
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address),
    .auto_tl_master_clock_xing_out_c_ready
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_c_ready),
    .auto_tl_master_clock_xing_out_d_valid
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_valid),
    .auto_tl_master_clock_xing_out_d_bits_opcode
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode),
    .auto_tl_master_clock_xing_out_d_bits_param
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param),
    .auto_tl_master_clock_xing_out_d_bits_size
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size),
    .auto_tl_master_clock_xing_out_d_bits_source
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source),
    .auto_tl_master_clock_xing_out_d_bits_sink
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink),
    .auto_tl_master_clock_xing_out_d_bits_denied
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied),
    .auto_tl_master_clock_xing_out_d_bits_data
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data),
    .auto_tl_master_clock_xing_out_d_bits_corrupt
      (_subsystem_sbus_auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt),
    .auto_tap_clock_in_clock
      (_subsystem_sbus_auto_fixedClockNode_out_1_clock),
    .auto_tap_clock_in_reset
      (_subsystem_sbus_auto_fixedClockNode_out_1_reset),
    .auto_int_out_clock_xing_out_2_sync_0
      (_tile_prci_domain_auto_int_out_clock_xing_out_2_sync_0),
    .auto_int_out_clock_xing_out_1_sync_0
      (_tile_prci_domain_auto_int_out_clock_xing_out_1_sync_0),
    .auto_int_out_clock_xing_out_0_sync_0
      (_tile_prci_domain_auto_int_out_clock_xing_out_0_sync_0),
    .auto_tl_master_clock_xing_out_a_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_valid),
    .auto_tl_master_clock_xing_out_a_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_opcode),
    .auto_tl_master_clock_xing_out_a_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_param),
    .auto_tl_master_clock_xing_out_a_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_size),
    .auto_tl_master_clock_xing_out_a_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_source),
    .auto_tl_master_clock_xing_out_a_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_address),
    .auto_tl_master_clock_xing_out_a_bits_mask
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_mask),
    .auto_tl_master_clock_xing_out_a_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_a_bits_data),
    .auto_tl_master_clock_xing_out_b_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_b_ready),
    .auto_tl_master_clock_xing_out_c_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_valid),
    .auto_tl_master_clock_xing_out_c_bits_opcode
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_opcode),
    .auto_tl_master_clock_xing_out_c_bits_param
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_param),
    .auto_tl_master_clock_xing_out_c_bits_size
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_size),
    .auto_tl_master_clock_xing_out_c_bits_source
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_source),
    .auto_tl_master_clock_xing_out_c_bits_address
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_address),
    .auto_tl_master_clock_xing_out_c_bits_data
      (_tile_prci_domain_auto_tl_master_clock_xing_out_c_bits_data),
    .auto_tl_master_clock_xing_out_d_ready
      (_tile_prci_domain_auto_tl_master_clock_xing_out_d_ready),
    .auto_tl_master_clock_xing_out_e_valid
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_valid),
    .auto_tl_master_clock_xing_out_e_bits_sink
      (_tile_prci_domain_auto_tl_master_clock_xing_out_e_bits_sink)
  );
  ClockSinkDomain plicDomainWrapper (
    .auto_plic_int_in_0          (_ibus_int_bus_auto_int_out_0),
    .auto_plic_int_in_1          (_ibus_int_bus_auto_int_out_1),
    .auto_plic_int_in_2          (_ibus_int_bus_auto_int_out_2),
    .auto_plic_int_in_3          (_ibus_int_bus_auto_int_out_3),
    .auto_plic_int_in_4          (_ibus_int_bus_auto_int_out_4),
    .auto_plic_int_in_5          (_ibus_int_bus_auto_int_out_5),
    .auto_plic_int_in_6          (_ibus_int_bus_auto_int_out_6),
    .auto_plic_int_in_7          (_ibus_int_bus_auto_int_out_7),
    .auto_plic_in_a_valid
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_valid),
    .auto_plic_in_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_opcode),
    .auto_plic_in_a_bits_size
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_size),
    .auto_plic_in_a_bits_source
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_source),
    .auto_plic_in_a_bits_address
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_address),
    .auto_plic_in_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_mask),
    .auto_plic_in_a_bits_data
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_a_bits_data),
    .auto_plic_in_d_ready
      (_subsystem_cbus_auto_coupler_to_plic_fragmenter_out_d_ready),
    .auto_clock_in_clock         (_subsystem_cbus_auto_fixedClockNode_out_0_clock),
    .auto_clock_in_reset         (_subsystem_cbus_auto_fixedClockNode_out_0_reset),
    .auto_plic_int_out_1_0       (_plicDomainWrapper_auto_plic_int_out_1_0),
    .auto_plic_int_out_0_0       (_plicDomainWrapper_auto_plic_int_out_0_0),
    .auto_plic_in_a_ready        (_plicDomainWrapper_auto_plic_in_a_ready),
    .auto_plic_in_d_valid        (_plicDomainWrapper_auto_plic_in_d_valid),
    .auto_plic_in_d_bits_opcode  (_plicDomainWrapper_auto_plic_in_d_bits_opcode),
    .auto_plic_in_d_bits_size    (_plicDomainWrapper_auto_plic_in_d_bits_size),
    .auto_plic_in_d_bits_source  (_plicDomainWrapper_auto_plic_in_d_bits_source),
    .auto_plic_in_d_bits_data    (_plicDomainWrapper_auto_plic_in_d_bits_data)
  );
  CLINT clint (
    .clock                  (_subsystem_cbus_clock),
    .reset                  (_subsystem_cbus_reset),
    .auto_in_a_valid
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_valid),
    .auto_in_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_opcode),
    .auto_in_a_bits_size
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_size),
    .auto_in_a_bits_source
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_source),
    .auto_in_a_bits_address
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_address),
    .auto_in_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_mask),
    .auto_in_a_bits_data
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_a_bits_data),
    .auto_in_d_ready
      (_subsystem_cbus_auto_coupler_to_clint_fragmenter_out_d_ready),
    .io_rtcTick             (int_rtc_tick),
    .auto_int_out_0         (_clint_auto_int_out_0),
    .auto_int_out_1         (_clint_auto_int_out_1),
    .auto_in_a_ready        (_clint_auto_in_a_ready),
    .auto_in_d_valid        (_clint_auto_in_d_valid),
    .auto_in_d_bits_opcode  (_clint_auto_in_d_bits_opcode),
    .auto_in_d_bits_size    (_clint_auto_in_d_bits_size),
    .auto_in_d_bits_source  (_clint_auto_in_d_bits_source),
    .auto_in_d_bits_data    (_clint_auto_in_d_bits_data)
  );
  BundleBridgeNexus_15 tileHartIdNexusNode (
    .auto_out (_tileHartIdNexusNode_auto_out)
  );
  TLDebugModule tlDM (
    .auto_dmInner_dmInner_tl_in_a_valid
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_valid),
    .auto_dmInner_dmInner_tl_in_a_bits_opcode
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_opcode),
    .auto_dmInner_dmInner_tl_in_a_bits_size
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_size),
    .auto_dmInner_dmInner_tl_in_a_bits_source
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_source),
    .auto_dmInner_dmInner_tl_in_a_bits_address
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_address),
    .auto_dmInner_dmInner_tl_in_a_bits_mask
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_mask),
    .auto_dmInner_dmInner_tl_in_a_bits_data
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_a_bits_data),
    .auto_dmInner_dmInner_tl_in_d_ready
      (_subsystem_cbus_auto_coupler_to_debug_fragmenter_out_d_ready),
    .io_debug_clock                            (debug_clock),
    .io_debug_reset                            (debug_reset),
    .io_ctrl_dmactiveAck                       (debug_dmactiveAck),
    .io_dmi_dmi_req_valid                      (debug_clockeddmi_dmi_req_valid),
    .io_dmi_dmi_req_bits_addr                  (debug_clockeddmi_dmi_req_bits_addr),
    .io_dmi_dmi_req_bits_data                  (debug_clockeddmi_dmi_req_bits_data),
    .io_dmi_dmi_req_bits_op                    (debug_clockeddmi_dmi_req_bits_op),
    .io_dmi_dmi_resp_ready                     (debug_clockeddmi_dmi_resp_ready),
    .io_dmi_dmiClock                           (debug_clockeddmi_dmiClock),
    .io_dmi_dmiReset                           (debug_clockeddmi_dmiReset),
    .io_hartIsInReset_0                        (resetctrl_hartIsInReset_0),
    .auto_dmInner_dmInner_tl_in_a_ready        (_tlDM_auto_dmInner_dmInner_tl_in_a_ready),
    .auto_dmInner_dmInner_tl_in_d_valid        (_tlDM_auto_dmInner_dmInner_tl_in_d_valid),
    .auto_dmInner_dmInner_tl_in_d_bits_opcode
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_opcode),
    .auto_dmInner_dmInner_tl_in_d_bits_size
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_size),
    .auto_dmInner_dmInner_tl_in_d_bits_source
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_source),
    .auto_dmInner_dmInner_tl_in_d_bits_data
      (_tlDM_auto_dmInner_dmInner_tl_in_d_bits_data),
    .auto_dmOuter_intsource_out_sync_0         (_tlDM_auto_dmOuter_intsource_out_sync_0),
    .io_ctrl_ndreset                           (debug_ndreset),
    .io_ctrl_dmactive                          (debug_dmactive),
    .io_dmi_dmi_req_ready                      (debug_clockeddmi_dmi_req_ready),
    .io_dmi_dmi_resp_valid                     (debug_clockeddmi_dmi_resp_valid),
    .io_dmi_dmi_resp_bits_data                 (debug_clockeddmi_dmi_resp_bits_data),
    .io_dmi_dmi_resp_bits_resp                 (debug_clockeddmi_dmi_resp_bits_resp)
  );
  IntSyncCrossingSource_5 intsource (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (_clint_auto_int_out_0),
    .auto_in_1       (_clint_auto_int_out_1),
    .auto_out_sync_0 (_intsource_auto_out_sync_0),
    .auto_out_sync_1 (_intsource_auto_out_sync_1)
  );
  IntSyncCrossingSource_1 intsource_1 (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (_plicDomainWrapper_auto_plic_int_out_0_0),
    .auto_out_sync_0 (_intsource_1_auto_out_sync_0)
  );
  IntSyncCrossingSource_1 intsource_2 (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (_plicDomainWrapper_auto_plic_int_out_1_0),
    .auto_out_sync_0 (_intsource_2_auto_out_sync_0)
  );
  IntSyncSyncCrossingSink_1 intsink_1 (
    .auto_in_sync_0 (_tile_prci_domain_auto_int_out_clock_xing_out_0_sync_0),
    .auto_out_0     (_intsink_1_auto_out_0)
  );
  IntSyncSyncCrossingSink_1 intsink_2 (
    .auto_in_sync_0 (_tile_prci_domain_auto_int_out_clock_xing_out_1_sync_0),
    .auto_out_0     (_intsink_2_auto_out_0)
  );
  IntSyncSyncCrossingSink_1 intsink_3 (
    .auto_in_sync_0 (_tile_prci_domain_auto_int_out_clock_xing_out_2_sync_0),
    .auto_out_0     (_intsink_3_auto_out_0)
  );
  ClockSinkDomain_1 ethClockDomainWrapper (
    .auto_eth_0_control_xing_in_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_valid),
    .auto_eth_0_control_xing_in_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_opcode),
    .auto_eth_0_control_xing_in_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_size),
    .auto_eth_0_control_xing_in_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_source),
    .auto_eth_0_control_xing_in_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_address),
    .auto_eth_0_control_xing_in_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_mask),
    .auto_eth_0_control_xing_in_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_a_bits_data),
    .auto_eth_0_control_xing_in_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_eth_0_control_xing_out_d_ready),
    .auto_eth_0_dma_out_a_ready
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_a_ready),
    .auto_eth_0_dma_out_d_valid
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_valid),
    .auto_eth_0_dma_out_d_bits_opcode
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_opcode),
    .auto_eth_0_dma_out_d_bits_size
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_size),
    .auto_eth_0_dma_out_d_bits_source
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_source),
    .auto_eth_0_dma_out_d_bits_data
      (_subsystem_fbus_auto_coupler_from_port_named_eth_0_widget_in_d_bits_data),
    .auto_eth_0_eth_clock_in_clock             (_ethClk_auto_clock_out_clock),
    .auto_eth_0_io_out_rx_clk                  (eth_0_rx_clk),
    .auto_eth_0_io_out_rxd                     (eth_0_rxd),
    .auto_eth_0_io_out_rx_dv                   (eth_0_rx_dv),
    .auto_eth_0_io_out_status                  (eth_0_status),
    .auto_eth_0_io_out_phy_ad                  (eth_0_phy_ad),
    .auto_eth_0_io_out_phy_id                  (eth_0_phy_id),
    .auto_clock_in_clock
      (_subsystem_pbus_auto_fixedClockNode_out_0_clock),
    .auto_clock_in_reset
      (_subsystem_pbus_auto_fixedClockNode_out_0_reset),
    .auto_eth_0_int_xing_out_sync_0
      (_ethClockDomainWrapper_auto_eth_0_int_xing_out_sync_0),
    .auto_eth_0_control_xing_in_a_ready
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_a_ready),
    .auto_eth_0_control_xing_in_d_valid
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_valid),
    .auto_eth_0_control_xing_in_d_bits_opcode
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_opcode),
    .auto_eth_0_control_xing_in_d_bits_param
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_param),
    .auto_eth_0_control_xing_in_d_bits_size
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_size),
    .auto_eth_0_control_xing_in_d_bits_source
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_source),
    .auto_eth_0_control_xing_in_d_bits_sink
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_sink),
    .auto_eth_0_control_xing_in_d_bits_denied
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_denied),
    .auto_eth_0_control_xing_in_d_bits_data
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_data),
    .auto_eth_0_control_xing_in_d_bits_corrupt
      (_ethClockDomainWrapper_auto_eth_0_control_xing_in_d_bits_corrupt),
    .auto_eth_0_dma_out_a_valid
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_valid),
    .auto_eth_0_dma_out_a_bits_opcode
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_opcode),
    .auto_eth_0_dma_out_a_bits_size
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_size),
    .auto_eth_0_dma_out_a_bits_source
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_source),
    .auto_eth_0_dma_out_a_bits_address
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_address),
    .auto_eth_0_dma_out_a_bits_data
      (_ethClockDomainWrapper_auto_eth_0_dma_out_a_bits_data),
    .auto_eth_0_dma_out_d_ready
      (_ethClockDomainWrapper_auto_eth_0_dma_out_d_ready),
    .auto_eth_0_io_out_tx_clk                  (eth_0_tx_clk),
    .auto_eth_0_io_out_txd                     (eth_0_txd),
    .auto_eth_0_io_out_tx_en                   (eth_0_tx_en)
  );
  IntSyncSyncCrossingSink_1 intsink_4 (
    .auto_in_sync_0 (_ethClockDomainWrapper_auto_eth_0_int_xing_out_sync_0),
    .auto_out_0     (_intsink_4_auto_out_0)
  );
  LiteGEMFixedCLK ethClk (
    .auto_io_out_clock    (eth_clk_0_clock),
    .auto_clock_out_clock (_ethClk_auto_clock_out_clock)
  );
  ClockSinkDomain_2 ttcClockDomainWrapper (
    .auto_ttc_0_control_xing_in_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_valid),
    .auto_ttc_0_control_xing_in_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_opcode),
    .auto_ttc_0_control_xing_in_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_size),
    .auto_ttc_0_control_xing_in_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_source),
    .auto_ttc_0_control_xing_in_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_address),
    .auto_ttc_0_control_xing_in_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_mask),
    .auto_ttc_0_control_xing_in_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_a_bits_data),
    .auto_ttc_0_control_xing_in_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_ttc_0_control_xing_out_d_ready),
    .auto_ttc_0_io_out_ext_clock_0             (ttc_0_ext_clock_0),
    .auto_ttc_0_io_out_ext_clock_1             (ttc_0_ext_clock_1),
    .auto_ttc_0_io_out_ext_clock_2             (ttc_0_ext_clock_2),
    .auto_clock_in_clock
      (_subsystem_pbus_auto_fixedClockNode_out_1_clock),
    .auto_clock_in_reset
      (_subsystem_pbus_auto_fixedClockNode_out_1_reset),
    .auto_ttc_0_int_xing_out_sync_0
      (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_0),
    .auto_ttc_0_int_xing_out_sync_1
      (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_1),
    .auto_ttc_0_int_xing_out_sync_2
      (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_2),
    .auto_ttc_0_control_xing_in_a_ready
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_a_ready),
    .auto_ttc_0_control_xing_in_d_valid
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_valid),
    .auto_ttc_0_control_xing_in_d_bits_opcode
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_opcode),
    .auto_ttc_0_control_xing_in_d_bits_param
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_param),
    .auto_ttc_0_control_xing_in_d_bits_size
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_size),
    .auto_ttc_0_control_xing_in_d_bits_source
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_source),
    .auto_ttc_0_control_xing_in_d_bits_sink
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_sink),
    .auto_ttc_0_control_xing_in_d_bits_denied
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_denied),
    .auto_ttc_0_control_xing_in_d_bits_data
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_data),
    .auto_ttc_0_control_xing_in_d_bits_corrupt
      (_ttcClockDomainWrapper_auto_ttc_0_control_xing_in_d_bits_corrupt),
    .auto_ttc_0_io_out_waveform                (ttc_0_waveform),
    .auto_ttc_0_io_out_n_waveform_oe           (ttc_0_n_waveform_oe)
  );
  IntSyncSyncCrossingSink_8 intsink_5 (
    .auto_in_sync_0 (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_0),
    .auto_in_sync_1 (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_1),
    .auto_in_sync_2 (_ttcClockDomainWrapper_auto_ttc_0_int_xing_out_sync_2),
    .auto_out_0     (_intsink_5_auto_out_0),
    .auto_out_1     (_intsink_5_auto_out_1),
    .auto_out_2     (_intsink_5_auto_out_2)
  );
  ClockSinkDomain_3 qspiClockDomainWrapper (
    .auto_qspi_0_mem_xing_in_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_valid),
    .auto_qspi_0_mem_xing_in_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_size),
    .auto_qspi_0_mem_xing_in_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_source),
    .auto_qspi_0_mem_xing_in_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_a_bits_address),
    .auto_qspi_0_mem_xing_in_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_mem_xing_out_d_ready),
    .auto_qspi_0_control_xing_in_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_valid),
    .auto_qspi_0_control_xing_in_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_opcode),
    .auto_qspi_0_control_xing_in_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_size),
    .auto_qspi_0_control_xing_in_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_source),
    .auto_qspi_0_control_xing_in_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_address),
    .auto_qspi_0_control_xing_in_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_mask),
    .auto_qspi_0_control_xing_in_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_a_bits_data),
    .auto_qspi_0_control_xing_in_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_qspi_0_control_xing_out_d_ready),
    .auto_qspi_0_io_out_dq_0_i                  (qspi_0_dq_0_i),
    .auto_qspi_0_io_out_dq_1_i                  (qspi_0_dq_1_i),
    .auto_qspi_0_io_out_dq_2_i                  (qspi_0_dq_2_i),
    .auto_qspi_0_io_out_dq_3_i                  (qspi_0_dq_3_i),
    .auto_clock_in_clock
      (_subsystem_pbus_auto_fixedClockNode_out_2_clock),
    .auto_clock_in_reset
      (_subsystem_pbus_auto_fixedClockNode_out_2_reset),
    .auto_qspi_0_int_xing_out_sync_0
      (_qspiClockDomainWrapper_auto_qspi_0_int_xing_out_sync_0),
    .auto_qspi_0_mem_xing_in_a_ready
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_a_ready),
    .auto_qspi_0_mem_xing_in_d_valid
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_valid),
    .auto_qspi_0_mem_xing_in_d_bits_size
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_size),
    .auto_qspi_0_mem_xing_in_d_bits_source
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_source),
    .auto_qspi_0_mem_xing_in_d_bits_data
      (_qspiClockDomainWrapper_auto_qspi_0_mem_xing_in_d_bits_data),
    .auto_qspi_0_control_xing_in_a_ready
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_a_ready),
    .auto_qspi_0_control_xing_in_d_valid
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_valid),
    .auto_qspi_0_control_xing_in_d_bits_opcode
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_opcode),
    .auto_qspi_0_control_xing_in_d_bits_size
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_size),
    .auto_qspi_0_control_xing_in_d_bits_source
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_source),
    .auto_qspi_0_control_xing_in_d_bits_data
      (_qspiClockDomainWrapper_auto_qspi_0_control_xing_in_d_bits_data),
    .auto_qspi_0_io_out_sck                     (qspi_0_sck),
    .auto_qspi_0_io_out_dq_0_o                  (qspi_0_dq_0_o),
    .auto_qspi_0_io_out_dq_0_ie                 (qspi_0_dq_0_ie),
    .auto_qspi_0_io_out_dq_0_oe                 (qspi_0_dq_0_oe),
    .auto_qspi_0_io_out_dq_1_o                  (qspi_0_dq_1_o),
    .auto_qspi_0_io_out_dq_1_ie                 (qspi_0_dq_1_ie),
    .auto_qspi_0_io_out_dq_1_oe                 (qspi_0_dq_1_oe),
    .auto_qspi_0_io_out_dq_2_o                  (qspi_0_dq_2_o),
    .auto_qspi_0_io_out_dq_2_ie                 (qspi_0_dq_2_ie),
    .auto_qspi_0_io_out_dq_2_oe                 (qspi_0_dq_2_oe),
    .auto_qspi_0_io_out_dq_3_o                  (qspi_0_dq_3_o),
    .auto_qspi_0_io_out_dq_3_ie                 (qspi_0_dq_3_ie),
    .auto_qspi_0_io_out_dq_3_oe                 (qspi_0_dq_3_oe),
    .auto_qspi_0_io_out_cs_0                    (qspi_0_cs_0)
  );
  IntSyncSyncCrossingSink_1 intsink_6 (
    .auto_in_sync_0 (_qspiClockDomainWrapper_auto_qspi_0_int_xing_out_sync_0),
    .auto_out_0     (_intsink_6_auto_out_0)
  );
  ClockSinkDomain_4 uartClockDomainWrapper (
    .auto_uart_0_control_xing_in_a_valid
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_valid),
    .auto_uart_0_control_xing_in_a_bits_opcode
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_opcode),
    .auto_uart_0_control_xing_in_a_bits_size
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_size),
    .auto_uart_0_control_xing_in_a_bits_source
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_source),
    .auto_uart_0_control_xing_in_a_bits_address
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_address),
    .auto_uart_0_control_xing_in_a_bits_mask
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_mask),
    .auto_uart_0_control_xing_in_a_bits_data
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_a_bits_data),
    .auto_uart_0_control_xing_in_d_ready
      (_subsystem_pbus_auto_coupler_to_device_named_uart_0_control_xing_out_d_ready),
    .auto_uart_0_io_out_rxd                     (uart_0_rxd),
    .auto_clock_in_clock
      (_subsystem_pbus_auto_fixedClockNode_out_3_clock),
    .auto_clock_in_reset
      (_subsystem_pbus_auto_fixedClockNode_out_3_reset),
    .auto_uart_0_int_xing_out_sync_0
      (_uartClockDomainWrapper_auto_uart_0_int_xing_out_sync_0),
    .auto_uart_0_control_xing_in_a_ready
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_a_ready),
    .auto_uart_0_control_xing_in_d_valid
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_valid),
    .auto_uart_0_control_xing_in_d_bits_opcode
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_opcode),
    .auto_uart_0_control_xing_in_d_bits_size
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_size),
    .auto_uart_0_control_xing_in_d_bits_source
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_source),
    .auto_uart_0_control_xing_in_d_bits_data
      (_uartClockDomainWrapper_auto_uart_0_control_xing_in_d_bits_data),
    .auto_uart_0_io_out_txd                     (uart_0_txd)
  );
  IntSyncSyncCrossingSink_1 intsink_7 (
    .auto_in_sync_0 (_uartClockDomainWrapper_auto_uart_0_int_xing_out_sync_0),
    .auto_out_0     (_intsink_7_auto_out_0)
  );
  IntSyncCrossingSource_5 intsource_3 (
    .clock           (clock),
    .reset           (reset),
    .auto_in_0       (interrupts[0]),
    .auto_in_1       (interrupts[1]),
    .auto_out_sync_0 (_intsource_3_auto_out_sync_0),
    .auto_out_sync_1 (_intsource_3_auto_out_sync_1)
  );
  ClockSinkDomain_5 bootROMDomainWrapper (
    .auto_bootrom_in_a_valid
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_valid),
    .auto_bootrom_in_a_bits_size
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_size),
    .auto_bootrom_in_a_bits_source
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_source),
    .auto_bootrom_in_a_bits_address
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_a_bits_address),
    .auto_bootrom_in_d_ready
      (_subsystem_cbus_auto_coupler_to_bootrom_fragmenter_out_d_ready),
    .auto_bootrom_in_a_ready        (_bootROMDomainWrapper_auto_bootrom_in_a_ready),
    .auto_bootrom_in_d_valid        (_bootROMDomainWrapper_auto_bootrom_in_d_valid),
    .auto_bootrom_in_d_bits_size    (_bootROMDomainWrapper_auto_bootrom_in_d_bits_size),
    .auto_bootrom_in_d_bits_source  (_bootROMDomainWrapper_auto_bootrom_in_d_bits_source),
    .auto_bootrom_in_d_bits_data    (_bootROMDomainWrapper_auto_bootrom_in_d_bits_data)
  );
  assign eth_0_tx_er = 1'h0;
endmodule


// ----- 8< ----- FILE "./plusarg_reader.v" ----- 8< -----

// See LICENSE.SiFive for license details.

//VCS coverage exclude_file

// No default parameter values are intended, nor does IEEE 1800-2012 require them (clause A.2.4 param_assignment),
// but Incisive demands them. These default values should never be used.
module plusarg_reader #(
   parameter FORMAT="borked=%d",
   parameter WIDTH=1,
   parameter [WIDTH-1:0] DEFAULT=0
) (
   output [WIDTH-1:0] out
);

`ifdef SYNTHESIS
assign out = DEFAULT;
`else
reg [WIDTH-1:0] myplus;
assign out = myplus;

initial begin
   if (!$value$plusargs(FORMAT, myplus)) myplus = DEFAULT;
end
`endif

endmodule

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

